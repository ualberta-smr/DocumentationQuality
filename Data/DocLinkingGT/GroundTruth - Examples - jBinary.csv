Code,Signature,Linked,Source File,Page
"var b1 = new jBinary([0x05, 0x03, 0x7F, 0x1E]); // with default typeset
var b2 = new jBinary(new jDataView(data, 5, 10, true), {
  MetaName: ['string', 30]
}); // with custom jDataView instance on data and typeset with custom type MetaName.
var b3 = new jBinary(1024, typeSet); // jBinary on empty pre-allocated 1KB buffer with typeSet defined in variable",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Constructor
"var firstInt = binary.read('uint32'); // uint32 value at offset 0
var secondInt = binary.read('uint32'); // following uint32 value at offset 4
var byteAtOffset100 = binary.read('uint8', 100); // uint8 value at custom position
var thirdInt = binary.read('uint32'); // third uint32 value at offset 8 (since read operation with custom position didn't move internal pointer)",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
"binary.write('uint32', 1); // writing uint32 value of 1 at offset 0
binary.write('uint32', 2); // writing uint32 value of 2 at offset 4
binary.write('uint8', 0xff, 100); // writing uint8 value of 255 at offset 100
binary.write('uint32', 3); // writing uint32 value of 3 at offset 8",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
var currentPos = binary.tell();,,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
"binary.seek(100); // just went to offset 100
var intAt200 = binary.seek(200, function () { return this.binary.read('int32') }); // go to offset 200, get int32 value there and return back to offset 100",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
"binary.skip(1); // just skip one byte we are not interested in
var intAfter8 = binary.skip(8, function () { return this.binary.read('int32') }); // go 8 bytes forward, get int32 value there and return back",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
"var pointerSlice = binary.slice(10, 20); // now you can manipulate on this jBinary instance and all the changes will be mirrored to original binary's data, but with new bound check rules
var copySlice = binary.slice(10, 20, true); // now you can manipulate on this jBinary instance as on absolutely new one and any data changes will stay isolated from original binary",,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
var binary = someExternalBinary.as(TAR); // casting external jBinary instance with no or with irrelevant typeset to TAR typeSet object (any operations including both data and pointer manipulations will affect both instances).,,,,https://github.com/jDataView/jBinary/wiki/jBinary-Methods
"// Example:
var jbType = binary.getType(['string', 30]);",,,,https://github.com/jDataView/jBinary/wiki/Internal-jBinary-Methods
"// Example:
var currentContext = binary.getContext(); // current object that value belongs to
var parentContext = binary.getContext(1); // one level up
var contextWithID = binary.getContext('id'); // first context with ""id"" property (bubbling up)
var contextWithID1 = binary.getContext(function (context) { return context.id === 1 }); // first context that matches custom condition",,,,https://github.com/jDataView/jBinary/wiki/Internal-jBinary-Methods
"var fs = require('fs');
var jBinary = require('jbinary');
var typeSet = {
  magic: ['array', 'uint8', 4]
};

jBinary.load('file.bin', typeSet, function (err, binary) {
  console.log(binary.read('magic'));
});",,,,https://github.com/jDataView/jBinary/wiki/Usage-in-Node.js
"<script src=""//jdataview.github.io/dist/jdataview.js"">script>
<script src=""//jdataview.github.io/dist/jbinary.js"">script>

<script>
var typeSet = {
  magic: ['array', 'uint8', 4]
};

jBinary.load('file.bin', typeSet, function (err, binary) {
  console.log(binary.read('magic'));
});
script>",,,,https://github.com/jDataView/jBinary/wiki/Usage-in-Browser
"// somewhere in config:
require.config({
  paths: {
    jdataview: '//jdataview.github.io/dist/jdataview.js',
    jbinary: '//jdataview.github.io/dist/jbinary.js',
  }
});

// ...

// in code:
require(['jbinary'], function (jBinary) {
  var typeSet = {
    magic: ['array', 'uint8', 4]
  };

  jBinary.load('file.bin', typeSet, function (err, binary) {
    console.log(binary.read('magic'));
  });
});",,,,https://github.com/jDataView/jBinary/wiki/Usage-with-AMD
"fileInput.addEventListener('change', function () {
  jBinary.loadData(fileInput.files[0]).then(function (data) {
    if (error) {
      return console.log(error);
    }

    // here you get data from  that you can use in jDataView/jBinary constructors
  });
});

jBinary.load('sample.tar').then(function (binary) {
  // here TAR format is auto-detected and used by `binary` (in the case you use it in combination with jBinary.Repo)
  var tar = binary.readAll;

  // ... more code ...

  return binary.saveAs('new.tar'); // opens browser's ""Save as"" dialog or saves to disk if called from Node.js
}).then(function () {
  console.log('Processed and saved successfully!');
}, function (err) {
  console.error(err);
});",,,,https://github.com/jDataView/jBinary/wiki/Loading-and-saving-data
"{
  'jBinary.all': 'File',
  'jBinary.littleEndian': true,

  // declaring custom type by wrapping structure
  DynamicArray: jBinary.Template({
    setParams: function (itemType) {
      this.baseType = {
        // using built-in type
        length: 'uint16',
        // using complex built-in type with simple argument and argument from another field
        values: ['array', itemType, 'length']
      };
    },
    read: function () {
      return this.baseRead().values;
    },
    write: function (values) {
      this.baseWrite({
        length: values.length,
        values: values
      });
    }
  }),

  // declaring simple structure
  FileItem: {
    // using built-in type with argument
    name: ['string0', 256],
    // using another custom type with no arguments
    content: 'DynamicArray'
  },

  // aliasing FileItem[] as type of entire File
  File: ['array', 'FileItem']
}",,,,https://github.com/jDataView/jBinary/wiki/Typesets
"binary.read({
  count: 'uint32',
  bytes: ['array', 'uint8', 'count']
});",,,,https://github.com/jDataView/jBinary/wiki/Standard-types
"binary.read({
  recordSize: 'uint32',
  data: ['array', 'uint8', function (context) {
    return context.recordSize - 4; // total size except `size` field itself
  }]
});",,,,https://github.com/jDataView/jBinary/wiki/Standard-types
"var binary = new jBinary([0x00, 0x03, 0x04, 0x05, 0x06, 0x07], {
  DynamicArray: jBinary.Type({
    params: ['itemType'],
    resolve: function (getType) {
      this.itemType = getType(this.itemType);
    },
    read: function () {
      var length = this.binary.read('uint16');
      return this.binary.read(['array', this.itemType, length]);
    },
    write: function (values) {
      this.binary.write('uint16', values.length);
      this.binary.write(['array', this.itemType], values);
    }
  }),

  byteArray: ['DynamicArray', 'uint8']
});

var byteArray = binary.read('byteArray'); // [0x04, 0x05, 0x06]",,,,https://github.com/jDataView/jBinary/wiki/jBinary.Type
"var binary = new jBinary([0x00, 0x03, 0x04, 0x05, 0x06, 0x07], {
  DynamicArray: jBinary.Template({
    setParams: function (itemType) {
      this.baseType = {
        length: 'uint16',
        values: ['array', itemType, 'length']
      };
    },
    read: function () {
      return this.baseRead().values;
    },
    write: function (values) {
      this.baseWrite({
        length: values.length,
        values: values
      });
    }
  }),

  byteArray: ['DynamicArray', 'uint8']
});

var byteArray = binary.read('byteArray'); // [0x04, 0x05, 0x06]",,,,https://github.com/jDataView/jBinary/wiki/jBinary.Template
"jBinary.Repo('bmp', function (BMP) {
  var binary = new jBinary(data, BMP);
  // ...do whatever you want with `binary` or simply...
  var data = binary.readAll();
  // ...get entire file as parsed object in `data`
});",,,,https://github.com/jDataView/jBinary/wiki/The-Repo
"jBinary.Repo(['tar', 'gzip'], function (TAR, GZIP) {
  // your code goes here ;)
});",,,,https://github.com/jDataView/jBinary/wiki/The-Repo
"require(['jbinary.repo!tar', 'jbinary.repo!gzip'], function (TAR, GZIP) {
  // you can put just the same code as in sample above
});",,,,https://github.com/jDataView/jBinary/wiki/The-Repo