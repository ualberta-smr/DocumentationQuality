Examples,Henry's paragraphs,Sarah's paragraphs,Conflicts?,Resolved paragraphs,Program,Has paragraphs,Updated program,Paragraph count,Program count,Program correct,Updated program count,Updated program correct
"function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}",The simplest way to define a component is to write a JavaScript function:,The simplest way to define a component is to write a JavaScript function:,0,The simplest way to define a component is to write a JavaScript function:,,FALSE,,1,0,0,0,0
"class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}",You can also use an ES6 class to define a component:,You can also use an ES6 class to define a component:,0,You can also use an ES6 class to define a component:,,,You can also use an ES6 class to define a component:,1,0,0,1,1
const element = <div />;,"Previously, we only encountered React elements that represent DOM tags:","Previously, we only encountered React elements that represent DOM tags:",0,"Previously, we only encountered React elements that represent DOM tags:",,,,1,0,0,0,0
"const element = <Welcome name=""Sara"" />;","However, elements can also represent user-defined components:","However, elements can also represent user-defined components:",0,"However, elements can also represent user-defined components:","When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,,1,1,0,0,0
"function Welcome(props) {  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name=""Sara"" />;ReactDOM.render(
  element,
  document.getElementById('root')
);","When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","For example, this code renders “Hello, Sara” on the page:",1,"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,,"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object â€œpropsâ€.",1,0,0,1,1
"function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name=""Sara"" />      <Welcome name=""Cahal"" />      <Welcome name=""Edite"" />    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);","Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","For example, we can create an App component that renders Welcome many times:",1,"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.",,,,1,0,0,0,0
"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <img className=""Avatar""
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className=""UserInfo-name"">
          {props.author.name}
        </div>
      </div>
      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}",Don’t be afraid to split components into smaller components.,"This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.",1,Don’t be afraid to split components into smaller components.,,,Donâ€™t be afraid to split components into smaller components.,1,0,0,1,1
"function Avatar(props) {
  return (
    <img className=""Avatar""      src={props.user.avatarUrl}      alt={props.user.name}    />  );
}","First, we will extract Avatar:","First, we will extract Avatar:",0,"First, we will extract Avatar:","This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.",,Donâ€™t be afraid to split components into smaller components.,1,1,0,1,0
"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <Avatar user={props.author} />        <div className=""UserInfo-name"">
          {props.author.name}
        </div>
      </div>
      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}",We can now simplify Comment a tiny bit:,We can now simplify Comment a tiny bit:,0,We can now simplify Comment a tiny bit:,,,Donâ€™t be afraid to split components into smaller components.,1,0,0,1,0
"function UserInfo(props) {
  return (
    <div className=""UserInfo"">      <Avatar user={props.user} />      <div className=""UserInfo-name"">        {props.user.name}      </div>    </div>  );
}","Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:",0,"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:",,,Donâ€™t be afraid to split components into smaller components.,1,0,0,1,0
"function Comment(props) {
  return (
    <div className=""Comment"">
      <UserInfo user={props.author} />      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}",This lets us simplify Comment even further:,This lets us simplify Comment even further:,0,This lets us simplify Comment even further:,,,Donâ€™t be afraid to split components into smaller components.,1,0,0,1,0
"function sum(a, b) {
  return a + b;
}","Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.",1,"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:",,,,1,0,0,0,0
"function withdraw(account, amount) {
  account.total -= amount;
}","In contrast, this function is impure because it changes its own input:","In contrast, this function is impure because it changes its own input:",0,"In contrast, this function is impure because it changes its own input:","In contrast, this function is impure because it changes its own input:",,,1,1,1,0,0
,,,,,,,,,,,,
,,,,,Program,,Updated program,13,3,1,7,3
,,,,Precision,33.33%,,42.86%,,,,,
,,,,Recall,7.69%,,23.08%,,,,,