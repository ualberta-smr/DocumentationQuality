Paragraph,Tasks (Old),Henry's mechanical tasks,Henry's library tasks,Henry's library tasks (updated),Sarah's tasks,Sarah's mechanical tasks,Sarah's library tasks,Sarah's library tasks (updated),Conflict,Resolved mechanical tasks,Resolved library tasks,Program,Program (with domain specific verb list),Program (domain specific + filter),,,,,
"Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.",,,,,"Split UI into indpendent, reusable pieces","Split the UI into independent, reusable pieces
Think about each piece in isolation","Split the UI into independent, reusable pieces","Split the UI into independent, reusable pieces
",,"Split the UI into independent, reusable pieces
Think about each piece in isolation","Split the UI into independent, reusable pieces","split UI into independent reusable pieces
provide introduction to idea
find detailed component API reference","split UI into independent reusable pieces
provide introduction to idea","split UI into independent reusable pieces
provide introduction to idea",1,3,1,2,1
"Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.",,,,,,"Accept arbitrary input
Return React elements",,,,"Accept arbitrary input
Return React elements",,,,,0,0,0,0,0
The simplest way to define a component is to write a JavaScript function:,How to define a React component,Define component,Define component,,,Write a JavaScript function,,,1,"Define component
Write a Javascript function",,write JavaScript function,write JavaScript function,,0,1,0,0,0
This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions.,,,,,,Accept a single props,,,,Accept a single props,,return React element,return React element,,0,1,0,0,0
You can also use an ES6 class to define a component:,How to use ES6 for React components,"Use ES6 class
Define component","Use ES6
Define component",,Use ES6 class to define a component,Use ES6 class to define a component,Use ES6 class to define a component,Use ES6 class to define a component,1,"Use ES6 class
Define component",Define component,define component,define component,define component,1,1,1,1,1
The above two components are equivalent from React’s point of view.,,,,,,,,,,,,,,,0,0,0,0,0
Function and Class components both have some additional features that we will discuss in the next sections.,,,,,,,,,,,,,,,0,0,0,0,0
"Previously, we only encountered React elements that represent DOM tags:",,,,,,,,,,,,,,,0,0,0,0,0
"However, elements can also represent user-defined components:",Define custom user components,Represent user-defined components,Represent user-defined components,,,Represent user-defined components,Represent user-defined components,Represent user-defined components,,,,,,,0,0,0,0,0
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,Pass JSX attributes and children to component,,,,Pass JSX attributes and children to this component,,Pass JSX attributes and children to this component,0,,,"pass children to component
pass JSX attributes to component
call object props","pass children to component
pass JSX attributes to component","pass children to component
pass JSX attributes to component",0,3,0,2,0
"For example, this code renders “Hello, Sara” on the page:",,,,,,,,,,,,,,,0,0,0,0,0
Try it on CodePen,,,,,,,,,,,,,,,0,0,0,0,0
Let’s recap what happens in this example:,,,,,,,,,,,,,,,0,0,0,0,0
Note: Always start component names with a capital letter.,,,,,,Start component names with a captial letter,,,,Start component names with a captial letter,,,,,0,0,0,0,0
"React treats components starting with lowercase letters as DOM tags. For example,",,Treat components starting with lowercase letters as DOM tags,,,,Treat components starting with lowercase letters as DOM tags,,,,,,,,,0,0,0,0,0
"represents an HTML div tag, but",,,,,,Represent an HTML div tag,,Represent an HTML div tag,1,Represent an HTML div tag,,,,,0,0,0,0,0
represents a component and requires Welcome to be in scope.,,,,,,Represent a component,,Represent a component,1,Represent a component,,,,,0,0,0,0,0
"To learn more about the reasoning behind this convention, please read JSX In Depth.",,,,,,,,,,,,learn  about reasoning,,,0,1,0,0,0
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.",Nest components,Use same component abstraction ,Use same component abstraction ,,,Refer to other components,,,1,"Use same component abstraction 
Refer to other components",Refer to other components,use same component abstraction for level,use same component abstraction for level,,1,1,0,0,0
"For example, we can create an App component that renders Welcome many times:",,,,,,Create an App component that renders Welcome many times,Create an App component that renders Welcome many times,,1,"Create an App component
Renders Welcome many times",,create app component,,,0,1,0,0,0
Try it on CodePen,,,,,,,,,,,,,,,0,0,0,0,0
"Typically, new React apps have a single App component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like Button and gradually work your way to the top of the view hierarchy.",,Integrate React into existing app,Integrate React into existing app,Integrate React into existing app,,"Start bottom-up with a small component
Work your way to the top of the hierarchy",,,1,"Start bottom-up with a small component
Work your way to the top of the hierarchy
Integrate React into existing app",Integrate React into existing app,integrate React into existing app,integrate React into existing app,integrate React into existing app,1,1,1,1,1
Don’t be afraid to split components into smaller components.,Split components into smaller components,Split components,,,,Split components into smaller components,,Split components into smaller components,1,Split components into smaller components,Split components into smaller components,split components into smaller components,split components into smaller components,split components into smaller components,1,1,1,1,1
"For example, consider this Comment component:",,,,,,,,,,,,,,,0,0,0,0,0
Try it on CodePen,,,,,,,,,,,,,,,0,0,0,0,0
"It accepts author (an object), text (a string), and date (a date) as props, and describes a comment on a social media website.",,,,,"Accept object as props
Accept string as props
Accept date as props",,,,,,,describe comment on social media website,,,0,1,0,0,0
"This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.",,Extract a few components,,,,Extract a few components,,,,,,"reuse individual parts
change  because_of nesting",,,0,2,0,0,0
"First, we will extract Avatar:",,,,,,,,,,,,,,,0,0,0,0,0
The Avatar doesn’t need to know that it is being rendered inside a Comment. This is why we have given its prop a more generic name: user rather than author.,,,,,,,,,,,,render  inside comment,render  inside comment,,0,1,0,0,0
We recommend naming props from the component’s own point of view rather than the context in which it is being used.,,,,,,,,,,,,use context,use context,,0,1,0,0,0
We can now simplify Comment a tiny bit:,,Simplify comment,,,,Simplify Comment,,,,,,,,,0,0,0,0,0
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:",,,,,,,,,,,,render UserInfo component to name,render UserInfo component to name,,0,1,0,0,0
This lets us simplify Comment even further:,,Simplify comment,,,,Simplify Comment,,,,,,,,,0,0,0,0,0
Try it on CodePen,,,,,,,,,,,,,,,0,0,0,0,0
"Extracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be extracted to a separate component.",,Extract components,,,,Extract components,,,,,,use part of UI,use part of UI,,0,1,0,0,0
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:",,Declare component ,,,Declare component as function or class,Declare a component as a function or a class,Declare a component as a function or a class,Declare a component as a function or a class,1,Declare a component as a function or a class,Declare a component as a function or a class,,,,1,0,0,0,0
"Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.",Create pure component,Return same result for same inputs,,,,,,,1,Return same result for same inputs,,"call such functions
change inputs
return same result for same inputs",return same result for same inputs,,0,3,0,0,0
"In contrast, this function is impure because it changes its own input:",,,,,,,,,,,,change own input,,,0,1,0,0,0
React is pretty flexible but it has a single strict rule:,,,,,,,,,,,,,,,0,0,0,0,0
All React components must act like pure functions with respect to their props.,,,,,,,,,,,,,,,0,0,0,0,0
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,,,,,,,,,,,"introduce new concept in next section
introduce new concept of state
change output over time
change output to network responses
change output to user actions
change output without violating",,,0,6,0,0,0
,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,Library,,domain specific + filter,6,31,4,7,4
,,,,,,,,,,,,12.90%,,57.14%,,,,,
,,,,,,,,,,,,66.67%,,66.67%,,,,,