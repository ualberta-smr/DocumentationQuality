library_name,paragraph,task,has_example,example_page
orjson,"orjson is a fast, correct JSON library for Python. It
benchmarks as the fastest Python
library for JSON and is more correct than the standard json library or other
third-party libraries. It serializes
dataclass,
datetime,
numpy, and
UUID instances natively.",serialize dataclass,False,
orjson,"orjson is a fast, correct JSON library for Python. It
benchmarks as the fastest Python
library for JSON and is more correct than the standard json library or other
third-party libraries. It serializes
dataclass,
datetime,
numpy, and
UUID instances natively.",serialize datetime,False,
orjson,"orjson is a fast, correct JSON library for Python. It
benchmarks as the fastest Python
library for JSON and is more correct than the standard json library or other
third-party libraries. It serializes
dataclass,
datetime,
numpy, and
UUID instances natively.",serialize numpy,False,
orjson,"orjson is a fast, correct JSON library for Python. It
benchmarks as the fastest Python
library for JSON and is more correct than the standard json library or other
third-party libraries. It serializes
dataclass,
datetime,
numpy, and
UUID instances natively.",serialize UUID instances,False,
orjson,"orjson supports CPython 3.6, 3.7, 3.8, and 3.9. It distributes x86_64/amd64
and aarch64/armv8 wheels for Linux. It distributes x86_64/amd64 wheels for
macOS and Windows. orjson does not support PyPy. Releases follow semantic
versioning and serializing a new object type without an opt-in flag is
considered a breaking change.",support cpython,False,
orjson,To install a wheel from PyPI:,install wheel from pypi,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"This is an example of serializing, with options specified, and deserializing:",serialize  with options,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"This is an example of serializing, with options specified, and deserializing:",deserialize  with options,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",serialize more types than version,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",serialize subclasses of str,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",serialize dataclasses.dataclass instances,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",specify option = orjson.OPT_PASSTHROUGH_DATACLASS,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",serialize uuid.UUID instances,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",remove implementations in default function,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",remove implementations in options,False,
orjson,"orjson version 3 serializes more types than version 2. Subclasses of str,
int, dict, and list are now serialized. This is faster and more similar
to the standard library. It can be disabled with
orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances
are now serialized by default and cannot be customized in a
default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is
specified. uuid.UUID instances are serialized by default.
For any type that is now serialized,
implementations in a default function and options enabling them can be
removed but do not need to be. There was no change in deserialization.",remove implementations for type,False,
orjson,"To migrate from the standard library, the largest difference is that
orjson.dumps returns bytes and json.dumps returns a str. Users with
dict objects using non-str keys should specify
option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by
option=orjson.OPT_SORT_KEYS. indent is replaced by
option=orjson.OPT_INDENT_2 and other levels of indentation are not
supported.",use non,False,
orjson,"To migrate from the standard library, the largest difference is that
orjson.dumps returns bytes and json.dumps returns a str. Users with
dict objects using non-str keys should specify
option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by
option=orjson.OPT_SORT_KEYS. indent is replaced by
option=orjson.OPT_INDENT_2 and other levels of indentation are not
supported.",replace sort_keys,False,
orjson,"To migrate from the standard library, the largest difference is that
orjson.dumps returns bytes and json.dumps returns a str. Users with
dict objects using non-str keys should specify
option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by
option=orjson.OPT_SORT_KEYS. indent is replaced by
option=orjson.OPT_INDENT_2 and other levels of indentation are not
supported.",replace indent,False,
orjson,dumps() serializes Python objects to JSON.,serialize Python objects to JSON,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize none,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize str,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize dict,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize list,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize tuple,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize int,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize float,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize bool,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize dataclasses.dataclass,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize typing.TypedDict,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize datetime.datetime,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize datetime.date,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize datetime.time,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize uuid.UUID,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize numpy.ndarray,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",support arbitrary types through default,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize subclasses of str,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",serialize namedtuple objects as arrays,False,
orjson,"It natively serializes
str, dict, list, tuple, int, float, bool,
dataclasses.dataclass, typing.TypedDict, datetime.datetime,
datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and
None instances. It supports arbitrary types through default. It
serializes subclasses of str, int, dict, list,
dataclasses.dataclass, and enum.Enum. It does not serialize subclasses
of tuple to avoid serializing namedtuple objects as arrays. To avoid
serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.",specify option orjson.OPT_PASSTHROUGH_SUBCLASS,False,
orjson,"It raises JSONEncodeError on an unsupported type. This exception message
describes the invalid object with the error message
Type is not JSON serializable: .... To fix this, specify
default.",raise JSONEncodeError on unsupported type,False,
orjson,"It raises JSONEncodeError on an unsupported type. This exception message
describes the invalid object with the error message
Type is not JSON serializable: .... To fix this, specify
default.",specify default,False,
orjson,It raises JSONEncodeError on a str that contains invalid UTF-8.,raise JSONEncodeError on str UTF-8,False,
orjson,"It raises JSONEncodeError on an integer that exceeds 64 bits by default or,
with OPT_STRICT_INTEGER, 53 bits.",raise JSONEncodeError on integer,False,
orjson,"It raises JSONEncodeError if a dict has a key of a type other than str,
unless OPT_NON_STR_KEYS is specified.",raise JSONEncodeError,False,
orjson,"It raises JSONEncodeError if a dict has a key of a type other than str,
unless OPT_NON_STR_KEYS is specified.",specify OPT_NON_STR_KEYS,False,
orjson,"It raises JSONEncodeError if the output of default recurses to handling by
default more than 254 levels deep.",raise JSONEncodeError,False,
orjson,It raises JSONEncodeError on circular references.,raise JSONEncodeError on circular references,False,
orjson,"It raises JSONEncodeError  if a tzinfo on a datetime object is
unsupported.",raise JSONEncodeError,False,
orjson,"To serialize a subclass or arbitrary types, specify default as a
callable that returns a supported type. default may be a function,
lambda, or callable class instance. To specify that a type was not
handled by default, raise an exception such as TypeError.",serialize subclass arbitrary types specify default as callable,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"To serialize a subclass or arbitrary types, specify default as a
callable that returns a supported type. default may be a function,
lambda, or callable class instance. To specify that a type was not
handled by default, raise an exception such as TypeError.",raise exception such_as TypeError,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"The default callable may return an object that itself
must be handled by default up to 254 times before an exception
is raised.",raise exception,False,
orjson,"It is important that default raise an exception if a type cannot be handled.
Python otherwise implicitly returns None, which appears to the caller
like a legitimate value and is serialized:",raise exception,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"It is important that default raise an exception if a type cannot be handled.
Python otherwise implicitly returns None, which appears to the caller
like a legitimate value and is serialized:",serialize none,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"To modify how data is serialized, specify option. Each option is an integer
constant in orjson. To specify multiple options, mask them together, e.g.,
option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.",specify option,False,
orjson,"To modify how data is serialized, specify option. Each option is an integer
constant in orjson. To specify multiple options, mask them together, e.g.,
option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.",serialize data,False,
orjson,"To modify how data is serialized, specify option. Each option is an integer
constant in orjson. To specify multiple options, mask them together, e.g.,
option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.",specify multiple options,False,
orjson,"This measures serializing the github.json fixture as compact (52KiB) or
pretty (64KiB):",serialize github.json fixture,False,
orjson,"rapidjson is blank because it does not support pretty printing. This can be
reproduced using the pyindent script.",use pyindent script,False,
orjson,"Serialize datetime.datetime objects without a tzinfo as UTC. This
has no effect on datetime.datetime objects that have tzinfo set.",serialize datetime.datetime objects without tzinfo,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize none by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize none for comparison,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize str by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize str for comparison,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize int by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize int for comparison,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize float by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize float for comparison,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize bool by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize bool for comparison,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Serialize dict keys of type other than str. This allows dict keys
to be one of str, int, float, bool, None, datetime.datetime,
datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison,
the standard library serializes str, int, float, bool or None by
default. orjson benchmarks as being faster at serializing non-str keys
than other libraries. This option is slower for str keys than the default.",serialize non,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"These types are generally serialized how they would be as
values, e.g., datetime.datetime is still an RFC 3339 string and respects
options affecting it. The exception is that int serialization does not
respect OPT_STRICT_INTEGER.",serialize types,False,
orjson,"This option has the risk of creating duplicate keys. This is because non-str
objects may serialize to the same str as an existing key, e.g.,
{""1"": true, 1: false}. The last key to be inserted to the dict will be
serialized last and a JSON deserializer will presumably take the last
occurrence of a key (in the above, false). The first value will be lost.",serialize  to same str,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"This option has the risk of creating duplicate keys. This is because non-str
objects may serialize to the same str as an existing key, e.g.,
{""1"": true, 1: false}. The last key to be inserted to the dict will be
serialized last and a JSON deserializer will presumably take the last
occurrence of a key (in the above, false). The first value will be lost.",insert  to dict,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"This option has the risk of creating duplicate keys. This is because non-str
objects may serialize to the same str as an existing key, e.g.,
{""1"": true, 1: false}. The last key to be inserted to the dict will be
serialized last and a JSON deserializer will presumably take the last
occurrence of a key (in the above, false). The first value will be lost.",serialize last key,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"This measures serializing 589KiB of JSON comprising a list of 100 dict
in which each dict has both 365 randomly-sorted int keys representing epoch
timestamps as well as one str key and the value for each key is a
single integer. In ""str keys"", the keys were converted to str before
serialization, and orjson still specifes option=orjson.OPT_NON_STR_KEYS
(which is always somewhat slower).",serialize 589KiB of JSON,False,
orjson,"This measures serializing 589KiB of JSON comprising a list of 100 dict
in which each dict has both 365 randomly-sorted int keys representing epoch
timestamps as well as one str key and the value for each key is a
single integer. In ""str keys"", the keys were converted to str before
serialization, and orjson still specifes option=orjson.OPT_NON_STR_KEYS
(which is always somewhat slower).",convert keys in str keys,False,
orjson,"ujson is blank for sorting because it segfaults. json is blank because it
raises TypeError on attempting to sort before converting all keys to str.
rapidjson is blank because it does not support non-str keys. This can
be reproduced using the pynonstr script.",raise TypeError on attempting,False,
orjson,"ujson is blank for sorting because it segfaults. json is blank because it
raises TypeError on attempting to sort before converting all keys to str.
rapidjson is blank because it does not support non-str keys. This can
be reproduced using the pynonstr script.",convert keys to str,False,
orjson,"ujson is blank for sorting because it segfaults. json is blank because it
raises TypeError on attempting to sort before converting all keys to str.
rapidjson is blank because it does not support non-str keys. This can
be reproduced using the pynonstr script.",sort  before converting,False,
orjson,"ujson is blank for sorting because it segfaults. json is blank because it
raises TypeError on attempting to sort before converting all keys to str.
rapidjson is blank because it does not support non-str keys. This can
be reproduced using the pynonstr script.",use pynonstr script,False,
orjson,"Passthrough dataclasses.dataclass instances to default. This allows
customizing their output but is much slower.",customize output,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Passthrough datetime.datetime, datetime.date, and datetime.time instances
to default. This allows serializing datetimes to a custom format, e.g.,
HTTP dates:",serialize datetimes to custom format,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,This does not affect datetimes in dict keys if using OPT_NON_STR_KEYS.,use OPT_NON_STR_KEYS,False,
orjson,"This does not affect serializing subclasses as dict keys if using
OPT_NON_STR_KEYS.",use OPT_NON_STR_KEYS,False,
orjson,"This is deprecated and has no effect in version 3. In version 2 this was
required to serialize  dataclasses.dataclass instances. For more, see
dataclass.",serialize dataclasses.dataclass instances,False,
orjson,"Serialize numpy.ndarray instances. For more, see
numpy.",serialize numpy.ndarray instances,False,
orjson,"This is deprecated and has no effect in version 3. In version 2 this was
required to serialize uuid.UUID instances. For more, see
UUID.",serialize uuid.UUID instances,False,
orjson,"Serialize dict keys in sorted order. The default is to serialize in an
unspecified order. This is equivalent to sort_keys=True in the standard
library.",serialize dict keys,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,This measures serializing the twitter.json fixture unsorted and sorted:,serialize twitter.json fixture,False,
orjson,The benchmark can be reproduced using the pysort script.,use pysort script,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,dataclass also serialize as maps but this has no effect on them.,serialize  as maps,False,
orjson,"Serialize a UTC timezone on datetime.datetime instances as Z instead
of +00:00.",serialize UTC timezone on datetime.datetime instances,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"loads() deserializes JSON to Python objects. It deserializes to dict,
list, int, float, str, bool, and None objects.",deserialize JSON to Python objects,False,
orjson,"loads() deserializes JSON to Python objects. It deserializes to dict,
list, int, float, str, bool, and None objects.",deserialize  to none objects,False,
orjson,"loads() deserializes JSON to Python objects. It deserializes to dict,
list, int, float, str, bool, and None objects.",deserialize  to dict bool,False,
orjson,"bytes, bytearray, and str input are accepted. If the input exists as
bytes (was read directly from a source), it is recommended to
pass bytes. This has lower memory usage and lower latency.",pass bytes,False,
orjson,"It raises JSONDecodeError if given an invalid type or invalid
JSON. This includes if the input contains NaN, Infinity, or -Infinity,
which the standard library allows, but is not valid JSON.",raise JSONDecodeError,False,
orjson,"orjson serializes instances of dataclasses.dataclass natively. It serializes
instances 40-50x as fast as other libraries and avoids a severe slowdown seen
in other libraries compared to serializing dict.",serialize instances of dataclasses.dataclass natively,False,
orjson,"orjson serializes instances of dataclasses.dataclass natively. It serializes
instances 40-50x as fast as other libraries and avoids a severe slowdown seen
in other libraries compared to serializing dict.",serialize instances,False,
orjson,"It is supported to pass all variants of dataclasses, including dataclasses
using __slots__, frozen dataclasses, those with optional or default
attributes, and subclasses. There is a performance benefit to not
using __slots__.",pass variants of dataclasses,False,
orjson,"It is supported to pass all variants of dataclasses, including dataclasses
using __slots__, frozen dataclasses, those with optional or default
attributes, and subclasses. There is a performance benefit to not
using __slots__.",use subclasses,False,
orjson,"It is supported to pass all variants of dataclasses, including dataclasses
using __slots__, frozen dataclasses, those with optional or default
attributes, and subclasses. There is a performance benefit to not
using __slots__.",use __slots__,False,
orjson,"It is supported to pass all variants of dataclasses, including dataclasses
using __slots__, frozen dataclasses, those with optional or default
attributes, and subclasses. There is a performance benefit to not
using __slots__.",support  including dataclasses,False,
orjson,"This measures serializing 555KiB of JSON, orjson natively and other libraries
using default to serialize the output of dataclasses.asdict(). This can be
reproduced using the pydataclass script.",serialize 555KiB of JSON natively,False,
orjson,"This measures serializing 555KiB of JSON, orjson natively and other libraries
using default to serialize the output of dataclasses.asdict(). This can be
reproduced using the pydataclass script.",serialize 555KiB of other libraries,False,
orjson,"This measures serializing 555KiB of JSON, orjson natively and other libraries
using default to serialize the output of dataclasses.asdict(). This can be
reproduced using the pydataclass script.",use default,False,
orjson,"This measures serializing 555KiB of JSON, orjson natively and other libraries
using default to serialize the output of dataclasses.asdict(). This can be
reproduced using the pydataclass script.",serialize output of dataclasses.asdict(),False,
orjson,"This measures serializing 555KiB of JSON, orjson natively and other libraries
using default to serialize the output of dataclasses.asdict(). This can be
reproduced using the pydataclass script.",use pydataclass script,False,
orjson,"Dataclasses are serialized as maps, with every attribute serialized and in
the order given on class definition:",serialize dataclasses with attribute,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Dataclasses are serialized as maps, with every attribute serialized and in
the order given on class definition:",serialize dataclasses as maps,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Users may wish to control how dataclass instances are serialized, e.g.,
to not serialize an attribute or to change the name of an
attribute when serialized. orjson may implement support using the
metadata mapping on field attributes,
e.g., field(metadata={""json_serialize"": False}), if use cases are clear.",serialize dataclass instances,False,
orjson,"Users may wish to control how dataclass instances are serialized, e.g.,
to not serialize an attribute or to change the name of an
attribute when serialized. orjson may implement support using the
metadata mapping on field attributes,
e.g., field(metadata={""json_serialize"": False}), if use cases are clear.",use metadata mapping on field attributes,False,
orjson,"orjson serializes datetime.datetime objects to
RFC 3339 format,
e.g., ""1970-01-01T00:00:00+00:00"". This is a subset of ISO 8601 and
compatible with isoformat() in the standard library.",serialize datetime.datetime objects to RFC,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"datetime.datetime supports instances with a tzinfo that is None,
datetime.timezone.utc or a timezone instance from
the pendulum, pytz, or dateutil/arrow libraries.",support instances with tzinfo,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"It is faster to have orjson serialize datetime objects than to do so
before calling dumps(). If using an unsupported type such as
pendulum.datetime, use default.",call dumps(),False,
orjson,"It is faster to have orjson serialize datetime objects than to do so
before calling dumps(). If using an unsupported type such as
pendulum.datetime, use default.",use unsupported type such_as pendulum.datetime,False,
orjson,"It is faster to have orjson serialize datetime objects than to do so
before calling dumps(). If using an unsupported type such as
pendulum.datetime, use default.",use default,False,
orjson,"To disable serialization of datetime objects specify the option
orjson.OPT_PASSTHROUGH_DATETIME.",specify option orjson.OPT_PASSTHROUGH_DATETIME,False,
orjson,"Enums with members that are not supported types can be serialized using
default:",use default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"Enums with members that are not supported types can be serialized using
default:",serialize types,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson serializes and deserializes double precision floats with no loss of
precision and consistent rounding. The same behavior is observed in rapidjson,
simplejson, and json. ujson 1.35 was inaccurate in both serialization and
deserialization, i.e., it modifies the data, and the recent 2.0 release is
accurate.",modify data,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"JSON only requires that implementations accept integers with 53-bit precision.
orjson will, by default, serialize 64-bit integers. This is compatible with
the Python standard library and other non-browser implementations. For
transmitting JSON to a web browser or other strict implementations, dumps()
can be configured to raise a JSONEncodeError on values exceeding the
53-bit range.",serialize 64-bit integers by default,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"JSON only requires that implementations accept integers with 53-bit precision.
orjson will, by default, serialize 64-bit integers. This is compatible with
the Python standard library and other non-browser implementations. For
transmitting JSON to a web browser or other strict implementations, dumps()
can be configured to raise a JSONEncodeError on values exceeding the
53-bit range.",raise JSONEncodeError on values,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"JSON only requires that implementations accept integers with 53-bit precision.
orjson will, by default, serialize 64-bit integers. This is compatible with
the Python standard library and other non-browser implementations. For
transmitting JSON to a web browser or other strict implementations, dumps()
can be configured to raise a JSONEncodeError on values exceeding the
53-bit range.",configure dumps() for transmitting,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.uint32 instances,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.ndarray individual numpy.float64,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.float32,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.int64,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.int32,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy.uint64,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson natively serializes numpy.ndarray and individual numpy.float64,
numpy.float32, numpy.int64, numpy.int32, numpy.uint64, and
numpy.uint32 instances. Arrays may have a
dtype of numpy.bool, numpy.float32, numpy.float64, numpy.int32,
numpy.int64, numpy.uint32, numpy.uint64, numpy.uintp, or numpy.intp.
orjson is faster than all compared libraries at serializing
numpy instances. Serializing numpy data requires specifying
option=orjson.OPT_SERIALIZE_NUMPY.",serialize numpy instances,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"If an array is not a contiguous C array or contains an supported datatype,
orjson falls through to default. In default, obj.tolist() can be
specified. If an array is malformed, which is not expected,
orjson.JSONEncodeError is raised.",specify obj.tolist() in default,False,
orjson,"If an array is not a contiguous C array or contains an supported datatype,
orjson falls through to default. In default, obj.tolist() can be
specified. If an array is malformed, which is not expected,
orjson.JSONEncodeError is raised.",raise orjson.JSONEncodeError,False,
orjson,"This measures serializing 92MiB of JSON from an numpy.ndarray with
dimensions of (50000, 100) and numpy.float64 values:",serialize 92MiB of JSON,False,
orjson,"This measures serializing 92MiB of JSON from an numpy.ndarray with
dimensions of (50000, 100) and numpy.float64 values:",serialize 92MiB from numpy.ndarray,False,
orjson,"This measures serializing 100MiB of JSON from an numpy.ndarray with
dimensions of (100000, 100) and numpy.int32 values:",serialize 100MiB of JSON,False,
orjson,"This measures serializing 100MiB of JSON from an numpy.ndarray with
dimensions of (100000, 100) and numpy.int32 values:",serialize 100MiB from numpy.ndarray,False,
orjson,"This measures serializing 105MiB of JSON from an numpy.ndarray with
dimensions of (100000, 200) and numpy.bool values:",serialize 105MiB of JSON,False,
orjson,"This measures serializing 105MiB of JSON from an numpy.ndarray with
dimensions of (100000, 200) and numpy.bool values:",serialize 105MiB from numpy.ndarray,False,
orjson,"In these benchmarks, orjson serializes natively, ujson is blank because it
does not support a default parameter, and the other libraries serialize
ndarray.tolist() via default. The RSS column measures peak memory
usage during serialization. This can be reproduced using the pynumpy script.",serialize ndarray.tolist() via default,False,
orjson,"In these benchmarks, orjson serializes natively, ujson is blank because it
does not support a default parameter, and the other libraries serialize
ndarray.tolist() via default. The RSS column measures peak memory
usage during serialization. This can be reproduced using the pynumpy script.",use pynumpy script,False,
orjson,"orjson does not have an installation or compilation dependency on numpy. The
implementation is independent, reading numpy.ndarray using
PyArrayInterface.",use PyArrayInterface,False,
orjson,"orjson is strict about UTF-8 conformance. This is stricter than the standard
library's json module, which will serialize and deserialize UTF-16 surrogates,
e.g., ""\ud800"", that are invalid UTF-8.",serialize UTF-16 surrogates,False,
orjson,"orjson is strict about UTF-8 conformance. This is stricter than the standard
library's json module, which will serialize and deserialize UTF-16 surrogates,
e.g., ""\ud800"", that are invalid UTF-8.",serialize json module,False,
orjson,"orjson is strict about UTF-8 conformance. This is stricter than the standard
library's json module, which will serialize and deserialize UTF-16 surrogates,
e.g., ""\ud800"", that are invalid UTF-8.",deserialize json module,False,
orjson,"If orjson.dumps() is given a str that does not contain valid UTF-8,
orjson.JSONEncodeError is raised. If loads() receives invalid UTF-8,
orjson.JSONDecodeError is raised.",raise orjson.JSONEncodeError,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"If orjson.dumps() is given a str that does not contain valid UTF-8,
orjson.JSONEncodeError is raised. If loads() receives invalid UTF-8,
orjson.JSONDecodeError is raised.",raise orjson.JSONDecodeError,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"To make a best effort at deserializing bad input, first decode bytes using
the replace or lossy argument for errors:",deserialize bad input,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"To make a best effort at deserializing bad input, first decode bytes using
the replace or lossy argument for errors:",use replace lossy argument for errors,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson serializes uuid.UUID instances to
RFC 4122 format, e.g.,
""f81d4fae-7dec-11d0-a765-00a0c91e6bf6"".",serialize uuid.UUID instances to RFC,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"The library has comprehensive tests. There are tests against fixtures in the
JSONTestSuite and
nativejson-benchmark
repositories. It is tested to not crash against the
Big List of Naughty Strings.
It is tested to not leak memory. It is tested to not crash
against and not accept invalid UTF-8. There are integration tests
exercising the library's use in web servers (gunicorn using multiprocess/forked
workers) and when
multithreaded. It also uses some tests from the ultrajson library.",use tests from ultrajson library,False,
orjson,"This shows that all libraries deserialize valid JSON but only orjson
correctly rejects the given invalid JSON fixtures. Errors are largely due to
accepting invalid strings and numbers.",deserialize valid JSON,False,
orjson,The graph above can be reproduced using the pycorrectness script.,use pycorrectness script,False,
orjson,"This measures, in the first column, RSS after importing a library and reading
the fixture, and in the second column, increases in RSS after repeatedly
calling loads() on the fixture.",import library,False,
orjson,"This measures, in the first column, RSS after importing a library and reading
the fixture, and in the second column, increases in RSS after repeatedly
calling loads() on the fixture.",read fixture,False,
orjson,"This measures, in the first column, RSS after importing a library and reading
the fixture, and in the second column, increases in RSS after repeatedly
calling loads() on the fixture.",call loads() on fixture,False,
orjson,"The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",use Python 3.8.3 with python-rapidson 0.9.1,False,
orjson,"The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",use Python 3.8.3 with simplejson 3.17.2,False,
orjson,"The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",use Python 3.8.3 with orjson 3.3.0,False,
orjson,"The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",use Python 3.8.3 with ujson 3.0.0,False,
orjson,"The above was measured using Python 3.8.3 on Linux (x86_64) with
orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",use Python 3.8.3 on Linux,False,
orjson,"The latency results can be reproduced using the pybench and graph
scripts. The memory results can be reproduced using the pymem script.",use pybench graph scripts,False,
orjson,"The latency results can be reproduced using the pybench and graph
scripts. The memory results can be reproduced using the pymem script.",use pymem script,False,
orjson,"To package orjson requires Rust on the
nightly channel and the maturin
build tool. maturin can be installed from PyPI or packaged as
well. maturin can be invoked like:",install maturin from PyPI,True,http://web.archive.org/web/20200806114537/https://github.com/ijl/orjson
orjson,"orjson is tested for amd64 and aarch64 on Linux, macOS, and Windows. It
may not work on 32-bit targets. It should be compiled with
-C target-feature=+sse2 on amd64 and -C target-feature=+neon on arm7. musl
libc is not supported, but building with -C target-feature=-crt-static
will probably work. The recommended flags are specified in .cargo/config
and will apply unless RUSTFLAGS is set.",specify recommended flags,False,
orjson,"orjson is tested for amd64 and aarch64 on Linux, macOS, and Windows. It
may not work on 32-bit targets. It should be compiled with
-C target-feature=+sse2 on amd64 and -C target-feature=+neon on arm7. musl
libc is not supported, but building with -C target-feature=-crt-static
will probably work. The recommended flags are specified in .cargo/config
and will apply unless RUSTFLAGS is set.",set RUSTFLAGS,False,
orjson,"orjson's tests are included in the source distribution on PyPI. It is
necessarily to install dependencies from PyPI specified in
test/requirements.txt. These require a C compiler. The tests do not
make network requests.",include tests in source distribution,False,
orjson,"orjson's tests are included in the source distribution on PyPI. It is
necessarily to install dependencies from PyPI specified in
test/requirements.txt. These require a C compiler. The tests do not
make network requests.",install dependencies from PyPI,False,
orjson,"orjson's tests are included in the source distribution on PyPI. It is
necessarily to install dependencies from PyPI specified in
test/requirements.txt. These require a C compiler. The tests do not
make network requests.",specify  in test/requirements.txt,False,
orjson,The tests should be run as part of the build.,run tests,False,
orjson,"orjson was written by ijl <ijl@mailbox.org>, copyright 2018 - 2020, licensed
under either the Apache 2 or MIT licenses.",write orjson,False,
