{   'ACEMentionExtractor': {   'req_args': [   'dict',
                                               'props',
                                               'semantics',
                                               [   'dict',
                                                   'props',
                                                   'semantics',
                                                   'singletonModel']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ACEMentionExtractor.java'},
    'ACEMentionExtractor.nextDoc': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ACEMentionExtractor.java'},
    'ACEMentionExtractor.resetDocs': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ACEMentionExtractor.java'},
    'ADMath': {   'req_args': [],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.divide': {   'req_args': ['a', 'b'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.divideConst': {   'req_args': ['a', 'b'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.exp': {   'req_args': ['a'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.log': {   'req_args': ['a'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.logSum': {   'req_args': [   'logInputs',
                                         ['logInputs', 'fromIndex', 'toIndex']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.minus': {   'req_args': ['a', 'b'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.minusConst': {   'req_args': ['a', 'b'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.mult': {   'req_args': ['a', 'b'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.multConst': {   'req_args': ['a', 'b'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.plus': {   'req_args': ['a', 'b'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ADMath.plusConst': {   'req_args': ['a', 'b'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ADMath.java'},
    'ASBCunkDetector': {   'req_args': ['t2', 'n2'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ASBCunkDetector.isDynamic': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ASBCunkDetector.isLocal': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ASBCunkDict': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ASBCunkDict.java'},
    'ATBArabicDataset': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBArabicDataset.java'},
    'ATBArabicDataset.build': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBArabicDataset.java'},
    'ATBArabicDataset.setOptions': {   'req_args': ['opts'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBArabicDataset.java'},
    'ATBCorrector': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBCorrector.java'},
    'ATBCorrector.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBCorrector.java'},
    'ATBCorrector.transformTree': {   'req_args': ['t'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBCorrector.java'},
    'ATBCorrectorVisitor.visitTree': {   'req_args': ['t'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\ATBCorrectorVisitor.java'},
    'ATBEscaper.apply': {   'req_args': ['in'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBEscaper.java'},
    'ATBTreeUtils': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'ATBTreeUtils.escape': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'ATBTreeUtils.flattenTree': {   'req_args': ['t'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'ATBTreeUtils.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'ATBTreeUtils.taggedStringFromTree': {   'req_args': [   't',
                                                             'removeEscaping',
                                                             'separator'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'ATBTreeUtils.unEscape': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ATBTreeUtils.java'},
    'AbishekFrenchHeadFinder': {   'req_args': [['tlp']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\AbishekFrenchHeadFinder.java'},
    'AbishekFrenchHeadFinder.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\AbishekFrenchHeadFinder.java'},
    'AbstractBatchOptimizer.addDenseConstraint': {   'req_args': [   'component',
                                                                     'arr'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\AbstractBatchOptimizer.java'},
    'AbstractBatchOptimizer.addSparseConstraint': {   'req_args': [   'component',
                                                                      'index',
                                                                      'value'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\AbstractBatchOptimizer.java'},
    'AbstractBatchOptimizer.optimize': {   'req_args': [   'dataset',
                                                           'fn',
                                                           [   'dataset',
                                                               'fn',
                                                               'initialWeights',
                                                               'l2regularization',
                                                               'convergenceDerivativeNorm',
                                                               'quiet']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\AbstractBatchOptimizer.java'},
    'AbstractBatchOptimizer.updateWeights': {   'req_args': [   'weights',
                                                                'gradient',
                                                                'logLikelihood',
                                                                'state',
                                                                'quiet'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\AbstractBatchOptimizer.java'},
    'AbstractCachingDiffFloatFunction.derivativeAt': {   'req_args': ['x'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFloatFunction.java'},
    'AbstractCachingDiffFloatFunction.domainDimension': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFloatFunction.java'},
    'AbstractCachingDiffFloatFunction.initial': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFloatFunction.java'},
    'AbstractCachingDiffFloatFunction.valueAt': {   'req_args': ['x'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFloatFunction.java'},
    'AbstractCachingDiffFunction.derivativeAt': {   'req_args': ['x'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.ensure': {   'req_args': ['x'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.getDerivative': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.gradientCheck': {   'req_args': [   [   'numOfChecks',
                                                                         'numOfRandomChecks',
                                                                         'x']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.initial': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.lastValue': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.randomInitial': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCachingDiffFunction.valueAt': {   'req_args': ['x'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractCachingDiffFunction.java'},
    'AbstractCollinsHeadFinder': {   'req_args': ['tlp', 'categoriesToAvoid'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractCollinsHeadFinder.java'},
    'AbstractCollinsHeadFinder.determineHead': {   'req_args': [   't',
                                                                   [   't',
                                                                       'parent']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractCollinsHeadFinder.java'},
    'AbstractCollinsHeadFinder.makesCopulaHead': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractCollinsHeadFinder.java'},
    'AbstractCounter.addAll': {   'req_args': ['counter'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AbstractCounter.java'},
    'AbstractCounter.decrementCount': {   'req_args': [   'key',
                                                          'amount',
                                                          ['key']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AbstractCounter.java'},
    'AbstractCounter.incrementCount': {   'req_args': [   'key',
                                                          'amount',
                                                          ['key']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AbstractCounter.java'},
    'AbstractCounter.logIncrementCount': {   'req_args': ['key', 'amount'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AbstractCounter.java'},
    'AbstractDataset': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\AbstractDataset.java'},
    'AbstractDataset.build': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\AbstractDataset.java'},
    'AbstractDataset.getFilenames': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\AbstractDataset.java'},
    'AbstractDataset.setOptions': {   'req_args': ['opts'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\AbstractDataset.java'},
    'AbstractDataset.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\AbstractDataset.java'},
    'AbstractDependencyGrammar': {   'req_args': [   'tlp',
                                                     'tagProjection',
                                                     'directional',
                                                     'useDistance',
                                                     'useCoarseDistance',
                                                     'op',
                                                     'wordIndex',
                                                     'tagIndex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.coarseDistanceBin': {   'req_args': ['distance'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.distanceBin': {   'req_args': ['distance'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.numDistBins': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.numTagBins': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.readData': {   'req_args': ['in'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.regDistanceBin': {   'req_args': ['distance'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.rootTW': {   'req_args': ['rTW'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.score': {   'req_args': [   'dependency',
                                                           [   'headWord',
                                                               'headTag',
                                                               'argWord',
                                                               'argTag',
                                                               'leftHeaded',
                                                               'dist']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.scoreTB': {   'req_args': [   'headWord',
                                                             'headTag',
                                                             'argWord',
                                                             'argTag',
                                                             'leftHeaded',
                                                             'dist'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.setLexicon': {   'req_args': ['lexicon'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.tagBin': {   'req_args': ['tag'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.tune': {   'req_args': ['trees'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDependencyGrammar.writeData': {   'req_args': ['out'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractDependencyGrammar.java'},
    'AbstractDifferentiableFunction.getSummaryForInstance': {   'req_args': [   'dataPoint',
                                                                                'weights',
                                                                                'gradient'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\AbstractDifferentiableFunction.java'},
    'AbstractEval': {   'req_args': [   ['runningAverages'],
                                        ['str'],
                                        ['str', 'runningAverages']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.display': {   'req_args': ['verbose', ['verbose', 'pw']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.evaluate': {   'req_args': [   'guess',
                                                 'gold',
                                                 ['guess', 'gold', 'pw'],
                                                 [   'guess',
                                                     'gold',
                                                     'pw',
                                                     'weight']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getEvalbF1': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getEvalbF1Percent': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getExact': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getExactPercent': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getLastF1': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getNum': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEval.getSentAveF1': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\AbstractEval.java'},
    'AbstractEvaluate': {   'req_args': ['options'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.eval': {   'req_args': ['trees', ['tree']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.exactNodeAccuracy': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.exactRootAccuracy': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.lengthAccuracies': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.populatePredictedLabels': {   'req_args': ['trees'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.printLengthAccuracies': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.printSummary': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractEvaluate.reset': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\AbstractEvaluate.java'},
    'AbstractInputStreamAnnotationCreator.create': {   'req_args': [   'stream',
                                                                       [   'reader']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AbstractInputStreamAnnotationCreator.java'},
    'AbstractInputStreamAnnotationCreator.createFromFile': {   'req_args': [   'filename',
                                                                               [   'file']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AbstractInputStreamAnnotationCreator.java'},
    'AbstractInputStreamAnnotationCreator.createFromText': {   'req_args': [   'text'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AbstractInputStreamAnnotationCreator.java'},
    'AbstractIterator.hasNext': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AbstractIterator.java'},
    'AbstractIterator.next': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AbstractIterator.java'},
    'AbstractIterator.remove': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AbstractIterator.java'},
    'AbstractLinearClassifierFactory': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\AbstractLinearClassifierFactory.java'},
    'AbstractLinearClassifierFactory.trainClassifier': {   'req_args': [   'examples',
                                                                           [   'ref'],
                                                                           [   'data']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\AbstractLinearClassifierFactory.java'},
    'AbstractListProcessor': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractListProcessor.java'},
    'AbstractListProcessor.processDocument': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractListProcessor.java'},
    'AbstractListProcessor.processLists': {   'req_args': ['lists'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractListProcessor.java'},
    'AbstractPronounResolver.run': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\AbstractPronounResolver.java'},
    'AbstractPronounResolver.score': {   'req_args': ['gold', 'predicted'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\AbstractPronounResolver.java'},
    'AbstractSceneGraphParser': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\AbstractSceneGraphParser.java'},
    'AbstractSceneGraphParser.parse': {   'req_args': [   'sg',
                                                          ['annotation'],
                                                          ['input']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\AbstractSceneGraphParser.java'},
    'AbstractSequenceClassifier': {   'req_args': ['props', ['flags']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.apply': {   'req_args': ['in'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.backgroundSymbol': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classify': {   'req_args': [   'str',
                                                               ['document']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyAndWriteAnswers': {   'req_args': [   'textFile',
                                                                              [   'testFile',
                                                                                  'outputScores'],
                                                                              [   'testFile',
                                                                                  'readerWriter',
                                                                                  'outputScores'],
                                                                              [   'testFile',
                                                                                  'outStream',
                                                                                  'readerWriter',
                                                                                  'outputScores'],
                                                                              [   'baseDir',
                                                                                  'filePattern',
                                                                                  'readerWriter',
                                                                                  'outputScores'],
                                                                              [   'documents',
                                                                                  'readerWriter',
                                                                                  'outputScores'],
                                                                              [   'documents',
                                                                                  'printWriter',
                                                                                  'readerWriter',
                                                                                  'outputScores']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyAndWriteAnswersKBest': {   'req_args': [   'testFile',
                                                                                   'k',
                                                                                   'readerAndWriter',
                                                                                   [   'documents',
                                                                                       'k',
                                                                                       'printWriter',
                                                                                       'readerAndWriter']],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyAndWriteViterbiSearchGraph': {   'req_args': [   'testFile',
                                                                                         'searchGraphPrefix',
                                                                                         'readerAndWriter'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyFile': {   'req_args': ['filename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyFilesAndWriteAnswers': {   'req_args': [   'textFiles',
                                                                                   [   'testFiles',
                                                                                       'readerWriter',
                                                                                       'outputScores']],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyKBest': {   'req_args': [   'doc',
                                                                    'answerField',
                                                                    'k'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyRaw': {   'req_args': [   'str',
                                                                  'readerAndWriter'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifySentence': {   'req_args': [   'tokenSequence'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifySentenceWithGlobalInformation': {   'req_args': [   'tokenSequence',
                                                                                            'doc',
                                                                                            'sentence'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyStdin': {   'req_args': [   [   'readerWriter']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyToCharacterOffsets': {   'req_args': [   'sentences'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyToString': {   'req_args': [   'sentences',
                                                                       'outputFormat',
                                                                       'preserveSpacing',
                                                                       [   'sentences']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSequence',
                                                                                    'document',
                                                                                    'sentence'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.classifyWithInlineXML': {   'req_args': [   'sentences'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.countResults': {   'req_args': [   'doc',
                                                                   'entityTP',
                                                                   'entityFP',
                                                                   'entityFN'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.countResultsSegmenter': {   'req_args': [   'doc',
                                                                            'entityTP',
                                                                            'entityFP',
                                                                            'entityFN'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.defaultReaderAndWriter': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.dumpFeatures': {   'req_args': ['documents'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.finalizeClassification': {   'req_args': [   'document'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.getKnownLCWords': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.getSampler': {   'req_args': ['input'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.getSequenceModel': {   'req_args': ['doc'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.labels': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.loadClassifier': {   'req_args': [   'in',
                                                                     [   'in',
                                                                         'props'],
                                                                     [   'in',
                                                                         'props'],
                                                                     [   'loadPath'],
                                                                     [   'loadPath',
                                                                         'props'],
                                                                     ['file'],
                                                                     [   'file',
                                                                         'props']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.loadClassifierNoExceptions': {   'req_args': [   'in',
                                                                                 'props',
                                                                                 [   'loadPath'],
                                                                                 [   'loadPath',
                                                                                     'props'],
                                                                                 [   'file'],
                                                                                 [   'file',
                                                                                     'props']],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makeObjectBankFromFile': {   'req_args': [   'filename',
                                                                             [   'filename',
                                                                                 'readerAndWriter']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makeObjectBankFromFiles': {   'req_args': [   'trainFileList',
                                                                              'readerAndWriter',
                                                                              [   'baseDir',
                                                                                  'filePattern',
                                                                                  'readerAndWriter'],
                                                                              [   'files',
                                                                                  'readerAndWriter']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makeObjectBankFromReader': {   'req_args': [   'in',
                                                                               'readerAndWriter'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makeObjectBankFromString': {   'req_args': [   'string',
                                                                               'readerAndWriter'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makePlainTextReaderAndWriter': {   'req_args': [   'flags',
                                                                                   [   ]],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.makeReaderAndWriter': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.plainTextReaderAndWriter': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.printProbs': {   'req_args': [   'filename',
                                                                 'readerAndWriter',
                                                                 [   'testFiles',
                                                                     'readerWriter']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.printProbsDocument': {   'req_args': [   'document'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.printProbsDocuments': {   'req_args': [   'documents'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.printResults': {   'req_args': [   'entityTP',
                                                                   'entityFP',
                                                                   'entityFN'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.segmentString': {   'req_args': [   'sentence',
                                                                    [   'sentence',
                                                                        'readerAndWriter']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                                          [   'oos']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.train': {   'req_args': [   ['filename'],
                                                            [   'filename',
                                                                'readerAndWriter'],
                                                            [   'baseTrainDir',
                                                                'trainFiles',
                                                                'readerAndWriter'],
                                                            [   'trainFileList',
                                                                'readerAndWriter'],
                                                            ['docs'],
                                                            [   'docs',
                                                                'readerAndWriter']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.windowSize': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractSequenceClassifier.writeAnswers': {   'req_args': [   'doc',
                                                                   'printWriter',
                                                                   'readerAndWriter'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\AbstractSequenceClassifier.java'},
    'AbstractStochasticCachingDiffFunction.HdotVAt': {   'req_args': [   'x',
                                                                         'v',
                                                                         'batchSize',
                                                                         [   'x',
                                                                             'v',
                                                                             'curDerivative',
                                                                             'batchSize'],
                                                                         [   'x',
                                                                             'v']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.calculateStochastic': {   'req_args': [   'x',
                                                                                     'v',
                                                                                     'batch'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.dataDimension': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.decrementBatch': {   'req_args': [   'batchSize'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.derivativeAt': {   'req_args': [   'x',
                                                                              'batchSize',
                                                                              [   'x',
                                                                                  'v',
                                                                                  'batchSize']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.incrementBatch': {   'req_args': [   'batchSize'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.incrementRandom': {   'req_args': [   'numTimes'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.initial': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.lastDerivative': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.lastValue': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.scaleUp': {   'req_args': [   'toScaleUp'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffFunction.valueAt': {   'req_args': [   'x',
                                                                         'batchSize',
                                                                         [   'x',
                                                                             'v',
                                                                             'batchSize']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffFunction.java'},
    'AbstractStochasticCachingDiffUpdateFunction.calculateStochasticGradient': {   'req_args': [   'x',
                                                                                                   'batch',
                                                                                                   [   'x',
                                                                                                       'batchSize']],
                                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffUpdateFunction.java'},
    'AbstractStochasticCachingDiffUpdateFunction.calculateStochasticUpdate': {   'req_args': [   'x',
                                                                                                 'xScale',
                                                                                                 'batch',
                                                                                                 'gain',
                                                                                                 [   'x',
                                                                                                     'xScale',
                                                                                                     'batchSize',
                                                                                                     'gain']],
                                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffUpdateFunction.java'},
    'AbstractStochasticCachingDiffUpdateFunction.getSample': {   'req_args': [   'sampleSize'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffUpdateFunction.java'},
    'AbstractStochasticCachingDiffUpdateFunction.valueAt': {   'req_args': [   'x',
                                                                               'xScale',
                                                                               'batch',
                                                                               [   'x',
                                                                                   'xScale',
                                                                                   'batchSize']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\AbstractStochasticCachingDiffUpdateFunction.java'},
    'AbstractTextAnnotationCreator.create': {   'req_args': [   'stream',
                                                                [   'stream',
                                                                    'encoding'],
                                                                ['reader']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AbstractTextAnnotationCreator.java'},
    'AbstractTextAnnotationCreator.createFromFile': {   'req_args': [   'filename',
                                                                        [   'file']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AbstractTextAnnotationCreator.java'},
    'AbstractTokenizer.hasNext': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractTokenizer.java'},
    'AbstractTokenizer.next': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractTokenizer.java'},
    'AbstractTokenizer.peek': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractTokenizer.java'},
    'AbstractTokenizer.remove': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractTokenizer.java'},
    'AbstractTokenizer.tokenize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AbstractTokenizer.java'},
    'AbstractTreeExtractor': {   'req_args': ['op'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreeExtractor.java'},
    'AbstractTreeExtractor.extract': {   'req_args': [   ['treeList'],
                                                         [   'trees1',
                                                             'weight1',
                                                             'trees2',
                                                             'weight2'],
                                                         [   'treeIterator',
                                                             'f',
                                                             'weight'],
                                                         ['iterator', 'f']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreeExtractor.java'},
    'AbstractTreeExtractor.formResult': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreeExtractor.java'},
    'AbstractTreeExtractor.tallyTree': {   'req_args': ['t', 'weight'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreeExtractor.java'},
    'AbstractTreebankLanguagePack': {   'req_args': [['gfChar']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.basicCategory': {   'req_args': ['category'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.categoryAndFunction': {   'req_args': [   'category'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.evalBIgnoredPunctuationTagAcceptFilter': {   'req_args': [   ],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.evalBIgnoredPunctuationTagRejectFilter': {   'req_args': [   ],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.evalBIgnoredPunctuationTags': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.generateOriginalDependencies': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.getBasicCategoryFunction': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.getCategoryAndFunctionFunction': {   'req_args': [   ],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.getEncoding': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.getGfCharacter': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.grammaticalStructureFactory': {   'req_args': [   [   'puncFilt'],
                                                                                    [   'puncFilt',
                                                                                        'typedDependencyHeadFinder']],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.headFinder': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isEvalBIgnoredPunctuationTag': {   'req_args': [   'str'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isLabelAnnotationIntroducingCharacter': {   'req_args': [   'ch'],
                                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isPunctuationTag': {   'req_args': ['str'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isPunctuationWord': {   'req_args': ['str'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isSentenceFinalPunctuationTag': {   'req_args': [   'str'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.isStartSymbol': {   'req_args': ['str'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.morphFeatureSpec': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationTagAcceptFilter': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationTagRejectFilter': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationWordAcceptFilter': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationWordRejectFilter': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.sentenceFinalPunctuationTagAcceptFilter': {   'req_args': [   ],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.setGenerateOriginalDependencies': {   'req_args': [   'generateOriginalDependencies'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.setGfCharacter': {   'req_args': [   'gfCharacter'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.startSymbol': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.startSymbolAcceptFilter': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.stripGF': {   'req_args': ['category'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.supportsGrammaticalStructures': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.treeReaderFactory': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.treeTokenizerFactory': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\AbstractTreebankLanguagePack.java'},
    'AbstractTreebankParserParams': {   'req_args': ['tlp'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.MLEDependencyGrammarSmoothingParams': {   'req_args': [   ],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.collinizer': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.defaultCoreNLPFlags': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.dependencyGrammarExtractor': {   'req_args': [   'op',
                                                                                   'wordIndex',
                                                                                   'tagIndex'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.dependencyObjectify': {   'req_args': [   't',
                                                                            'hf',
                                                                            'collinizer',
                                                                            'typer'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.diskTreebank': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.display': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.generateOriginalDependencies': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.getGrammaticalStructure': {   'req_args': [   't',
                                                                                'filter',
                                                                                'hf'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.getInputEncoding': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.getOutputEncoding': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.headFinder': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.isEvalGF': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.lex': {   'req_args': [   'op',
                                                            'wordIndex',
                                                            'tagIndex'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.parsevalObjectify': {   'req_args': [   't',
                                                                          'collinizer',
                                                                          [   't',
                                                                              'collinizer',
                                                                              'labelConstituents']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.ppAttachmentEval': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.processHeadWord': {   'req_args': [   'headWord'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.pw': {   'req_args': [['o']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.readGrammaticalStructureFromFile': {   'req_args': [   'filename'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setEvalGF': {   'req_args': ['evalGF'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setEvaluateGrammaticalFunctions': {   'req_args': [   'evalGFs'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setGenerateOriginalDependencies': {   'req_args': [   'originalDependencies'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setInputEncoding': {   'req_args': [   'encoding'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.setOutputEncoding': {   'req_args': [   'encoding'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.subcategoryStripper': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.supportsBasicDependencies': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.testMemoryTreebank': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.treeTokenizerFactory': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.treebank': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.treebankLanguagePack': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.typedDependencyClasser': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.typedDependencyObjectify': {   'req_args': [   't',
                                                                                 'hf',
                                                                                 'collinizer'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.unorderedTypedDependencyObjectify': {   'req_args': [   't',
                                                                                          'hf',
                                                                                          'collinizer'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.unorderedUntypedDependencyObjectify': {   'req_args': [   't',
                                                                                            'hf',
                                                                                            'collinizer'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractTreebankParserParams.untypedDependencyObjectify': {   'req_args': [   't',
                                                                                   'hf',
                                                                                   'collinizer'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractTreebankParserParams.java'},
    'AbstractUnknownWordModelTrainer.incrementTreesRead': {   'req_args': [   'weight'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractUnknownWordModelTrainer.java'},
    'AbstractUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                              'lex',
                                                                              'wordIndex',
                                                                              'tagIndex',
                                                                              'totalTrees'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractUnknownWordModelTrainer.java'},
    'AbstractUnknownWordModelTrainer.train': {   'req_args': [   'trees',
                                                                 [   'trees',
                                                                     'weight'],
                                                                 [   'tree',
                                                                     'weight']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AbstractUnknownWordModelTrainer.java'},
    'AccuracyStats': {   'req_args': [   'classifier',
                                         'data',
                                         'posLabel',
                                         ['posLabel', 'saveFile']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AccuracyStats.java'},
    'AccuracyStats.getDescription': {   'req_args': ['numDigits'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AccuracyStats.java'},
    'AccuracyStats.score': {   'req_args': ['classifier', 'data'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AccuracyStats.java'},
    'AccuracyStats.toStringArr': {   'req_args': ['acc'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\AccuracyStats.java'},
    'AceCharSeq': {   'req_args': ['text', 'start', 'end'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getByteEnd': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getByteOffset': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getByteStart': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getText': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getTokenEnd': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getTokenOffset': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.getTokenStart': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.match': {   'req_args': ['tokens'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceCharSeq.toXml': {   'req_args': ['label', 'offset', ['offset']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceCharSeq.java'},
    'AceDocument': {   'req_args': ['id'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addEntity': {   'req_args': ['e'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addEntityMention': {   'req_args': ['em'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addEvent': {   'req_args': ['r'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addEventMention': {   'req_args': ['e'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addRelation': {   'req_args': ['r'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addRelationMention': {   'req_args': ['e'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.addToken': {   'req_args': ['t'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.constructSentenceRelationMentions': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.countCommas': {   'req_args': ['start', 'end'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.countVerbs': {   'req_args': ['start', 'end'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.findChunkEnd': {   'req_args': ['pos'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.findChunkStart': {   'req_args': ['pos'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getAllEntityMentions': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getAllEventMentions': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getAllRelationMentions': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEntity': {   'req_args': ['id'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEntityMention': {   'req_args': ['id'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEntityMentions': {   'req_args': ['sent', []],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEvent': {   'req_args': ['id'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEventMention': {   'req_args': ['id'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getEventMentions': {   'req_args': ['sent', []],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getKeySetEntities': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getPrefix': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getRelation': {   'req_args': ['id'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getRelationMention': {   'req_args': ['id'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getRelationMentions': {   'req_args': ['sent', []],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getSentence': {   'req_args': ['index'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getSentenceCount': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getSentences': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getToken': {   'req_args': ['i'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.getTokenCount': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.isApposition': {   'req_args': ['left', 'right'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.isChunkHead': {   'req_args': ['pos'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.makeCharSeq': {   'req_args': ['startToken', 'endToken'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.matchCharSeqs': {   'req_args': ['filePrefix'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.parseDocument': {   'req_args': [   'prefix',
                                                     'usePredictedBoundaries',
                                                     [   'prefix',
                                                         'usePredictedBoundaries',
                                                         'AceVersion']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.sameChunk': {   'req_args': ['left', 'right'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.setPrefix': {   'req_args': ['p'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.setSentences': {   'req_args': ['sentences'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.setSource': {   'req_args': ['p'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDocument.toXml': {   'req_args': ['offset'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDocument.java'},
    'AceDomReader.main': {   'req_args': ['argv'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDomReader.java'},
    'AceDomReader.parseDocument': {   'req_args': ['f'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceDomReader.java'},
    'AceElement': {   'req_args': ['id'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceElement.java'},
    'AceElement.appendOffset': {   'req_args': ['builder', 'offset'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceElement.java'},
    'AceElement.getId': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceElement.java'},
    'AceEntity': {   'req_args': ['id', 'type', 'subtype', 'cls'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.addMention': {   'req_args': ['m'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.getClasss': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.getMentions': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.getSubtype': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.getType': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.setClass': {   'req_args': ['s'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.setSubtype': {   'req_args': ['s'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.setType': {   'req_args': ['s'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntity.toXml': {   'req_args': ['offset'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntity.java'},
    'AceEntityMention': {   'req_args': [   'id',
                                            'type',
                                            'ldctype',
                                            'extent',
                                            'head'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.addEventMention': {   'req_args': ['rm'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.addRelationMention': {   'req_args': ['rm'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.after': {   'req_args': ['em'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.before': {   'req_args': ['em'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.detectHeadToken': {   'req_args': ['doc'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getEventMentions': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getExtent': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getHead': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getHeadTokenPosition': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getLdctype': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getMention': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getParent': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getRelationMentions': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.getType': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.setLdctype': {   'req_args': ['s'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.setParent': {   'req_args': ['e'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.setType': {   'req_args': ['s'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEntityMention.toXml': {   'req_args': ['offset'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEntityMention.java'},
    'AceEvent': {   'req_args': [   'id',
                                    'type',
                                    'subtype',
                                    'modality',
                                    'polarity',
                                    'genericity',
                                    'tense'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.addMention': {   'req_args': ['m'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getGenericity': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getMention': {   'req_args': ['which'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getMentionCount': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getModality': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getSubtype': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getTense': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getType': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.getmPolarity': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setGenericity': {   'req_args': ['genericity'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setModality': {   'req_args': ['modality'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setSubtype': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setTense': {   'req_args': ['tense'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setType': {   'req_args': ['s'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEvent.setmPolarity': {   'req_args': ['mPolarity'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEvent.java'},
    'AceEventMention': {   'req_args': ['id', 'extent', 'anchor'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.addArg': {   'req_args': ['em', 'role'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getAnchor': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getArg': {   'req_args': ['role'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getArgs': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getMaxTokenEnd': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getMinTokenStart': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getParent': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.getRoles': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.setAnchor': {   'req_args': ['anchor'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.setParent': {   'req_args': ['e'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMention.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMention.java'},
    'AceEventMentionArgument': {   'req_args': ['role', 'content'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceEventMentionArgument.java'},
    'AceMention': {   'req_args': ['id', 'extent'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMention.java'},
    'AceMention.getExtent': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMention.java'},
    'AceMention.toXml': {   'req_args': ['offset'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMention.java'},
    'AceMentionArgument': {   'req_args': ['role', 'content', 'mentionType'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMentionArgument.java'},
    'AceMentionArgument.getContent': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMentionArgument.java'},
    'AceMentionArgument.getRole': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMentionArgument.java'},
    'AceMentionArgument.toXml': {   'req_args': ['offset'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMentionArgument.java'},
    'AceMentionArgument.toXmlShort': {   'req_args': ['offset'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceMentionArgument.java'},
    'AceReader': {   'req_args': [   ['processor', 'preprocess'],
                                     ['processor', 'preprocess', 'version']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\AceReader.java'},
    'AceReader.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\AceReader.java'},
    'AceReader.read': {   'req_args': ['path'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\AceReader.java'},
    'AceRelation': {   'req_args': [   'id',
                                       'type',
                                       'subtype',
                                       'modality',
                                       'tense'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.addMention': {   'req_args': ['m'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.getMention': {   'req_args': ['which'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.getMentionCount': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.getSubtype': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.getType': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.setSubtype': {   'req_args': ['s'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.setType': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelation.toXml': {   'req_args': ['offset'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelation.java'},
    'AceRelationMention': {   'req_args': ['id', 'extent', 'lc'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getArg': {   'req_args': ['which'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getArgs': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getFirstArg': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getLastArg': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getLexicalCondition': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getMaxTokenEnd': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getMinTokenStart': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getParent': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.getSentence': {   'req_args': ['doc'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.setArg': {   'req_args': ['which', 'em', 'role'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.setParent': {   'req_args': ['e'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMention.toXml': {   'req_args': ['offset'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMention.java'},
    'AceRelationMentionArgument': {   'req_args': ['role', 'content'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceRelationMentionArgument.java'},
    'AceSentenceSegmenter.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceSentenceSegmenter.java'},
    'AceSentenceSegmenter.tokenizeAndSegmentSentences': {   'req_args': [   'filenamePrefix'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceSentenceSegmenter.java'},
    'AceSentenceSegmenter.wordTokenToAceToken': {   'req_args': [   'wordToken',
                                                                    'sentence'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceSentenceSegmenter.java'},
    'AceToken': {   'req_args': [   'word',
                                    'lemma',
                                    'pos',
                                    'chunk',
                                    'nerc',
                                    'start',
                                    'end',
                                    'sentence'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.adjustPhrasePositions': {   'req_args': [   'offsetToSubtract',
                                                          'word'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.display': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.exists': {   'req_args': ['dict', 'elem'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getByteEnd': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getByteOffset': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getByteStart': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getCase': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getChunk': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getLemma': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getLiteral': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getMassiBbn': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getMassiClass': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getMassiWnss': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getNerc': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getPos': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getRawByteEnd': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getRawByteOffset': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getRawByteStart': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getSentence': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getSuffixes': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.getWord': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.isFirstName': {   'req_args': ['lower'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.isLastName': {   'req_args': ['lower'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.isLocation': {   'req_args': ['lower'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.isSgml': {   'req_args': ['s'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.isTriggerWord': {   'req_args': ['lower'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.loadGazetteers': {   'req_args': ['dataPath'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.loadProximityClasses': {   'req_args': ['proxFileName'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.removeSpaces': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.setMassiBbn': {   'req_args': ['i'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.setMassiClass': {   'req_args': ['i'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.setMassiWnss': {   'req_args': ['i'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AceToken.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\AceToken.java'},
    'AcronymMatcher': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AcronymMatcher.getMainStrs': {   'req_args': ['tokens'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AcronymMatcher.isAcronym': {   'req_args': [   'str',
                                                    'tokens',
                                                    ['str', 'tokens'],
                                                    ['chunk1', 'chunk2'],
                                                    ['chunk1', 'chunk2']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AcronymMatcher.isAcronymImpl': {   'req_args': ['str', 'tokens'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AcronymMatcher.isFancyAcronym': {   'req_args': ['chunk1', 'chunk2'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AcronymMatcher.isFancyAcronymImpl': {   'req_args': ['str', 'tokens'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\AcronymMatcher.java'},
    'AdaptedGaussianPriorObjectiveFunction': {   'req_args': [   'dataset',
                                                                 'prior',
                                                                 'weights'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\AdaptedGaussianPriorObjectiveFunction.java'},
    'AdaptedGaussianPriorObjectiveFunction.to1D': {   'req_args': ['x2'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\AdaptedGaussianPriorObjectiveFunction.java'},
    'AddDep': {   'req_args': [   'govNodeName',
                                  'relation',
                                  'newNodePrototype',
                                  [   'govNodeName',
                                      'relation',
                                      'newNodePrototype',
                                      'weight']],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.cheapWordToString': {   'req_args': ['node'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.createEngAddDep': {   'req_args': [   'govNodeName',
                                                  'engRelation',
                                                  'newNode'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.evaluate': {   'req_args': ['sg', 'sm'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.fromCheapString': {   'req_args': ['rawArg'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.nullShield': {   'req_args': ['str'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddDep.toEditString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddDep.java'},
    'AddEdge': {   'req_args': [   'govName',
                                   'depName',
                                   'relation',
                                   [   'govName',
                                       'depName',
                                       'relation',
                                       'weight']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddEdge.java'},
    'AddEdge.createEngAddEdge': {   'req_args': [   'govName',
                                                    'depName',
                                                    'engRelnName',
                                                    [   'govName',
                                                        'depName',
                                                        'engRelnName',
                                                        'weight']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddEdge.java'},
    'AddEdge.evaluate': {   'req_args': ['sg', 'sm'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddEdge.java'},
    'AddEdge.toEditString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddEdge.java'},
    'AddMorphoAnnotations.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\AddMorphoAnnotations.java'},
    'AddNode': {   'req_args': ['nodeString', 'nodeName'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddNode.java'},
    'AddNode.createAddNode': {   'req_args': [   'nodeString',
                                                 'nodeName',
                                                 ['node', 'nodeName']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddNode.java'},
    'AddNode.evaluate': {   'req_args': ['sg', 'sm'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddNode.java'},
    'AddNode.toEditString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\AddNode.java'},
    'AddTaggerToParser.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\AddTaggerToParser.java'},
    'AdjoinNode': {   'req_args': ['t', 'p', ['name', 't', 'p']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinNode.java'},
    'AdjoinNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinNode.java'},
    'AdjoinNode.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinNode.java'},
    'AdjoinToFootNode': {   'req_args': ['t', 'p'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinToFootNode.java'},
    'AdjoinToFootNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinToFootNode.java'},
    'AdjoinToHeadNode': {   'req_args': ['t', 'p'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinToHeadNode.java'},
    'AdjoinToHeadNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AdjoinToHeadNode.java'},
    'AffixDictionary': {   'req_args': ['affixFilename'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\AffixDictionary.java'},
    'AffixDictionary.getInDict': {   'req_args': ['a1'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\AffixDictionary.java'},
    'AliasMatch': {   'req_args': [[]],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\AliasMatch.java'},
    'Alignment': {   'req_args': [   'longForm',
                                     'shortForm',
                                     'pointers',
                                     ['reader'],
                                     ['map', 'score', 'justification']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'Alignment.equals': {   'req_args': ['o', ['o']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'Alignment.getJustification': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\Alignment.java'},
    'Alignment.getMap': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\Alignment.java'},
    'Alignment.getScore': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\Alignment.java'},
    'Alignment.hashCode': {   'req_args': [[]],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'Alignment.makeFromIndexArray': {   'req_args': [   'txtGraph',
                                                        'hypGraph',
                                                        'indexes',
                                                        'score',
                                                        'justification',
                                                        [   'txtGraph',
                                                            'hypGraph',
                                                            'indexes'],
                                                        [   'txtGraph',
                                                            'hypGraph',
                                                            'indexes',
                                                            'score']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\Alignment.java'},
    'Alignment.print': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'Alignment.serialize': {   'req_args': ['writer'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'Alignment.toString': {   'req_args': [['prefix'], [], ['format']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Alignment.java'},
    'AmbiguityClass': {   'req_args': ['word', 'single', 'dict', 'ttags'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClass.java'},
    'AmbiguityClass.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClass.java'},
    'AmbiguityClass.getWord': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClass.java'},
    'AmbiguityClass.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClass.java'},
    'AmbiguityClass.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClass.java'},
    'AmbiguityClasses': {   'req_args': ['ttags'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\AmbiguityClasses.java'},
    'Americanize': {   'req_args': [['flags']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Americanize.java'},
    'Americanize.americanize': {   'req_args': [   'str',
                                                   ['str', 'capitalizeTimex']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Americanize.java'},
    'Americanize.apply': {   'req_args': ['w'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Americanize.java'},
    'Americanize.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Americanize.java'},
    'Americanize.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Americanize.java'},
    'AmericanizeFunction.apply': {   'req_args': ['input'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\AmericanizeFunction.java'},
    'AnCoraPOSStats': {   'req_args': ['fileList', 'outputPath'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraPOSStats.java'},
    'AnCoraPOSStats.getUnigramTagger': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraPOSStats.java'},
    'AnCoraPOSStats.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraPOSStats.java'},
    'AnCoraPOSStats.process': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraPOSStats.java'},
    'AnCoraProcessor': {   'req_args': ['inputFiles', 'options'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraProcessor.java'},
    'AnCoraProcessor.convertTreeTagsToUD': {   'req_args': ['tree'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraProcessor.java'},
    'AnCoraProcessor.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraProcessor.java'},
    'AnCoraProcessor.process': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\AnCoraProcessor.java'},
    'AnCoraPronounDisambiguator.disambiguatePersonalPronoun': {   'req_args': [   'strippedVerb',
                                                                                  'pronounIdx',
                                                                                  'clauseYield'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\AnCoraPronounDisambiguator.java'},
    'AnCoraPronounDisambiguator.isAmbiguous': {   'req_args': ['pronoun'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\AnCoraPronounDisambiguator.java'},
    'AnnotatedTextReader.parseColumnFile': {   'req_args': [   'reader',
                                                               'categoriesAllowed',
                                                               'setClassForTheseLabels',
                                                               'setGoldClass',
                                                               'sentIDprefix'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\AnnotatedTextReader.java'},
    'AnnotatedTextReader.parseFile': {   'req_args': [   'reader',
                                                         'categoriesAllowed',
                                                         'setClassForTheseLabels',
                                                         'setGoldClass',
                                                         'sentIDprefix'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\AnnotatedTextReader.java'},
    'Annotation': {   'req_args': ['map', ['text'], ['sentences'], []],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\Annotation.java'},
    'Annotation.copy': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\Annotation.java'},
    'Annotation.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\Annotation.java'},
    'AnnotationIterator': {   'req_args': ['filename', ['filename', 'limit']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.close': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.getDocCnt': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.hasNext': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.next': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.readJsonDocument': {   'req_args': ['str'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationIterator.readNextDocument': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationIterator.java'},
    'AnnotationLookup': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\AnnotationLookup.java'},
    'AnnotationLookup.getValueType': {   'req_args': ['key'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\AnnotationLookup.java'},
    'AnnotationLookup.toCoreKey': {   'req_args': ['stringKey'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\AnnotationLookup.java'},
    'AnnotationOutputter.getOptions': {   'req_args': ['properties'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationOutputter.java'},
    'AnnotationOutputter.print': {   'req_args': [   'doc',
                                                     'target',
                                                     'options',
                                                     ['annotation', 'os'],
                                                     [   'annotation',
                                                         'os',
                                                         'pipeline'],
                                                     ['ann', 'options'],
                                                     ['ann'],
                                                     ['ann', 'pipeline']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationOutputter.java'},
    'AnnotationPipeline': {   'req_args': ['annotators', []],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.addAnnotator': {   'req_args': ['annotator'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.annotate': {   'req_args': [   'annotation',
                                                       ['annotations'],
                                                       [   'annotations',
                                                           'callback'],
                                                       [   'annotations',
                                                           'numThreads'],
                                                       [   'annotations',
                                                           'numThreads',
                                                           'callback']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationPipeline.timingInformation': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationPipeline.java'},
    'AnnotationSerializer.read': {   'req_args': ['is'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationSerializer.java'},
    'AnnotationSerializer.readCoreDocument': {   'req_args': ['is'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationSerializer.java'},
    'AnnotationSerializer.write': {   'req_args': ['corpus', 'os'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationSerializer.java'},
    'AnnotationSerializer.writeCoreDocument': {   'req_args': [   'document',
                                                                  'os'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotationSerializer.java'},
    'AnnotationUtils': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addEntityMention': {   'req_args': ['sentence', 'arg'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addEntityMentions': {   'req_args': ['sentence', 'args'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addEventMention': {   'req_args': ['sentence', 'arg'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addEventMentions': {   'req_args': ['sentence', 'args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addRelationMention': {   'req_args': ['sentence', 'arg'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addRelationMentions': {   'req_args': ['sentence', 'args'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addSentence': {   'req_args': ['dataset', 'sentence'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.addSentences': {   'req_args': ['dataset', 'sentences'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.createDataset': {   'req_args': ['sentences'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.datasetToString': {   'req_args': ['dataset'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.deepMentionCopy': {   'req_args': ['dataset'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.entityMentionsToCoreLabels': {   'req_args': [   'dataset',
                                                                      'annotationsToSkip',
                                                                      'useSubTypes',
                                                                      'useBIO'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.excelify': {   'req_args': ['s'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getAllRelations': {   'req_args': [   'factory',
                                                           'sentence',
                                                           'createUnrelatedRelations'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getAllUnrelatedRelations': {   'req_args': [   'factory',
                                                                    'sentence',
                                                                    'checkExisting'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getEntityMentions': {   'req_args': ['sent'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getEventMentions': {   'req_args': ['sent'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getRelation': {   'req_args': [   'factory',
                                                       'sentence',
                                                       'args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getRelationMentions': {   'req_args': ['sent'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getRelations': {   'req_args': [   'factory',
                                                        'sentence',
                                                        'args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getSentence': {   'req_args': ['dataset', 'i'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.getTextContent': {   'req_args': ['sent', 'span'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.prettify': {   'req_args': ['s'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.readSentencesFromFile': {   'req_args': ['path'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.sentenceCount': {   'req_args': ['dataset'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.sentenceDeepMentionCopy': {   'req_args': ['sentence'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.sentenceEntityMentionsToCoreLabels': {   'req_args': [   'sentence',
                                                                              'addAnswerAnnotation',
                                                                              'annotationsToSkip',
                                                                              'mentionTypesToUse',
                                                                              'useSubTypes',
                                                                              'useBIO'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.sentenceToString': {   'req_args': ['sent'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.shuffleSentences': {   'req_args': ['dataset'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.tokensAndNELabelsToString': {   'req_args': ['sentence'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.tokensToString': {   'req_args': ['tokens'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.updateOffsets': {   'req_args': ['tokens', 'offset'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotationUtils.updateOffsetsInCoreLabels': {   'req_args': [   'tokens',
                                                                     'offset'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\AnnotationUtils.java'},
    'AnnotatorImplementations.cdcTokenizer': {   'req_args': ['properties'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.cleanXML': {   'req_args': ['properties'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.columnData': {   'req_args': ['properties'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.coref': {   'req_args': ['properties'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.corefMention': {   'req_args': ['properties'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.custom': {   'req_args': [   'properties',
                                                           'property'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.dcoref': {   'req_args': ['properties'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.dependencies': {   'req_args': ['properties'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.docDate': {   'req_args': ['properties'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.entityMentions': {   'req_args': [   'properties',
                                                                   'name'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.gender': {   'req_args': ['properties', 'name'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.kbp': {   'req_args': ['properties'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.link': {   'req_args': ['properties'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.morpha': {   'req_args': [   'properties',
                                                           'verbose'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.multiWordToken': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.natlog': {   'req_args': ['properties'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.ner': {   'req_args': ['properties'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.openie': {   'req_args': ['properties'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.parse': {   'req_args': ['properties'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.posTagger': {   'req_args': ['properties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.quote': {   'req_args': ['properties'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.quoteattribution': {   'req_args': ['properties'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.relations': {   'req_args': ['properties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.sentiment': {   'req_args': [   'properties',
                                                              'name'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.tokenizer': {   'req_args': ['properties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.tokensRegexNER': {   'req_args': [   'properties',
                                                                   'name'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.tokensregex': {   'req_args': [   'properties',
                                                                'name'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.trueCase': {   'req_args': ['properties'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.udfeats': {   'req_args': ['properties'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorImplementations.wordToSentences': {   'req_args': ['properties'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorImplementations.java'},
    'AnnotatorPool': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorPool.java'},
    'AnnotatorPool.clear': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorPool.java'},
    'AnnotatorPool.get': {   'req_args': ['name'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorPool.java'},
    'AnnotatorPool.register': {   'req_args': ['name', 'props', 'annotator'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\AnnotatorPool.java'},
    'ApplyDepPatterns': {   'req_args': [   'sents',
                                            'sentids',
                                            'patterns',
                                            'label',
                                            'removeStopWordsFromSelectedPhrases',
                                            'removePhrasesWithStopWords',
                                            'cv'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ApplyDepPatterns.java'},
    'ApplyDepPatterns.call': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ApplyDepPatterns.java'},
    'ApplyPatterns': {   'req_args': [   'sents',
                                         'sentids',
                                         'patterns',
                                         'label',
                                         'removeStopWordsFromSelectedPhrases',
                                         'removePhrasesWithStopWords',
                                         'cv'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ApplyPatterns.java'},
    'ApplyPatterns.call': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ApplyPatterns.java'},
    'ApplyPatternsMulti': {   'req_args': [   'sents',
                                              'sentids',
                                              'patterns',
                                              'label',
                                              'removeStopWordsFromSelectedPhrases',
                                              'removePhrasesWithStopWords',
                                              'cv'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ApplyPatternsMulti.java'},
    'ApplyPatternsMulti.call': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ApplyPatternsMulti.java'},
    'ApproxMatch': {   'req_args': [   [   'matched',
                                           'value',
                                           'begin',
                                           'end',
                                           'cost'],
                                       [   'matched',
                                           'value',
                                           'begin',
                                           'end',
                                           'multimatches',
                                           'cost'],
                                       [   'matched',
                                           'value',
                                           'begin',
                                           'end',
                                           'multimatches',
                                           'cost',
                                           'alignments']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ApproxMatch.equals': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ApproxMatch.getAlignments': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ApproxMatch.getCost': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ApproxMatch.hashCode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ApproxMatch.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ApproxMatch.java'},
    'ArabicDocument': {   'req_args': [   'text',
                                          ['ann'],
                                          ['proto'],
                                          ['props', 'text']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ArabicDocument.java'},
    'ArabicDocument.coref': {   'req_args': ['props'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ArabicDocument.java'},
    'ArabicDocumentReaderAndWriter': {   'req_args': [   'hasSegMarkers',
                                                         [   'hasSegMarkers',
                                                             'tokFactory'],
                                                         [   'hasSegMarkers',
                                                             'hasTags',
                                                             'tokFactory'],
                                                         [   'hasSegMarkers',
                                                             'hasTags',
                                                             'hasDomainLabels',
                                                             'domain',
                                                             'tokFactory'],
                                                         [   'hasSegMarkers',
                                                             'hasTags',
                                                             'hasDomainLabels',
                                                             'domain',
                                                             'stripRewrites',
                                                             'tokFactory']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicDocumentReaderAndWriter.java'},
    'ArabicDocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicDocumentReaderAndWriter.java'},
    'ArabicDocumentReaderAndWriter.init': {   'req_args': ['flags'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicDocumentReaderAndWriter.java'},
    'ArabicDocumentReaderAndWriter.main': {   'req_args': ['args'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicDocumentReaderAndWriter.java'},
    'ArabicDocumentReaderAndWriter.printAnswers': {   'req_args': ['doc', 'pw'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicDocumentReaderAndWriter.java'},
    'ArabicHeadFinder': {   'req_args': [   ['tagSet'],
                                            ['tagSet'],
                                            ['tlp'],
                                            ['tlp', 'tagSet']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicHeadFinder.java'},
    'ArabicLexer': {   'req_args': ['r', 'tf', 'props', ['in']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.next': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yyatEOF': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yybegin': {   'req_args': ['newState'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yycharat': {   'req_args': ['position'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yyclose': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yylength': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yypushback': {   'req_args': ['number'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yyreset': {   'req_args': ['reader'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yystate': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicLexer.yytext': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicLexer.java'},
    'ArabicMorphoFeatureSpecification.getValues': {   'req_args': ['feat'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicMorphoFeatureSpecification.java'},
    'ArabicMorphoFeatureSpecification.main': {   'req_args': ['args'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicMorphoFeatureSpecification.java'},
    'ArabicMorphoFeatureSpecification.strToFeatures': {   'req_args': ['spec'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicMorphoFeatureSpecification.java'},
    'ArabicSegmenter': {   'req_args': ['props', ['other']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.finishTraining': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.getSegmenter': {   'req_args': ['options'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.initializeTraining': {   'req_args': ['numTrees'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.loadSegmenter': {   'req_args': [   'filename',
                                                         'p',
                                                         ['filename']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.newInstance': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.process': {   'req_args': ['nextInput'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.segment': {   'req_args': ['line', ['br', 'pwOut']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.segmentString': {   'req_args': ['line'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.segmentStringToTokenList': {   'req_args': ['line'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.serializeSegmenter': {   'req_args': ['filename'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenter.train': {   'req_args': [   'trees',
                                                 ['tree'],
                                                 ['sentence'],
                                                 []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenter.java'},
    'ArabicSegmenterAnnotator': {   'req_args': [   ['verbose'],
                                                    ['segLoc', 'verbose'],
                                                    ['name', 'props']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ArabicSegmenterAnnotator.java'},
    'ArabicSegmenterAnnotator.annotate': {   'req_args': ['annotation'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ArabicSegmenterAnnotator.java'},
    'ArabicSegmenterAnnotator.requirementsSatisfied': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ArabicSegmenterAnnotator.java'},
    'ArabicSegmenterAnnotator.requires': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ArabicSegmenterAnnotator.java'},
    'ArabicSegmenterFeatureFactory.getCliqueFeatures': {   'req_args': [   'cInfo',
                                                                           'loc',
                                                                           'clique'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenterFeatureFactory.java'},
    'ArabicSegmenterFeatureFactory.init': {   'req_args': ['flags'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicSegmenterFeatureFactory.java'},
    'ArabicSentence': {   'req_args': ['text', ['tokens'], ['proto']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ArabicSentence.java'},
    'ArabicTokenizer': {   'req_args': ['r', 'tf', 'lexerProperties'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicTokenizer.java'},
    'ArabicTokenizer.atbFactory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicTokenizer.java'},
    'ArabicTokenizer.factory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicTokenizer.java'},
    'ArabicTokenizer.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicTokenizer.java'},
    'ArabicTokenizer.newArabicTokenizer': {   'req_args': [   'r',
                                                              'lexerProperties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\ArabicTokenizer.java'},
    'ArabicTreeNormalizer': {   'req_args': [   'retainNPTmp',
                                                'markPRDverb',
                                                'changeNoLabels',
                                                'retainNPSbj',
                                                'retainPPClr',
                                                [   'retainNPTmp',
                                                    'markPRDverb',
                                                    'changeNoLabels'],
                                                ['retainNPTmp', 'markPRDverb'],
                                                ['retainNPTmp'],
                                                []],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreeNormalizer.java'},
    'ArabicTreeNormalizer.normalizeNonterminal': {   'req_args': ['category'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreeNormalizer.java'},
    'ArabicTreeNormalizer.normalizeWholeTree': {   'req_args': ['tree', 'tf'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreeNormalizer.java'},
    'ArabicTreeReaderFactory': {   'req_args': [   [   'retainNPTmp',
                                                       'retainPRD',
                                                       'changeNoLabels',
                                                       'filterX',
                                                       'retainNPSbj',
                                                       'noNormalization',
                                                       'retainPPClr']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreeReaderFactory.java'},
    'ArabicTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreeReaderFactory.java'},
    'ArabicTreebankLanguagePack.evalBIgnoredPunctuationTags': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.morphFeatureSpec': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.toString': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.treeReaderFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankLanguagePack.java'},
    'ArabicTreebankParserParams': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.collinizer': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.diskTreebank': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.display': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.lex': {   'req_args': [   'op',
                                                          'wordIndex',
                                                          'tagIndex'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.subcategoryStripper': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicTreebankParserParams.java'},
    'ArabicTreebankTokenizer': {   'req_args': ['r'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankTokenizer.java'},
    'ArabicTreebankTokenizer.getNext': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankTokenizer.java'},
    'ArabicTreebankTokenizer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicTreebankTokenizer.java'},
    'ArabicUnknownWordModel': {   'req_args': [   'op',
                                                  'lex',
                                                  'wordIndex',
                                                  'tagIndex',
                                                  'unSeenCounter',
                                                  [   'op',
                                                      'lex',
                                                      'wordIndex',
                                                      'tagIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModel.java'},
    'ArabicUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModel.java'},
    'ArabicUnknownWordModel.getSignatureIndex': {   'req_args': [   'index',
                                                                    'sentencePosition',
                                                                    'word'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModel.java'},
    'ArabicUnknownWordModel.getUnknownLevel': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModel.java'},
    'ArabicUnknownWordModel.score': {   'req_args': [   'iTW',
                                                        'loc',
                                                        'c_Tseen',
                                                        'total',
                                                        'smooth',
                                                        'word'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModel.java'},
    'ArabicUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModelTrainer.java'},
    'ArabicUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                            'lex',
                                                                            'wordIndex',
                                                                            'tagIndex',
                                                                            'totalTrees'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModelTrainer.java'},
    'ArabicUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                               'loc',
                                                               'weight'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordModelTrainer.java'},
    'ArabicUnknownWordSignatures': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ArabicUnknownWordSignatures.java'},
    'ArabicUtils.getArabicIBMNormalizerMap': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicUtils.java'},
    'ArabicUtils.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicUtils.java'},
    'ArabicUtils.normalize': {   'req_args': ['in'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicUtils.java'},
    'ArabicUtils.presToLogicalMap': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\arabic\\ArabicUtils.java'},
    'ArabicVerbStemBank': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicVerbStemBank.debugPrint': {   'req_args': ['pw'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicVerbStemBank.getInstance': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicVerbStemBank.getStem': {   'req_args': ['word'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicVerbStemBank.load': {   'req_args': ['filename'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicVerbStemBank.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicVerbStemBank.java'},
    'ArabicWordLists': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArabicWordLists.getDimirMunfasala': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArabicWordLists.getDimirMutasala': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArabicWordLists.getInnaSisters': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArabicWordLists.getKanSisters': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArabicWordLists.getTemporalNouns': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\ArabicWordLists.java'},
    'ArcStandard': {   'req_args': ['tlp', 'labels', 'verbose'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.apply': {   'req_args': ['c', 't'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.canApply': {   'req_args': ['c', 't'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.getOracle': {   'req_args': ['c', 'dTree'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.initialConfiguration': {   'req_args': ['s'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.isOracle': {   'req_args': ['c', 't', 'dTree'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArcStandard.isTerminal': {   'req_args': ['c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ArcStandard.java'},
    'ArgUtils': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ArgUtils.java'},
    'ArgUtils.getTreebankDescription': {   'req_args': [   'args',
                                                           'argIndex',
                                                           'flag'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ArgUtils.java'},
    'ArgUtils.getWeightedTreebankDescription': {   'req_args': [   'args',
                                                                   'argIndex',
                                                                   'flag'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ArgUtils.java'},
    'ArgUtils.numSubArgs': {   'req_args': ['args', 'index'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ArgUtils.java'},
    'ArgUtils.printArgs': {   'req_args': ['args', 'ps'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ArgUtils.java'},
    'ArrayCoreMap': {   'req_args': [['capacity'], ['other'], ['other']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.compact': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.containsKey': {   'req_args': ['key'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.equals': {   'req_args': ['obj'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.get': {   'req_args': ['key'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.keySet': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.keySetNotNull': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.prettyLog': {   'req_args': ['channels', 'description'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.remove': {   'req_args': ['key'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.set': {   'req_args': ['key', 'value'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.setCapacity': {   'req_args': ['newSize'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.size': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.toShortString': {   'req_args': [   'what',
                                                      ['separator', 'what']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.toShorterString': {   'req_args': ['what'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayCoreMap.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayCoreMap.java'},
    'ArrayHeap': {   'req_args': ['cmp', ['cmp', 'initCapacity']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.add': {   'req_args': ['o'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.asList': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.clear': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.decreaseKey': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.dump': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.extractMin': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.isEmpty': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.iterator': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.min': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.size': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayHeap.verify': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayHeap.java'},
    'ArrayMap': {   'req_args': [['capacity'], ['m'], ['keys', 'values']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.clear': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.entrySet': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.get': {   'req_args': ['key'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.isEmpty': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.newArrayMap': {   'req_args': [['capacity']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.put': {   'req_args': ['key', 'val'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.remove': {   'req_args': ['key'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMap.size': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayMap.java'},
    'ArrayMath': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.L1Norm': {   'req_args': ['a'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.L1normalize': {   'req_args': ['a'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.L2Norm': {   'req_args': ['a', ['a']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.L2normalize': {   'req_args': ['a', ['a']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.add': {   'req_args': ['a', 'c', ['a', 'c']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.addInPlace': {   'req_args': [   'a',
                                                'b',
                                                ['a', 'b'],
                                                ['m1', 'm2']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.addMultInPlace': {   'req_args': ['a', 'b', 'c'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.addMultInto': {   'req_args': ['a', 'b', 'c', 'd'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.argmax': {   'req_args': ['a', ['a'], ['a']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.argmax_tieLast': {   'req_args': ['a'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.argmin': {   'req_args': ['a', ['a'], ['a']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.assertFinite': {   'req_args': ['vector', 'vectorName'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.average': {   'req_args': ['a'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.box': {   'req_args': ['assignment', ['assignment']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.castToInt': {   'req_args': ['doubleCounts'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.contains': {   'req_args': ['a', 'i'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.containsInSubarray': {   'req_args': ['a', 'begin', 'end', 'i'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countCloseToZero': {   'req_args': ['v', 'epsilon'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countInfinite': {   'req_args': ['v'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countNaN': {   'req_args': ['v'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countNegative': {   'req_args': ['v'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countNonZero': {   'req_args': ['v'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.countPositive': {   'req_args': ['v'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.deepCopy': {   'req_args': ['counts'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.diag': {   'req_args': ['a'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.divideInPlace': {   'req_args': ['a', 'b'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.dotProduct': {   'req_args': ['a', 'b', ['a', 'b'], ['a', 'b']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.doubleArrayToFloatArray': {   'req_args': ['a', ['a']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.entropy': {   'req_args': ['probs'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.exp': {   'req_args': ['a'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.expInPlace': {   'req_args': ['a'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.filterInfinite': {   'req_args': ['v'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.filterNaN': {   'req_args': ['v'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.filterNaNAndInfinite': {   'req_args': ['v'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.floatArrayToDoubleArray': {   'req_args': ['a', ['a']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.hasInfinite': {   'req_args': ['a'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.hasNaN': {   'req_args': ['a', ['a']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.indexOf': {   'req_args': ['n', 'a'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.innerProduct': {   'req_args': ['a', 'b', ['a', 'b']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.iterativeAverage': {   'req_args': ['a'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.jensenShannonDivergence': {   'req_args': ['a', 'b'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.klDivergence': {   'req_args': ['from', 'to'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.load2DMatrixFromFile': {   'req_args': ['filename'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.log': {   'req_args': ['a'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.logInPlace': {   'req_args': ['a'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.logNormalize': {   'req_args': ['a'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.logSum': {   'req_args': [   'logInputs',
                                            [   'logInputs',
                                                'fromIndex',
                                                'toIndex'],
                                            [   'logInputs',
                                                'fromIndex',
                                                'afterIndex',
                                                'stride'],
                                            ['logInputs'],
                                            [   'logInputs',
                                                'fromIndex',
                                                'toIndex'],
                                            ['logInputs']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.max': {   'req_args': [   'a',
                                         ['a'],
                                         ['a'],
                                         ['vector'],
                                         ['matrix']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.mean': {   'req_args': ['a', ['a']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.median': {   'req_args': ['a'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.min': {   'req_args': ['vector', ['a'], ['vector'], ['matrix']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.multiply': {   'req_args': ['a', 'c', ['a', 'c']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.multiplyInPlace': {   'req_args': ['a', 'b', ['a', 'b']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.multiplyInto': {   'req_args': ['a', 'b', 'c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.norm': {   'req_args': ['a', ['a']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.norm_1': {   'req_args': ['a', ['a']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.norm_inf': {   'req_args': ['a', ['a']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.normalize': {   'req_args': ['a', ['a']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.numRows': {   'req_args': ['v'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseAdd': {   'req_args': ['a', 'b', ['a', 'b'], ['a', 'b']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseAddInPlace': {   'req_args': [   'to',
                                                        'from',
                                                        ['to', 'from'],
                                                        ['to', 'from'],
                                                        ['to', 'from'],
                                                        ['to', 'from']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseDivideInPlace': {   'req_args': ['a', 'b'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseMultiply': {   'req_args': [   'a',
                                                      'b',
                                                      ['a', 'b'],
                                                      ['a', 'b', 'result'],
                                                      ['a', 'b', 'result']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseScaleAdd': {   'req_args': ['a', 'b', 'bScale'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseScaleAddInPlace': {   'req_args': [   'to',
                                                             'from',
                                                             'fromScale'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseSubtract': {   'req_args': ['a', 'b', ['a', 'b']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pairwiseSubtractInPlace': {   'req_args': ['to', 'from'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pearsonCorrelation': {   'req_args': ['x', 'y'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.pow': {   'req_args': ['a', 'c', ['a', 'c']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.powInPlace': {   'req_args': ['a', 'c', ['a', 'c']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.range': {   'req_args': ['end', ['start', 'end']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.reverse': {   'req_args': ['a'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.safeMax': {   'req_args': ['v'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.safeMean': {   'req_args': ['v'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.safeMin': {   'req_args': ['v'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.safeStdev': {   'req_args': ['v'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sampleFromDistribution': {   'req_args': [   'd',
                                                            ['d', 'random'],
                                                            ['d', 'random']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sampleWithoutReplacement': {   'req_args': [   'array',
                                                              'numArgClasses',
                                                              [   'array',
                                                                  'numArgClasses',
                                                                  'rand']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.setToLogDeterministic': {   'req_args': ['a', 'i', ['a', 'i']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.shuffle': {   'req_args': ['a', ['a', 'rand']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sigLevelByApproxRand': {   'req_args': [   'A',
                                                          'B',
                                                          [   'A',
                                                              'B',
                                                              'iterations'],
                                                          ['A', 'B'],
                                                          [   'A',
                                                              'B',
                                                              'iterations'],
                                                          ['A', 'B'],
                                                          [   'A',
                                                              'B',
                                                              'iterations']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.softmax': {   'req_args': ['scales'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.standardErrorOfMean': {   'req_args': ['a'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.standardize': {   'req_args': ['a'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.stdev': {   'req_args': ['a'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sum': {   'req_args': [   'a',
                                         ['a', 'fromIndex', 'toIndex'],
                                         ['a'],
                                         ['a'],
                                         ['a']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sumSquared': {   'req_args': ['a'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.sumSquaredError': {   'req_args': ['a'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.toBinaryString': {   'req_args': ['b'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.toString': {   'req_args': [   'a',
                                              ['a', 'nf'],
                                              ['a'],
                                              ['a', 'nf'],
                                              ['a'],
                                              ['a', 'nf'],
                                              ['a'],
                                              ['a', 'nf'],
                                              ['counts'],
                                              [   'counts',
                                                  'rowLabels',
                                                  'colLabels',
                                                  'labelSize',
                                                  'cellSize',
                                                  'nf',
                                                  'printTotals'],
                                              ['counts'],
                                              [   'counts',
                                                  'cellSize',
                                                  'rowLabels',
                                                  'colLabels',
                                                  'nf',
                                                  'printTotals'],
                                              [   'counts',
                                                  'cellSize',
                                                  'rowLabels',
                                                  'colLabels',
                                                  'rowLabelSize',
                                                  'nf',
                                                  'printRowTotals',
                                                  'printColumnTotals',
                                                  'topLeft'],
                                              ['counts'],
                                              [   'counts',
                                                  'cellSize',
                                                  'rowLabels',
                                                  'colLabels',
                                                  'nf',
                                                  'printTotals']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.unbox': {   'req_args': ['list'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.unboxToInt': {   'req_args': ['list'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArrayMath.variance': {   'req_args': ['a'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\ArrayMath.java'},
    'ArraySet': {   'req_args': [['source'], ['initialSize'], ['elements']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArraySet.java'},
    'ArraySet.add': {   'req_args': ['e'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArraySet.java'},
    'ArraySet.iterator': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArraySet.java'},
    'ArraySet.size': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArraySet.java'},
    'ArrayStringFilter': {   'req_args': ['mode', 'words'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayStringFilter.java'},
    'ArrayStringFilter.equals': {   'req_args': ['other'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayStringFilter.java'},
    'ArrayStringFilter.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayStringFilter.java'},
    'ArrayStringFilter.test': {   'req_args': ['input'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayStringFilter.java'},
    'ArrayStringFilter.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayStringFilter.java'},
    'ArrayUtils': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.asImmutableSet': {   'req_args': ['a'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.asList': {   'req_args': ['array'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.asPrimitiveDoubleArray': {   'req_args': ['d'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.asPrimitiveIntArray': {   'req_args': ['d'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.asSet': {   'req_args': ['a'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.compareArrays': {   'req_args': ['first', 'second'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.compareBooleanArrays': {   'req_args': ['a1', 'a2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.concatenate': {   'req_args': ['first', 'second'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.contains': {   'req_args': ['a', 'o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.copy': {   'req_args': [   'arr',
                                           ['i'],
                                           ['i'],
                                           ['arr'],
                                           ['d'],
                                           ['d'],
                                           ['d'],
                                           ['d'],
                                           ['d'],
                                           ['d']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.deltaDecode': {   'req_args': [   'deltaEncoded',
                                                  [   'deltaEncoded',
                                                      'startIndex',
                                                      'endIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.deltaDecodeList': {   'req_args': [   'deltaEncoded',
                                                      [   'deltaEncoded',
                                                          'startIndex',
                                                          'endIndex']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.deltaEncode': {   'req_args': ['orig'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.deltaEncodeList': {   'req_args': ['orig'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.equalContents': {   'req_args': ['xs', 'ys', ['xs', 'ys']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.equals': {   'req_args': ['xs', 'ys', ['xs', 'ys']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.fill': {   'req_args': [   'd',
                                           'val',
                                           ['d', 'val'],
                                           ['d', 'val'],
                                           ['d', 'val'],
                                           ['d', 'val'],
                                           ['d', 'val']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.filter': {   'req_args': ['original', 'filter'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.flatten': {   'req_args': ['array'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.gapDecode': {   'req_args': [   'gapEncoded',
                                                [   'gapEncoded',
                                                    'startIndex',
                                                    'endIndex']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.gapDecodeList': {   'req_args': [   'gapEncoded',
                                                    [   'gapEncoded',
                                                        'startIndex',
                                                        'endIndex']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.gapEncode': {   'req_args': ['orig'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.gapEncodeList': {   'req_args': ['orig'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.getSubListIndex': {   'req_args': [   'tofind',
                                                      'tokens',
                                                      [   'tofind',
                                                          'tokens',
                                                          'matchingFunction']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.indexOf': {   'req_args': [   'array',
                                              'object',
                                              'startIndex',
                                              ['array', 'object']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.normalize': {   'req_args': ['ar'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.removeAt': {   'req_args': [   'array',
                                               'index',
                                               ['array', 'index']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.subArray': {   'req_args': [   'arr',
                                               'startindexInclusive',
                                               'endindexExclusive'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.to2D': {   'req_args': [   'array',
                                           'dim1Size',
                                           ['array', 'dim1Size', 'dim2Size']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.toDouble': {   'req_args': ['a', ['array']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.toDoubleArray': {   'req_args': ['in'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.toPrimitive': {   'req_args': [   'in',
                                                  ['in'],
                                                  ['in'],
                                                  ['in'],
                                                  ['in'],
                                                  ['in', 'valueForNull'],
                                                  ['in', 'valueForNull'],
                                                  ['in', 'valueForNull'],
                                                  ['in', 'valueForNull'],
                                                  ['in', 'valueForNull']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'ArrayUtils.toString': {   'req_args': [   'a',
                                               ['b'],
                                               ['b'],
                                               ['doubles', 'glue']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ArrayUtils.java'},
    'AtomicDouble': {   'req_args': ['initialValue', []],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.addAndGet': {   'req_args': ['delta'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.compareAndSet': {   'req_args': ['expect', 'update'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.doubleValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.floatValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.get': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.getAndAdd': {   'req_args': ['delta'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.getAndSet': {   'req_args': ['newValue'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.intValue': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.lazySet': {   'req_args': ['newValue'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.longValue': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.set': {   'req_args': ['newValue'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AtomicDouble.weakCompareAndSet': {   'req_args': ['expect', 'update'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\AtomicDouble.java'},
    'AuxiliaryTree': {   'req_args': [   'tree',
                                         'mustHaveFoot',
                                         [   'tree',
                                             'foot',
                                             'namesToNodes',
                                             'originalTreeString']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AuxiliaryTree.java'},
    'AuxiliaryTree.copy': {   'req_args': [   'matcher',
                                              'treeFactory',
                                              'labelFactory'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AuxiliaryTree.java'},
    'AuxiliaryTree.namesToNodes': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AuxiliaryTree.java'},
    'AuxiliaryTree.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\AuxiliaryTree.java'},
    'AverageDVModels.averageBinaryMatrices': {   'req_args': ['maps'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\AverageDVModels.java'},
    'AverageDVModels.averageUnaryMatrices': {   'req_args': ['maps'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\AverageDVModels.java'},
    'AverageDVModels.getBinaryMatrixNames': {   'req_args': ['maps'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\AverageDVModels.java'},
    'AverageDVModels.getUnaryMatrixNames': {   'req_args': ['maps'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\AverageDVModels.java'},
    'AverageDVModels.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\AverageDVModels.java'},
    'BZip2PipedOutputStream': {   'req_args': ['filename', ['filename', 'err']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\BZip2PipedOutputStream.java'},
    'BZip2PipedOutputStream.close': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\BZip2PipedOutputStream.java'},
    'BZip2PipedOutputStream.flush': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\BZip2PipedOutputStream.java'},
    'BZip2PipedOutputStream.write': {   'req_args': ['b'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\BZip2PipedOutputStream.java'},
    'BacktrackingAdaGradOptimizer.updateWeights': {   'req_args': [   'weights',
                                                                      'gradient',
                                                                      'logLikelihood',
                                                                      'optimizationState',
                                                                      'quiet'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\BacktrackingAdaGradOptimizer.java'},
    'BammanCorefReader.readTokenFile': {   'req_args': ['filename', 'novel'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\BammanCorefReader.java'},
    'BaseLexicon': {   'req_args': [   'wordIndex',
                                       'tagIndex',
                                       ['op', 'wordIndex', 'tagIndex']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.addAll': {   'req_args': [   'tagWords',
                                              ['taggedWords', 'weight']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.evaluateCoverage': {   'req_args': [   'trees',
                                                        'missingWords',
                                                        'missingTags',
                                                        'missingTW'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.finishTraining': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.getBaseTag': {   'req_args': ['tag', 'tlp'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.getUnknownWordModel': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.incrementTreesRead': {   'req_args': ['weight'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.initializeTraining': {   'req_args': ['numTrees'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.isKnown': {   'req_args': ['word', ['word']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.numRules': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.printLexStats': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.readData': {   'req_args': ['in'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.ruleIteratorByWord': {   'req_args': [   'word',
                                                          'loc',
                                                          [   'word',
                                                              'loc',
                                                              'featureSpec'],
                                                          [   'word',
                                                              'loc',
                                                              'featureSpec']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.score': {   'req_args': ['iTW', 'loc', 'word', 'featureSpec'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.setUnknownWordModel': {   'req_args': ['uwm'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.tagSet': {   'req_args': ['basicCategoryFunction'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.train': {   'req_args': [   'trees',
                                             ['trees', 'weight'],
                                             ['tree', 'weight'],
                                             ['sentence', 'weight'],
                                             ['tw', 'loc', 'weight'],
                                             ['trees', 'rawTrees']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.trainUnannotated': {   'req_args': ['sentence', 'weight'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.trainWithExpansion': {   'req_args': ['taggedWords'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.tune': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseLexicon.writeData': {   'req_args': ['w'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseLexicon.java'},
    'BaseModel': {   'req_args': [   'op',
                                     'transitionIndex',
                                     'knownStates',
                                     'rootStates',
                                     'rootOnlyStates',
                                     ['other']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BaseModel.java'},
    'BaseModel.findEmergencyTransition': {   'req_args': [   'state',
                                                             'constraints'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BaseModel.java'},
    'BaseModel.findHighestScoringTransitions': {   'req_args': [   'state',
                                                                   'requireLegal',
                                                                   'numTransitions',
                                                                   'constraints'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BaseModel.java'},
    'BaseUnknownWordModel': {   'req_args': [   'op',
                                                'lex',
                                                'wordIndex',
                                                'tagIndex',
                                                'unSeenCounter',
                                                'tagHash',
                                                'unknownGT',
                                                'seenEnd',
                                                [   'op',
                                                    'lex',
                                                    'wordIndex',
                                                    'tagIndex']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.addTagging': {   'req_args': ['seen', 'itw', 'count'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.getLexicon': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.getSignatureIndex': {   'req_args': [   'wordIndex',
                                                                  'sentencePosition',
                                                                  'word'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.getUnknownLevel': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.score': {   'req_args': [   'itw',
                                                      'loc',
                                                      'c_Tseen',
                                                      'total',
                                                      'smooth',
                                                      'word',
                                                      ['itw', 'word']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.scoreProbTagGivenWordSignature': {   'req_args': [   'iTW',
                                                                               'loc',
                                                                               'smooth',
                                                                               'word'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModel.unSeenCounter': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModel.java'},
    'BaseUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModelTrainer.java'},
    'BaseUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                          'lex',
                                                                          'wordIndex',
                                                                          'tagIndex',
                                                                          'totalTrees'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModelTrainer.java'},
    'BaseUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                             'loc',
                                                             'weight'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BaseUnknownWordModelTrainer.java'},
    'BaselineTopSpeakerSieve': {   'req_args': [   'doc',
                                                   'characterMap',
                                                   'pronounCorefMap',
                                                   'animacySet',
                                                   'genderList',
                                                   'familyRelations'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.doMentionToSpeaker': {   'req_args': ['doc'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getConversationalNextPrediction': {   'req_args': [   'quotes',
                                                                                   'quoteIndex',
                                                                                   'gender'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getConversationalPreviousPrediction': {   'req_args': [   'quotes',
                                                                                       'quoteIndex',
                                                                                       'gender'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getFamilyAnimateVocative': {   'req_args': [   'quotes',
                                                                            'quote_index',
                                                                            'gender',
                                                                            'topSpeakers'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getGender': {   'req_args': ['mention'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getQuoteContainingRange': {   'req_args': [   'quotes',
                                                                           'range'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.getTopSpeakers': {   'req_args': [   'closestMentionsForward',
                                                                  'closestMentionsBackward',
                                                                  'gender',
                                                                  'quote',
                                                                  'overrideGender'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.makeMentionData': {   'req_args': ['q'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.removeQuoteNames': {   'req_args': [   'topSpeakers',
                                                                    'quote'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.topSpeakerInRange': {   'req_args': ['doc'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BaselineTopSpeakerSieve.updatePredictions': {   'req_args': [   'quote',
                                                                     'speakerAndMethod'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\BaselineTopSpeakerSieve.java'},
    'BasicCategoryTagProjection': {   'req_args': ['tlp'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BasicCategoryTagProjection.java'},
    'BasicCategoryTagProjection.project': {   'req_args': ['tagStr'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BasicCategoryTagProjection.java'},
    'BasicCategoryTreeTransformer': {   'req_args': ['tlp'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BasicCategoryTreeTransformer.java'},
    'BasicCategoryTreeTransformer.apply': {   'req_args': ['tree'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BasicCategoryTreeTransformer.java'},
    'BasicCategoryTreeTransformer.transformNonterminalLabel': {   'req_args': [   'tree'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BasicCategoryTreeTransformer.java'},
    'BasicDatum': {   'req_args': [   'features',
                                      'labels',
                                      ['features', 'label'],
                                      ['features'],
                                      []],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.addLabel': {   'req_args': ['label'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.asFeatures': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.equals': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.label': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.labels': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.setLabel': {   'req_args': ['label'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.setLabels': {   'req_args': ['labels'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDatum.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDatum.java'},
    'BasicDocument': {   'req_args': [['tokenizerFactory'], ['d'], ['d']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.addLabel': {   'req_args': ['label'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.asFeatures': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.blankDocument': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.init': {   'req_args': [   'text',
                                              'title',
                                              'keepOriginalText',
                                              ['text', 'title'],
                                              ['text', 'keepOriginalText'],
                                              ['text'],
                                              [],
                                              [   'textReader',
                                                  'title',
                                                  'keepOriginalText'],
                                              ['textReader', 'title'],
                                              [   'textReader',
                                                  'keepOriginalText'],
                                              ['textReader'],
                                              [   'textFile',
                                                  'title',
                                                  'keepOriginalText'],
                                              ['textFile', 'title'],
                                              ['textFile', 'keepOriginalText'],
                                              ['textFile'],
                                              [   'textURL',
                                                  'title',
                                                  'keepOriginalText'],
                                              ['textURL', 'title'],
                                              ['textURL', 'keepOriginalText'],
                                              ['textURL'],
                                              ['words', 'title'],
                                              ['words']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.label': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.labels': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.originalText': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.presentableText': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.setLabel': {   'req_args': ['label'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.setLabels': {   'req_args': ['labels'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.setTitle': {   'req_args': ['title'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.setTokenizerFactory': {   'req_args': ['tokenizerFactory'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.title': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicDocument.tokenizerFactory': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\BasicDocument.java'},
    'BasicEntityExtractor': {   'req_args': [   'gazetteerLocation',
                                                'useSubTypes',
                                                'annotationsToSkip',
                                                'useBIO',
                                                'factory',
                                                'useNERTags'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.annotate': {   'req_args': ['doc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.getEntityTypeForTag': {   'req_args': ['tag'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.labeledSentenceToString': {   'req_args': [   'labeledSentence',
                                                                        'printNer'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.load': {   'req_args': [   'path',
                                                     'entityClassifier',
                                                     'preferDefaultGazetteer'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.makeAnnotationFromAllNERTags': {   'req_args': [   'sentence'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.makeAnnotationFromGivenNERTag': {   'req_args': [   'sentence',
                                                                              'nerTag',
                                                                              'entityType'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.makeEntityMention': {   'req_args': [   'sentence',
                                                                  'start',
                                                                  'end',
                                                                  'label',
                                                                  'entities',
                                                                  'sentCount',
                                                                  [   'sentence',
                                                                      'start',
                                                                      'end',
                                                                      'label',
                                                                      'identifier']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.makeEntityMentionIdentifier': {   'req_args': [   'sentence',
                                                                            'sentCount',
                                                                            'entId'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.postprocessSentence': {   'req_args': [   'sentence',
                                                                    'sentCount'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.runTestSet': {   'req_args': ['testSet'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.save': {   'req_args': ['path'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.saveCoNLL': {   'req_args': [   'os',
                                                          'sentences',
                                                          'alreadyBIO'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.saveCoNLLFiles': {   'req_args': [   'dir',
                                                               'dataset',
                                                               'useSubTypes',
                                                               'alreadyBIO'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.setAnnotationsToSkip': {   'req_args': [   'annotationsToSkip'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.setLoggerLevel': {   'req_args': ['level'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicEntityExtractor.train': {   'req_args': ['doc'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicEntityExtractor.java'},
    'BasicFeatureFactory.addBinaryFeature': {   'req_args': [   'features',
                                                                'featureType',
                                                                'label1',
                                                                'feature1',
                                                                'label2',
                                                                'feature2'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addBinaryFeatures': {   'req_args': [   'features',
                                                                 'name1',
                                                                 'label1',
                                                                 'feature11',
                                                                 'feature12',
                                                                 'name2',
                                                                 'label2',
                                                                 'feature21',
                                                                 'feature22'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addEdgeFeatures': {   'req_args': [   'features',
                                                               'state',
                                                               'nodeName',
                                                               'neighborName',
                                                               'node',
                                                               'neighbor'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addEdgeFeatures2': {   'req_args': [   'features',
                                                                'state',
                                                                'nodeName',
                                                                'node'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addExtraTrigramFeatures': {   'req_args': [   'features',
                                                                       's0Label',
                                                                       's1Label',
                                                                       's2Label',
                                                                       'q0Label',
                                                                       'q1Label'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addPositionFeatures': {   'req_args': [   'features',
                                                                   'state'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addSeparatorFeature': {   'req_args': [   'features',
                                                                   'featureType',
                                                                   'separator',
                                                                   [   'features',
                                                                       'featureType',
                                                                       'label',
                                                                       'feature',
                                                                       'separator'],
                                                                   [   'features',
                                                                       'featureType',
                                                                       'label',
                                                                       'feature',
                                                                       'between'],
                                                                   [   'features',
                                                                       'featureType',
                                                                       'label1',
                                                                       'feature1',
                                                                       'label2',
                                                                       'feature2',
                                                                       'between']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addSeparatorFeatures': {   'req_args': [   'features',
                                                                    'name1',
                                                                    'label1',
                                                                    'name2',
                                                                    'label2',
                                                                    'separatorBetween',
                                                                    'countBetween',
                                                                    [   'features',
                                                                        's0Label',
                                                                        's1Label',
                                                                        's0Separator',
                                                                        's1Separator']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addTrigramFeature': {   'req_args': [   'features',
                                                                 'featureType',
                                                                 'label1',
                                                                 'feature1',
                                                                 'label2',
                                                                 'feature2',
                                                                 'label3',
                                                                 'feature3'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addUnaryFeature': {   'req_args': [   'features',
                                                               'featureType',
                                                               'label',
                                                               'feature'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addUnaryQueueFeatures': {   'req_args': [   'features',
                                                                     'label',
                                                                     'wtFeature'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.addUnaryStackFeatures': {   'req_args': [   'features',
                                                                     'label',
                                                                     'conFeature',
                                                                     'wordTagFeature',
                                                                     'tagFeature',
                                                                     'wordConFeature',
                                                                     'tagConFeature'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicFeatureFactory.featurize': {   'req_args': ['state', 'features'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BasicFeatureFactory.java'},
    'BasicPipelineExample': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\examples\\BasicPipelineExample.java'},
    'BasicPipelineExample.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\examples\\BasicPipelineExample.java'},
    'BasicRelationExtractor': {   'req_args': [   'featureFac',
                                                  'createUnrelatedRelations',
                                                  'factory'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.annotate': {   'req_args': ['dataset'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.annotateMulticlass': {   'req_args': ['testDatums'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.annotateSentence': {   'req_args': ['sentence'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.load': {   'req_args': ['modelPath'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.save': {   'req_args': ['modelpath'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setCreateUnrelatedRelations': {   'req_args': ['b'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setFeatureCountThreshold': {   'req_args': ['i'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setLoggerLevel': {   'req_args': ['level'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setRelationExtractorClassifierType': {   'req_args': [   's'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setSigma': {   'req_args': ['d'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.setValidator': {   'req_args': ['lv'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.train': {   'req_args': ['sentences'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationExtractor.trainMulticlass': {   'req_args': ['trainSet'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationExtractor.java'},
    'BasicRelationFeatureFactory': {   'req_args': ['featureList'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.addFeatures': {   'req_args': [   'features',
                                                                   'rel',
                                                                   'types',
                                                                   [   'features',
                                                                       'rel',
                                                                       'types',
                                                                       'logger']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.createDatum': {   'req_args': [   'rel',
                                                                   [   'rel',
                                                                       'logger'],
                                                                   [   'rel',
                                                                       'positiveLabel']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.createTestDatum': {   'req_args': [   'rel',
                                                                       'logger'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.dependencyPath': {   'req_args': [   'edgePath',
                                                                      'node'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.dependencyPathAsList': {   'req_args': [   'edgePath',
                                                                            'node',
                                                                            'generalize'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.generalizedDependencyPath': {   'req_args': [   'edgePath',
                                                                                 'node'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.getFeature': {   'req_args': [   'rel',
                                                                  'featureType'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicRelationFeatureFactory.getFeatures': {   'req_args': [   'rel',
                                                                   'featureType'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\BasicRelationFeatureFactory.java'},
    'BasicSequenceMatchResult.copy': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.elements': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.end': {   'req_args': [['group'], ['var']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.getInterval': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.getOrder': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.group': {   'req_args': [['group'], ['var']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupCount': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupInfo': {   'req_args': [['group'], ['var']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupMatchResult': {   'req_args': [   'group',
                                                                     'index',
                                                                     [   'var',
                                                                         'index']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupMatchResults': {   'req_args': [   ['group'],
                                                                      ['var']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupNodes': {   'req_args': [['group'], ['var']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.groupValue': {   'req_args': [['group'], ['var']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.nodeMatchResult': {   'req_args': ['index'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.pattern': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.priority': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.score': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.setOrder': {   'req_args': ['order'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.start': {   'req_args': [['group'], ['var']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'BasicSequenceMatchResult.toBasicSequenceMatchResult': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\BasicSequenceMatchResult.java'},
    'Beam': {   'req_args': [['maxBeamSize'], ['maxBeamSize', 'cmp']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.add': {   'req_args': ['o'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.asSortedList': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.capacity': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.iterator': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.remove': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'Beam.size': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Beam.java'},
    'BeamBestSequenceFinder': {   'req_args': [   'beamSize',
                                                  [   'beamSize',
                                                      'exhaustiveStart'],
                                                  [   'beamSize',
                                                      'exhaustiveStart',
                                                      'recenter']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\BeamBestSequenceFinder.java'},
    'BeamBestSequenceFinder.bestSequence': {   'req_args': [   'ts',
                                                               ['ts', 'size']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\BeamBestSequenceFinder.java'},
    'BestOfTopKEval': {   'req_args': ['comparisonEval', 'countingEval'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\BestOfTopKEval.java'},
    'BestOfTopKEval.display': {   'req_args': ['verbose', ['verbose', 'pw']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\BestOfTopKEval.java'},
    'BestOfTopKEval.evaluate': {   'req_args': ['guesses', 'gold', 'pw'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\BestOfTopKEval.java'},
    'BestOfTopKEval.getEvalbF1': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\BestOfTopKEval.java'},
    'BiLexPCFGParser': {   'req_args': [   'scorer',
                                           'fscorer',
                                           'dparser',
                                           'bg',
                                           'ug',
                                           'dg',
                                           'lex',
                                           'op',
                                           'stateIndex',
                                           'wordIndex',
                                           'tagIndex',
                                           [   'scorer',
                                               'fscorer',
                                               'dparser',
                                               'bg',
                                               'ug',
                                               'dg',
                                               'lex',
                                               'op',
                                               'projection',
                                               'stateIndex',
                                               'wordIndex',
                                               'tagIndex']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getBestParse': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getBestParses': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getBestScore': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getKBestParses': {   'req_args': ['k'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getKGoodParses': {   'req_args': ['k'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.getKSampledParses': {   'req_args': ['k'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.hasParse': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiLexPCFGParser.parse': {   'req_args': ['words'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BiLexPCFGParser.java'},
    'BiasedLogConditionalObjectiveFunction': {   'req_args': [   'dataset',
                                                                 'confusionMatrix',
                                                                 [   'dataset',
                                                                     'confusionMatrix',
                                                                     'prior'],
                                                                 [   'numFeatures',
                                                                     'numClasses',
                                                                     'data',
                                                                     'labels',
                                                                     'confusionMatrix'],
                                                                 [   'numFeatures',
                                                                     'numClasses',
                                                                     'data',
                                                                     'labels',
                                                                     'confusionMatrix',
                                                                     'prior']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogConditionalObjectiveFunction.java'},
    'BiasedLogConditionalObjectiveFunction.domainDimension': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogConditionalObjectiveFunction.java'},
    'BiasedLogConditionalObjectiveFunction.setPrior': {   'req_args': ['prior'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogConditionalObjectiveFunction.java'},
    'BiasedLogConditionalObjectiveFunction.to2D': {   'req_args': ['x'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogConditionalObjectiveFunction.java'},
    'BiasedLogisticObjectiveFunction': {   'req_args': [   'numFeatures',
                                                           'data',
                                                           'labels',
                                                           [   'numFeatures',
                                                               'data',
                                                               'labels',
                                                               'prior'],
                                                           [   'numFeatures',
                                                               'data',
                                                               'labels',
                                                               'dataweights'],
                                                           [   'numFeatures',
                                                               'data',
                                                               'labels',
                                                               'prior',
                                                               'dataweights'],
                                                           [   'numFeatures',
                                                               'data',
                                                               'values',
                                                               'labels'],
                                                           [   'numFeatures',
                                                               'data',
                                                               'values',
                                                               'labels',
                                                               'prior'],
                                                           [   'numFeatures',
                                                               'data',
                                                               'values',
                                                               'labels',
                                                               'prior',
                                                               'dataweights']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogisticObjectiveFunction.java'},
    'BiasedLogisticObjectiveFunction.domainDimension': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\BiasedLogisticObjectiveFunction.java'},
    'BiesModifiedMapper': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\BiesModifiedMapper.java'},
    'BigWindowArabicSegmenterFeatureFactory.init': {   'req_args': ['flags'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\BigWindowArabicSegmenterFeatureFactory.java'},
    'BikelChineseHeadFinder': {   'req_args': [['tlp']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\BikelChineseHeadFinder.java'},
    'BinarizerAnnotator': {   'req_args': ['annotatorName', 'props'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\BinarizerAnnotator.java'},
    'BinarizerAnnotator.annotate': {   'req_args': ['annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\BinarizerAnnotator.java'},
    'BinarizerAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\BinarizerAnnotator.java'},
    'BinarizerAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\BinarizerAnnotator.java'},
    'BinarizerAnnotator.signature': {   'req_args': ['annotatorName', 'props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\BinarizerAnnotator.java'},
    'BinaryGrammar': {   'req_args': ['stateIndex'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.addRule': {   'req_args': ['br'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.isSynthetic': {   'req_args': ['state'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.iterator': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.numRules': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.readData': {   'req_args': ['in'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleIteratorByLeftChild': {   'req_args': ['state'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleIteratorByParent': {   'req_args': ['state'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleIteratorByRightChild': {   'req_args': ['state'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleListByLeftChild': {   'req_args': ['state'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleListByParent': {   'req_args': ['state'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.ruleListByRightChild': {   'req_args': ['state'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.rules': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.scoreRule': {   'req_args': ['br'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.splitRules': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.splitRulesWithLC': {   'req_args': ['state'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.splitRulesWithRC': {   'req_args': ['state'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammar.writeData': {   'req_args': ['w'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammar.java'},
    'BinaryGrammarExtractor': {   'req_args': ['op', 'index'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammarExtractor.java'},
    'BinaryGrammarExtractor.formResult': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryGrammarExtractor.java'},
    'BinaryHeadFinder': {   'req_args': [['fallbackHF']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryHeadFinder.java'},
    'BinaryHeadFinder.determineHead': {   'req_args': ['t', ['t', 'parent']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryHeadFinder.java'},
    'BinaryHeapPriorityQueue': {   'req_args': [   ['initCapacity'],
                                                   ['mapFactory'],
                                                   [   'mapFactory',
                                                       'initCapacity']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.add': {   'req_args': ['key', ['key', 'priority']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.changePriority': {   'req_args': [   'key',
                                                                  'priority'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.clear': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.contains': {   'req_args': ['key'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.decreasePriority': {   'req_args': [   'key',
                                                                    'priority'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.deepCopy': {   'req_args': ['mapFactory', []],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.getFirst': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.getObject': {   'req_args': ['key'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.getPriority': {   'req_args': [['key']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.hasNext': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.isEmpty': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.iterator': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.next': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.relaxPriority': {   'req_args': [   'key',
                                                                 'priority'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.remove': {   'req_args': [['key']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.removeFirst': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.removeLastEntry': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.size': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.toSortedList': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.toString': {   'req_args': [['maxKeysToPrint']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryHeapPriorityQueue.toVerticalString': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BinaryHeapPriorityQueue.java'},
    'BinaryRule': {   'req_args': [   'parent',
                                      'leftChild',
                                      'rightChild',
                                      [   'parent',
                                          'leftChild',
                                          'rightChild',
                                          'score'],
                                      ['s', 'index']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.compareTo': {   'req_args': ['br'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.equals': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.parent': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.score': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.toString': {   'req_args': [['index']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryRule.toStringNoScore': {   'req_args': ['index'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BinaryRule.java'},
    'BinaryTransition': {   'req_args': ['label', 'side', 'isRoot'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.apply': {   'req_args': [   'state',
                                                  ['state', 'scoreDelta']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.equals': {   'req_args': ['o'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.hashCode': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.isBinarized': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BinaryTransition.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\BinaryTransition.java'},
    'BoWExample': {   'req_args': ['w1', 'w2', 'sg'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWExample.java'},
    'BoWExample.extractFeatures': {   'req_args': ['featureSets'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWExample.java'},
    'BoWSceneGraphParser': {   'req_args': [   'model',
                                               'entityModel',
                                               'embeddings'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BoWSceneGraphParser.getTrainingExamples': {   'req_args': [   'trainingFile',
                                                                   'sampleNeg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BoWSceneGraphParser.loadImages': {   'req_args': ['filename'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BoWSceneGraphParser.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BoWSceneGraphParser.parse': {   'req_args': ['sg'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BoWSceneGraphParser.train': {   'req_args': ['trainingFile', 'modelPath'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\BoWSceneGraphParser.java'},
    'BobChrisTreeNormalizer': {   'req_args': [['tlp']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BobChrisTreeNormalizer.java'},
    'BobChrisTreeNormalizer.normalizeNonterminal': {   'req_args': ['category'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BobChrisTreeNormalizer.java'},
    'BobChrisTreeNormalizer.normalizeTerminal': {   'req_args': ['leaf'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BobChrisTreeNormalizer.java'},
    'BobChrisTreeNormalizer.normalizeWholeTree': {   'req_args': ['tree', 'tf'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BobChrisTreeNormalizer.java'},
    'BobChrisTreeNormalizer.transformTree': {   'req_args': ['tree'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\BobChrisTreeNormalizer.java'},
    'BooleanLogRecordHandler.handle': {   'req_args': ['record'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\BooleanLogRecordHandler.java'},
    'BooleanLogRecordHandler.propagateRecord': {   'req_args': ['record'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\BooleanLogRecordHandler.java'},
    'BoundaryRemover': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BoundaryRemover.java'},
    'BoundaryRemover.transformTree': {   'req_args': ['tree'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\BoundaryRemover.java'},
    'BoundedCostOrderedMap': {   'req_args': [   'costFunction',
                                                 'maxSize',
                                                 'maxCost'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.clear': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.containsKey': {   'req_args': ['key'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.containsValue': {   'req_args': ['value'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.entrySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.get': {   'req_args': ['key'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.getCost': {   'req_args': ['value'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.isEmpty': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.keySet': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.put': {   'req_args': ['key', 'value'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.putAll': {   'req_args': ['m'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.remove': {   'req_args': ['key'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.size': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.topCost': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.topKey': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.values': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedCostOrderedMap.valuesList': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\BoundedCostOrderedMap.java'},
    'BoundedPriorityQueue': {   'req_args': [   'maxSize',
                                                ['maxSize', 'comparator']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BoundedPriorityQueue.java'},
    'BoundedPriorityQueue.add': {   'req_args': ['e'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BoundedPriorityQueue.java'},
    'BoundedPriorityQueue.clear': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\BoundedPriorityQueue.java'},
    'Buckwalter': {   'req_args': [['unicodeToBuckwalter']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.apply': {   'req_args': ['in'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.buckwalterToUnicode': {   'req_args': ['in'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.suppressBuckDigitConversion': {   'req_args': ['b'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.suppressBuckPunctConversion': {   'req_args': ['b'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'Buckwalter.unicodeToBuckwalter': {   'req_args': ['in'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\Buckwalter.java'},
    'BuildBinarizedDataset': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildBinarizedDataset.extractLabels': {   'req_args': [   'spanToLabels',
                                                               'tokens',
                                                               'line'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildBinarizedDataset.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildBinarizedDataset.setPredictedLabels': {   'req_args': ['tree'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildBinarizedDataset.setSpanLabel': {   'req_args': [   'tree',
                                                              'span',
                                                              'value'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildBinarizedDataset.setUnknownLabels': {   'req_args': [   'tree',
                                                                  'defaultLabel'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\BuildBinarizedDataset.java'},
    'BuildMultiWordRules': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\BuildMultiWordRules.java'},
    'BuildMultiWordRules.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\BuildMultiWordRules.java'},
    'ByteArrayUtils.readInt': {   'req_args': ['bin'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'ByteArrayUtils.readLong': {   'req_args': ['bin'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'ByteArrayUtils.readShort': {   'req_args': ['bin'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'ByteArrayUtils.writeInt': {   'req_args': ['bout', 'val'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'ByteArrayUtils.writeLong': {   'req_args': ['bout', 'val'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'ByteArrayUtils.writeShort': {   'req_args': ['bout', 'val'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ByteArrayUtils.java'},
    'CEDict': {   'req_args': [],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CEDict.java'},
    'CEDict.path': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CEDict.java'},
    'CGMinimizer': {   'req_args': [   ['silent'],
                                       ['monitor'],
                                       ['silent', 'monitor']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CGMinimizer.java'},
    'CGMinimizer.minimize': {   'req_args': [   'function',
                                                'functionTolerance',
                                                'initial',
                                                [   'dFunction',
                                                    'functionTolerance',
                                                    'initial',
                                                    'maxIterations']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CGMinimizer.java'},
    'CGMinimizer.setIterationCallbackFunction': {   'req_args': ['func'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CGMinimizer.java'},
    'CGRunner': {   'req_args': [   'prob',
                                    'filename',
                                    ['prob', 'filename', 'priorSigmaS'],
                                    ['prob', 'filename', 'tol', 'priorSigmaS'],
                                    [   'prob',
                                        'filename',
                                        'tol',
                                        'sigmaSquareds']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\CGRunner.java'},
    'CGRunner.solveCG': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\CGRunner.java'},
    'CGRunner.solveL1': {   'req_args': ['weight'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\CGRunner.java'},
    'CGRunner.solveOWLQN2': {   'req_args': ['weight'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\CGRunner.java'},
    'CGRunner.solveQN': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\CGRunner.java'},
    'CHTBLexer': {   'req_args': ['in'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.match': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yyatEOF': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yybegin': {   'req_args': ['newState'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yycharat': {   'req_args': ['position'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yyclose': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yylength': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yylex': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yypushback': {   'req_args': ['number'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yyreset': {   'req_args': ['reader'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yystate': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBLexer.yytext': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBLexer.java'},
    'CHTBTokenizer': {   'req_args': ['r'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBTokenizer.java'},
    'CHTBTokenizer.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CHTBTokenizer.java'},
    'CMMClassifier': {   'req_args': [['props'], ['flags']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.adapt': {   'req_args': [   'filename',
                                               'trainDataset',
                                               'readerWriter',
                                               [   'featureLabels',
                                                   'trainDataset']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.classify': {   'req_args': ['document'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSeq',
                                                                       'doc',
                                                                       'sent'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getBiasedDataset': {   'req_args': [   'data',
                                                          'featureIndex',
                                                          'classIndex'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getClassifier': {   'req_args': [   'file',
                                                       ['loadPath'],
                                                       ['ois'],
                                                       ['ois', 'props'],
                                                       ['in']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getClassifierNoExceptions': {   'req_args': [   'file',
                                                                   ['loadPath'],
                                                                   ['in']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getDataset': {   'req_args': [   'data',
                                                    [   'data',
                                                        'featureIndex',
                                                        'classIndex'],
                                                    ['data', 'origDataset'],
                                                    [   'oldData',
                                                        'goodFeatures']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getDefaultClassifier': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getSequenceModel': {   'req_args': ['document'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.getTags': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.loadClassifier': {   'req_args': ['ois', 'props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.loadDefaultClassifier': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.loglikelihood': {   'req_args': ['lineInfos'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.makeDatum': {   'req_args': [   'info',
                                                   'loc',
                                                   'featureFactories'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.printProbsDocument': {   'req_args': ['document'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.retrain': {   'req_args': [   'featureLabels',
                                                 'featureIndex',
                                                 'labelIndex',
                                                 ['doc']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.scoresOf': {   'req_args': ['lineInfos', 'pos'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                             ['oos']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.train': {   'req_args': ['wordInfos', 'readerAndWriter'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.trainSemiSup': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.weight': {   'req_args': ['feature', 'label'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CMMClassifier.weights': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\CMMClassifier.java'},
    'CNFTransformers': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\CNFTransformers.java'},
    'CNFTransformers.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\CNFTransformers.java'},
    'CORSFilter': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.checkRequestType': {   'req_args': ['request'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.decorateCORSProperties': {   'req_args': [   'request',
                                                             'corsRequestType'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.destroy': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.doFilter': {   'req_args': [   'servletRequest',
                                               'servletResponse',
                                               'filterChain'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.getAllowedHttpHeaders': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.getAllowedHttpMethods': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.getAllowedOrigins': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.getExposedHeaders': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.getPreflightMaxAge': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.handleInvalidCORS': {   'req_args': [   'request',
                                                        'response',
                                                        'filterChain'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.handleNonCORS': {   'req_args': [   'request',
                                                    'response',
                                                    'filterChain'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.handlePreflightCORS': {   'req_args': [   'request',
                                                          'response',
                                                          'filterChain'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.handleSimpleCORS': {   'req_args': [   'request',
                                                       'response',
                                                       'filterChain'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.init': {   'req_args': ['filterConfig'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.isAnyOriginAllowed': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.isLoggingEnabled': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.isSupportsCredentials': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.isValidOrigin': {   'req_args': ['origin'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CORSFilter.join': {   'req_args': ['elements', 'joinSeparator'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\CORSFilter.java'},
    'CRFBiasedClassifier': {   'req_args': ['props', ['flags']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFBiasedClassifier.adjustBias': {   'req_args': [   'develData',
                                                          'evalFunction',
                                                          'low',
                                                          'high'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFBiasedClassifier.classify': {   'req_args': ['document'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFBiasedClassifier.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFBiasedClassifier.makeDatum': {   'req_args': [   'info',
                                                         'loc',
                                                         'featureFactories'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFBiasedClassifier.setBiasWeight': {   'req_args': [   'cname',
                                                             'weight',
                                                             [   'cindex',
                                                                 'weight']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFBiasedClassifier.java'},
    'CRFClassifier': {   'req_args': [['props'], ['flags'], ['crf']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.classify': {   'req_args': ['document'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.classifyGibbs': {   'req_args': [   'document',
                                                       [   'document',
                                                           'documentDataAndLabels']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.classifyMaxEnt': {   'req_args': ['document'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSeq',
                                                                       'doc',
                                                                       'sent'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.combine': {   'req_args': ['crf', 'weight'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.documentToDataAndLabels': {   'req_args': ['document'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.documentsToDataAndLabels': {   'req_args': ['documents'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.documentsToDataAndLabelsList': {   'req_args': ['documents'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.dropFeaturesBelowThreshold': {   'req_args': ['threshold'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.dumpFeatures': {   'req_args': ['docs'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getClassifier': {   'req_args': [   'file',
                                                       ['in'],
                                                       ['ois'],
                                                       ['loadPath'],
                                                       ['loadPath', 'props'],
                                                       ['ois', 'props']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getClassifierNoExceptions': {   'req_args': ['loadPath'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getCliqueTree': {   'req_args': ['p', ['document']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getCliqueTrees': {   'req_args': [   'filename',
                                                        'readerAndWriter'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getDefaultClassifier': {   'req_args': [['props']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getMinimizer': {   'req_args': [   [   'featurePruneIteration',
                                                          'evaluators']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getNumWeights': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.getSequenceModel': {   'req_args': ['doc'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadClassIndexFromFile': {   'req_args': ['serializePath'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadClassifier': {   'req_args': ['ois', 'props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadDefaultClassifier': {   'req_args': [['props']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadFeatureIndexFromFile': {   'req_args': ['serializePath'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadTagIndex': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadTextClassifier': {   'req_args': ['text', 'props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.loadWeightsFromFile': {   'req_args': ['serializePath'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.makeDatum': {   'req_args': [   'info',
                                                   'loc',
                                                   'featureFactories'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFactorTable': {   'req_args': [   'filename',
                                                          'readerAndWriter'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFactorTableDocument': {   'req_args': ['document'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFactorTableDocuments': {   'req_args': ['documents'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFirstOrderProbs': {   'req_args': [   'filename',
                                                              'readerAndWriter'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFirstOrderProbsDocument': {   'req_args': ['document'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printFirstOrderProbsDocuments': {   'req_args': [   'documents'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printLabelInformation': {   'req_args': [   'testFile',
                                                               'readerAndWriter'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printLabelValue': {   'req_args': ['document'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.printProbsDocument': {   'req_args': ['document'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.scaleWeights': {   'req_args': ['scale'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.serializeClassIndex': {   'req_args': ['serializePath'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                             ['oos']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.serializeFeatureIndex': {   'req_args': ['serializePath'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.serializeTextClassifier': {   'req_args': ['serializePath'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.serializeWeights': {   'req_args': ['serializePath'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.to2D': {   'req_args': ['weights', 'labelIndices', 'map'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.topWeights': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.train': {   'req_args': [   'objectBankWrapper',
                                               'readerAndWriter'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.updateWeightsForTest': {   'req_args': ['x'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.writeWeights': {   'req_args': ['p'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifier.zeroOrderProbabilities': {   'req_args': ['document'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifier.java'},
    'CRFClassifierEvaluator': {   'req_args': [   'description',
                                                  'classifier',
                                                  'data',
                                                  'featurizedData',
                                                  [   'description',
                                                      'classifier']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.evaluate': {   'req_args': ['x'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.getCmd': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.outputToCmd': {   'req_args': ['outputStream'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.setEvalCmd': {   'req_args': ['evalCmd'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.setTestData': {   'req_args': [   'data',
                                                              'featurizedData'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierEvaluator.setValues': {   'req_args': ['x'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierEvaluator.java'},
    'CRFClassifierFloat': {   'req_args': [['props'], ['flags']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierFloat.java'},
    'CRFClassifierNoisyLabel': {   'req_args': ['flags'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierNoisyLabel.java'},
    'CRFClassifierNonlinear': {   'req_args': [['props'], ['flags']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierNonlinear.java'},
    'CRFClassifierNonlinear.documentToDataAndLabels': {   'req_args': [   'document'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierNonlinear.java'},
    'CRFClassifierNonlinear.loadClassifier': {   'req_args': ['ois', 'props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierNonlinear.java'},
    'CRFClassifierNonlinear.serializeClassifier': {   'req_args': ['oos'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierNonlinear.java'},
    'CRFClassifierWithDropout': {   'req_args': ['flags'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierWithDropout.java'},
    'CRFClassifierWithLOP': {   'req_args': [['props'], ['flags']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFClassifierWithLOP.java'},
    'CRFCliqueTree': {   'req_args': [   'factorTables',
                                         'classIndex',
                                         'backgroundSymbol',
                                         [   'factorTables',
                                             'classIndex',
                                             'backgroundSymbol',
                                             'z']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.backgroundIndex': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.backgroundSymbol': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.classIndex': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condLogProbGivenNext': {   'req_args': [   'position',
                                                              'label',
                                                              'nextLabels',
                                                              [   'position',
                                                                  'label',
                                                                  'nextLabels']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condLogProbGivenPrevious': {   'req_args': [   'position',
                                                                  'label',
                                                                  'prevLabels',
                                                                  [   'position',
                                                                      'label',
                                                                      'prevLabels']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condLogProbsGivenNext': {   'req_args': [   'position',
                                                               'nextlabels',
                                                               [   'position',
                                                                   'nextlabels']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condLogProbsGivenPrevious': {   'req_args': [   'position',
                                                                   'prevlabels',
                                                                   [   'position',
                                                                       'prevlabels']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condProbGivenNext': {   'req_args': [   'position',
                                                           'label',
                                                           'nextLabels',
                                                           [   'position',
                                                               'label',
                                                               'nextLabels']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.condProbGivenPrevious': {   'req_args': [   'position',
                                                               'label',
                                                               'prevLabels',
                                                               [   'position',
                                                                   'label',
                                                                   'prevLabels']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getCalibratedCliqueTree': {   'req_args': [   'data',
                                                                 'labelIndices',
                                                                 'numClasses',
                                                                 'classIndex',
                                                                 'backgroundSymbol',
                                                                 'cliquePotentialFunc',
                                                                 'featureVals',
                                                                 [   'weights',
                                                                     'wscale',
                                                                     'weightIndices',
                                                                     'data',
                                                                     'labelIndices',
                                                                     'numClasses',
                                                                     'classIndex',
                                                                     'backgroundSymbol']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getConditionalDistribution': {   'req_args': [   'sequence',
                                                                    'position'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getFactorTables': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getNumClasses': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getNumValues': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.getPossibleValues': {   'req_args': ['position'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.leftWindow': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.length': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.logProb': {   'req_args': [   'position',
                                                 'label',
                                                 ['position', 'label'],
                                                 ['position', 'labels'],
                                                 ['position', 'labels']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.logProbStartPos': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.logProbTable': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.logProbs': {   'req_args': [   'position',
                                                  ['position', 'window']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.logProbsToDoubleArr': {   'req_args': ['position'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.prob': {   'req_args': [   'position',
                                              'label',
                                              ['position', 'label'],
                                              ['position', 'labels'],
                                              ['position', 'labels']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.probs': {   'req_args': ['position', ['position', 'window']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.probsToDoubleArr': {   'req_args': ['position'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.rightWindow': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.scoreOf': {   'req_args': ['sequence', 'pos', ['sequence']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.scoresOf': {   'req_args': ['sequence', 'position'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.setInitialSequence': {   'req_args': ['sequence'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.totalMass': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.updateSequenceElement': {   'req_args': [   'sequence',
                                                               'pos',
                                                               'oldVal'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFCliqueTree.window': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFCliqueTree.java'},
    'CRFDatum': {   'req_args': ['features', 'label', 'featureVals'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.asFeatureVals': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.asFeatures': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.label': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFDatum.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFDatum.java'},
    'CRFFeatureExporter': {   'req_args': ['classifier'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFFeatureExporter.java'},
    'CRFFeatureExporter.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFFeatureExporter.java'},
    'CRFFeatureExporter.printFeatures': {   'req_args': [   'exportFile',
                                                            'docsData',
                                                            'labels',
                                                            [   'exportFile',
                                                                'documents']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFFeatureExporter.java'},
    'CRFLabel': {   'req_args': ['label'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.getLabel': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.getOneSmallerLabel': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.getSmallerLabel': {   'req_args': ['size'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLabel.toString': {   'req_args': ['classIndex', []],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLabel.java'},
    'CRFLogConditionalObjectiveFloatFunction': {   'req_args': [   'data',
                                                                   'labels',
                                                                   'window',
                                                                   'classIndex',
                                                                   'labelIndices',
                                                                   'map',
                                                                   'backgroundSymbol',
                                                                   [   'data',
                                                                       'labels',
                                                                       'window',
                                                                       'classIndex',
                                                                       'labelIndices',
                                                                       'map',
                                                                       'backgroundSymbol',
                                                                       'sigma'],
                                                                   [   'data',
                                                                       'labels',
                                                                       'window',
                                                                       'classIndex',
                                                                       'labelIndices',
                                                                       'map',
                                                                       'prior',
                                                                       'backgroundSymbol'],
                                                                   [   'data',
                                                                       'labels',
                                                                       'window',
                                                                       'classIndex',
                                                                       'labelIndices',
                                                                       'map',
                                                                       'prior',
                                                                       'backgroundSymbol',
                                                                       'sigma']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.calculate': {   'req_args': ['x'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.calculateWeird1': {   'req_args': [   'x'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.domainDimension': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.empty2D': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.getCalibratedCliqueTree': {   'req_args': [   'weights',
                                                                                           'data',
                                                                                           'labelIndices',
                                                                                           'numClasses'],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.getCliquePotentialFunction': {   'req_args': [   'x'],
                                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.getFloatFactorTable': {   'req_args': [   'weights',
                                                                                       'data',
                                                                                       'labelIndices',
                                                                                       'numClasses'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.to1D': {   'req_args': ['weights'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFloatFunction.to2D': {   'req_args': ['weights'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFloatFunction.java'},
    'CRFLogConditionalObjectiveFunction': {   'req_args': [   'data',
                                                              'labels',
                                                              'window',
                                                              'classIndex',
                                                              'labelIndices',
                                                              'map',
                                                              'priorType',
                                                              'backgroundSymbol',
                                                              'sigma',
                                                              'featureVal',
                                                              'multiThreadGrad',
                                                              [   'data',
                                                                  'labels',
                                                                  'window',
                                                                  'classIndex',
                                                                  'labelIndices',
                                                                  'map',
                                                                  'priorType',
                                                                  'backgroundSymbol',
                                                                  'sigma',
                                                                  'featureVal',
                                                                  'multiThreadGrad',
                                                                  'calcEmpirical']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.calculate': {   'req_args': ['x'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.calculateStochastic': {   'req_args': [   'x',
                                                                                  'v',
                                                                                  'batch'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.calculateStochasticGradient': {   'req_args': [   'x',
                                                                                          'batch'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.calculateStochasticUpdate': {   'req_args': [   'x',
                                                                                        'xScale',
                                                                                        'batch',
                                                                                        'gScale'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.clear2D': {   'req_args': ['arr2D'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.dataDimension': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.domainDimension': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.getCliquePotentialFunction': {   'req_args': [   'x'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.getFeatureGrouping': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.getLabels': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.getPriorType': {   'req_args': [   'priorTypeStr'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.getWeightIndices': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.initial': {   'req_args': [   [   'useRandomSeed'],
                                                                      [   'randGen']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.setFeatureGrouping': {   'req_args': [   'fg'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.setWeights': {   'req_args': [   'weights'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.to1D': {   'req_args': [   'weights',
                                                                   'newWeights',
                                                                   [   'weights',
                                                                       'domainDimension'],
                                                                   ['weights']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.to2D': {   'req_args': [   'weights',
                                                                   'labelIndices',
                                                                   'map',
                                                                   ['weights'],
                                                                   [   'weights',
                                                                       'labelIndices',
                                                                       'map',
                                                                       'newWeights'],
                                                                   [   'weights1D',
                                                                       'newWeights']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.to2Dfloat': {   'req_args': ['weights'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.valueAt': {   'req_args': [   'x',
                                                                      'xScale',
                                                                      'batch'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunction.valueForADoc': {   'req_args': [   'docIndex'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunction.java'},
    'CRFLogConditionalObjectiveFunctionForLOP': {   'req_args': [   'data',
                                                                    'labels',
                                                                    'lopExpertWeights',
                                                                    'window',
                                                                    'classIndex',
                                                                    'labelIndices',
                                                                    'map',
                                                                    'backgroundSymbol',
                                                                    'numLopExpert',
                                                                    'featureIndicesSetArray',
                                                                    'featureIndicesListArray',
                                                                    'backpropTraining'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.calculate': {   'req_args': ['x'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.combineAndScaleLopWeights': {   'req_args': [   'numLopExpert',
                                                                                              'lopExpertWeights',
                                                                                              'lopScales'],
                                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.combineAndScaleLopWeights2D': {   'req_args': [   'numLopExpert',
                                                                                                'lopExpertWeights2D',
                                                                                                'lopScales'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.domainDimension': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.empty2D': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.getCliquePotentialFunction': {   'req_args': [   'x'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.initial': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.separateLopExpertWeights': {   'req_args': [   'learnedParams'],
                                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.separateLopExpertWeights2D': {   'req_args': [   'learnedParams'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.separateLopScales': {   'req_args': [   'learnedParams'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionForLOP.to2D': {   'req_args': [   'weights',
                                                                         'labelIndices',
                                                                         'map'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionForLOP.java'},
    'CRFLogConditionalObjectiveFunctionNoisyLabel': {   'req_args': [   'data',
                                                                        'labels',
                                                                        'window',
                                                                        'classIndex',
                                                                        'labelIndices',
                                                                        'map',
                                                                        'priorType',
                                                                        'backgroundSymbol',
                                                                        'sigma',
                                                                        'featureVal',
                                                                        'multiThreadGrad',
                                                                        'errorMatrix'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionNoisyLabel.java'},
    'CRFLogConditionalObjectiveFunctionNoisyLabel.calculate': {   'req_args': [   'x'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionNoisyLabel.java'},
    'CRFLogConditionalObjectiveFunctionNoisyLabel.getFunc': {   'req_args': [   'docIndex'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionNoisyLabel.java'},
    'CRFLogConditionalObjectiveFunctionNoisyLabel.setWeights': {   'req_args': [   'weights'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionNoisyLabel.java'},
    'CRFLogConditionalObjectiveFunctionWithDropout': {   'req_args': [   'data',
                                                                         'labels',
                                                                         'window',
                                                                         'classIndex',
                                                                         'labelIndices',
                                                                         'map',
                                                                         'priorType',
                                                                         'backgroundSymbol',
                                                                         'sigma',
                                                                         'featureVal',
                                                                         'delta',
                                                                         'dropoutScale',
                                                                         'multiThreadGrad',
                                                                         'dropoutApprox',
                                                                         'unsupDropoutScale',
                                                                         'unsupDropoutData'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionWithDropout.java'},
    'CRFLogConditionalObjectiveFunctionWithDropout.calculate': {   'req_args': [   'x'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionWithDropout.java'},
    'CRFLogConditionalObjectiveFunctionWithDropout.setWeights': {   'req_args': [   'weights'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFLogConditionalObjectiveFunctionWithDropout.java'},
    'CRFNonLinearLogConditionalObjectiveFunction': {   'req_args': [   'data',
                                                                       'labels',
                                                                       'window',
                                                                       'classIndex',
                                                                       'labelIndices',
                                                                       'map',
                                                                       'flags',
                                                                       'numNodeFeatures',
                                                                       'numEdgeFeatures',
                                                                       'featureVal'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.calculate': {   'req_args': [   'x'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.domainDimension': {   'req_args': [   ],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.empty2D': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.emptyFull2D': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.getCliquePotentialFunction': {   'req_args': [   'x'],
                                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.getFeatureGrouping': {   'req_args': [   ],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.getPriorType': {   'req_args': [   'priorTypeStr'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.getRegularizerParamRange': {   'req_args': [   'x'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.initial': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.separateWeights': {   'req_args': [   'x'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearLogConditionalObjectiveFunction.to2D': {   'req_args': [   'linearWeights'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction': {   'req_args': [   'data',
                                                                                  'labels',
                                                                                  'window',
                                                                                  'classIndex',
                                                                                  'labelIndices',
                                                                                  'map',
                                                                                  'flags',
                                                                                  'numNodeFeatures',
                                                                                  'numEdgeFeatures',
                                                                                  [   'data',
                                                                                      'labels',
                                                                                      'window',
                                                                                      'classIndex',
                                                                                      'labelIndices',
                                                                                      'map',
                                                                                      'prior',
                                                                                      'flags',
                                                                                      'numNodeFeatures',
                                                                                      'numEdgeFeatures']],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.calculate': {   'req_args': [   'x'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.domainDimension': {   'req_args': [   ],
                                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.emptyFull2D': {   'req_args': [   ],
                                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.getCliquePotentialFunction': {   'req_args': [   'x'],
                                                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.getPriorType': {   'req_args': [   'priorTypeStr'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.initial': {   'req_args': [   ],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CRFNonLinearSecondOrderLogConditionalObjectiveFunction.separateWeights': {   'req_args': [   'x'],
                                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\CRFNonLinearSecondOrderLogConditionalObjectiveFunction.java'},
    'CTBErrorCorrectingTreeNormalizer': {   'req_args': [   [   'splitNPTMP',
                                                                'splitPPTMP',
                                                                'splitXPTMP',
                                                                'charTags']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CTBErrorCorrectingTreeNormalizer.java'},
    'CTBErrorCorrectingTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                               'tf'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CTBErrorCorrectingTreeNormalizer.java'},
    'CTBTreeReaderFactory': {   'req_args': [['tn'], ['tn', 'discardFrags']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CTBTreeReaderFactory.java'},
    'CTBTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CTBTreeReaderFactory.java'},
    'CTBunkDict': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CTBunkDict.java'},
    'CTBunkDictDetector': {   'req_args': ['t2', 'n2'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CTBunkDictDetector.isDynamic': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CTBunkDictDetector.isLocal': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CWordBooleanExtractor.isDynamic': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CWordBooleanExtractor.isLocal': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CacheMap': {   'req_args': [   'numEntries',
                                    'loadFactor',
                                    'accessOrder',
                                    'backingFile',
                                    ['numEntries', 'loadFactor', 'accessOrder'],
                                    ['numEntries', 'loadFactor'],
                                    ['numEntries']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheMap.create': {   'req_args': [   'numEntries',
                                           'loadFactor',
                                           'accessOrder',
                                           'file',
                                           'useFileParams',
                                           [   'numEntries',
                                               'loadFactor',
                                               'file',
                                               'useFileParams'],
                                           [   'numEntries',
                                               'file',
                                               'useFileParams'],
                                           ['file', 'useFileParams']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheMap.get': {   'req_args': ['key'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheMap.printStats': {   'req_args': ['out'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheMap.put': {   'req_args': ['key', 'value'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheMap.write': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CacheMap.java'},
    'CacheParseHypotheses': {   'req_args': ['parser'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CacheParseHypotheses.java'},
    'CacheParseHypotheses.convertToBytes': {   'req_args': [   'input',
                                                               [   'uncompressed']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CacheParseHypotheses.java'},
    'CacheParseHypotheses.convertToTrees': {   'req_args': [   'input',
                                                               [   'compressed',
                                                                   'numThreads'],
                                                               [   'keys',
                                                                   'compressed',
                                                                   'numThreads']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CacheParseHypotheses.java'},
    'CacheParseHypotheses.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CacheParseHypotheses.java'},
    'CallbackFunction.callback': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CallbackFunction.java'},
    'CandidatePhrase': {   'req_args': [   'phrase',
                                           'lemma',
                                           ['phrase', 'lemma', 'features'],
                                           ['w']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.addFeature': {   'req_args': ['s', 'v'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.addFeatures': {   'req_args': ['feat'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.compareTo': {   'req_args': ['o'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.convertStringPhrases': {   'req_args': ['str'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.convertToString': {   'req_args': ['words'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.createOrGet': {   'req_args': [   'phrase',
                                                       [   'phrase',
                                                           'phraseLemma'],
                                                       [   'phrase',
                                                           'phraseLemma',
                                                           'features']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.deletePhrase': {   'req_args': ['p'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.getFeatureValue': {   'req_args': ['feat'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.getFeatures': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.getPhrase': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.getPhraseLemma': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.setPhraseLemma': {   'req_args': ['phraseLemma'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CandidatePhrase.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\CandidatePhrase.java'},
    'CaselessCompanyNameDetector': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CaselessCompanyNameDetector.isDynamic': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CaselessCompanyNameDetector.isLocal': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CategoricalFeatureExtractor': {   'req_args': ['props', 'dictionaries'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\CategoricalFeatureExtractor.java'},
    'CategoricalFeatureExtractor.encodeDistance': {   'req_args': ['d'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\CategoricalFeatureExtractor.java'},
    'CategoricalFeatureExtractor.getAnaphoricityFeatures': {   'req_args': [   'm',
                                                                               'document',
                                                                               'mentionsByHeadIndex'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\CategoricalFeatureExtractor.java'},
    'CategoricalFeatureExtractor.getPairFeatures': {   'req_args': [   'pair',
                                                                       'document',
                                                                       'mentionsByHeadIndex'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\CategoricalFeatureExtractor.java'},
    'CategoricalFeatureExtractor.pairwiseFeatures': {   'req_args': [   'document',
                                                                        'm1',
                                                                        'm2',
                                                                        'dictionaries'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\CategoricalFeatureExtractor.java'},
    'CategoryWordTag': {   'req_args': [   ['label'],
                                           ['category', 'word', 'tag'],
                                           ['oldLabel']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.category': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.factory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.labelFactory': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.setCategory': {   'req_args': ['category'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.setCategoryWordTag': {   'req_args': [   'category',
                                                              'word',
                                                              'tag'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.setFromString': {   'req_args': ['labelStr'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.setTag': {   'req_args': ['tag'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.setWord': {   'req_args': ['word'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.tag': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.toString': {   'req_args': [['mode']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTag.word': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTag.java'},
    'CategoryWordTagFactory.newLabel': {   'req_args': [   'labelStr',
                                                           [   'labelStr',
                                                               'options'],
                                                           [   'word',
                                                               'tag',
                                                               'category'],
                                                           ['oldLabel']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTagFactory.java'},
    'CategoryWordTagFactory.newLabelFromString': {   'req_args': ['labelStr'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CategoryWordTagFactory.java'},
    'ChapterAnnotator.annotate': {   'req_args': ['doc'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ChapterAnnotator.java'},
    'ChapterAnnotator.requirementsSatisfied': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ChapterAnnotator.java'},
    'ChapterAnnotator.requires': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ChapterAnnotator.java'},
    'CharacterLevelTagExtender': {   'req_args': [['tlp']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CharacterLevelTagExtender.java'},
    'CharacterLevelTagExtender.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CharacterLevelTagExtender.java'},
    'CharacterLevelTagExtender.normalizeWholeTree': {   'req_args': [   'tree',
                                                                        'tf'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CharacterLevelTagExtender.java'},
    'CharacterLevelTagExtender.transformTree': {   'req_args': ['tree'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CharacterLevelTagExtender.java'},
    'CharacterLevelTagExtender.untransformTree': {   'req_args': ['tree'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\CharacterLevelTagExtender.java'},
    'Characters': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.asCharacterArray': {   'req_args': ['s'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.getCharacter': {   'req_args': ['c'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.isControl': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.isPunctuation': {   'req_args': ['c'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.isSymbol': {   'req_args': ['c'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'Characters.unicodeBlockStringOf': {   'req_args': ['c', ['codePoint']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Characters.java'},
    'CharniakParser': {   'req_args': [['dir', 'parserExecutable']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.getBeamSize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.getBestParse': {   'req_args': ['sentence'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.getBestScoredParse': {   'req_args': ['sentence'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.getKBestParses': {   'req_args': [   'sentence',
                                                         'k',
                                                         [   'sentence',
                                                             'k',
                                                             'deleteTempFiles'],
                                                         ['sentences', 'k'],
                                                         [   'sentences',
                                                             'k',
                                                             'deleteTempFiles']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.getMaxSentenceLength': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.printSentence': {   'req_args': ['sentence', 'filename'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.printSentences': {   'req_args': ['sentences', 'filename'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.runCharniak': {   'req_args': [   'n',
                                                      'infile',
                                                      'outfile',
                                                      'errfile'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.setBeamSize': {   'req_args': ['beamSize'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParser.setMaxSentenceLength': {   'req_args': [   'maxSentenceLength'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakParser.java'},
    'CharniakParserAnnotator': {   'req_args': [   'parserModel',
                                                   'parserExecutable',
                                                   'verbose',
                                                   'maxSentenceLength',
                                                   []],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CharniakParserAnnotator.java'},
    'CharniakParserAnnotator.annotate': {   'req_args': ['annotation'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CharniakParserAnnotator.java'},
    'CharniakParserAnnotator.requirementsSatisfied': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CharniakParserAnnotator.java'},
    'CharniakParserAnnotator.requires': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CharniakParserAnnotator.java'},
    'CharniakScoredParsesReaderWriter': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakScoredParsesReaderWriter.java'},
    'CharniakScoredParsesReaderWriter.parsesToString': {   'req_args': [   'parses'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakScoredParsesReaderWriter.java'},
    'CharniakScoredParsesReaderWriter.printScoredTrees': {   'req_args': [   'trees',
                                                                             'filename',
                                                                             [   'pw',
                                                                                 'id',
                                                                                 'trees']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakScoredParsesReaderWriter.java'},
    'CharniakScoredParsesReaderWriter.readScoredTrees': {   'req_args': [   'filename',
                                                                            [   'inputDesc',
                                                                                'br']],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakScoredParsesReaderWriter.java'},
    'CharniakScoredParsesReaderWriter.stringToParses': {   'req_args': [   'parseStr'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\charniak\\CharniakScoredParsesReaderWriter.java'},
    'ChineseCharacterBasedLexicon': {   'req_args': [   'params',
                                                        'wordIndex',
                                                        'tagIndex'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.finishTraining': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.getPOSDistribution': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.getUnknownWordModel': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.incrementTreesRead': {   'req_args': [   'weight'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.initializeTraining': {   'req_args': [   'numTrees'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.isForeign': {   'req_args': ['s'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.isKnown': {   'req_args': ['word', ['word']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.numRules': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.readData': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.ruleIteratorByWord': {   'req_args': [   'word',
                                                                           'loc',
                                                                           'featureSpec',
                                                                           [   'word',
                                                                               'loc',
                                                                               'featureSpec']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.sampleFrom': {   'req_args': ['tag', []],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.score': {   'req_args': [   'iTW',
                                                              'loc',
                                                              'word',
                                                              'featureSpec'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.setUnknownWordModel': {   'req_args': ['uwm'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.tagSet': {   'req_args': [   'basicCategoryFunction'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.train': {   'req_args': [   'trees',
                                                              [   'trees',
                                                                  'weight'],
                                                              [   'tree',
                                                                  'weight'],
                                                              [   'tw',
                                                                  'loc',
                                                                  'weight'],
                                                              [   'sentence',
                                                                  'weight'],
                                                              [   'trees',
                                                                  'rawTrees']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.trainUnannotated': {   'req_args': [   'sentence',
                                                                         'weight'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexicon.writeData': {   'req_args': ['w'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexicon.java'},
    'ChineseCharacterBasedLexiconTraining.main': {   'req_args': ['args'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexiconTraining.java'},
    'ChineseCharacterBasedLexiconTraining.printStats': {   'req_args': [   'trees',
                                                                           'pw'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseCharacterBasedLexiconTraining.java'},
    'ChineseCollinizer': {   'req_args': ['ctlp', ['ctlp', 'deletePunct']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseCollinizer.java'},
    'ChineseCollinizer.transformTree': {   'req_args': ['tree'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseCollinizer.java'},
    'ChineseDictionary': {   'req_args': [   'dict',
                                             ['dicts'],
                                             ['dicts', 'cdtos'],
                                             [   'serDicts',
                                                 'cdtos',
                                                 'expandMidDot'],
                                             [   'dicts',
                                                 'cdtos',
                                                 'expandMidDot']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseDictionary.java'},
    'ChineseDictionary.contains': {   'req_args': ['word'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseDictionary.java'},
    'ChineseDictionary.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseDictionary.java'},
    'ChineseDocument': {   'req_args': [   'text',
                                           ['ann'],
                                           ['proto'],
                                           ['props', 'text']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ChineseDocument.java'},
    'ChineseDocument.sentences': {   'req_args': ['props'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ChineseDocument.java'},
    'ChineseDocumentToSentenceProcessor': {   'req_args': [   [   'normalizationTableFile']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\ChineseDocumentToSentenceProcessor.java'},
    'ChineseDocumentToSentenceProcessor.fromHTML': {   'req_args': [   'inputString'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\ChineseDocumentToSentenceProcessor.java'},
    'ChineseDocumentToSentenceProcessor.fromPlainText': {   'req_args': [   'contentString',
                                                                            [   'contentString',
                                                                                'segmented']],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\ChineseDocumentToSentenceProcessor.java'},
    'ChineseDocumentToSentenceProcessor.main': {   'req_args': ['args'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\ChineseDocumentToSentenceProcessor.java'},
    'ChineseDocumentToSentenceProcessor.normalization': {   'req_args': ['in'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\ChineseDocumentToSentenceProcessor.java'},
    'ChineseEnglishWordMap': {   'req_args': [   ['dictPath'],
                                                 ['dictPath', 'normalized'],
                                                 [   'dictPath',
                                                     'pattern',
                                                     'delimiter',
                                                     'charset'],
                                                 [   'dictPath',
                                                     'pattern',
                                                     'delimiter',
                                                     'charset',
                                                     'normalized']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.addMap': {   'req_args': ['addM'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.containsKey': {   'req_args': ['key'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.getAllTranslations': {   'req_args': ['key'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.getFirstTranslation': {   'req_args': ['key'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.getInstance': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.getReverseMap': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.readCEDict': {   'req_args': [   'dictPath',
                                                            [   'dictPath',
                                                                'pattern',
                                                                'delimiter',
                                                                'charset']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.size': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEnglishWordMap.toString': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEnglishWordMap.java'},
    'ChineseEscaper.apply': {   'req_args': ['arg'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseEscaper.java'},
    'ChineseGrammaticalRelations': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalRelations.java'},
    'ChineseGrammaticalRelations.valueOf': {   'req_args': ['s'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalRelations.java'},
    'ChineseGrammaticalRelations.values': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalRelations.java'},
    'ChineseGrammaticalRelations.valuesLock': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalRelations.java'},
    'ChineseGrammaticalStructure': {   'req_args': [   't',
                                                       ['t', 'puncFilter'],
                                                       ['t', 'hf'],
                                                       [   't',
                                                           'puncFilter',
                                                           'hf'],
                                                       [   'projectiveDependencies',
                                                           'root']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructure.java'},
    'ChineseGrammaticalStructure.buildCoNLLXGrammaticalStructure': {   'req_args': [   'tokenFields'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructure.java'},
    'ChineseGrammaticalStructure.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructure.java'},
    'ChineseGrammaticalStructure.readCoNLLXGrammaticalStructureCollection': {   'req_args': [   'fileName'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructure.java'},
    'ChineseGrammaticalStructureFactory': {   'req_args': [   ['puncFilter'],
                                                              [   'puncFilter',
                                                                  'hf']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructureFactory.java'},
    'ChineseGrammaticalStructureFactory.newGrammaticalStructure': {   'req_args': [   't'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseGrammaticalStructureFactory.java'},
    'ChineseHcorefDemo.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\demo\\ChineseHcorefDemo.java'},
    'ChineseHeadFinder': {   'req_args': [['tlp']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseHeadFinder.java'},
    'ChineseHeadMatch': {   'req_args': [['props']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\ChineseHeadMatch.java'},
    'ChineseLexicon': {   'req_args': ['op', 'params', 'wordIndex', 'tagIndex'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexicon.java'},
    'ChineseLexicon.score': {   'req_args': [   'iTW',
                                                'loc',
                                                'word',
                                                'featureSpec'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexicon.java'},
    'ChineseLexiconAndWordSegmenter': {   'req_args': [   'lex',
                                                          'seg',
                                                          [   'trainTreebank',
                                                              'op',
                                                              'wordIndex',
                                                              'tagIndex'],
                                                          [   'segmenterFileOrUrl',
                                                              'op']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.finishTraining': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.getSegmenterDataFromFile': {   'req_args': [   'parserFileOrUrl',
                                                                                   'op'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.getUnknownWordModel': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.incrementTreesRead': {   'req_args': [   'weight'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.initializeTraining': {   'req_args': [   'numTrees'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.isKnown': {   'req_args': [   'word',
                                                                  ['word']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.loadSegmenter': {   'req_args': [   'filename'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.main': {   'req_args': ['args'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.numRules': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.readData': {   'req_args': ['in'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.ruleIteratorByWord': {   'req_args': [   'word',
                                                                             'loc',
                                                                             'featureSpec',
                                                                             [   'word',
                                                                                 'loc',
                                                                                 'featureSpec']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.score': {   'req_args': [   'iTW',
                                                                'loc',
                                                                'word',
                                                                'featureSpec'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.segment': {   'req_args': ['s'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.setUnknownWordModel': {   'req_args': [   'uwm'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.tagSet': {   'req_args': [   'basicCategoryFunction'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.train': {   'req_args': [   'trees',
                                                                [   'trees',
                                                                    'weight'],
                                                                ['tree'],
                                                                [   'tree',
                                                                    'weight'],
                                                                ['sentence'],
                                                                [   'sentence',
                                                                    'weight'],
                                                                [   'tw',
                                                                    'loc',
                                                                    'weight'],
                                                                [   'trees',
                                                                    'rawTrees']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.trainUnannotated': {   'req_args': [   'sentence',
                                                                           'weight'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseLexiconAndWordSegmenter.writeData': {   'req_args': ['w'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseLexiconAndWordSegmenter.java'},
    'ChineseMarkovWordSegmenter': {   'req_args': [   'lex',
                                                      'wordIndex',
                                                      'tagIndex',
                                                      [   'params',
                                                          'wordIndex',
                                                          'tagIndex']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMarkovWordSegmenter.finishTraining': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMarkovWordSegmenter.initializeTraining': {   'req_args': [   'numTrees'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMarkovWordSegmenter.loadSegmenter': {   'req_args': ['filename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMarkovWordSegmenter.segment': {   'req_args': ['s'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMarkovWordSegmenter.train': {   'req_args': [   'trees',
                                                            ['tree'],
                                                            ['sentence']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMarkovWordSegmenter.java'},
    'ChineseMaxentLexicon': {   'req_args': [   'op',
                                                'wordIndex',
                                                'tagIndex',
                                                'featureLevel'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.finishTraining': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.getUnknownWordModel': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.incrementTreesRead': {   'req_args': ['weight'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.initializeTraining': {   'req_args': ['numTrees'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.isKnown': {   'req_args': ['word', ['word']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.numRules': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.readData': {   'req_args': ['in'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.ruleIteratorByWord': {   'req_args': [   'word',
                                                                   'loc',
                                                                   'featureSpec',
                                                                   [   'word',
                                                                       'loc',
                                                                       'featureSpec']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.score': {   'req_args': [   'iTW',
                                                      'loc',
                                                      'word',
                                                      'featureSpec'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.setUnknownWordModel': {   'req_args': ['uwm'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.tagSet': {   'req_args': ['basicCategoryFunction'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.train': {   'req_args': [   'trees',
                                                      ['trees', 'weight'],
                                                      ['tree', 'weight'],
                                                      ['sentence', 'weight'],
                                                      ['tw', 'loc', 'weight'],
                                                      ['trees', 'rawTrees']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.trainUnannotated': {   'req_args': [   'sentence',
                                                                 'weight'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMaxentLexicon.writeData': {   'req_args': ['w'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseMaxentLexicon.java'},
    'ChineseMorphFeatureSets': {   'req_args': ['featureDir'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseMorphFeatureSets.java'},
    'ChineseMorphFeatureSets.getAffixFeatures': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseMorphFeatureSets.java'},
    'ChineseMorphFeatureSets.getSingletonFeatures': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseMorphFeatureSets.java'},
    'ChineseNumberSequenceClassifier': {   'req_args': [   ['useSUTime'],
                                                           [   'props',
                                                               'useSUTime',
                                                               'sutimeProps']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.classify': {   'req_args': ['document'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSequence',
                                                                                         'document',
                                                                                         'sentence'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.loadClassifier': {   'req_args': [   'in',
                                                                          'props'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.main': {   'req_args': ['args'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                                               [   'oos']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseNumberSequenceClassifier.train': {   'req_args': [   'docs',
                                                                 'readerAndWriter'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\ChineseNumberSequenceClassifier.java'},
    'ChineseQuantifiableEntityNormalizer': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseQuantifiableEntityNormalizer.java'},
    'ChineseQuantifiableEntityNormalizer.addNormalizedQuantitiesToEntities': {   'req_args': [   'list',
                                                                                                 'document',
                                                                                                 'sentence'],
                                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseQuantifiableEntityNormalizer.java'},
    'ChineseQuantifiableEntityNormalizer.normalizeDateString': {   'req_args': [   's',
                                                                                   'ctxdate'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ChineseQuantifiableEntityNormalizer.java'},
    'ChineseSegmenterAnnotator': {   'req_args': [   ['segLoc', 'verbose'],
                                                     [   'segLoc',
                                                         'verbose',
                                                         'serDictionary',
                                                         'sighanCorporaDict'],
                                                     ['name', 'props']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChineseSegmenterAnnotator.java'},
    'ChineseSegmenterAnnotator.annotate': {   'req_args': ['annotation'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChineseSegmenterAnnotator.java'},
    'ChineseSegmenterAnnotator.requirementsSatisfied': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChineseSegmenterAnnotator.java'},
    'ChineseSegmenterAnnotator.requires': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChineseSegmenterAnnotator.java'},
    'ChineseSegmenterFeatureFactory.featuresC': {   'req_args': [   'cInfo',
                                                                    'loc'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseSegmenterFeatureFactory.java'},
    'ChineseSegmenterFeatureFactory.featuresCnC': {   'req_args': [   'cInfo',
                                                                      'loc'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseSegmenterFeatureFactory.java'},
    'ChineseSegmenterFeatureFactory.featuresCpC': {   'req_args': [   'cInfo',
                                                                      'loc'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseSegmenterFeatureFactory.java'},
    'ChineseSegmenterFeatureFactory.getCliqueFeatures': {   'req_args': [   'cInfo',
                                                                            'loc',
                                                                            'clique'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseSegmenterFeatureFactory.java'},
    'ChineseSegmenterFeatureFactory.init': {   'req_args': ['flags'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseSegmenterFeatureFactory.java'},
    'ChineseSemanticHeadFinder': {   'req_args': [['tlp']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseSemanticHeadFinder.java'},
    'ChineseSentence': {   'req_args': ['text', ['tokens'], ['proto']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\ChineseSentence.java'},
    'ChineseSimWordAvgDepGrammar': {   'req_args': [   'tlpParams',
                                                       'directional',
                                                       'distance',
                                                       'coarseDistance',
                                                       'basicCategoryTagsInDependencyGrammar',
                                                       'op',
                                                       'wordIndex',
                                                       'tagIndex'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseSimWordAvgDepGrammar.java'},
    'ChineseSimWordAvgDepGrammar.dumpSimWordAvgStats': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseSimWordAvgDepGrammar.java'},
    'ChineseSimWordAvgDepGrammar.getMap': {   'req_args': ['filename'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseSimWordAvgDepGrammar.java'},
    'ChineseSimWordAvgDepGrammar.scoreTB': {   'req_args': ['dependency'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseSimWordAvgDepGrammar.java'},
    'ChineseSimWordAvgDepGrammar.setLex': {   'req_args': ['lex'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseSimWordAvgDepGrammar.java'},
    'ChineseStringUtils': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseStringUtils.java'},
    'ChineseStringUtils.combineSegmentedSentence': {   'req_args': [   'doc',
                                                                       'flags'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseStringUtils.java'},
    'ChineseStringUtils.isLetterASCII': {   'req_args': ['c'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\ChineseStringUtils.java'},
    'ChineseTreebankLanguagePack.chineseColonAcceptFilter': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseCommaAcceptFilter': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseDashAcceptFilter': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseDouHaoAcceptFilter': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseEndSentenceAcceptFilter': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseLeftParenthesisAcceptFilter': {   'req_args': [   ],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseLeftQuoteMarkAcceptFilter': {   'req_args': [   ],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseOtherAcceptFilter': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseParenthesisAcceptFilter': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseQuoteMarkAcceptFilter': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseRightParenthesisAcceptFilter': {   'req_args': [   ],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.chineseRightQuoteMarkAcceptFilter': {   'req_args': [   ],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.generateOriginalDependencies': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.getEncoding': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.grammaticalStructureFactory': {   'req_args': [   [   'puncFilt'],
                                                                                   [   'puncFilt',
                                                                                       'hf']],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.isEvalBIgnoredPunctuationTag': {   'req_args': [   'str'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.isPunctuationTag': {   'req_args': ['str'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.isPunctuationWord': {   'req_args': ['str'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.isSentenceFinalPunctuationTag': {   'req_args': [   'str'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.setTokenizerFactory': {   'req_args': ['tf'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.supportsGrammaticalStructures': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseTreebankLanguagePack.java'},
    'ChineseTreebankParserParams': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.MLEDependencyGrammarSmoothingParams': {   'req_args': [   ],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.collinizer': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.dependencyGrammarExtractor': {   'req_args': [   'op',
                                                                                  'wordIndex',
                                                                                  'tagIndex'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.diskTreebank': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.display': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.generateOriginalDependencies': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.getGrammaticalStructure': {   'req_args': [   't',
                                                                               'filter',
                                                                               'hf'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.lex': {   'req_args': [   'op',
                                                           'wordIndex',
                                                           'tagIndex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.readGrammaticalStructureFromFile': {   'req_args': [   'filename'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.supportsBasicDependencies': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseTreebankParserParams.java'},
    'ChineseUnknownWordModel': {   'req_args': [   'op',
                                                   'lex',
                                                   'wordIndex',
                                                   'tagIndex',
                                                   'unSeenCounter',
                                                   'tagHash',
                                                   'unknownGT',
                                                   'useGT',
                                                   'seenFirst',
                                                   [   'op',
                                                       'lex',
                                                       'wordIndex',
                                                       'tagIndex']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModel.java'},
    'ChineseUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModel.java'},
    'ChineseUnknownWordModel.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModel.java'},
    'ChineseUnknownWordModel.score': {   'req_args': ['itw', 'word'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModel.java'},
    'ChineseUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModelTrainer.java'},
    'ChineseUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                             'lex',
                                                                             'wordIndex',
                                                                             'tagIndex',
                                                                             'totalTrees'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModelTrainer.java'},
    'ChineseUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                                'loc',
                                                                'weight'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseUnknownWordModelTrainer.java'},
    'ChineseUtils': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseUtils.java'},
    'ChineseUtils.isNumber': {   'req_args': ['c'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseUtils.java'},
    'ChineseUtils.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseUtils.java'},
    'ChineseUtils.normalize': {   'req_args': [   'in',
                                                  ['in', 'ascii', 'spaceChar'],
                                                  [   'in',
                                                      'ascii',
                                                      'spaceChar',
                                                      'midDot']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseUtils.java'},
    'ChineseUtils.shapeOf': {   'req_args': [   'input',
                                                'augmentedDateChars',
                                                'useMidDotShape'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\ChineseUtils.java'},
    'ChineseWordFeatureExtractor': {   'req_args': ['featureLevel'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseWordFeatureExtractor.java'},
    'ChineseWordFeatureExtractor.applyFeatureCountThreshold': {   'req_args': [   'data',
                                                                                  'thresh'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseWordFeatureExtractor.java'},
    'ChineseWordFeatureExtractor.makeFeatures': {   'req_args': ['word'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseWordFeatureExtractor.java'},
    'ChineseWordFeatureExtractor.setFeatureLevel': {   'req_args': ['level'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseWordFeatureExtractor.java'},
    'ChineseWordFeatureExtractor.train': {   'req_args': [   'trees',
                                                             [   'trees',
                                                                 'weight'],
                                                             ['tree', 'weight'],
                                                             [   'sentence',
                                                                 'weight']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ChineseWordFeatureExtractor.java'},
    'ChunkAnnotationUtils': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.annotateChunk': {   'req_args': [   'chunk',
                                                              'tokens',
                                                              'tokenStartIndex',
                                                              'tokenEndIndex',
                                                              'totalTokenOffset',
                                                              [   'annotation',
                                                                  'newAnnotationKey',
                                                                  'aggrKey',
                                                                  'aggregator'],
                                                              [   'chunk',
                                                                  'attributes']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.annotateChunkText': {   'req_args': [   'chunk',
                                                                  'tokenTextKey',
                                                                  [   'chunk',
                                                                      'origAnnotation']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.annotateChunkTokens': {   'req_args': [   'chunk',
                                                                    'tokenChunkKey',
                                                                    'tokenLabelKey'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.annotateChunks': {   'req_args': [   'chunks',
                                                               'start',
                                                               'end',
                                                               'attributes',
                                                               [   'chunks',
                                                                   'attributes']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.appendCoreMap': {   'req_args': [   'res',
                                                              'cm',
                                                              'text',
                                                              'start',
                                                              'end',
                                                              'factory'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.checkOffsets': {   'req_args': ['docAnnotation'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.copyUnsetAnnotations': {   'req_args': [   'src',
                                                                     'dest'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.createCoreMap': {   'req_args': [   'cm',
                                                              'text',
                                                              'start',
                                                              'end',
                                                              'factory'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.fixChunkSentenceBoundaries': {   'req_args': [   'docAnnotation',
                                                                           'chunkCharOffsets',
                                                                           [   'docAnnotation',
                                                                               'chunkCharOffsets',
                                                                               'offsetsAreNotSorted',
                                                                               'extendedFixSentence',
                                                                               'moreExtendedFixSentence']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.fixChunkTokenBoundaries': {   'req_args': [   'docAnnotation',
                                                                        'chunkCharOffsets'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.fixTokenOffsets': {   'req_args': ['docAnnotation'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getAnnotatedChunk': {   'req_args': [   'tokens',
                                                                  'tokenStartIndex',
                                                                  'tokenEndIndex',
                                                                  'totalTokenOffset',
                                                                  [   'tokens',
                                                                      'tokenStartIndex',
                                                                      'tokenEndIndex',
                                                                      'totalTokenOffset',
                                                                      'tokenChunkKey',
                                                                      'tokenTextKey',
                                                                      'tokenLabelKey'],
                                                                  [   'annotation',
                                                                      'tokenStartIndex',
                                                                      'tokenEndIndex'],
                                                                  [   'annotation',
                                                                      'tokenStartIndex',
                                                                      'tokenEndIndex',
                                                                      'tokenChunkKey',
                                                                      'tokenLabelKey']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getAnnotatedChunkUsingCharOffsets': {   'req_args': [   'annotation',
                                                                                  'charOffsetStart',
                                                                                  'charOffsetEnd'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getAnnotatedChunksUsingSortedCharOffsets': {   'req_args': [   'annotation',
                                                                                         'charOffsets',
                                                                                         [   'annotation',
                                                                                             'charOffsets',
                                                                                             'charOffsetIsRelative',
                                                                                             'tokenChunkKey',
                                                                                             'tokenLabelKey',
                                                                                             'allowPartialTokens']],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getChunkOffsetsUsingCharOffsets': {   'req_args': [   'chunkList',
                                                                                'charStart',
                                                                                'charEnd'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getMergedChunk': {   'req_args': [   'chunkList',
                                                               'origText',
                                                               'chunkIndexStart',
                                                               'chunkIndexEnd',
                                                               'tokenFactory',
                                                               [   'chunkList',
                                                                   'chunkIndexStart',
                                                                   'chunkIndexEnd',
                                                                   'aggregators',
                                                                   'tokenFactory']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.getTokenText': {   'req_args': [   'tokens',
                                                             'tokenTextKey',
                                                             [   'tokens',
                                                                 'tokenTextKey',
                                                                 'delimiter']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.hasCharacterOffsets': {   'req_args': ['chunk'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.mergeChunks': {   'req_args': [   'chunkList',
                                                            'origText',
                                                            'chunkIndexStart',
                                                            'chunkIndexEnd'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ChunkAnnotationUtils.splitCoreMap': {   'req_args': [   'p',
                                                             'includeMatched',
                                                             'cm',
                                                             'factory'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ChunkAnnotationUtils.java'},
    'ClassicCounter': {   'req_args': [   ['initialCapacity'],
                                          ['mapFactory'],
                                          ['mapFactory', 'initialCapacity'],
                                          ['c'],
                                          ['collection']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.addAll': {   'req_args': ['counter'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.clear': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.containsKey': {   'req_args': ['key'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.decrementCount': {   'req_args': ['key', 'count', ['key']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.defaultReturnValue': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.entrySet': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.fromString': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.getCount': {   'req_args': ['key'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.getFactory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.identityHashMapCounter': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.incrementCount': {   'req_args': ['key', 'count', ['key']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.isEmpty': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.iterator': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.keySet': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.logIncrementCount': {   'req_args': ['key', 'count'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.prettyLog': {   'req_args': ['channels', 'description'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.remove': {   'req_args': ['key'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.removeAll': {   'req_args': ['keys'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.setCount': {   'req_args': ['key', 'count'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.setDefaultReturnValue': {   'req_args': ['rv'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.size': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.totalCount': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.valueOfIgnoreComments': {   'req_args': ['s'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'ClassicCounter.values': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\ClassicCounter.java'},
    'Classifier': {   'req_args': [   'config',
                                      'E',
                                      'W1',
                                      'b1',
                                      'W2',
                                      'preComputed',
                                      [   'config',
                                          'dataset',
                                          'E',
                                          'W1',
                                          'b1',
                                          'W2',
                                          'preComputed']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.clearGradientHistories': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.computeCostFunction': {   'req_args': [   'batchSize',
                                                          'regParameter',
                                                          'dropOutProb'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.finalizeTraining': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.getE': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.getW1': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.getW2': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.getb1': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.preCompute': {   'req_args': [['toPreCompute']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'Classifier.takeAdaGradientStep': {   'req_args': [   'cost',
                                                          'adaAlpha',
                                                          'adaEps'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Classifier.java'},
    'ClassifierCombiner': {   'req_args': [   'p',
                                              [   'props',
                                                  'combinationMode',
                                                  'loadPaths'],
                                              ['combinationMode', 'loadPaths'],
                                              ['loadPaths'],
                                              ['classifiers'],
                                              ['ois', 'props']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.classify': {   'req_args': ['tokens'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.classifyWithGlobalInformation': {   'req_args': [   'tokenSeq',
                                                                            'doc',
                                                                            'sent'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.examineCRF': {   'req_args': [   'cc',
                                                         'crfNameOrIndex',
                                                         'flags',
                                                         'testFile',
                                                         'testFiles',
                                                         'readerAndWriter'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.extractCombinationMode': {   'req_args': ['p'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.extractCombinationModeSafe': {   'req_args': ['p'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.getClassifier': {   'req_args': [   'loadPath',
                                                            'props',
                                                            ['ois', 'props']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.labels': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.loadClassifier': {   'req_args': ['in', 'props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.loadClassifierFromPath': {   'req_args': [   'props',
                                                                     'path'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.serializeClassifier': {   'req_args': [   'serializePath',
                                                                  ['oos']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.showCCInfo': {   'req_args': ['cc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierCombiner.train': {   'req_args': ['docs', 'readerAndWriter'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ClassifierCombiner.java'},
    'ClassifierDemo': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\demo\\ClassifierDemo.java'},
    'ClassifierDemo.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\demo\\ClassifierDemo.java'},
    'ClassifierExample': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ClassifierExample.java'},
    'ClassifierExample.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ClassifierExample.java'},
    'ClauseSplitterSearchProblem': {   'req_args': [   'tree',
                                                       'assumedTruth',
                                                       'isClauseClassifier',
                                                       'featurizer',
                                                       [   'tree',
                                                           'assumedTruth']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ClauseSplitterSearchProblem.java'},
    'ClauseSplitterSearchProblem.search': {   'req_args': [   'candidateFragments',
                                                              [   'candidateFragments',
                                                                  'classifier',
                                                                  'hardCodedSplits',
                                                                  'featurizer',
                                                                  'maxTicks']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ClauseSplitterSearchProblem.java'},
    'ClauseSplitterSearchProblem.topClauses': {   'req_args': [   'thresholdProbability',
                                                                  'maxClauses'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ClauseSplitterSearchProblem.java'},
    'CleanXmlAnnotator': {   'req_args': [   ['properties'],
                                             [   'xmlTagsToRemove',
                                                 'sentenceEndingTags',
                                                 'dateTags',
                                                 'allowFlawedXml']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.annotate': {   'req_args': ['annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.process': {   'req_args': ['tokens'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.requirementsSatisfied': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.requires': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setDiscourseTags': {   'req_args': [   'utteranceTurnTags',
                                                              'speakerTags'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setDocAnnotationPatterns': {   'req_args': ['conf'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setDocIdTagMatcher': {   'req_args': ['docIdTags'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setDocTypeTagMatcher': {   'req_args': ['docTypeTags'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setQuoteTagMatcher': {   'req_args': ['quoteTags'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setSectionAnnotationPatterns': {   'req_args': ['conf'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setSectionTagMatcher': {   'req_args': ['sectionTags'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setSingleSentenceTagMatcher': {   'req_args': ['tags'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setSsplitDiscardTokensMatcher': {   'req_args': ['tags'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setTokenAnnotationPatterns': {   'req_args': ['conf'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'CleanXmlAnnotator.setTokenBeginTokenEnd': {   'req_args': ['tokensList'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CleanXmlAnnotator.java'},
    'Clique': {   'req_args': ['relativeIndices'],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.hashCode': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.indexOfRelativeIndex': {   'req_args': ['relativeIndex'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.leftMessage': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.maxLeft': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.maxRight': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.relativeIndex': {   'req_args': ['i'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.rightMessage': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.shift': {   'req_args': ['shiftAmount'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.size': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.toString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'Clique.valueOf': {   'req_args': [   'maxLeft',
                                          'maxRight',
                                          ['relativeIndices'],
                                          ['c', 'offset']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\Clique.java'},
    'CliqueTree': {   'req_args': ['model', 'weights'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\CliqueTree.java'},
    'CliqueTree.calculateMAP': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\CliqueTree.java'},
    'CliqueTree.calculateMarginals': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\CliqueTree.java'},
    'CliqueTree.calculateMarginalsJustSingletons': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\CliqueTree.java'},
    'ClosestMentionSieve': {   'req_args': [   'doc',
                                               'characterMap',
                                               'pronounCorefMap',
                                               'animacySet'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ClosestMentionSieve.java'},
    'ClosestMentionSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ClosestMentionSieve.java'},
    'ClosestMentionSieve.getClosestMention': {   'req_args': ['quote'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ClosestMentionSieve.java'},
    'Clusterer': {   'req_args': [['modelPath']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Clusterer.java'},
    'Clusterer.doTraining': {   'req_args': ['modelName'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Clusterer.java'},
    'Clusterer.getClusterMerges': {   'req_args': ['doc'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Clusterer.java'},
    'ClustererDataLoader.loadDocuments': {   'req_args': ['maxDocs'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\ClustererDataLoader.java'},
    'ClusteringCorefAlgorithm': {   'req_args': [   'props',
                                                    'dictionaries',
                                                    [   'props',
                                                        'dictionaries',
                                                        'clusteringPath',
                                                        'classificationPath',
                                                        'rankingPath',
                                                        'anaphoricityPath',
                                                        'wordCountsPath']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\ClusteringCorefAlgorithm.java'},
    'ClusteringCorefAlgorithm.runCoref': {   'req_args': ['document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\ClusteringCorefAlgorithm.java'},
    'CmdEvaluator.evaluate': {   'req_args': ['x'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.evaluateCmd': {   'req_args': ['cmd'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.getCmd': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.getError': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.getOutput': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.outputToCmd': {   'req_args': ['outputStream'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.setValues': {   'req_args': ['x'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CmdEvaluator.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\CmdEvaluator.java'},
    'CoNLL2011DocumentReader': {   'req_args': [   'filepath',
                                                   ['filepath', 'options']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.close': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.getMention': {   'req_args': [   'index',
                                                              'corefG',
                                                              'sentenceAnno'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.getNextDocument': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.include': {   'req_args': [   'sentenceInfo',
                                                           'mention',
                                                           'corefG'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.reset': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.usage': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLL2011DocumentReader.writeTabSep': {   'req_args': [   'pw',
                                                               'sentence',
                                                               'chainmap'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLL2011DocumentReader.java'},
    'CoNLLBenchmark.benchmarkOptimizer': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLBenchmark.java'},
    'CoNLLBenchmark.generateSentenceModel': {   'req_args': [   'namespace',
                                                                'sentence',
                                                                'tags'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLBenchmark.java'},
    'CoNLLBenchmark.getEmbeddings': {   'req_args': [   'cacheFilename',
                                                        'sentences'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLBenchmark.java'},
    'CoNLLBenchmark.getSentences': {   'req_args': ['filename'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLBenchmark.java'},
    'CoNLLBenchmark.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLBenchmark.java'},
    'CoNLLDocumentReader': {   'req_args': [   'filepath',
                                               ['filepath', 'options']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.close': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.extractGoldMentions': {   'req_args': ['conllDoc'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.getMention': {   'req_args': [   'index',
                                                          'corefG',
                                                          'sentenceAnno'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.getNextDocument': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.include': {   'req_args': [   'sentenceInfo',
                                                       'mention',
                                                       'corefG'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.nextDoc': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.reset': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.usage': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReader.writeTabSep': {   'req_args': [   'pw',
                                                           'sentence',
                                                           'chainmap'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoNLLDocumentReader.java'},
    'CoNLLDocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoNLLDocumentReaderAndWriter.java'},
    'CoNLLDocumentReaderAndWriter.init': {   'req_args': ['flags'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoNLLDocumentReaderAndWriter.java'},
    'CoNLLDocumentReaderAndWriter.main': {   'req_args': ['args'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoNLLDocumentReaderAndWriter.java'},
    'CoNLLDocumentReaderAndWriter.printAnswers': {   'req_args': ['doc', 'out'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoNLLDocumentReaderAndWriter.java'},
    'CoNLLDocumentReaderAndWriter.toString': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoNLLDocumentReaderAndWriter.java'},
    'CoNLLFeaturizer.annotate': {   'req_args': [   'model',
                                                    'tags',
                                                    'namespace',
                                                    'embeddings'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\CoNLLFeaturizer.java'},
    'CoNLLMentionExtractor': {   'req_args': [   'dict',
                                                 'props',
                                                 'semantics',
                                                 [   'dict',
                                                     'props',
                                                     'semantics',
                                                     'singletonModel']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLLMentionExtractor.java'},
    'CoNLLMentionExtractor.extractGoldMentions': {   'req_args': ['conllDoc'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLLMentionExtractor.java'},
    'CoNLLMentionExtractor.nextDoc': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLLMentionExtractor.java'},
    'CoNLLMentionExtractor.resetDocs': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoNLLMentionExtractor.java'},
    'CoNLLOutputter': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLOutputter.java'},
    'CoNLLOutputter.conllPrint': {   'req_args': [   'annotation',
                                                     'os',
                                                     [   'annotation',
                                                         'os',
                                                         'pipeline'],
                                                     [   'annotation',
                                                         'os',
                                                         'options']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLOutputter.java'},
    'CoNLLOutputter.print': {   'req_args': ['doc', 'target', 'options'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLOutputter.java'},
    'CoNLLUDocumentReader': {   'req_args': [['lang']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUDocumentReader.java'},
    'CoNLLUDocumentReader.getIterator': {   'req_args': ['r'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUDocumentReader.java'},
    'CoNLLUDocumentWriter.printPOSAnnotations': {   'req_args': [   'sentence',
                                                                    'fakeDeps'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUDocumentWriter.java'},
    'CoNLLUDocumentWriter.printSemanticGraph': {   'req_args': [   'basicSg',
                                                                   [   'basicSg',
                                                                       'enhancedSg'],
                                                                   [   'basicSg',
                                                                       'enhancedSg',
                                                                       'unescapeParenthesis']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUDocumentWriter.java'},
    'CoNLLUDocumentWriter.printSpan': {   'req_args': ['sb', 'token'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUDocumentWriter.java'},
    'CoNLLUOutputter': {   'req_args': [['type'], ['props']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUOutputter.java'},
    'CoNLLUOutputter.conllUPrint': {   'req_args': [   'annotation',
                                                       'os',
                                                       [   'annotation',
                                                           'os',
                                                           'pipeline'],
                                                       [   'annotation',
                                                           'os',
                                                           'options']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUOutputter.java'},
    'CoNLLUOutputter.print': {   'req_args': ['doc', 'target', 'options'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUOutputter.java'},
    'CoNLLUReader': {   'req_args': [['props']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUReader.convertCoNLLUDocumentToAnnotation': {   'req_args': ['doc'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUReader.convertCoNLLUSentenceToCoreMap': {   'req_args': [   'doc',
                                                                       'sentence'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUReader.readCoNLLUFile': {   'req_args': ['filePath'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUReader.readCoNLLUFileCreateCoNLLUDocuments': {   'req_args': [   'filePath'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUReader.readCoNLLUFileCreateCoNLLXLines': {   'req_args': [   'filePath'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoNLLUReader.java'},
    'CoNLLUTagUpdater.main': {   'req_args': ['args', ['args']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\CoNLLUTagUpdater.java'},
    'CoNLLUUtils.parseExtraDeps': {   'req_args': ['extraDepsString'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUUtils.java'},
    'CoNLLUUtils.parseFeatures': {   'req_args': ['featureString'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUUtils.java'},
    'CoNLLUUtils.toExtraDepsString': {   'req_args': ['extraDeps'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUUtils.java'},
    'CoNLLUUtils.toFeatureString': {   'req_args': ['features'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\CoNLLUUtils.java'},
    'CodepointCoreLabelProcessor.process': {   'req_args': ['tokens'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CodepointCoreLabelProcessor.java'},
    'CodepointCoreLabelProcessor.restore': {   'req_args': [   'originalTokens',
                                                               'processedTokens'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CodepointCoreLabelProcessor.java'},
    'CoindexNodes': {   'req_args': ['children'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CoindexNodes.java'},
    'CoindexNodes.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CoindexNodes.java'},
    'CoindexationGenerator.generateIndex': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CoindexationGenerator.java'},
    'CoindexationGenerator.setLastIndex': {   'req_args': ['t'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CoindexationGenerator.java'},
    'CollapseSubtree': {   'req_args': ['rootNodeName'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\CollapseSubtree.java'},
    'CollapseSubtree.evaluate': {   'req_args': ['sg', 'sm'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\CollapseSubtree.java'},
    'CollapseSubtree.toEditString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\CollapseSubtree.java'},
    'CollapseUnaryTransformer.transformTree': {   'req_args': ['tree'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\CollapseUnaryTransformer.java'},
    'CollectionFactory.arrayListFactory': {   'req_args': [['size']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.hashSetFactory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.linkedListFactory': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.newCollection': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.newEmptyCollection': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.newSingletonCollection': {   'req_args': ['t'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionFactory.treeSetFactory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionFactory.java'},
    'CollectionUtils': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.addAll': {   'req_args': ['collection', 'items'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.asDoubleArray': {   'req_args': ['coll'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.asIntArray': {   'req_args': ['coll'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.asList': {   'req_args': ['a', ['a']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.asSet': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.compareLists': {   'req_args': ['list1', 'list2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.concatIterators': {   'req_args': ['iterators'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.containsAny': {   'req_args': ['collection', 'toCheck'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.containsObject': {   'req_args': ['c', 'o'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.diff': {   'req_args': ['list1', 'list2'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.diffAsSet': {   'req_args': ['list1', 'list2'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.filterAsList': {   'req_args': ['original', 'f'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.flatten': {   'req_args': ['nestedList'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getAll': {   'req_args': ['map', 'indices'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getIndex': {   'req_args': [   'l',
                                                    'o',
                                                    ['l', 'o', 'fromIndex']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getListComparator': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getMapFromString': {   'req_args': [   's',
                                                            'keyClass',
                                                            'valueClass',
                                                            'mapFactory'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getNGrams': {   'req_args': [   'items',
                                                     'minSize',
                                                     'maxSize'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.getPrefixesAndSuffixes': {   'req_args': [   'items',
                                                                  'minSize',
                                                                  'maxSize',
                                                                  'paddingSymbol',
                                                                  'includePrefixes',
                                                                  'includeSuffixes'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.intersection': {   'req_args': ['set1', 'set2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.isSubList': {   'req_args': ['l1', 'l'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.iterableFromEnumerator': {   'req_args': ['lst'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.iteratorFromEnumerator': {   'req_args': ['lst_'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.loadCollection': {   'req_args': [   'filename',
                                                          'c',
                                                          'cf',
                                                          ['file', 'c', 'cf'],
                                                          [   'fileName',
                                                              'itemClass',
                                                              'collection'],
                                                          [   'file',
                                                              'itemClass',
                                                              'collection']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.makeList': {   'req_args': ['items'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.maxIndex': {   'req_args': ['list'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.mergeList': {   'req_args': [   'list',
                                                     'matched',
                                                     'toIntervalFunc',
                                                     'aggregator',
                                                     [   'list',
                                                         'matched',
                                                         'aggregator']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.mergeListWithSortedMatched': {   'req_args': [   'list',
                                                                      'matched',
                                                                      'aggregator'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.mergeListWithSortedMatchedPreAggregated': {   'req_args': [   'list',
                                                                                   'matched',
                                                                                   'toIntervalFunc'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.mode': {   'req_args': ['values'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.modes': {   'req_args': ['values'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.partitionIntoFolds': {   'req_args': [   'values',
                                                              'numFolds'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.removeObject': {   'req_args': ['l', 'o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.sample': {   'req_args': ['l', 'r'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.sampleWithReplacement': {   'req_args': [   'c',
                                                                 'n',
                                                                 [   'c',
                                                                     'n',
                                                                     'r']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.sampleWithoutReplacement': {   'req_args': [   'c',
                                                                    'n',
                                                                    [   'c',
                                                                        'n',
                                                                        'r']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.sorted': {   'req_args': [   'items',
                                                  ['items', 'comparator']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.toList': {   'req_args': ['items'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.toSet': {   'req_args': ['items'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.toVerticalString': {   'req_args': ['m'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.trainTestFoldsForCV': {   'req_args': [   'values',
                                                               'numFolds'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.transformAsList': {   'req_args': ['original', 'f'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.transformAsSet': {   'req_args': ['original', 'f'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.union': {   'req_args': ['set1', 'set2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.unionAsSet': {   'req_args': ['set1', 'set2', ['sets']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionUtils.uniqueNonhashableObjects': {   'req_args': [   'objects',
                                                                    'customHasher'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionUtils.java'},
    'CollectionValuedMap': {   'req_args': [   'mf',
                                               'cf',
                                               'treatCollectionsAsImmutable',
                                               [   'mf',
                                                   'cf',
                                                   'treatCollectionsAsImmutable',
                                                   'map'],
                                               ['cvm'],
                                               [],
                                               ['cf']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.add': {   'req_args': ['key', 'value'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.addAll': {   'req_args': [   'key',
                                                      'values',
                                                      ['m'],
                                                      ['cvm']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.addKey': {   'req_args': ['key'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.allValues': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.clear': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.containsKey': {   'req_args': ['key'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.containsValue': {   'req_args': ['value'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.deltaCopy': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.entrySet': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.equals': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.get': {   'req_args': ['key'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.hashCode': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.isEmpty': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.keySet': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.put': {   'req_args': ['key', 'collection'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.putAll': {   'req_args': ['m'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.remove': {   'req_args': ['key'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.removeAll': {   'req_args': ['keys'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.removeMapping': {   'req_args': ['key', 'value'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.size': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollectionValuedMap.values': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CollectionValuedMap.java'},
    'CollinsDepEval': {   'req_args': [   'str',
                                          'runningAverages',
                                          'hf',
                                          'startSymbol'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\CollinsDepEval.java'},
    'CollinsDepEval.display': {   'req_args': ['verbose', 'pw'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\CollinsDepEval.java'},
    'CollinsDepEval.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\CollinsDepEval.java'},
    'CollinsDepEval.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\CollinsDepEval.java'},
    'CollinsDependency': {   'req_args': ['modifier', 'head', 'rel'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.dependencyFactory': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.dependent': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.equals': {   'req_args': ['other'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.equalsIgnoreName': {   'req_args': ['o'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.extractFromTree': {   'req_args': [   't',
                                                             'startSymbol',
                                                             'hf'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.extractNormalizedFromTree': {   'req_args': [   't',
                                                                       'startSymbol',
                                                                       'hf'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.getRelation': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.governor': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.name': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsDependency.toString': {   'req_args': ['format', []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsDependency.java'},
    'CollinsHeadFinder': {   'req_args': [   ['tlp'],
                                             ['tlp', 'categoriesToAvoid']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsHeadFinder.java'},
    'CollinsHeadFinder.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsHeadFinder.java'},
    'CollinsPuncTransformer': {   'req_args': ['tlp'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\CollinsPuncTransformer.java'},
    'CollinsPuncTransformer.transformTree': {   'req_args': ['tree'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\CollinsPuncTransformer.java'},
    'CollinsRelation': {   'req_args': ['par', 'head', 'mod', 'dir'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsRelation.java'},
    'CollinsRelation.equals': {   'req_args': ['other'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsRelation.java'},
    'CollinsRelation.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsRelation.java'},
    'CollinsRelation.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollinsRelation.java'},
    'CollocationFinder': {   'req_args': ['t', 'w', ['t', 'w', 'hf']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollocationFinder.java'},
    'CollocationFinder.getMangledTree': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollocationFinder.java'},
    'CollocationFinder.printCollocationStrings': {   'req_args': ['pw'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CollocationFinder.java'},
    'ColumnDataClassifier': {   'req_args': [   'filename',
                                                ['props'],
                                                ['flagsClassifierPair']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.classOf': {   'req_args': ['example'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.crossValidate': {   'req_args': [   'dataset',
                                                              'lineInfos'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.getClassifier': {   'req_args': ['path', ['ois'], []],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.makeClassifier': {   'req_args': ['train'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.makeDatumFromLine': {   'req_args': ['line'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.makeDatumFromStrings': {   'req_args': ['strings'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.readAndReturnTrainingExamples': {   'req_args': [   'fileName'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.readTestExamples': {   'req_args': ['filename'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.readTrainingExamples': {   'req_args': ['fileName'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.scoresOf': {   'req_args': ['example'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.serializeClassifier': {   'req_args': [   'serializeTo',
                                                                    ['oos']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.testClassifier': {   'req_args': ['testFile'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifier.trainClassifier': {   'req_args': ['path'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ColumnDataClassifier.java'},
    'ColumnDataClassifierAnnotator': {   'req_args': [   'propFile',
                                                         ['props'],
                                                         [   'propFile',
                                                             'verbose']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ColumnDataClassifierAnnotator.java'},
    'ColumnDataClassifierAnnotator.annotate': {   'req_args': ['annotation'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ColumnDataClassifierAnnotator.java'},
    'ColumnDataClassifierAnnotator.main': {   'req_args': ['args'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ColumnDataClassifierAnnotator.java'},
    'ColumnDataClassifierAnnotator.requirementsSatisfied': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ColumnDataClassifierAnnotator.java'},
    'ColumnDataClassifierAnnotator.requires': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ColumnDataClassifierAnnotator.java'},
    'ColumnDocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnDocumentReaderAndWriter.java'},
    'ColumnDocumentReaderAndWriter.init': {   'req_args': ['flags', ['map']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnDocumentReaderAndWriter.java'},
    'ColumnDocumentReaderAndWriter.printAnswers': {   'req_args': [   'doc',
                                                                      'out'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnDocumentReaderAndWriter.java'},
    'ColumnTabDocumentReaderWriter.getDocIterator': {   'req_args': [   'r',
                                                                        [   'r',
                                                                            'includeText']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnTabDocumentReaderWriter.java'},
    'ColumnTabDocumentReaderWriter.getIterator': {   'req_args': ['r'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnTabDocumentReaderWriter.java'},
    'ColumnTabDocumentReaderWriter.init': {   'req_args': [   'flags',
                                                              ['props'],
                                                              ['name', 'props'],
                                                              ['map'],
                                                              [   'flags',
                                                                  'tokenFactory',
                                                                  'tokensAnnotationClassName'],
                                                              [   'map',
                                                                  'tokenFactory',
                                                                  'tokensAnnotationClassName']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnTabDocumentReaderWriter.java'},
    'ColumnTabDocumentReaderWriter.printAnswers': {   'req_args': [   'doc',
                                                                      'out'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ColumnTabDocumentReaderWriter.java'},
    'CombinationFeatureFactory': {   'req_args': ['factories'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CombinationFeatureFactory.java'},
    'CombinationFeatureFactory.featurize': {   'req_args': [   'state',
                                                               'features'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CombinationFeatureFactory.java'},
    'CombineDVModels.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CombineDVModels.java'},
    'CombinedDVModelReranker': {   'req_args': ['op', 'models'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CombinedDVModelReranker.java'},
    'CombinedDVModelReranker.getEvals': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CombinedDVModelReranker.java'},
    'CombinedDVModelReranker.process': {   'req_args': ['sentence'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\CombinedDVModelReranker.java'},
    'CommandLineTokenizer': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CommandLineTokenizer.java'},
    'CommandLineTokenizer.tokenize': {   'req_args': ['commandLine'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CommandLineTokenizer.java'},
    'CompanyNameDetector': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CompanyNameDetector.isDynamic': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CompanyNameDetector.isLocal': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'Comparators': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.chain': {   'req_args': ['c1', 'c2', ['c'], ['c']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.getArrayComparator': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.getBooleanArrayComparator': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.getListComparator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.getStringRepresentationComparator': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.nullSafeCompare': {   'req_args': ['one', 'two'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.nullSafeNaturalComparator': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'Comparators.reverse': {   'req_args': ['c'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Comparators.java'},
    'ComplexNodePattern': {   'req_args': [   'getter',
                                              'annotationPatterns',
                                              ['getter', 'annotationPatterns'],
                                              ['getter', 'key', 'pattern']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.add': {   'req_args': ['c', 'pattern'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.getAnnotationPatterns': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.match': {   'req_args': ['token'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.matchWithResult': {   'req_args': ['token'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.newStringRegexPattern': {   'req_args': [   'regex',
                                                                    'flags'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'ComplexNodePattern.valueOf': {   'req_args': [   'env',
                                                      'attributes',
                                                      'getter',
                                                      'getKey'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ComplexNodePattern.java'},
    'CompositeTreeTransformer': {   'req_args': [['tt']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreeTransformer.java'},
    'CompositeTreeTransformer.addTransformer': {   'req_args': ['tt'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreeTransformer.java'},
    'CompositeTreeTransformer.toString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreeTransformer.java'},
    'CompositeTreeTransformer.transformTree': {   'req_args': ['t'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreeTransformer.java'},
    'CompositeTreebank': {   'req_args': ['t1', 't2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreebank.java'},
    'CompositeTreebank.apply': {   'req_args': ['tp'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreebank.java'},
    'CompositeTreebank.clear': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreebank.java'},
    'CompositeTreebank.iterator': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreebank.java'},
    'CompositeTreebank.loadPath': {   'req_args': ['path', 'filt'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CompositeTreebank.java'},
    'CompoundUnaryTransition': {   'req_args': ['labels', 'isRoot'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompoundUnaryTransition.apply': {   'req_args': [   'state',
                                                         [   'state',
                                                             'scoreDelta']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompoundUnaryTransition.equals': {   'req_args': ['o'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompoundUnaryTransition.hashCode': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompoundUnaryTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompoundUnaryTransition.toString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CompoundUnaryTransition.java'},
    'CompressedFeatureVector': {   'req_args': ['keys', 'values'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\CompressedFeatureVector.java'},
    'Compressor': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Compressor.java'},
    'Compressor.compress': {   'req_args': ['c'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Compressor.java'},
    'Compressor.getIndex': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Compressor.java'},
    'Compressor.uncompress': {   'req_args': ['cvf'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Compressor.java'},
    'ConcatVector': {   'req_args': ['numComponents', ['clone'], []],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.addVectorInPlace': {   'req_args': ['other', 'multiple'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.deepClone': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.dotProduct': {   'req_args': ['other'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.elementwiseProductInPlace': {   'req_args': ['other'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.getDenseComponent': {   'req_args': ['i'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.getNumberOfComponents': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.getProtoBuilder': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.getSparseIndex': {   'req_args': ['component'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.getValueAt': {   'req_args': ['component', 'offset'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.isComponentSparse': {   'req_args': ['i'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.mapInPlace': {   'req_args': ['fn'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.newEmptyClone': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.readFromProto': {   'req_args': ['m'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.readFromStream': {   'req_args': ['stream'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.setDenseComponent': {   'req_args': ['component', 'values'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.setSparseComponent': {   'req_args': [   'component',
                                                           'index',
                                                           'value'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.valueEquals': {   'req_args': ['other', 'tolerance'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVector.writeToStream': {   'req_args': ['stream'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVector.java'},
    'ConcatVectorBenchmark.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\ConcatVectorBenchmark.java'},
    'ConcatVectorNamespace.debugVector': {   'req_args': ['vector', 'bw'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.ensureFeature': {   'req_args': ['featureName'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.ensureSparseFeature': {   'req_args': [   'featureName',
                                                                     'index'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.newVector': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.newWeightsVector': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.setDenseFeature': {   'req_args': [   'vector',
                                                                 'featureName',
                                                                 'value'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorNamespace.setSparseFeature': {   'req_args': [   'vector',
                                                                  'featureName',
                                                                  'index',
                                                                  'value'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorNamespace.java'},
    'ConcatVectorProto': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorProto.java'},
    'ConcatVectorProto.getDescriptor': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorProto.java'},
    'ConcatVectorProto.registerAllExtensions': {   'req_args': [   'registry',
                                                                   [   'registry']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorProto.java'},
    'ConcatVectorTable': {   'req_args': ['dimensions'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.cacheVectors': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.cloneTable': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.getProtoBuilder': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.readFromProto': {   'req_args': ['proto'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.readFromStream': {   'req_args': ['stream'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.releaseCache': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.valueEquals': {   'req_args': ['other', 'tolerance'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTable.writeToStream': {   'req_args': ['stream'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\ConcatVectorTable.java'},
    'ConcatVectorTableProto': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorTableProto.java'},
    'ConcatVectorTableProto.getDescriptor': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorTableProto.java'},
    'ConcatVectorTableProto.registerAllExtensions': {   'req_args': [   'registry',
                                                                        [   'registry']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\ConcatVectorTableProto.java'},
    'ConcatenationIterator': {   'req_args': ['first', 'second'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConcatenationIterator.java'},
    'ConcatenationIterator.hasNext': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConcatenationIterator.java'},
    'ConcatenationIterator.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConcatenationIterator.java'},
    'ConcatenationIterator.next': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConcatenationIterator.java'},
    'ConcatenationIterator.remove': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConcatenationIterator.java'},
    'ConcurrentHashCounter': {   'req_args': [['initialCapacity']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.addAll': {   'req_args': ['counter'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.clear': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.containsKey': {   'req_args': ['key'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.decrementCount': {   'req_args': [   'key',
                                                                'value',
                                                                ['key']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.defaultReturnValue': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.entrySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.equals': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.getCount': {   'req_args': ['key'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.getFactory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.hashCode': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.incrementCount': {   'req_args': [   'key',
                                                                'value',
                                                                ['key']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.iterator': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.keySet': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.logIncrementCount': {   'req_args': ['key', 'value'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.prettyLog': {   'req_args': [   'channels',
                                                           'description'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.remove': {   'req_args': ['key'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.setCount': {   'req_args': ['key', 'value'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.setDefaultReturnValue': {   'req_args': ['value'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.size': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.toString': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.totalCount': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashCounter.values': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashCounter.java'},
    'ConcurrentHashIndex': {   'req_args': [['initialCapacity']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.add': {   'req_args': ['o'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.addAll': {   'req_args': ['c'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.addToIndex': {   'req_args': ['o'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.clear': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.contains': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.get': {   'req_args': ['i'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.indexOf': {   'req_args': ['o', ['o', 'add']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.isLocked': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.iterator': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.lock': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.objects': {   'req_args': ['indices'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.objectsList': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.saveToFilename': {   'req_args': ['s'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.saveToWriter': {   'req_args': ['out'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.size': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'ConcurrentHashIndex.unlock': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\ConcurrentHashIndex.java'},
    'Config': {   'req_args': ['properties'],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Config.java'},
    'Config.getLanguage': {   'req_args': ['languageStr'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Config.java'},
    'Config.printParameters': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Config.java'},
    'ConfigParser': {   'req_args': ['filename'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\ConfigParser.java'},
    'ConfigParser.iterator': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\ConfigParser.java'},
    'ConfigParser.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\ConfigParser.java'},
    'ConfigParser.parse': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\ConfigParser.java'},
    'ConfigParser.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\ConfigParser.java'},
    'Configuration': {   'req_args': ['config', ['sentence']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.addArc': {   'req_args': ['h', 't', 'l'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getBuffer': {   'req_args': ['k'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getBufferSize': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getCoreLabels': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getHead': {   'req_args': ['k'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getLabel': {   'req_args': ['k'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getLeftChild': {   'req_args': ['k', 'cnt', ['k']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getLeftLabelSet': {   'req_args': ['k'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getLeftValency': {   'req_args': ['k'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getPOS': {   'req_args': ['k'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getRightChild': {   'req_args': ['k', 'cnt', ['k']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getRightLabelSet': {   'req_args': ['k'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getRightValency': {   'req_args': ['k'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getSentenceSize': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getStack': {   'req_args': ['k'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getStackSize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getStr': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.getWord': {   'req_args': ['k'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.hasOtherChild': {   'req_args': ['k', 'goldTree'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.removeSecondTopStack': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.removeTopStack': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'Configuration.shift': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Configuration.java'},
    'ConfusionMatrix': {   'req_args': [['locale']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.add': {   'req_args': [   'guess',
                                               'gold',
                                               ['guess', 'gold', 'increment']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.get': {   'req_args': ['guess', 'gold'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.getContingency': {   'req_args': ['positiveLabel'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.gui': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.printTable': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.setDelimPadSize': {   'req_args': ['newPadSize'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.setLeftPadSize': {   'req_args': ['newPadSize'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.setUseRealLabels': {   'req_args': ['useRealLabels'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrix.uniqueLabels': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConfusionMatrix.java'},
    'ConfusionMatrixTSV.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\scripts\\ConfusionMatrixTSV.java'},
    'ConnectedComponents.getConnectedComponents': {   'req_args': ['graph'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\ConnectedComponents.java'},
    'Constants': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Constants.java'},
    'Constants.printConstants': {   'req_args': ['logger'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Constants.java'},
    'ConstantsAndVariables': {   'req_args': [   'props',
                                                 'labels',
                                                 'answerClass',
                                                 'generalizeClasses',
                                                 'ignoreClasses',
                                                 [   'props',
                                                     'labelDictionary',
                                                     'answerClass',
                                                     'generalizeClasses',
                                                     'ignoreClasses'],
                                                 [   'props',
                                                     'labels',
                                                     'answerClass'],
                                                 [   'props',
                                                     'label',
                                                     'answerClass'],
                                                 [   'props',
                                                     'labels',
                                                     'answerClass',
                                                     'generalizeClasses']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.addSeedWords': {   'req_args': ['label', 'seeds'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.addWordShapes': {   'req_args': ['label', 'words'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.containsFuzzy': {   'req_args': [   'words',
                                                               'w',
                                                               'minLen4Fuzzy'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getAllOptions': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getAnswerClass': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getCommonEngWords': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceFromEnglishWords': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceFromEnglishWordsMatches': {   'req_args': [   ],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceFromOtherClasses': {   'req_args': [   'label',
                                                                                 'ph',
                                                                                 'minLen'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceFromThisClass': {   'req_args': [   'label',
                                                                              'ph',
                                                                              'minLen'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceScoresOtherClass': {   'req_args': [   'label',
                                                                                 'g'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceScoresOtherClassThreshold': {   'req_args': [   'label',
                                                                                          'g'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceScoresThisClass': {   'req_args': [   'label',
                                                                                'g'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEditDistanceScoresThisClassThreshold': {   'req_args': [   'label',
                                                                                         'g'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getEnglishWords': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getGeneralWordClassClusters': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getGeneralizeClasses': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getIgnoreWordswithClassesDuringSelection': {   'req_args': [   ],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getLabels': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getLearnedWords': {   'req_args': ['label'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getLearnedWordsAsJson': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getLearnedWordsAsJsonLastIteration': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getLearnedWordsEachIter': {   'req_args': [   'label',
                                                                         []],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getOtherSemanticClassesWords': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getSeedLabelDictionary': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getSetWordsAsJson': {   'req_args': ['words'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getStopWords': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getWordClassClusters': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getWordShapeCache': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.getWordShapesForLabels': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.hasSeedWordOrOtherSem': {   'req_args': ['p'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.isFuzzyMatch': {   'req_args': [   'w1',
                                                              'w2',
                                                              'minLen4Fuzzy'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.listFileIncludingItself': {   'req_args': ['file'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.setGeneralWordClassClusters': {   'req_args': [   'generalWordClassClusters'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.setLearnedWordsEachIter': {   'req_args': [   'words',
                                                                         'label'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.setOtherSemanticClassesWords': {   'req_args': [   'other'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'ConstantsAndVariables.setUp': {   'req_args': ['props'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ConstantsAndVariables.java'},
    'Constituent': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.contains': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.crosses': {   'req_args': ['c', ['constColl']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.end': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.equals': {   'req_args': ['obj'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.hashCode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.label': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.labels': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.score': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setEnd': {   'req_args': ['end'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setFromString': {   'req_args': ['labelStr'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setLabel': {   'req_args': ['label'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setLabels': {   'req_args': ['labels'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setScore': {   'req_args': ['score'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setStart': {   'req_args': ['start'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.setValue': {   'req_args': ['value'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.start': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.toSentenceString': {   'req_args': ['s'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'Constituent.value': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Constituent.java'},
    'ConversationalSieve': {   'req_args': [   'doc',
                                               'characterMap',
                                               'pronounCorefMap',
                                               'animacySet'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ConversationalSieve.java'},
    'ConversationalSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ConversationalSieve.java'},
    'ConvertByteArray': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.aStringArrToByteArr': {   'req_args': [   's',
                                                                [   's',
                                                                    'off',
                                                                    'length'],
                                                                [   'b',
                                                                    'pos',
                                                                    's',
                                                                    'off',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.booleanArrToByteArr': {   'req_args': [   'b',
                                                                [   'b',
                                                                    'off',
                                                                    'len'],
                                                                [   'bytes',
                                                                    'pos',
                                                                    'b',
                                                                    'off',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToAString': {   'req_args': [   'b',
                                                             [   'b',
                                                                 'off',
                                                                 'length']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToAStringArr': {   'req_args': [   'b',
                                                                [   'b',
                                                                    'off',
                                                                    'length'],
                                                                [   'b',
                                                                    'off',
                                                                    's',
                                                                    'pos',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToBoolean': {   'req_args': ['b', 'off'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToBooleanArr': {   'req_args': [   'b',
                                                                [   'b',
                                                                    'off',
                                                                    'length'],
                                                                [   'b',
                                                                    'off',
                                                                    'bool',
                                                                    'pos',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToChar': {   'req_args': ['b', 'off'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToCharArr': {   'req_args': [   'b',
                                                             [   'b',
                                                                 'off',
                                                                 'length'],
                                                             [   'b',
                                                                 'off',
                                                                 'c',
                                                                 'pos',
                                                                 'length']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToDouble': {   'req_args': ['b', 'off'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToDoubleArr': {   'req_args': [   'b',
                                                               [   'b',
                                                                   'off',
                                                                   'length'],
                                                               [   'b',
                                                                   'off',
                                                                   'd',
                                                                   'pos',
                                                                   'length']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToFloat': {   'req_args': ['b', 'off'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToFloatArr': {   'req_args': [   'b',
                                                              [   'b',
                                                                  'off',
                                                                  'length'],
                                                              [   'b',
                                                                  'off',
                                                                  'f',
                                                                  'pos',
                                                                  'length']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToInt': {   'req_args': ['b', 'off'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToIntArr': {   'req_args': [   'b',
                                                            [   'b',
                                                                'off',
                                                                'length'],
                                                            [   'b',
                                                                'off',
                                                                'i',
                                                                'pos',
                                                                'length']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToLong': {   'req_args': ['b', 'off'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToLongArr': {   'req_args': [   'b',
                                                             [   'b',
                                                                 'off',
                                                                 'length'],
                                                             [   'b',
                                                                 'off',
                                                                 'l',
                                                                 'pos',
                                                                 'length']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToShort': {   'req_args': ['b', 'off'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToShortArr': {   'req_args': [   'b',
                                                              [   'b',
                                                                  'off',
                                                                  'length'],
                                                              [   'b',
                                                                  'off',
                                                                  's',
                                                                  'pos',
                                                                  'length']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToUString': {   'req_args': [   'b',
                                                             [   'b',
                                                                 'off',
                                                                 'strLen']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.byteArrToUStringArr': {   'req_args': [   'b',
                                                                [   'b',
                                                                    'off',
                                                                    'length'],
                                                                [   'b',
                                                                    'off',
                                                                    's',
                                                                    'pos',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.charArrToByteArr': {   'req_args': [   'c',
                                                             [   'c',
                                                                 'off',
                                                                 'len'],
                                                             [   'b',
                                                                 'pos',
                                                                 'c',
                                                                 'off',
                                                                 'len']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.doubleArrToByteArr': {   'req_args': [   'd',
                                                               [   'd',
                                                                   'off',
                                                                   'length'],
                                                               [   'b',
                                                                   'pos',
                                                                   'd',
                                                                   'off',
                                                                   'length']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.floatArrToByteArr': {   'req_args': [   'f',
                                                              [   'f',
                                                                  'off',
                                                                  'length'],
                                                              [   'b',
                                                                  'pos',
                                                                  'f',
                                                                  'off',
                                                                  'len']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.intArrToByteArr': {   'req_args': [   'i',
                                                            [   'i',
                                                                'off',
                                                                'length'],
                                                            [   'b',
                                                                'pos',
                                                                'i',
                                                                'off',
                                                                'len']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.longArrToByteArr': {   'req_args': [   'l',
                                                             [   'l',
                                                                 'off',
                                                                 'length'],
                                                             [   'b',
                                                                 'pos',
                                                                 'l',
                                                                 'off',
                                                                 'length']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.readDoubleArr': {   'req_args': ['rf'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.readFloatArr': {   'req_args': ['rf'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.saveDoubleArr': {   'req_args': ['rf', 'arr'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.saveFloatArr': {   'req_args': ['rf', 'arr'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.shortArrToByteArr': {   'req_args': [   's',
                                                              [   's',
                                                                  'off',
                                                                  'length'],
                                                              [   'b',
                                                                  'pos',
                                                                  's',
                                                                  'off',
                                                                  'len']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.stringAToByteArr': {   'req_args': ['s'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.stringUToByteArr': {   'req_args': ['s'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.uStringArrToByteArr': {   'req_args': [   's',
                                                                [   's',
                                                                    'off',
                                                                    'length'],
                                                                [   'b',
                                                                    'pos',
                                                                    's',
                                                                    'off',
                                                                    'length']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeAStringToByteArr': {   'req_args': [   'b',
                                                                  'off',
                                                                  's',
                                                                  [   'b',
                                                                      'off',
                                                                      's',
                                                                      'pos',
                                                                      'length']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeBooleanToByteArr': {   'req_args': [   'b',
                                                                  'off',
                                                                  'bool'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeCharToByteArr': {   'req_args': ['b', 'off', 'c'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeDoubleToByteArr': {   'req_args': ['b', 'off', 'd'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeFloatToByteArr': {   'req_args': ['b', 'off', 'f'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeIntToByteArr': {   'req_args': ['b', 'off', 'i'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeLongToByteArr': {   'req_args': ['b', 'off', 'l'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeShortToByteArr': {   'req_args': ['b', 'off', 's'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertByteArray.writeUStringToByteArr': {   'req_args': [   'b',
                                                                  'off',
                                                                  's',
                                                                  [   'b',
                                                                      'off',
                                                                      's',
                                                                      'pos',
                                                                      'length']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ConvertByteArray.java'},
    'ConvertGenderFile': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\util\\ConvertGenderFile.java'},
    'ConvertGenderFile.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\util\\ConvertGenderFile.java'},
    'ConvertMatlabModel': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ConvertMatlabModel.java'},
    'ConvertMatlabModel.copyWordVector': {   'req_args': [   'wordVectors',
                                                             'source',
                                                             'target'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ConvertMatlabModel.java'},
    'ConvertMatlabModel.loadMatrix': {   'req_args': ['binaryName', 'textName'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ConvertMatlabModel.java'},
    'ConvertMatlabModel.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ConvertMatlabModel.java'},
    'ConvertMatlabModel.replaceWordVector': {   'req_args': [   'wordVectors',
                                                                'source',
                                                                'target'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ConvertMatlabModel.java'},
    'ConvertModels.fromMatrix': {   'req_args': ['in'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.fromTensor': {   'req_args': ['in'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.readCoref': {   'req_args': ['in'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.readEmbedding': {   'req_args': ['in'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.readFastCoref': {   'req_args': ['in'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.readParser': {   'req_args': ['in'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.readSentiment': {   'req_args': ['in'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.toMatrix': {   'req_args': ['in'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.toTensor': {   'req_args': ['in'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.transform2DMap': {   'req_args': ['in', 'function'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.transformMap': {   'req_args': ['in', 'function'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.writeCoref': {   'req_args': ['model', 'out'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.writeEmbedding': {   'req_args': ['embedding', 'out'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.writeFastCoref': {   'req_args': ['model', 'out'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.writeParser': {   'req_args': ['model', 'reranker', 'out'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertModels.writeSentiment': {   'req_args': ['model', 'out'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\ConvertModels.java'},
    'ConvertTreesToTags': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\ConvertTreesToTags.java'},
    'ConvertTreesToTags.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\ConvertTreesToTags.java'},
    'CoolingSchedule.getExponentialSchedule': {   'req_args': [   'start',
                                                                  'rate',
                                                                  'numIterations'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoolingSchedule.java'},
    'CoolingSchedule.getLinearSchedule': {   'req_args': [   'start',
                                                             'numIterations'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoolingSchedule.java'},
    'CoolingSchedule.getTemperature': {   'req_args': ['iteration'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoolingSchedule.java'},
    'CoolingSchedule.numIterations': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\CoolingSchedule.java'},
    'CoordinationPattern': {   'req_args': [   'isNodeCoord',
                                               'children',
                                               'isConj',
                                               'isRoot',
                                               ['children', 'isConj']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.getChildren': {   'req_args': [[]],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.isNodeCoord': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.localString': {   'req_args': [[]],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.matcher': {   'req_args': [   'sg',
                                                       'node',
                                                       'namesToNodes',
                                                       'namesToRelations',
                                                       'variableStrings',
                                                       'ignoreCase',
                                                       [   'sg',
                                                           'alignment',
                                                           'sg_align',
                                                           'hypToText',
                                                           'node',
                                                           'namesToNodes',
                                                           'namesToRelations',
                                                           'variableStrings',
                                                           'ignoreCase'],
                                                       [   'root',
                                                           'tree',
                                                           'nodesToParents',
                                                           'namesToNodes',
                                                           'variableStrings',
                                                           'headFinder']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.setChild': {   'req_args': ['child'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationPattern.toString': {   'req_args': [['hasPrecedence'], []],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\CoordinationPattern.java'},
    'CoordinationTransformer': {   'req_args': [   'hf',
                                                   [   'hf',
                                                       'performMWETransformation']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.CCtransform': {   'req_args': ['t'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.MWETransform': {   'req_args': ['t'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.SQflatten': {   'req_args': ['t'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.UCPtransform': {   'req_args': ['t'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.gappingTransform': {   'req_args': ['t'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.prepCCTransform': {   'req_args': ['t'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.removeXOverX': {   'req_args': ['t'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CoordinationTransformer.transformTree': {   'req_args': ['t'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\CoordinationTransformer.java'},
    'CopySerializedObject.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\CopySerializedObject.java'},
    'CoreAnnotations': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreAnnotations.java'},
    'CoreDocument': {   'req_args': ['documentText', ['annotation']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.annotation': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.corefChains': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.docDate': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.docID': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.entityMentions': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.quotes': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.sentences': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.text': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.tokens': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreDocument.wrapAnnotations': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreDocument.java'},
    'CoreEntityMention': {   'req_args': ['mySentence', 'coreMapEntityMention'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.canonicalEntityMention': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.charOffsets': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.coreMap': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.entity': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.entityType': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.entityTypeConfidences': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.sentence': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.text': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreEntityMention.tokens': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreEntityMention.java'},
    'CoreLabel': {   'req_args': [   ['capacity'],
                                     ['label'],
                                     ['label'],
                                     ['label'],
                                     ['keys', 'values'],
                                     ['keys', 'values']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.after': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.before': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.beginPosition': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.category': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.docID': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.endPosition': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.factory': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.getString': {   'req_args': ['key', ['key', 'def']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.index': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.isMWT': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.isMWTFirst': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.isNewline': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.labelFactory': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.lemma': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.ner': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.nerConfidence': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.originalText': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.parseStringKeys': {   'req_args': ['keys'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.sentIndex': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setAfter': {   'req_args': ['after'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setBefore': {   'req_args': ['before'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setBeginPosition': {   'req_args': ['beginPos'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setCategory': {   'req_args': ['category'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setDocID': {   'req_args': ['docID'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setEndPosition': {   'req_args': ['endPos'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setFromString': {   'req_args': ['labelStr'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setIndex': {   'req_args': ['index'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setIsMWT': {   'req_args': ['isMWT'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setIsMWTFirst': {   'req_args': ['isFirstMWT'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setIsNewline': {   'req_args': ['isNewline'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setLemma': {   'req_args': ['lemma'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setNER': {   'req_args': ['ner'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setOriginalText': {   'req_args': ['originalText'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setSentIndex': {   'req_args': ['sentIndex'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setTag': {   'req_args': ['tag'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setValue': {   'req_args': ['value'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.setWord': {   'req_args': ['word'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.tag': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.toString': {   'req_args': [['format']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.value': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.word': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabel.wordFromString': {   'req_args': ['word'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreLabel.java'},
    'CoreLabelProcessor.process': {   'req_args': ['tokens'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CoreLabelProcessor.java'},
    'CoreLabelProcessor.restore': {   'req_args': [   'originalTokens',
                                                      'processedTokens'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CoreLabelProcessor.java'},
    'CoreLabelTokenFactory': {   'req_args': [['addIndices']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CoreLabelTokenFactory.java'},
    'CoreLabelTokenFactory.makeToken': {   'req_args': [   'tokenText',
                                                           'begin',
                                                           'length',
                                                           [   'tokenText',
                                                               'originalText',
                                                               'begin',
                                                               'length'],
                                                           [],
                                                           ['keys', 'values'],
                                                           ['labelToBeCopied']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\CoreLabelTokenFactory.java'},
    'CoreMapAggregator': {   'req_args': [   'aggregators',
                                             [   'aggregators',
                                                 'mergedKey',
                                                 'tokenFactory']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAggregator.java'},
    'CoreMapAggregator.apply': {   'req_args': ['in'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAggregator.java'},
    'CoreMapAggregator.getAggregator': {   'req_args': [   'aggregators',
                                                           [   'aggregators',
                                                               'key'],
                                                           [   'aggregators',
                                                               'key',
                                                               'tokenFactory']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAggregator.java'},
    'CoreMapAggregator.getDefaultAggregator': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAggregator.java'},
    'CoreMapAggregator.merge': {   'req_args': [   'in',
                                                   'start',
                                                   'end',
                                                   ['in'],
                                                   ['list', 'matched'],
                                                   [   'list',
                                                       'matched',
                                                       'toIntervalFunc']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAggregator.java'},
    'CoreMapAttributeAggregator.aggregate': {   'req_args': ['key', 'in'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAttributeAggregator.java'},
    'CoreMapAttributeAggregator.getAggregator': {   'req_args': ['str'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAttributeAggregator.java'},
    'CoreMapAttributeAggregator.getDefaultAggregators': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreMapAttributeAggregator.java'},
    'CoreMapExpressionExtractor': {   'req_args': [['env'], ['env', 'rules']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.appendRules': {   'req_args': ['rules'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.createExtractorFromFile': {   'req_args': [   'env',
                                                                              'filename'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.createExtractorFromFiles': {   'req_args': [   'env',
                                                                               'filenames',
                                                                               [   'env',
                                                                                   'filenames']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.createExtractorFromString': {   'req_args': [   'env',
                                                                                'str'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.extractCoreMaps': {   'req_args': [   'annotation'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.extractCoreMapsMergedWithTokens': {   'req_args': [   'annotation'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.extractExpressions': {   'req_args': [   'annotation'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.flatten': {   'req_args': ['cms'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.getEnv': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.getValue': {   'req_args': ['varname'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.keepTemporaryTags': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.setExtractRules': {   'req_args': [   'basicExtractRule',
                                                                      'compositeExtractRule',
                                                                      'filterRule'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionExtractor.setVerbose': {   'req_args': ['v'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionExtractor.java'},
    'CoreMapExpressionNodePattern': {   'req_args': [['env', 'expression']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionNodePattern.java'},
    'CoreMapExpressionNodePattern.match': {   'req_args': ['token'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionNodePattern.java'},
    'CoreMapExpressionNodePattern.toString': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionNodePattern.java'},
    'CoreMapExpressionNodePattern.valueOf': {   'req_args': [   'expression',
                                                                [   'env',
                                                                    'expression']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapExpressionNodePattern.java'},
    'CoreMapNodePattern': {   'req_args': [   'annotationPatterns',
                                              ['annotationPatterns'],
                                              ['key', 'pattern']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapNodePattern.java'},
    'CoreMapNodePattern.valueOf': {   'req_args': [   'textAnnotationPattern',
                                                      [   'textAnnotationPattern',
                                                          'flags'],
                                                      [   'env',
                                                          'textAnnotationPattern'],
                                                      ['textAnnotationPattern'],
                                                      ['attributes'],
                                                      ['env', 'attributes']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapNodePattern.java'},
    'CoreMapNodePatternTrigger': {   'req_args': ['patterns', ['patterns']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapNodePatternTrigger.java'},
    'CoreMapNodePatternTrigger.apply': {   'req_args': ['in'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapNodePatternTrigger.java'},
    'CoreMapSequenceMatcher': {   'req_args': ['pattern', 'tokens'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapSequenceMatcher.java'},
    'CoreMapSequenceMatcher.annotateGroup': {   'req_args': [   'attributes',
                                                                [   'group',
                                                                    'attributes']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapSequenceMatcher.java'},
    'CoreMapSequenceMatcher.getMergedList': {   'req_args': [['groups']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapSequenceMatcher.java'},
    'CoreMapSequenceMatcher.mergeGroup': {   'req_args': [['group']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\CoreMapSequenceMatcher.java'},
    'CoreMaps': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CoreMaps.java'},
    'CoreMaps.asMap': {   'req_args': ['coremaps', 'valueKey'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CoreMaps.java'},
    'CoreMaps.dumpCoreMap': {   'req_args': ['cm'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CoreMaps.java'},
    'CoreMaps.dumpCoreMapToStringBuilder': {   'req_args': ['cm', 'sb'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CoreMaps.java'},
    'CoreMaps.merge': {   'req_args': [   'base',
                                          'toBeMerged',
                                          ['base', 'toBeMerged']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\CoreMaps.java'},
    'CoreNLPDocumentReader': {   'req_args': [   'filepath',
                                                 ['filepath', 'options']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPDocumentReader.extractGoldMentions': {   'req_args': ['annotation'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPDocumentReader.getNextDocument': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPDocumentReader.nextDoc': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPDocumentReader.reset': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPDocumentReader.toMention': {   'req_args': ['cm', 'sentences'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\docreader\\CoreNLPDocumentReader.java'},
    'CoreNLPProtos': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreNLPProtos.java'},
    'CoreNLPProtos.getDescriptor': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreNLPProtos.java'},
    'CoreNLPProtos.registerAllExtensions': {   'req_args': [   'registry',
                                                               ['registry']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreNLPProtos.java'},
    'CoreNLPServlet.addResults': {   'req_args': ['request', 'response'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.doGet': {   'req_args': ['request', 'response'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.doPost': {   'req_args': ['request', 'response'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.init': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.outputCoNLL': {   'req_args': ['out', 'annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.outputJson': {   'req_args': ['out', 'annotation'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.outputPretty': {   'req_args': ['out', 'annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.outputVisualise': {   'req_args': ['out', 'annotation'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreNLPServlet.outputXml': {   'req_args': ['out', 'annotation'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\webapp\\CoreNLPServlet.java'},
    'CoreQuote': {   'req_args': ['myDocument', 'coreMapQuote'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.canonicalSpeaker': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.canonicalSpeakerCharOffsets': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.canonicalSpeakerEntityMention': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.canonicalSpeakerTokens': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.coreMap': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.document': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.quoteCharOffsets': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.sentences': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.speaker': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.speakerCharOffsets': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.speakerEntityMention': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.speakerTokens': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.text': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreQuote.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreQuote.java'},
    'CoreSentence': {   'req_args': ['myDocument', 'coreMapSentence'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.charOffsets': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.constituencyParse': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.coreMap': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.dependencyParse': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.document': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.entityMentions': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.lemmas': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.nerTags': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.nounPhraseTrees': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.nounPhrases': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.posTags': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.relations': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.sentiment': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.sentimentTree': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.text': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.tokens': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.tokensAsStrings': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.tregexResultTrees': {   'req_args': ['s', ['p']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.tregexResults': {   'req_args': ['p', ['s']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.verbPhraseTrees': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.verbPhrases': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreSentence.wrapEntityMentions': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CoreSentence.java'},
    'CoreUtilities': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreUtilities.java'},
    'CoreUtilities.deepCopy': {   'req_args': ['tokens'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreUtilities.java'},
    'CoreUtilities.toCoreLabelList': {   'req_args': [   'words',
                                                         ['words'],
                                                         ['words', 'tags'],
                                                         [   'words',
                                                             'tags',
                                                             'answers']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreUtilities.java'},
    'CoreUtilities.toCoreLabelListWithCharacterOffsets': {   'req_args': [   'words',
                                                                             'tags'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreUtilities.java'},
    'CoreUtilities.toSentence': {   'req_args': ['sentence'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\CoreUtilities.java'},
    'CorefAnnotator': {   'req_args': ['props'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefAnnotator.annotate': {   'req_args': ['annotation'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefAnnotator.exactRequirements': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefAnnotator.getLinks': {   'req_args': ['result'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefAnnotator.requirementsSatisfied': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefAnnotator.requires': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefAnnotator.java'},
    'CorefChain': {   'req_args': [   'c',
                                      'positions',
                                      ['cid', 'mentionMap', 'representative'],
                                      ['c', 'positions'],
                                      ['cid', 'mentionMap', 'representative']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.deleteMention': {   'req_args': ['m', ['m']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.equals': {   'req_args': ['aThat', ['aThat']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.getChainID': {   'req_args': [[]],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.getMentionMap': {   'req_args': [[]],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.getMentionsInTextualOrder': {   'req_args': [[]],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.getMentionsWithSameHead': {   'req_args': [   'position',
                                                              [   'sentenceNumber',
                                                                  'headIndex'],
                                                              ['position'],
                                                              [   'sentenceNumber',
                                                                  'headIndex']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.getRepresentativeMention': {   'req_args': [[]],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.hashCode': {   'req_args': [[]],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefChain.toString': {   'req_args': [[]],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefChain.java'},
    'CorefCluster': {   'req_args': [   'ID',
                                        ['ID', 'mentions'],
                                        ['ID'],
                                        ['ID', 'mentions']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.getClusterID': {   'req_args': [[]],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.getCorefMentions': {   'req_args': [[]],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.getFirstMention': {   'req_args': [[]],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.getRepresentativeMention': {   'req_args': [[]],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.isSinglePronounCluster': {   'req_args': ['dict', ['dict']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.mergeClusters': {   'req_args': [   'to',
                                                      'from',
                                                      ['to', 'from']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.printCorefCluster': {   'req_args': [['logger']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.size': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefCluster.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\CorefCluster.java'},
    'CorefDictionaryMatch': {   'req_args': [[]],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\CorefDictionaryMatch.java'},
    'CorefMentionAnnotator': {   'req_args': ['props'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefMentionAnnotator.java'},
    'CorefMentionAnnotator.annotate': {   'req_args': ['annotation'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefMentionAnnotator.java'},
    'CorefMentionAnnotator.requirementsSatisfied': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefMentionAnnotator.java'},
    'CorefMentionAnnotator.requires': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefMentionAnnotator.java'},
    'CorefMentionAnnotator.synchCorefMentionEntityMention': {   'req_args': [   'ann',
                                                                                'cm',
                                                                                'em'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CorefMentionAnnotator.java'},
    'CorefMentionFinder.findHead': {   'req_args': ['s', 'mentions'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.findMentions': {   'req_args': ['doc', 'dict', 'props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.findSyntacticHead': {   'req_args': [   'm',
                                                                'root',
                                                                'tokens'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.inStopList': {   'req_args': ['m'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.isPleonastic': {   'req_args': ['m', 'tree'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.isPleonasticDebug': {   'req_args': [   'm',
                                                                'tree',
                                                                'sbLog'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefMentionFinder.partitiveRule': {   'req_args': ['m', 'sent', 'dict'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\CorefMentionFinder.java'},
    'CorefPrinter.printConllOutput': {   'req_args': [   'document',
                                                         'gold',
                                                         [   'document',
                                                             'gold',
                                                             'filterSingletons'],
                                                         [   'document',
                                                             'gold',
                                                             'filterSingletons',
                                                             'corefClusters'],
                                                         [   'document',
                                                             'orderedMentions',
                                                             'gold']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefPrinter.java'},
    'CorefProperties': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.algorithm': {   'req_args': ['props'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.conll': {   'req_args': ['props'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.conllOutputPath': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getCorefMentionFilter': {   'req_args': ['props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getDevDataPath': {   'req_args': ['props'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getHeadFinder': {   'req_args': ['props'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getInputPath': {   'req_args': ['props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getLanguage': {   'req_args': ['props'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getMentionDetectionModel': {   'req_args': ['props'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getScorerPath': {   'req_args': ['props'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getTestDataPath': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.getTrainDataPath': {   'req_args': ['props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.isMentionDetectionTraining': {   'req_args': ['props'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.liberalMD': {   'req_args': ['props'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.maxMentionDistance': {   'req_args': ['props'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.maxMentionDistanceWithStringMatch': {   'req_args': [   'props'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.mdType': {   'req_args': ['props'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.removeNestedMentions': {   'req_args': ['props'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.removeSingletonClusters': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.removeXmlMentions': {   'req_args': ['props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.setInput': {   'req_args': ['props', 'd'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.setMentionDetectionTraining': {   'req_args': [   'props',
                                                                       'val'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.setRemoveNestedMentions': {   'req_args': ['props', 'val'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.useConstituencyParse': {   'req_args': ['props'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.useGoldMentions': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefProperties.verbose': {   'req_args': ['props'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefProperties.java'},
    'CorefRules.antecedentIsMentionSpeaker': {   'req_args': [   'document',
                                                                 'mention',
                                                                 'ant',
                                                                 'dict'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.antecedentMatchesMentionSpeakerAnnotation': {   'req_args': [   'mention',
                                                                                'ant',
                                                                                'document'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.contextIncompatible': {   'req_args': ['men', 'ant', 'dict'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityAlias': {   'req_args': [   'mentionCluster',
                                                  'potentialAntecedent',
                                                  'semantics',
                                                  'dict'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityAttributesAgree': {   'req_args': [   'mentionCluster',
                                                            'potentialAntecedent',
                                                            [   'mentionCluster',
                                                                'potentialAntecedent',
                                                                'ignoreGender'],
                                                            [   'mentionCluster',
                                                                'potentialAntecedent',
                                                                'lang']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityBothHaveProper': {   'req_args': [   'mentionCluster',
                                                           'potentialAntecedent'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityClusterAllCorefDictionary': {   'req_args': [   'menCluster',
                                                                      'antCluster',
                                                                      'dict',
                                                                      'dictColumn',
                                                                      'freq'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityCorefDictionary': {   'req_args': [   'men',
                                                            'ant',
                                                            'dict',
                                                            'dictVersion',
                                                            'freq'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityDifferentSpeaker': {   'req_args': [   'document',
                                                             'm',
                                                             'ant'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityExactStringMatch': {   'req_args': [   'mentionCluster',
                                                             'potentialAntecedent',
                                                             'dict',
                                                             'roleSet',
                                                             [   'm',
                                                                 'ant',
                                                                 'dict',
                                                                 'roleSet']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityHaveDifferentLocation': {   'req_args': [   'm',
                                                                  'a',
                                                                  'dict'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityHaveExtraProperNoun': {   'req_args': [   'm',
                                                                'a',
                                                                'exceptWords'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityHaveIncompatibleModifier': {   'req_args': [   'mentionCluster',
                                                                     'potentialAntecedent',
                                                                     [   'm',
                                                                         'ant']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityHeadsAgree': {   'req_args': [   'mentionCluster',
                                                       'potentialAntecedent',
                                                       'm',
                                                       'ant',
                                                       'dict'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIWithinI': {   'req_args': [   'mentionCluster',
                                                     'potentialAntecedent',
                                                     'dict',
                                                     ['m1', 'm2', 'dict']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIsAcronym': {   'req_args': [   'document',
                                                      'mentionCluster',
                                                      'potentialAntecedent'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIsApposition': {   'req_args': [   'mentionCluster',
                                                         'potentialAntecedent',
                                                         'm1',
                                                         'm2'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIsPredicateNominatives': {   'req_args': [   'mentionCluster',
                                                                   'potentialAntecedent',
                                                                   'm1',
                                                                   'm2'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIsRelativePronoun': {   'req_args': ['m1', 'm2'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityIsRoleAppositive': {   'req_args': [   'mentionCluster',
                                                             'potentialAntecedent',
                                                             'm1',
                                                             'm2',
                                                             'dict'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityNumberInLaterMention': {   'req_args': ['mention', 'ant'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityPersonCompatible': {   'req_args': [   'document',
                                                             'mentionCluster',
                                                             'potentialAntecedent',
                                                             'dict',
                                                             [   'document',
                                                                 'm',
                                                                 'ant',
                                                                 'dict']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityPersonDisagree': {   'req_args': [   'document',
                                                           'mentionCluster',
                                                           'potentialAntecedent',
                                                           'dict',
                                                           [   'document',
                                                               'm',
                                                               'ant',
                                                               'dict']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityRelaxedExactStringMatch': {   'req_args': [   'mentionCluster',
                                                                    'potentialAntecedent',
                                                                    'mention',
                                                                    'ant',
                                                                    'dict',
                                                                    'roleSet'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityRelaxedHeadsAgreeBetweenMentions': {   'req_args': [   'mentionCluster',
                                                                             'potentialAntecedent',
                                                                             'm',
                                                                             'ant'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entitySameProperHeadLastWord': {   'req_args': [   'mentionCluster',
                                                                   'potentialAntecedent',
                                                                   'mention',
                                                                   'ant',
                                                                   ['m', 'a']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entitySameSpeaker': {   'req_args': ['document', 'm', 'ant'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entitySubjectObject': {   'req_args': ['m1', 'm2'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityTokenDistance': {   'req_args': ['m1', 'm2'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.entityWordsIncluded': {   'req_args': [   'mentionCluster',
                                                          'potentialAntecedent',
                                                          'mention',
                                                          'ant'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.getSpeakerClusterId': {   'req_args': [   'document',
                                                          'speakerString'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.isAcronym': {   'req_args': ['first', 'second'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.mentionMatchesSpeaker': {   'req_args': [   'mention',
                                                            'speakerInfo',
                                                            'strictMatch'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefRules.sentenceContextIncompatible': {   'req_args': [   'men',
                                                                  'ant',
                                                                  'dict'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefRules.java'},
    'CorefScorer': {   'req_args': ['st'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.calculateScore': {   'req_args': ['doc'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.getEvalSummary': {   'req_args': [   'evalScript',
                                                      'goldFile',
                                                      'predictFile'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefScorer.java'},
    'CorefScorer.getF1': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.getFinalConllScore': {   'req_args': ['summary'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefScorer.java'},
    'CorefScorer.getFinalConllScoreFromOutputDir': {   'req_args': [   'corefOutputDir',
                                                                       'scorerPath'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefScorer.java'},
    'CorefScorer.getPrecision': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.getRecall': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.getScore': {   'req_args': ['subScoreType'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.printF1': {   'req_args': [   'logger',
                                               'printF1First',
                                               ['logger']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CorefScorer.java'},
    'CorefScorer.printFinalConllScore': {   'req_args': ['summary', 'logger'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefScorer.java'},
    'CorefScorer.printScoreSummary': {   'req_args': [   'summary',
                                                         'logger',
                                                         'afterPostProcessing'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefScorer.java'},
    'CorefSystem': {   'req_args': [   'props',
                                       [   'docMaker',
                                           'corefAlgorithm',
                                           'removeSingletonClusters',
                                           'verbose']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefSystem.java'},
    'CorefSystem.annotate': {   'req_args': ['ann'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefSystem.java'},
    'CorefSystem.initLogger': {   'req_args': ['logger', 'logFileName'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefSystem.java'},
    'CorefSystem.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefSystem.java'},
    'CorefSystem.runOnConll': {   'req_args': ['props'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefSystem.java'},
    'CorefUtils.checkForInterrupt': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.filterClustersWithMentionSpans': {   'req_args': [   'cluster',
                                                                     'spans'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.filterCorefChainWithMentionSpans': {   'req_args': [   'chain',
                                                                       'spans'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.filterXmlTagsFromMentions': {   'req_args': ['mentions'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getLabeledMentionPairs': {   'req_args': ['document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getMatchingMentionsSpans': {   'req_args': [   'annotation',
                                                               'chains',
                                                               'matcher',
                                                               'includeAllMentionsInChain'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getMatchingSpans': {   'req_args': ['annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getMentionPairs': {   'req_args': ['document'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getSortedMentions': {   'req_args': ['document'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.getUnlabeledMentionPairs': {   'req_args': ['document'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.heuristicFilter': {   'req_args': [   'sortedMentions',
                                                      'maxMentionDistance',
                                                      'maxMentionDistanceWithStringMatch'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.mergeCoreferenceClusters': {   'req_args': [   'mentionPair',
                                                               'document'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.mergePronounsBasedOnSpeaker': {   'req_args': [   'document',
                                                                  'mentions'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.printHumanReadableCoref': {   'req_args': ['document'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CorefUtils.removeSingletonClusters': {   'req_args': ['document'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\CorefUtils.java'},
    'CoreferenceSystem.coref': {   'req_args': ['document'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\CoreferenceSystem.java'},
    'CorpusChar': {   'req_args': ['charlistFilename'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusChar.java'},
    'CorpusChar.getTag': {   'req_args': ['a1', 'a2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusChar.java'},
    'CorpusDictionary': {   'req_args': ['filename', ['filename', 'normalize']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusDictionary.java'},
    'CorpusDictionary.contains': {   'req_args': ['word'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusDictionary.java'},
    'CorpusDictionary.getTable': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusDictionary.java'},
    'CorpusDictionary.getW': {   'req_args': ['a1'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\CorpusDictionary.java'},
    'CountClosedTags': {   'req_args': ['props'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\CountClosedTags.java'},
    'CountClosedTags.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\CountClosedTags.java'},
    'CountTrees.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\CountTrees.java'},
    'CountWrapper': {   'req_args': [   [   'word',
                                            'countPart',
                                            'countThat',
                                            'countIn',
                                            'countRB']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.equals': {   'req_args': ['obj'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.getCountIn': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.getCountPart': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.getCountRB': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.getCountThat': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.getWord': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'CountWrapper.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CountWrapper.java'},
    'Counters': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.L1Norm': {   'req_args': ['c'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.L2Norm': {   'req_args': ['c'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.L2Normalize': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.L2NormalizeInPlace': {   'req_args': ['c'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.absoluteDifference': {   'req_args': ['c1', 'c2'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.add': {   'req_args': [   'arg1',
                                        'arg2',
                                        ['c1', 'c2'],
                                        ['c1', 'c2'],
                                        ['c1', 'value']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.addInPlace': {   'req_args': [   'target',
                                               'arg',
                                               'scale',
                                               ['target', 'arg'],
                                               ['target', 'arg', 'idx'],
                                               ['target', 'arg', 'scale'],
                                               ['target', 'arg'],
                                               ['target', 'arg', 'value'],
                                               ['target', 'value'],
                                               ['target', 'arg'],
                                               ['target', 'value']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.argmax': {   'req_args': [   'c',
                                           ['c', 'tieBreaker'],
                                           [   'c',
                                               'tieBreaker',
                                               'defaultIfEmpty']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.argmin': {   'req_args': ['c', ['c', 'tieBreaker']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.asArray': {   'req_args': [   'counter',
                                            'index',
                                            ['counter', 'index', 'dimension'],
                                            ['counter']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.asCounter': {   'req_args': ['c', ['p']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.asMap': {   'req_args': ['counter'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.asNormalizedCounter': {   'req_args': ['c'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.average': {   'req_args': ['c1', 'c2'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.cosine': {   'req_args': ['c1', 'c2'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.crossEntropy': {   'req_args': ['from', 'to'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.deleteOutofRange': {   'req_args': ['c', 'top', 'bottom'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.deserializeCounter': {   'req_args': ['filename'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.deserializeStringCounter': {   'req_args': ['filename'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.diff': {   'req_args': ['goldFeatures', 'guessedFeatures'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.divideInPlace': {   'req_args': [   'target',
                                                  'denominator',
                                                  ['target', 'divisor'],
                                                  ['counter', 'divisor']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.division': {   'req_args': ['c1', 'c2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.divisionNonNaN': {   'req_args': ['c1', 'c2'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.dotProduct': {   'req_args': ['c1', 'c2', ['c', 'a', 'idx']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.dotProductInPlace': {   'req_args': ['target', 'term'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.ensureKeys': {   'req_args': ['t', 'keys', 'value'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.entropy': {   'req_args': ['c'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.equals': {   'req_args': ['o1', 'o2', ['o1', 'o2', 'tolerance']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.exp': {   'req_args': ['c'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.expInPlace': {   'req_args': ['c'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.flatten': {   'req_args': ['hier'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.fromMap': {   'req_args': ['map', ['map', 'type']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.getCopy': {   'req_args': ['originalCounter'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.getCountCounts': {   'req_args': ['c'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.getCounts': {   'req_args': ['c', 'keys'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.getFCounter': {   'req_args': ['precision', 'recall', 'beta'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.hIndex': {   'req_args': ['citationCounts'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.intersection': {   'req_args': ['c1', 'c2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.isFinite': {   'req_args': ['counts'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.isUniformDistribution': {   'req_args': [   'distribution',
                                                          'tolerance'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.jaccardCoefficient': {   'req_args': ['c1', 'c2'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.jensenShannonDivergence': {   'req_args': ['c1', 'c2'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.keysAbove': {   'req_args': ['c', 'countThreshold'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.keysAt': {   'req_args': ['c', 'count'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.keysBelow': {   'req_args': ['c', 'countThreshold'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.klDivergence': {   'req_args': ['from', 'to'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.linearCombination': {   'req_args': ['c1', 'w1', 'c2', 'w2'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.load2DCounter': {   'req_args': ['filename', 't1', 't2'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.loadCounter': {   'req_args': ['filename', 'c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.loadIncInto2DCounter': {   'req_args': [   'filename',
                                                         't1',
                                                         't2',
                                                         'tdc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.loadIntCounter': {   'req_args': ['filename', 'c'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.loadInto2DCounter': {   'req_args': [   'filename',
                                                      't1',
                                                      't2',
                                                      'tdc'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.logInPlace': {   'req_args': ['target'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.logNormalizeInPlace': {   'req_args': ['c'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.logSum': {   'req_args': ['c'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.max': {   'req_args': ['c', ['c', 'valueIfEmpty']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.maxInPlace': {   'req_args': ['target', 'other'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.mean': {   'req_args': ['c'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.min': {   'req_args': ['c'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.minInPlace': {   'req_args': ['target', 'other'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.multiplyInPlace': {   'req_args': [   'target',
                                                    'multiplier',
                                                    ['target', 'mult']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.normalize': {   'req_args': ['target', ['target']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.optimizedDotProduct': {   'req_args': ['c1', 'c2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.pearsonsCorrelationCoefficient': {   'req_args': ['x', 'y'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.perturbCounts': {   'req_args': ['c', 'random', 'p'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.pointwiseMutualInformation': {   'req_args': [   'var1Distribution',
                                                               'var2Distribution',
                                                               'jointDistribution',
                                                               'values'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.pow': {   'req_args': ['c', 'temp'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.powInPlace': {   'req_args': ['c', 'temp'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.powNormalized': {   'req_args': ['c', 'temp'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.printCounterComparison': {   'req_args': [   'a',
                                                           'b',
                                                           ['a', 'b', 'out'],
                                                           ['a', 'b', 'out']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.printCounterSortedByKeys': {   'req_args': ['c'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.product': {   'req_args': ['c1', 'c2'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.removeKeys': {   'req_args': [   'counter',
                                               'removeKeysCollection',
                                               [   'counter',
                                                   'removeKeysCollection']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.restrictedArgMax': {   'req_args': ['c', 'restriction'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainAbove': {   'req_args': [   'counter',
                                                'countThreshold',
                                                ['counter', 'countThreshold']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainBelow': {   'req_args': ['counter', 'countMaxThreshold'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainBottom': {   'req_args': ['c', 'num'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainKeys': {   'req_args': [   'counter',
                                               'matchKeys',
                                               ['counter', 'retainFunction']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainMatchingKeys': {   'req_args': ['counter', 'matchPatterns'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainNonZeros': {   'req_args': ['counter'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainTop': {   'req_args': ['c', 'num'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainTopKeyComparable': {   'req_args': ['c', 'num'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.retainTopMass': {   'req_args': ['counter', 'thresholdCount'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.saferL2Norm': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.saferL2Normalize': {   'req_args': ['c'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.sample': {   'req_args': ['c', 'rand', ['c']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.save2DCounter': {   'req_args': ['tdc', 'filename'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.save2DCounterSorted': {   'req_args': ['tdc', 'filename'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.saveCounter': {   'req_args': ['c', 'stream', ['c', 'filename']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.scale': {   'req_args': ['c', 's', ['c', 'd']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.serializeCounter': {   'req_args': ['c', 'filename'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.serializeStringCounter': {   'req_args': [   'c',
                                                           'filename',
                                                           'minMagnitude',
                                                           ['c', 'filename']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.skewDivergence': {   'req_args': ['c1', 'c2', 'skew'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.spearmanRankCorrelation': {   'req_args': ['x', 'y'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.standardDeviation': {   'req_args': ['c'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.subtractInPlace': {   'req_args': [   'target',
                                                    'arg',
                                                    ['target', 'arg', 'idx']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.sumEntries': {   'req_args': ['c1', 'entries'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.sumSquares': {   'req_args': ['c'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.tfLogScale': {   'req_args': ['c', 'base'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toBiggestValuesFirstString': {   'req_args': [   'c',
                                                               ['c', 'k'],
                                                               [   'c',
                                                                   'k',
                                                                   'index']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toComparator': {   'req_args': [   'counter',
                                                 [   'counter',
                                                     'ascending',
                                                     'useMagnitude']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toComparatorDescending': {   'req_args': ['counter'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toComparatorWithKeys': {   'req_args': ['counter'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toCounter': {   'req_args': [   'counts',
                                              'index',
                                              ['counts', 'index']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toDescendingMagnitudeSortedListWithCounts': {   'req_args': ['c'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toPriorityQueue': {   'req_args': ['c'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toRankCounter': {   'req_args': ['c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toSortedByKeysString': {   'req_args': [   'counter',
                                                         'itemFormat',
                                                         'joiner',
                                                         'wrapperFormat'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toSortedList': {   'req_args': ['c', ['c', 'ascending']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toSortedListKeyComparable': {   'req_args': ['c'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toSortedListWithCounts': {   'req_args': [   'c',
                                                           ['c', 'comparator']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toSortedString': {   'req_args': [   'counter',
                                                   'k',
                                                   'itemFormat',
                                                   'joiner',
                                                   'wrapperFormat',
                                                   [   'counter',
                                                       'k',
                                                       'itemFormat',
                                                       'joiner']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toString': {   'req_args': [   'counter',
                                             'maxKeysToPrint',
                                             ['counter', 'nf'],
                                             [   'counter',
                                                 'nf',
                                                 'preAppend',
                                                 'postAppend',
                                                 'keyValSeparator',
                                                 'itemSeparator']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toTiedRankCounter': {   'req_args': ['c'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.toVerticalString': {   'req_args': [   'c',
                                                     ['c', 'k'],
                                                     ['c', 'fmt'],
                                                     ['c', 'k', 'fmt'],
                                                     ['c', 'k', 'fmt', 'swap']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.topKeys': {   'req_args': ['t', 'topNum'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.topKeysWithCounts': {   'req_args': ['t', 'topNum'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.transform': {   'req_args': ['c', 'f'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.transformValuesInPlace': {   'req_args': ['counter', 'func'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.transformWithValuesAdd': {   'req_args': ['c', 'f'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.union': {   'req_args': ['c1', 'c2'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'Counters.unmodifiableCounter': {   'req_args': ['counter'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Counters.java'},
    'CreateClauseDataset': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\CreateClauseDataset.java'},
    'CreateClauseDataset.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\CreateClauseDataset.java'},
    'CreateClauseDataset.process': {   'req_args': ['id', 'doc'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\CreateClauseDataset.java'},
    'CreatePatterns': {   'req_args': ['props', 'constVars'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\CreatePatterns.java'},
    'CreatePatterns.getAllPatterns': {   'req_args': [   'sents',
                                                         'props',
                                                         'storePatsForEachTokenWay'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\CreatePatterns.java'},
    'CreateSubtreeNode': {   'req_args': [   'start',
                                             'tree',
                                             ['start', 'end', 'tree']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CreateSubtreeNode.java'},
    'CreateSubtreeNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\CreateSubtreeNode.java'},
    'CreateTransitionSequence': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CreateTransitionSequence.java'},
    'CreateTransitionSequence.createTransitionSequence': {   'req_args': [   'tree',
                                                                             [   'tree',
                                                                                 'compoundUnary',
                                                                                 'rootStates',
                                                                                 'rootOnlyStates']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CreateTransitionSequence.java'},
    'CreateTransitionSequence.createTransitionSequences': {   'req_args': [   'binarizedTrees',
                                                                              'compoundUnary',
                                                                              'rootStates',
                                                                              'rootOnlyStates',
                                                                              [   'binarizedTrees']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\CreateTransitionSequence.java'},
    'CrossValidator': {   'req_args': ['trainData', ['trainData', 'kFold']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\CrossValidator.java'},
    'CrossValidator.computeAverage': {   'req_args': ['function'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\CrossValidator.java'},
    'CrossValidator.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\CrossValidator.java'},
    'CtbDict': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\CtbDict.java'},
    'CtbPreDetector': {   'req_args': ['t2', 'n2'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbPreDetector.isDynamic': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbPreDetector.isLocal': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbPreDetector.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbSufDetector': {   'req_args': ['t2', 'n2'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbSufDetector.isDynamic': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbSufDetector.isLocal': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CtbSufDetector.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'CustomAnnotationSerializer': {   'req_args': [['compress', 'haveAnte']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CustomAnnotationSerializer.java'},
    'CustomAnnotationSerializer.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CustomAnnotationSerializer.java'},
    'CustomAnnotationSerializer.read': {   'req_args': ['is'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CustomAnnotationSerializer.java'},
    'CustomAnnotationSerializer.saveCorefChain': {   'req_args': [   'pw',
                                                                     'cid',
                                                                     'cluster'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CustomAnnotationSerializer.java'},
    'CustomAnnotationSerializer.write': {   'req_args': ['corpus', 'os'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\CustomAnnotationSerializer.java'},
    'DFSA': {   'req_args': [   'initialState',
                                'score',
                                ['initialState'],
                                ['dfsaID']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.initialState': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.printAttFsmFormat': {   'req_args': ['w'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.printTrieAsRules': {   'req_args': ['dfsa', 'w'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.printTrieDFSA': {   'req_args': ['dfsa'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.score': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.setInitialState': {   'req_args': ['initialState'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.setScore': {   'req_args': ['score'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSA.states': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSA.java'},
    'DFSAMinimizer': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAMinimizer.java'},
    'DFSAMinimizer.unweightedMinimize': {   'req_args': ['dfsa'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAMinimizer.java'},
    'DFSAState': {   'req_args': ['id', 'dfsa', ['id', 'dfsa', 'score']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.addTransition': {   'req_args': ['transition'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.continuingInputs': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.dfsa': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.isAccepting': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.isContinuable': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.score': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.setAccepting': {   'req_args': ['accepting'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.setScore': {   'req_args': ['score'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.setStateID': {   'req_args': ['stateID'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.stateID': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.statesReachable': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.successorStates': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.transition': {   'req_args': ['input'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSAState.transitions': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSAState.java'},
    'DFSATransition': {   'req_args': [   'transitionID',
                                          'source',
                                          'target',
                                          'input',
                                          'output',
                                          'score'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.getID': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.getInput': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.getOutput': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.getSource': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.getTarget': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.input': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.output': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.score': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.source': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.target': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DFSATransition.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\DFSATransition.java'},
    'DVModel': {   'req_args': [   'op',
                                   'stateIndex',
                                   'unaryGrammar',
                                   'binaryGrammar',
                                   [   'binaryTransform',
                                       'unaryTransform',
                                       'binaryScore',
                                       'unaryScore',
                                       'wordVectors',
                                       'op']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.addRandomBinaryMatrix': {   'req_args': [   'leftBasic',
                                                         'rightBasic'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.addRandomUnaryMatrix': {   'req_args': ['childBasic'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.basicCategory': {   'req_args': ['category'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.binaryScoreIndex': {   'req_args': ['leftChild', 'rightChild'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.binaryTransformIndex': {   'req_args': ['leftChild', 'rightChild'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.filterRulesForBatch': {   'req_args': [   'trees',
                                                       ['compressedTrees'],
                                                       [   'binaryRules',
                                                           'unaryRules',
                                                           'words']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getEndWordVector': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getScoreWForNode': {   'req_args': ['node'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getStartWordVector': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getUnknownWordVector': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getVocabWord': {   'req_args': ['word'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getWForNode': {   'req_args': ['node'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.getWordVector': {   'req_args': ['word'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.indexToBinaryScore': {   'req_args': ['pos'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.indexToBinaryTransform': {   'req_args': ['pos'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.indexToUnaryScore': {   'req_args': ['pos'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.indexToUnaryTransform': {   'req_args': ['pos'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.paramsToVector': {   'req_args': ['scale', []],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.printAllMatrices': {   'req_args': ['out'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.printMatrixNames': {   'req_args': ['out'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.printMatrixStats': {   'req_args': ['out'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.printParameterType': {   'req_args': ['pos', 'out'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.readWordVectors': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.setRulesForTrainingSet': {   'req_args': [   'sentences',
                                                          'compressedTrees'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.totalParamSize': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.unaryScoreIndex': {   'req_args': ['child'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.unaryTransformIndex': {   'req_args': ['child'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModel.vectorToParams': {   'req_args': ['theta'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModel.java'},
    'DVModelReranker': {   'req_args': ['model'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModelReranker.java'},
    'DVModelReranker.getEvals': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModelReranker.java'},
    'DVModelReranker.getModel': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModelReranker.java'},
    'DVModelReranker.process': {   'req_args': ['sentence'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVModelReranker.java'},
    'DVParser': {   'req_args': ['model', 'parser', ['parser']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.attachModelToLexicalizedParser': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.buildTrainTransformer': {   'req_args': ['op'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.executeOneTrainingBatch': {   'req_args': [   'trainingBatch',
                                                            'compressedParses',
                                                            'sumGradSquare'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.getBaseParser': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.getDVModel': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.getModelFromLexicalizedParser': {   'req_args': ['parser'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.getOp': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.getTopParsesForOneTree': {   'req_args': [   'parser',
                                                           'dvKBest',
                                                           'tree',
                                                           'transformer'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.help': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.loadModel': {   'req_args': ['filename', 'args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.runGradientCheck': {   'req_args': [   'sentences',
                                                     'compressedParses'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.saveModel': {   'req_args': ['filename'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParser.train': {   'req_args': [   'sentences',
                                          'compressedParses',
                                          'testTreebank',
                                          'modelPath',
                                          'resultsRecordPath'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParser.java'},
    'DVParserCostAndGradient': {   'req_args': [   'trainingBatch',
                                                   'topParses',
                                                   'dvModel',
                                                   'op'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.backpropDerivative': {   'req_args': [   'tree',
                                                                      'words',
                                                                      'nodeVectors',
                                                                      'binaryW_dfs',
                                                                      'unaryW_dfs',
                                                                      'binaryScoreDerivatives',
                                                                      'unaryScoreDerivatives',
                                                                      'wordVectorDerivatives',
                                                                      [   'tree',
                                                                          'words',
                                                                          'nodeVectors',
                                                                          'binaryW_dfs',
                                                                          'unaryW_dfs',
                                                                          'binaryScoreDerivatives',
                                                                          'unaryScoreDerivatives',
                                                                          'wordVectorDerivatives',
                                                                          'deltaUp']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.calculate': {   'req_args': ['theta'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.domainDimension': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.getAllHighestScoringTreesTest': {   'req_args': [   'trees'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.getHighestScoringTree': {   'req_args': [   'tree',
                                                                         'lambda'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.getMargin': {   'req_args': [   'goldTree',
                                                             'bestHypothesis'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.outputSpans': {   'req_args': ['tree'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'DVParserCostAndGradient.score': {   'req_args': ['tree', 'nodeVectors'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DVParserCostAndGradient.java'},
    'Data.computeRawFreqIfNull': {   'req_args': [   'numWordsCompound',
                                                     'batchProcess',
                                                     [   'sents',
                                                         'numWordsCompound']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Data.java'},
    'Data.loadDomainNGrams': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Data.java'},
    'Data.setRatioGoogleNgramFreqWithDataFreq': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Data.java'},
    'DataFilePaths': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DataFilePaths.java'},
    'DataFilePaths.convert': {   'req_args': ['path'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DataFilePaths.java'},
    'DataGeneric.getY': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\DataGeneric.java'},
    'DataInstance.getNewInstance': {   'req_args': ['type', 's'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\DataInstance.java'},
    'DataInstance.getNewSurfaceInstance': {   'req_args': ['tokens'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\DataInstance.java'},
    'DataInstance.getTokens': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\DataInstance.java'},
    'DataInstanceDep': {   'req_args': ['s'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DataInstanceDep.java'},
    'DataInstanceDep.getGraph': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DataInstanceDep.java'},
    'DataInstanceDep.getTokens': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DataInstanceDep.java'},
    'DataInstanceDep.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DataInstanceDep.java'},
    'DataInstanceSurface': {   'req_args': ['toks'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\DataInstanceSurface.java'},
    'DataInstanceSurface.getTokens': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\DataInstanceSurface.java'},
    'DataWordTag': {   'req_args': ['h', 'y', 'tag'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\DataWordTag.java'},
    'DataWordTag.getHistory': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\DataWordTag.java'},
    'DataWordTag.getY': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\DataWordTag.java'},
    'DataWordTag.getYInd': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\DataWordTag.java'},
    'Dataset': {   'req_args': [   ['numDatums'],
                                   ['numDatums', 'featureIndex', 'labelIndex'],
                                   ['featureIndex', 'labelIndex'],
                                   [   'labelIndex',
                                       'labels',
                                       'featureIndex',
                                       'data'],
                                   [   'labelIndex',
                                       'labels',
                                       'featureIndex',
                                       'data',
                                       'size'],
                                   ['numFeatures', 'numLabels']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.add': {   'req_args': [   'd',
                                       ['features', 'label'],
                                       ['features', 'label', 'addNewFeatures'],
                                       ['features', 'label']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.addExample': {   'req_args': ['feature', 'label'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Dataset.java'},
    'Dataset.applyFeatureCountThreshold': {   'req_args': ['thresholds'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.changeFeatureIndex': {   'req_args': ['newFeatureIndex'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.changeLabelIndex': {   'req_args': ['newLabelIndex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getDatum': {   'req_args': ['index'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getFeatureCounter': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getInformationGains': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getL1NormalizedTFIDFDataset': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getL1NormalizedTFIDFDatum': {   'req_args': [   'datum',
                                                             'featureDocCounts'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getRVFDatum': {   'req_args': ['index'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getRandomSubDataset': {   'req_args': ['p', 'seed'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.getValuesArray': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.printFullFeatureMatrix': {   'req_args': ['pw'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.printSVMLightFormat': {   'req_args': ['pw', 'c', 'classNo'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.printSparseFeatureMatrix': {   'req_args': [['pw']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.readSVMLightFormat': {   'req_args': [   'filename',
                                                      ['filename', 'lines'],
                                                      [   'filename',
                                                          'featureIndex',
                                                          'labelIndex'],
                                                      [   'filename',
                                                          'featureIndex',
                                                          'labelIndex',
                                                          'lines']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.selectFeatures': {   'req_args': ['numFeatures', 'scores'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.selectFeaturesBinaryInformationGain': {   'req_args': [   'numFeatures'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.split': {   'req_args': ['percentDev', ['start', 'end']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.summaryStatistics': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.svmLightLineToDatum': {   'req_args': ['l'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.toString': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.toSummaryStatistics': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.toSummaryString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'Dataset.updateLabels': {   'req_args': ['labels'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\Dataset.java'},
    'DatasetBuilder': {   'req_args': [   [   'minClassImbalancedPerDocument',
                                              'maxExamplesPerDocument']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\DatasetBuilder.java'},
    'DatasetBuilder.finish': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\DatasetBuilder.java'},
    'DatasetBuilder.process': {   'req_args': ['id', 'document'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\DatasetBuilder.java'},
    'DateTemplate': {   'req_args': [   'subdate',
                                        'noadate',
                                        'crcdate',
                                        'workdate'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\DateTemplate.java'},
    'DateTemplate.equals': {   'req_args': ['obj'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\DateTemplate.java'},
    'DateTemplate.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\DateTemplate.java'},
    'DateTemplate.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\DateTemplate.java'},
    'DateTreeTransformer.transformTree': {   'req_args': ['t'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DateTreeTransformer.java'},
    'DcorefPronounResolver': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\DcorefPronounResolver.java'},
    'DcorefPronounResolver.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\DcorefPronounResolver.java'},
    'DcorefSieveOptions': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DcorefSieveOptions.java'},
    'DcorefSieveOptions.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DcorefSieveOptions.java'},
    'Debinarizer': {   'req_args': ['forceCNF', ['forceCNF', 'lf']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Debinarizer.java'},
    'Debinarizer.transformTree': {   'req_args': ['t'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Debinarizer.java'},
    'DecimatedArabicDataset.build': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DecimatedArabicDataset.java'},
    'DecisionTree': {   'req_args': ['featureIndex'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\DecisionTree.java'},
    'DecisionTree.probabilityOfTrue': {   'req_args': ['datum', ['features']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\DecisionTree.java'},
    'DecisionTreeNode': {   'req_args': [   ['label', 'prob'],
                                            ['idx', 'split', 'children']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\DecisionTreeNode.java'},
    'DecisionTreeNode.isLeaf': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\DecisionTreeNode.java'},
    'DeepTree': {   'req_args': ['tree', 'vectors', 'score'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DeepTree.java'},
    'DeepTree.getScore': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DeepTree.java'},
    'DeepTree.getTree': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DeepTree.java'},
    'DeepTree.getVectors': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DeepTree.java'},
    'DefaultLexicalMapper': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DefaultLexicalMapper.java'},
    'DefaultLexicalMapper.canChangeEncoding': {   'req_args': [   'parent',
                                                                  'element'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DefaultLexicalMapper.java'},
    'DefaultLexicalMapper.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DefaultLexicalMapper.java'},
    'DefaultLexicalMapper.map': {   'req_args': ['parent', 'element'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DefaultLexicalMapper.java'},
    'DefaultLexicalMapper.setup': {   'req_args': ['path', 'options'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\DefaultLexicalMapper.java'},
    'DefaultMapper.canChangeEncoding': {   'req_args': ['parent', 'child'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DefaultMapper.java'},
    'DefaultMapper.map': {   'req_args': ['parent', 'element'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DefaultMapper.java'},
    'DefaultMapper.setup': {   'req_args': ['path', 'options'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DefaultMapper.java'},
    'DefaultPaths': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DefaultPaths.java'},
    'DefaultPaths.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DefaultPaths.java'},
    'DeleteGraphFromNode': {   'req_args': ['destroyNodeName'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\DeleteGraphFromNode.java'},
    'DeleteGraphFromNode.evaluate': {   'req_args': ['sg', 'sm'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\DeleteGraphFromNode.java'},
    'DeleteGraphFromNode.fromArgs': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\DeleteGraphFromNode.java'},
    'DeleteGraphFromNode.toEditString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\DeleteGraphFromNode.java'},
    'DeleteNode': {   'req_args': ['children', ['children']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\DeleteNode.java'},
    'DeleteNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\DeleteNode.java'},
    'DelimitRegExIterator': {   'req_args': ['r', 'delimiter', 'op'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DelimitRegExIterator.defaultDelimitRegExIterator': {   'req_args': [   'in',
                                                                            'delimiter'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DelimitRegExIterator.getFactory': {   'req_args': [   'delim',
                                                           ['delim', 'op']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DelimitRegExIterator.hasNext': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DelimitRegExIterator.next': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DelimitRegExIterator.peek': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\DelimitRegExIterator.java'},
    'DeltaCollectionValuedMap': {   'req_args': ['originalMap'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.add': {   'req_args': ['key', 'value'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.addAll': {   'req_args': ['m'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.clear': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.containsKey': {   'req_args': ['key'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.containsValue': {   'req_args': ['value'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.entrySet': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.get': {   'req_args': ['key'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.isEmpty': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.put': {   'req_args': ['key', 'value'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.putAll': {   'req_args': ['m'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.remove': {   'req_args': ['key'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.removeMapping': {   'req_args': ['key', 'value'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.size': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaCollectionValuedMap.values': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaCollectionValuedMap.java'},
    'DeltaIndex': {   'req_args': [   'backingIndex',
                                      ['backingIndex', 'spilloverIndex']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.add': {   'req_args': ['e'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.addAll': {   'req_args': ['c'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.addToIndex': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.clear': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.contains': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.get': {   'req_args': ['i'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.indexOf': {   'req_args': ['o', ['o', 'add']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.isEmpty': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.isLocked': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.iterator': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.lock': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.objects': {   'req_args': ['indices'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.objectsList': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.saveToFilename': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.saveToWriter': {   'req_args': ['out'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.size': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaIndex.unlock': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaIndex.java'},
    'DeltaMap': {   'req_args': ['originalMap', 'mf', ['originalMap']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.clear': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.containsKey': {   'req_args': ['key'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.entrySet': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.get': {   'req_args': ['key'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.put': {   'req_args': ['key', 'value'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DeltaMap.remove': {   'req_args': ['key'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DeltaMap.java'},
    'DepPattern': {   'req_args': ['relations', ['token', 'relation']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.equalContext': {   'req_args': ['p'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.equals': {   'req_args': ['p'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.getRelevantWords': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.sameGenre': {   'req_args': ['p1', 'p2'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.subsumes': {   'req_args': ['pat', 'p'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.toString': {   'req_args': ['notAllowedClasses', []],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPattern.toStringSimple': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPattern.java'},
    'DepPatternFactory.getContext': {   'req_args': ['sent', 'i', 'stopWords'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPatternFactory.java'},
    'DepPatternFactory.getPatternsAroundTokens': {   'req_args': [   'sent',
                                                                     'stopWords'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPatternFactory.java'},
    'DepPatternFactory.patternToDepPattern': {   'req_args': ['p', 'sent'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPatternFactory.java'},
    'DepPatternFactory.setUp': {   'req_args': ['props'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\DepPatternFactory.java'},
    'Dependencies': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Dependencies.java'},
    'Dependencies.dependencyIndexComparator': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Dependencies.java'},
    'Dependencies.getTypedDependencyChains': {   'req_args': [   'deps',
                                                                 'maxLength'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Dependencies.java'},
    'Dependencies.govToDepMap': {   'req_args': ['deps'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Dependencies.java'},
    'DependencyAnalyzer': {   'req_args': ['filename'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\misc\\DependencyAnalyzer.java'},
    'DependencyAnalyzer.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\misc\\DependencyAnalyzer.java'},
    'DependencyAnalyzer.prependPackage': {   'req_args': [   'pkgname',
                                                             'classname'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\misc\\DependencyAnalyzer.java'},
    'DependencyAnalyzer.transitiveClosure': {   'req_args': [   'startingClassNames'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\misc\\DependencyAnalyzer.java'},
    'DependencyCorefMentionFinder': {   'req_args': ['props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\DependencyCorefMentionFinder.java'},
    'DependencyCorefMentionFinder.findHead': {   'req_args': ['s', 'mentions'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\DependencyCorefMentionFinder.java'},
    'DependencyCorefMentionFinder.findHeadInDependency': {   'req_args': [   's',
                                                                             'mentions',
                                                                             [   's',
                                                                                 'm']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\DependencyCorefMentionFinder.java'},
    'DependencyCorefMentionFinder.findMentions': {   'req_args': [   'doc',
                                                                     'dict',
                                                                     'props'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\DependencyCorefMentionFinder.java'},
    'DependencyParseAnnotator': {   'req_args': [['properties']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DependencyParseAnnotator.java'},
    'DependencyParseAnnotator.requirementsSatisfied': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DependencyParseAnnotator.java'},
    'DependencyParseAnnotator.requires': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DependencyParseAnnotator.java'},
    'DependencyParseSieve': {   'req_args': [   'doc',
                                                'characterMap',
                                                'pronounCorefMap',
                                                'animacySet'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\DependencyParseSieve.java'},
    'DependencyParseSieve.dependencyParses': {   'req_args': ['doc'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\DependencyParseSieve.java'},
    'DependencyParseSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\DependencyParseSieve.java'},
    'DependencyParser': {   'req_args': [['properties']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.genTrainExamples': {   'req_args': ['sents', 'trees'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.getFeatures': {   'req_args': ['c'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.getLabelID': {   'req_args': ['s'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.getPosID': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.getPosSet': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.getWordID': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.loadFromModelFile': {   'req_args': [   'modelFile',
                                                              [   'modelFile',
                                                                  'extraProperties']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.loadModelFile': {   'req_args': ['modelFile'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.predict': {   'req_args': ['sentence', ['sentence']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.testCoNLL': {   'req_args': ['testFile', 'outFile'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.testCoNLLReturnScores': {   'req_args': [   'testFile',
                                                                  'outFile'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.train': {   'req_args': [   'trainFile',
                                                  'devFile',
                                                  'modelFile',
                                                  'embedFile',
                                                  'preModel',
                                                  [   'trainFile',
                                                      'devFile',
                                                      'modelFile',
                                                      'embedFile'],
                                                  [   'trainFile',
                                                      'devFile',
                                                      'modelFile'],
                                                  ['trainFile', 'modelFile']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParser.writeModelFile': {   'req_args': ['modelFile'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParser.java'},
    'DependencyParserCache.loadFromModelFile': {   'req_args': [   'modelFile',
                                                                   'extraProperties'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyParserCache.java'},
    'DependencyParserCoreNLPDemo': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\demo\\DependencyParserCoreNLPDemo.java'},
    'DependencyParserCoreNLPDemo.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\demo\\DependencyParserCoreNLPDemo.java'},
    'DependencyParserDemo': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\demo\\DependencyParserDemo.java'},
    'DependencyParserDemo.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\demo\\DependencyParserDemo.java'},
    'DependencyScoring': {   'req_args': [   'goldDeps',
                                             'ignorePunc',
                                             [   'filename',
                                                 'CoNLLX',
                                                 'ignorePunc'],
                                             ['filename']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyScoring.convertStringEquality': {   'req_args': ['deps'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyScoring.langIndependentPuncCheck': {   'req_args': ['token'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyScoring.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyScoring.newInstanceStringEquality': {   'req_args': [   'goldDeps',
                                                                       'ignorePunc'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyScoring.score': {   'req_args': ['system'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'DependencyTree': {   'req_args': [['tree']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.add': {   'req_args': ['h', 'l'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.equal': {   'req_args': ['t'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.getHead': {   'req_args': ['k'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.getLabel': {   'req_args': ['k'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.getRoot': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.isProjective': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.isSingleRoot': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.isTree': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.print': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTree.set': {   'req_args': ['k', 'h', 'l'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\DependencyTree.java'},
    'DependencyTreeTransformer': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyTreeTransformer.java'},
    'DependencyTreeTransformer.transformTree': {   'req_args': ['t'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyTreeTransformer.java'},
    'DescriptionPattern': {   'req_args': [   'rel',
                                              'negDesc',
                                              'desc',
                                              'name',
                                              'useBasicCat',
                                              'basicCatFunction',
                                              'variableGroups',
                                              'isLink',
                                              'linkedName',
                                              ['newRelation', 'oldPattern']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DescriptionPattern.getChildren': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DescriptionPattern.localString': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DescriptionPattern.matcher': {   'req_args': [   'root',
                                                      'tree',
                                                      'nodesToParents',
                                                      'namesToNodes',
                                                      'variableStrings',
                                                      'headFinder'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DescriptionPattern.setChild': {   'req_args': ['n'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DescriptionPattern.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\DescriptionPattern.java'},
    'DeterministicCorefAnnotator': {   'req_args': ['props'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DeterministicCorefAnnotator.java'},
    'DeterministicCorefAnnotator.annotate': {   'req_args': ['annotation'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DeterministicCorefAnnotator.java'},
    'DeterministicCorefAnnotator.requirementsSatisfied': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DeterministicCorefAnnotator.java'},
    'DeterministicCorefAnnotator.requires': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DeterministicCorefAnnotator.java'},
    'DeterministicCorefAnnotator.setNamedEntityTagGranularity': {   'req_args': [   'annotation',
                                                                                    'granularity'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DeterministicCorefAnnotator.java'},
    'DeterministicCorefSieve': {   'req_args': [['props'], []],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.checkEntityMatch': {   'req_args': [   'document',
                                                                    'mentionCluster',
                                                                    'potentialAntecedent',
                                                                    'dict',
                                                                    'roleSet',
                                                                    [   'document',
                                                                        'mentionCluster',
                                                                        'potentialAntecedent',
                                                                        'dict',
                                                                        'roleSet']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.coreferent': {   'req_args': [   'document',
                                                              'mentionCluster',
                                                              'potentialAntecedent',
                                                              'mention2',
                                                              'ant',
                                                              'dict',
                                                              'roleSet',
                                                              [   'document',
                                                                  'mentionCluster',
                                                                  'potentialAntecedent',
                                                                  'mention2',
                                                                  'ant',
                                                                  'dict',
                                                                  'roleSet',
                                                                  'semantics']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.findCoreferentAntecedent': {   'req_args': [   'm',
                                                                            'mIdx',
                                                                            'document',
                                                                            'dict',
                                                                            'props',
                                                                            'sbLog'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.flagsToString': {   'req_args': [[]],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.getOrderedAntecedents': {   'req_args': [   'antecedentSentence',
                                                                         'mySentence',
                                                                         'orderedMentions',
                                                                         'orderedMentionsBySentence',
                                                                         'm1',
                                                                         'm1Position',
                                                                         'corefClusters',
                                                                         'dict',
                                                                         [   'antecedentSentence',
                                                                             'mySentence',
                                                                             'orderedMentions',
                                                                             'orderedMentionsBySentence',
                                                                             'm1',
                                                                             'm1Position',
                                                                             'corefClusters',
                                                                             'dict']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.init': {   'req_args': ['props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\sievepasses\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.skipThisMention': {   'req_args': [   'document',
                                                                   'm1',
                                                                   'c',
                                                                   'dict',
                                                                   [   'document',
                                                                       'm1',
                                                                       'c',
                                                                       'dict']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicCorefSieve.useRoleSkip': {   'req_args': [[]],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DeterministicCorefSieve.java'},
    'DeterministicSpeakerSieve': {   'req_args': [   'doc',
                                                     'characterMap',
                                                     'pronounCorefMap',
                                                     'animacySet'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\DeterministicSpeakerSieve.java'},
    'DeterministicSpeakerSieve.doMentionToSpeaker': {   'req_args': ['doc'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\DeterministicSpeakerSieve.java'},
    'Dictionaries': {   'req_args': [   'props',
                                        [   'language',
                                            'demonymWords',
                                            'animateWords',
                                            'inanimateWords',
                                            'maleWords',
                                            'neutralWords',
                                            'femaleWords',
                                            'pluralWords',
                                            'singularWords',
                                            'statesWords',
                                            'genderNumber',
                                            'countries',
                                            'states',
                                            'loadCorefDict',
                                            'corefDictFiles',
                                            'corefDictPMIFile',
                                            'signaturesFile'],
                                        [],
                                        ['props'],
                                        [   'demonymWords',
                                            'animateWords',
                                            'inanimateWords',
                                            'maleWords',
                                            'neutralWords',
                                            'femaleWords',
                                            'pluralWords',
                                            'singularWords',
                                            'statesWords',
                                            'genderNumber',
                                            'countries',
                                            'states',
                                            'loadCorefDict',
                                            'corefDictFiles',
                                            'corefDictPMIFile',
                                            'signaturesFile'],
                                        []],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionaries.getDemonyms': {   'req_args': ['name', ['name']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionaries.isAdjectivalDemonym': {   'req_args': ['token', ['token']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionaries.loadSemantics': {   'req_args': ['props'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionaries.loadStateAbbreviation': {   'req_args': ['statesFile'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Dictionaries.java'},
    'Dictionaries.lookupCanonicalAmericanStateName': {   'req_args': [   'name',
                                                                         [   'name']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionaries.signature': {   'req_args': ['props', ['props']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Dictionaries.java'},
    'Dictionary': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Dictionary.java'},
    'Dictionary.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Dictionary.java'},
    'DirectedEdge': {   'req_args': ['data', 'head', 'tail'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedEdge.java'},
    'DirectedMultiGraph': {   'req_args': [   [   'outerMapFactory',
                                                  'innerMapFactory'],
                                              ['graph']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.add': {   'req_args': ['source', 'dest', 'data'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.addVertex': {   'req_args': ['v'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.clear': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.containsVertex': {   'req_args': ['v'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.convertPath': {   'req_args': [   'nodes',
                                                          'directionSensitive'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.deleteDuplicateEdges': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.edgeIterable': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.edgeIterator': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.equals': {   'req_args': ['that'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getAllEdges': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getAllVertices': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getChildren': {   'req_args': ['vertex'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getConnectedComponents': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getEdges': {   'req_args': ['source', 'dest'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getInDegree': {   'req_args': ['vertex'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getIncomingEdges': {   'req_args': ['v'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getNeighbors': {   'req_args': ['v'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getNumEdges': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getNumVertices': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getOutDegree': {   'req_args': ['vertex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getOutgoingEdges': {   'req_args': ['v'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getParents': {   'req_args': ['vertex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getShortestPath': {   'req_args': [   'node1',
                                                              'node2',
                                                              [   'node1',
                                                                  'node2',
                                                                  'directionSensitive']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.getShortestPathEdges': {   'req_args': [   'node1',
                                                                   'node2',
                                                                   [   'node1',
                                                                       'node2',
                                                                       'directionSensitive']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.hashCode': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.incomingEdgeIterable': {   'req_args': ['vertex'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.incomingEdgeIterator': {   'req_args': ['vertex'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.isEdge': {   'req_args': ['source', 'dest'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.isEmpty': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.isNeighbor': {   'req_args': ['source', 'dest'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.outgoingEdgeIterable': {   'req_args': ['vertex'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.outgoingEdgeIterator': {   'req_args': ['vertex'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.removeEdge': {   'req_args': ['source', 'dest', 'data'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.removeEdges': {   'req_args': ['source', 'dest'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.removeVertex': {   'req_args': ['vertex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.removeVertices': {   'req_args': ['vertices'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.removeZeroDegreeNodes': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.toMap': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'DirectedMultiGraph.topologicalSort': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\graph\\DirectedMultiGraph.java'},
    'Dirichlet': {   'req_args': ['parameters'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.drawSample': {   'req_args': [   'random',
                                                ['random', 'parameters'],
                                                ['random', 'parameters']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.getPosteriorDistribution': {   'req_args': ['counts'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.getPosteriorPredictiveLogProbability': {   'req_args': [   'counts',
                                                                          'object'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.getPosteriorPredictiveProbability': {   'req_args': [   'counts',
                                                                       'object'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.getPredictiveLogProbability': {   'req_args': ['object'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.getPredictiveProbability': {   'req_args': ['object'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.logProbabilityOf': {   'req_args': ['object'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.probabilityOf': {   'req_args': ['object'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.sampleBeta': {   'req_args': ['a', 'b', 'random'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'Dirichlet.unnormalizedLogProbabilityOf': {   'req_args': [   'mult',
                                                                  'params'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Dirichlet.java'},
    'DirichletProcess': {   'req_args': ['baseMeasure', 'alpha'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DirichletProcess.drawSample': {   'req_args': ['random'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DirichletProcess.logProbabilityOf': {   'req_args': ['object'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DirichletProcess.numOccurances': {   'req_args': ['object'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DirichletProcess.probabilityOf': {   'req_args': ['object'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DirichletProcess.probabilityOfNewObject': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\DirichletProcess.java'},
    'DisabledPreferences': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DisabledPreferences.java'},
    'DisabledPreferencesFactory.install': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DisabledPreferencesFactory.java'},
    'DisabledPreferencesFactory.systemRoot': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DisabledPreferencesFactory.java'},
    'DisabledPreferencesFactory.userRoot': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\DisabledPreferencesFactory.java'},
    'DiscourseMatch': {   'req_args': [[]],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\DiscourseMatch.java'},
    'DiskTreebank': {   'req_args': [   ['encoding'],
                                        ['trf'],
                                        ['trf', 'encoding'],
                                        ['initialCapacity'],
                                        ['initialCapacity', 'trf']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.apply': {   'req_args': ['tp'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.clear': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.getCurrentFilename': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.getCurrentPaths': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.iterator': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.loadPath': {   'req_args': ['path', 'filt'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DiskTreebank.printFileNames': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DiskTreebank.java'},
    'DisplayMatchesPanel': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.clearMatches': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.getInstance': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setDefaultColor': {   'req_args': ['defaultColor'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setFontName': {   'req_args': ['fontName'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setFontSize': {   'req_args': ['fontSize'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setFontSizeRepaint': {   'req_args': ['fontSize'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setMatch': {   'req_args': ['match', 'matchedParts'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.setMatchedColor': {   'req_args': ['matchedColor'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DisplayMatchesPanel.valueChanged': {   'req_args': ['e'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\DisplayMatchesPanel.java'},
    'DistSimClassifier': {   'req_args': [   'filename',
                                             'cased',
                                             'numberEquivalence',
                                             [   'filename',
                                                 'cased',
                                                 'numberEquivalence',
                                                 'unknownWordClass'],
                                             [   'filename',
                                                 'format',
                                                 'encoding',
                                                 'distSimMaxBits',
                                                 'cased',
                                                 'numberEquivalence',
                                                 'unknownWordClass']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DistSimClassifier.java'},
    'DistSimClassifier.distSimClass': {   'req_args': ['word'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DistSimClassifier.java'},
    'Distribution': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.absolutelyDiscountedDistribution': {   'req_args': [   'counter',
                                                                         'numberOfKeys',
                                                                         'discount'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.addToKeySet': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.argmax': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.containsKey': {   'req_args': ['key'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.distributionFromLogisticCounter': {   'req_args': ['cntr'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.distributionWithDirichletPrior': {   'req_args': [   'c',
                                                                       'prior',
                                                                       'weight'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.drawSample': {   'req_args': [['random']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.dynamicCounterWithDirichletPrior': {   'req_args': [   'c',
                                                                         'prior',
                                                                         'weight'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.equals': {   'req_args': ['o', ['distribution']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getCount': {   'req_args': ['key'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getCounter': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getDistribution': {   'req_args': ['counter'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getDistributionFromLogValues': {   'req_args': ['counter'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getDistributionFromPartiallySpecifiedCounter': {   'req_args': [   'c',
                                                                                     'numKeys'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getDistributionWithReservedMass': {   'req_args': [   'counter',
                                                                        'reservedMass'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getNumberOfKeys': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getPerturbedDistribution': {   'req_args': [   'wordCounter',
                                                                 'r'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getPerturbedUniformDistribution': {   'req_args': ['s', 'r'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getReservedMass': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.getUniformDistribution': {   'req_args': ['s'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.goodTuringSmoothedCounter': {   'req_args': [   'counter',
                                                                  'numberOfKeys'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.goodTuringWithExplicitUnknown': {   'req_args': [   'counter',
                                                                      'UNK'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.keySet': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.laplaceSmoothedDistribution': {   'req_args': [   'counter',
                                                                    'numberOfKeys',
                                                                    [   'counter',
                                                                        'numberOfKeys',
                                                                        'lambda']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.laplaceWithExplicitUnknown': {   'req_args': [   'counter',
                                                                   'lambda',
                                                                   'UNK'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.logProbabilityOf': {   'req_args': ['key'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.probabilityOf': {   'req_args': ['key'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.sampleFrom': {   'req_args': [['random']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.simpleGoodTuring': {   'req_args': [   'counter',
                                                         'numberOfKeys'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.toString': {   'req_args': ['nf', []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'Distribution.totalCount': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distribution.java'},
    'DistributionPackage': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DistributionPackage.java'},
    'DistributionPackage.addFiles': {   'req_args': ['fileList'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DistributionPackage.java'},
    'DistributionPackage.make': {   'req_args': ['distribName'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DistributionPackage.java'},
    'DistributionPackage.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DistributionPackage.java'},
    'Distributions': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.average': {   'req_args': ['d1', 'd2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.informationRadius': {   'req_args': ['d1', 'd2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.jensenShannonDivergence': {   'req_args': ['d1', 'd2'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.klDivergence': {   'req_args': ['from', 'to'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.overlap': {   'req_args': ['d1', 'd2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.skewDivergence': {   'req_args': ['d1', 'd2', 'skew'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distributions.weightedAverage': {   'req_args': ['d1', 'w1', 'd2'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Distributions.java'},
    'Distsim': {   'req_args': ['path'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Distsim.java'},
    'Distsim.getMapping': {   'req_args': ['word'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Distsim.java'},
    'Distsim.initLexicon': {   'req_args': ['path'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Distsim.java'},
    'DistsimFeatureFactory': {   'req_args': [['path']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\DistsimFeatureFactory.java'},
    'DistsimFeatureFactory.addDistsimFeatures': {   'req_args': [   'features',
                                                                    'label',
                                                                    'featureName'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\DistsimFeatureFactory.java'},
    'DistsimFeatureFactory.featurize': {   'req_args': ['state', 'features'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\DistsimFeatureFactory.java'},
    'DocDateAnnotator': {   'req_args': ['name', 'props'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'DocDateAnnotator.annotate': {   'req_args': ['annotation'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'DocDateAnnotator.currentDate': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'DocDateAnnotator.requirementsSatisfied': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'DocDateAnnotator.requires': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'DocDateAnnotator.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\DocDateAnnotator.java'},
    'Document': {   'req_args': [   [   'anno',
                                        'predictedMentions',
                                        'goldMentions'],
                                    ['input', 'mentions'],
                                    [],
                                    [   'anno',
                                        'predictedMentions',
                                        'goldMentions',
                                        'dict'],
                                    ['props', 'text'],
                                    ['text'],
                                    ['props', 'ann'],
                                    ['ann'],
                                    ['props', 'proto'],
                                    ['proto']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.addIncompatible': {   'req_args': ['m1', 'm2', ['m1', 'm2']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.asAnnotation': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.cased': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.caseless': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.coref': {   'req_args': ['props', []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.deserialize': {   'req_args': ['in'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.docid': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.extractGoldCorefClusters': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Document.java'},
    'Document.getGoldLinks': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.getOrderedMentions': {   'req_args': [[]],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.getSentenceWordLists': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.getSpeakerInfo': {   'req_args': ['speaker', ['speaker']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.isCoref': {   'req_args': ['m1', 'm2'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.isIncompatible': {   'req_args': [   'c1',
                                                   'c2',
                                                   ['m1', 'm2'],
                                                   ['c1', 'c2'],
                                                   ['m1', 'm2']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.isSpeaker': {   'req_args': ['m', 'ant', 'dict'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Document.java'},
    'Document.json': {   'req_args': ['functions'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.jsonMinified': {   'req_args': ['functions'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.mergeAcronymCache': {   'req_args': [   'to',
                                                      'from',
                                                      ['to', 'from']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.mergeIncompatibles': {   'req_args': [   'to',
                                                       'from',
                                                       ['to', 'from']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.numberOfSpeakers': {   'req_args': [[]],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Document.java'},
    'Document.sentence': {   'req_args': [   'sentenceIndex',
                                             'props',
                                             ['sentenceIndex']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.sentences': {   'req_args': ['props', []],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.serialize': {   'req_args': [['out']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.setBackend': {   'req_args': ['backend'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.setDocid': {   'req_args': ['docid'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.text': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.useServer': {   'req_args': [   'host',
                                              'port',
                                              [   'host',
                                                  'port',
                                                  'apiKey',
                                                  'apiSecret',
                                                  'lazy'],
                                              [   'host',
                                                  'apiKey',
                                                  'apiSecret',
                                                  'lazy'],
                                              ['host', 'apiKey', 'apiSecret']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.xml': {   'req_args': ['functions'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'Document.xmlMinified': {   'req_args': ['functions'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Document.java'},
    'DocumentExamples': {   'req_args': ['id', 'examples', 'mentionFeatures'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\DocumentExamples.java'},
    'DocumentMaker': {   'req_args': ['props', 'dictionaries'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentMaker.java'},
    'DocumentMaker.makeDocument': {   'req_args': ['anno', ['input']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentMaker.java'},
    'DocumentMaker.nextDoc': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentMaker.java'},
    'DocumentMaker.resetDocs': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentMaker.java'},
    'DocumentPreprocessor': {   'req_args': [   ['input'],
                                                ['input', 't'],
                                                ['docPath'],
                                                ['docPath', 't'],
                                                ['docPath', 't', 'encoding']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.extractGoldClusters': {   'req_args': ['doc'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.isSpeaker': {   'req_args': ['m', 'ant', 'dict'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.iterator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.preprocess': {   'req_args': [   'doc',
                                                           'dict',
                                                           'singletonPredictor',
                                                           'headFinder'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setElementDelimiter': {   'req_args': ['s'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setEscaper': {   'req_args': ['e'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setKeepEmptySentences': {   'req_args': [   'keepEmptySentences'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setSentenceDelimiter': {   'req_args': ['s'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setSentenceFinalPuncWords': {   'req_args': [   'sentenceFinalPuncWords'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setTagDelimiter': {   'req_args': ['s'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentPreprocessor.setTokenizerFactory': {   'req_args': [   'newTokenizerFactory'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\DocumentPreprocessor.java'},
    'DocumentReader': {   'req_args': [   ['in'],
                                          [   'in',
                                              'tokenizerFactory',
                                              'keepOriginalText']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.getBufferedReader': {   'req_args': ['in'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.getKeepOriginalText': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.getReader': {   'req_args': [   ['text'],
                                                    ['file'],
                                                    ['url'],
                                                    ['in']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.getTokenizerFactory': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.readDocument': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.readText': {   'req_args': ['in'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.setKeepOriginalText': {   'req_args': ['keepOriginalText'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.setReader': {   'req_args': ['in'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DocumentReader.setTokenizerFactory': {   'req_args': ['tokenizerFactory'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\DocumentReader.java'},
    'DomReader.getAttributeValue': {   'req_args': ['node', 'attributeName'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\DomReader.java'},
    'DomReader.readDocument': {   'req_args': ['f'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\DomReader.java'},
    'DoubleAD': {   'req_args': [['initVal', 'initDot']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.doubleValue': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.equals': {   'req_args': [   'obj',
                                           ['valToCompare', 'dotToCompare'],
                                           [   'valToCompare',
                                               'dotToCompare',
                                               'TOL']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.floatValue': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.getdot': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.getval': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.intValue': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.longValue': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.minusEquals': {   'req_args': ['a'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.minusEqualsConst': {   'req_args': ['a'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.plusEquals': {   'req_args': ['a'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.plusEqualsConst': {   'req_args': ['a'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.set': {   'req_args': ['value', 'dotValue'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.setdot': {   'req_args': ['a'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.setval': {   'req_args': ['a'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DoubleAD.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\DoubleAD.java'},
    'DumpMatrices.dumpMatrix': {   'req_args': ['filename', 'matrix'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DumpMatrices.java'},
    'DumpMatrices.help': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DumpMatrices.java'},
    'DumpMatrices.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\DumpMatrices.java'},
    'DuplicateTreeStringFilter': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DuplicateTreeStringFilter.java'},
    'DuplicateTreeStringFilter.test': {   'req_args': ['tree'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\DuplicateTreeStringFilter.java'},
    'DybroFrenchHeadFinder': {   'req_args': [['tlp']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\DybroFrenchHeadFinder.java'},
    'DybroFrenchHeadFinder.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\DybroFrenchHeadFinder.java'},
    'EPEOutputter.print': {   'req_args': ['doc', 'target', 'options'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EPEOutputter.java'},
    'Edge': {   'req_args': ['exhaustiveTest', ['e']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Edge.java'},
    'Edge.equals': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Edge.java'},
    'Edge.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Edge.java'},
    'Edge.isEdge': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Edge.java'},
    'Edge.toString': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Edge.java'},
    'EditDistance': {   'req_args': [['allowTranspose']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\EditDistance.java'},
    'EditDistance.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\EditDistance.java'},
    'EditDistance.score': {   'req_args': [   'source',
                                              'target',
                                              ['sourceStr', 'targetStr']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\EditDistance.java'},
    'EditDistanceDamerauLevenshteinLike.editDistance': {   'req_args': [   's',
                                                                           't',
                                                                           'threshold'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\EditDistanceDamerauLevenshteinLike.java'},
    'Embedding': {   'req_args': [   'wordVectors',
                                     ['wordVectorFile'],
                                     ['wordVectorFile', 'embeddingSize'],
                                     ['wordFile', 'vectorFile'],
                                     [   'wordFile',
                                         'vectorFile',
                                         'embeddingSize']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.containsWord': {   'req_args': ['word'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.entrySet': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.get': {   'req_args': ['word'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.getEmbeddingSize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.getEndWordVector': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.getStartWordVector': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.getUnknownWordVector': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.getWordVectors': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.keySet': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.setWordVectors': {   'req_args': ['wordVectors'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.size': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.values': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'Embedding.writeToFile': {   'req_args': ['filename'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\Embedding.java'},
    'EmbeddingExtractor': {   'req_args': [   'conll',
                                              'staticWordEmbeddings',
                                              'tunedWordEmbeddings',
                                              'naEmbedding'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getDocumentEmbedding': {   'req_args': ['document'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getMentionEmbeddings': {   'req_args': [   'm',
                                                                   'docEmbedding'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getMentionEmbeddingsForFast': {   'req_args': ['m'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getNAEmbedding': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getStaticWordEmbeddings': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getTunedWordEmbeddings': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.getWordEmbedding': {   'req_args': ['word'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingExtractor.isConll': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\EmbeddingExtractor.java'},
    'EmbeddingFeatureFactory.getCliqueFeatures': {   'req_args': [   'info',
                                                                     'position',
                                                                     'clique'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmbeddingFeatureFactory.java'},
    'EmpiricalNERPrior': {   'req_args': [   'backgroundSymbol',
                                             'classIndex',
                                             'doc'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPrior.java'},
    'EmpiricalNERPrior.scoreOf': {   'req_args': ['sequence'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPrior.java'},
    'EmpiricalNERPriorBIO': {   'req_args': [   'backgroundSymbol',
                                                'classIndex',
                                                'tagIndex',
                                                'doc',
                                                'matrices',
                                                'flags'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPriorBIO.java'},
    'EmpiricalNERPriorBIO.scoreOf': {   'req_args': ['sequence'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPriorBIO.java'},
    'EmpiricalNERPriorBIOFactory.getInstance': {   'req_args': [   'backgroundSymbol',
                                                                   'classIndex',
                                                                   'tagIndex',
                                                                   'document',
                                                                   'entityMatrices',
                                                                   'flags'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPriorBIOFactory.java'},
    'EmpiricalNERPriorFactory.getInstance': {   'req_args': [   'backgroundSymbol',
                                                                'classIndex',
                                                                'tagIndex',
                                                                'document',
                                                                'entityMatrices',
                                                                'flags'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EmpiricalNERPriorFactory.java'},
    'EncodingFileReader': {   'req_args': [   'fileName',
                                              ['fileName', 'encoding'],
                                              ['file'],
                                              ['file', 'encoding'],
                                              ['fd']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\EncodingFileReader.java'},
    'EncodingPrintWriter': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\EncodingPrintWriter.java'},
    'EnglishGrammaticalRelations': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getConj': {   'req_args': [   'conjunctionString'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getConjs': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getPrep': {   'req_args': [   'prepositionString'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getPrepC': {   'req_args': [   'prepositionString'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getPreps': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.getPrepsC': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.valueOf': {   'req_args': ['s', ['o']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.values': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalRelations.valuesLock': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalRelations.java'},
    'EnglishGrammaticalStructure': {   'req_args': [   't',
                                                       ['t', 'puncFilter'],
                                                       [   't',
                                                           'puncFilter',
                                                           'hf'],
                                                       [   'projectiveDependencies',
                                                           'root']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructure.java'},
    'EnglishGrammaticalStructure.buildCoNLLXGrammaticalStructure': {   'req_args': [   'tokenFields'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructure.java'},
    'EnglishGrammaticalStructure.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructure.java'},
    'EnglishGrammaticalStructure.readCoNLLXGrammaticalStructureCollection': {   'req_args': [   'fileName'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructure.java'},
    'EnglishGrammaticalStructureFactory': {   'req_args': [   ['puncFilter'],
                                                              [   'puncFilter',
                                                                  'hf']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructureFactory.java'},
    'EnglishGrammaticalStructureFactory.newGrammaticalStructure': {   'req_args': [   't'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishGrammaticalStructureFactory.java'},
    'EnglishPTBTreebankCorrector': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\EnglishPTBTreebankCorrector.java'},
    'EnglishPTBTreebankCorrector.transformTrees': {   'req_args': ['tb'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\EnglishPTBTreebankCorrector.java'},
    'EnglishPatterns': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\EnglishPatterns.java'},
    'EnglishTreebankParserParams': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.collinizer': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.defaultCoreNLPFlags': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.diskTreebank': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.display': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.getGrammaticalStructure': {   'req_args': [   't',
                                                                               'filter',
                                                                               'hf'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.lex': {   'req_args': [   'op',
                                                           'wordIndex',
                                                           'tagIndex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.readGrammaticalStructureFromFile': {   'req_args': [   'filename'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.subcategoryStripper': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.supportsBasicDependencies': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.testMemoryTreebank': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.treebankLanguagePack': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishTreebankParserParams.java'},
    'EnglishUnknownWordModel': {   'req_args': [   'op',
                                                   'lex',
                                                   'wordIndex',
                                                   'tagIndex',
                                                   'unSeenCounter',
                                                   [   'op',
                                                       'lex',
                                                       'wordIndex',
                                                       'tagIndex']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModel.java'},
    'EnglishUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModel.java'},
    'EnglishUnknownWordModel.getSignatureIndex': {   'req_args': [   'index',
                                                                     'sentencePosition',
                                                                     'word'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModel.java'},
    'EnglishUnknownWordModel.score': {   'req_args': [   'iTW',
                                                         'loc',
                                                         'c_Tseen',
                                                         'total',
                                                         'smooth',
                                                         'word'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModel.java'},
    'EnglishUnknownWordModel.scoreProbTagGivenWordSignature': {   'req_args': [   'iTW',
                                                                                  'loc',
                                                                                  'smooth',
                                                                                  'word'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModel.java'},
    'EnglishUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModelTrainer.java'},
    'EnglishUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                             'lex',
                                                                             'wordIndex',
                                                                             'tagIndex',
                                                                             'totalTrees'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModelTrainer.java'},
    'EnglishUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                                'loc',
                                                                'weight'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\EnglishUnknownWordModelTrainer.java'},
    'EnhancementOptions': {   'req_args': [   'processMultiWordPrepositions',
                                              'enhancePrepositionalModifiers',
                                              'enhanceOnlyNmods',
                                              'enhanceConjuncts',
                                              'propagateDependents',
                                              'addReferent',
                                              'addCopyNodes',
                                              'demoteQuantMod',
                                              'addXSubj',
                                              ['options']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\EnhancementOptions.java'},
    'Entity.addEntity': {   'req_args': ['entity', 'em'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Entity.java'},
    'Entity.getEntityMentions': {   'req_args': ['entity'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Entity.java'},
    'Entity.toString': {   'req_args': ['classIndex'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityBIO.toString': {   'req_args': ['tagIndex'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePrior': {   'req_args': [   'backgroundSymbol',
                                                              'classIndex',
                                                              'doc'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.addingSingletonEntity': {   'req_args': [   'sequence',
                                                                                    'position'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.appendingEntity': {   'req_args': [   'sequence',
                                                                              'position'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.extractEntity': {   'req_args': [   'sequence',
                                                                            'position'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.getConditionalDistribution': {   'req_args': [   'sequence',
                                                                                         'position'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.getNumClasses': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.getPossibleValues': {   'req_args': [   'position'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.joiningTwoEntities': {   'req_args': [   'sequence',
                                                                                 'position'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.leftWindow': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.length': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.matches': {   'req_args': [   'entity',
                                                                      'position'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.noChange': {   'req_args': [   'sequence',
                                                                       'position'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.otherOccurrences': {   'req_args': [   'entity'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.prependingEntity': {   'req_args': [   'sequence',
                                                                               'position'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.removingBeginningOfEntity': {   'req_args': [   'sequence',
                                                                                        'position'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.removingEndOfEntity': {   'req_args': [   'sequence',
                                                                                  'position'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.rightWindow': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.scoreOf': {   'req_args': [   'sequence',
                                                                      'pos'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.scoresOf': {   'req_args': [   'sequence',
                                                                       'position'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.setInitialSequence': {   'req_args': [   'initialSequence'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.splittingTwoEntities': {   'req_args': [   'sequence',
                                                                                   'position'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.toArray': {   'req_args': ['list'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.toString': {   'req_args': [['pos']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePrior.updateSequenceElement': {   'req_args': [   'sequence',
                                                                                    'position',
                                                                                    'oldVal'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePrior.java'},
    'EntityCachingAbstractSequencePriorBIO': {   'req_args': [   'backgroundSymbol',
                                                                 'classIndex',
                                                                 'tagIndex',
                                                                 'doc'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.extractEntity': {   'req_args': [   'sequence',
                                                                               'position',
                                                                               'tag'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.getConditionalDistribution': {   'req_args': [   'sequence',
                                                                                            'position'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.getNumClasses': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.getPossibleValues': {   'req_args': [   'position'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.leftWindow': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.length': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.matches': {   'req_args': [   'entity',
                                                                         'position'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.otherOccurrences': {   'req_args': [   'entity'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.rightWindow': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.scoreOf': {   'req_args': [   'sequence',
                                                                         'pos'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.scoresOf': {   'req_args': [   'sequence',
                                                                          'position'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.setInitialSequence': {   'req_args': [   'initialSequence'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.toArray': {   'req_args': ['list'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.toString': {   'req_args': [['pos']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityCachingAbstractSequencePriorBIO.updateSequenceElement': {   'req_args': [   'sequence',
                                                                                       'position',
                                                                                       'oldVal'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\EntityCachingAbstractSequencePriorBIO.java'},
    'EntityClassifier': {   'req_args': ['modelPath'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\EntityClassifier.java'},
    'EntityClassifier.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\EntityClassifier.java'},
    'EntityClassifier.predictEntity': {   'req_args': ['word', 'embeddings'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\EntityClassifier.java'},
    'EntityExtractor.extractAttributes': {   'req_args': ['sg'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\EntityExtractor.java'},
    'EntityExtractor.extractEntities': {   'req_args': ['sg'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\EntityExtractor.java'},
    'EntityExtractorResultsPrinter': {   'req_args': [   [   'excludedClasses',
                                                             'useSubTypes']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\EntityExtractorResultsPrinter.java'},
    'EntityExtractorResultsPrinter.printResults': {   'req_args': [   'pw',
                                                                      'goldStandard',
                                                                      'extractorOutput'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\EntityExtractorResultsPrinter.java'},
    'EntityExtractorResultsPrinter.printResultsUsingLabels': {   'req_args': [   'pw',
                                                                                 'goldStandard',
                                                                                 'extractorOutput'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\EntityExtractorResultsPrinter.java'},
    'EntityMention': {   'req_args': [   'objectId',
                                         'sentence',
                                         'extentSpan',
                                         'headSpan',
                                         'type',
                                         'subtype',
                                         'mentionType'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.equals': {   'req_args': [   'other',
                                                ['otherEnt', 'useSubType']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getCorefID': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getHead': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getHeadTokenEnd': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getHeadTokenStart': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getMentionType': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getNormalizedName': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getSyntacticHeadToken': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getSyntacticHeadTokenPosition': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getSyntacticHeadTree': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.getValue': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.headIncludes': {   'req_args': ['otherEnt', 'useSubType'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.labelEquals': {   'req_args': ['otherEnt', 'useSubType'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.makeUniqueId': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.setCorefID': {   'req_args': ['id'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.setHeadTokenPosition': {   'req_args': ['i'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.setHeadTokenSpan': {   'req_args': ['s'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.setNormalizedName': {   'req_args': ['n'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.sortByHeadSpan': {   'req_args': ['mentions'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.textEquals': {   'req_args': ['otherEnt'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMention.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMention.java'},
    'EntityMentionFactory.constructEntityMention': {   'req_args': [   'objectId',
                                                                       'sentence',
                                                                       'extentSpan',
                                                                       'headSpan',
                                                                       'type',
                                                                       'subtype',
                                                                       'mentionType'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EntityMentionFactory.java'},
    'EntityMentionsAnnotator': {   'req_args': [['name', 'props']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EntityMentionsAnnotator.java'},
    'EntityMentionsAnnotator.annotate': {   'req_args': ['annotation'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EntityMentionsAnnotator.java'},
    'EntityMentionsAnnotator.determineEntityMentionConfidences': {   'req_args': [   'entityMention'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EntityMentionsAnnotator.java'},
    'EntityMentionsAnnotator.requirementsSatisfied': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EntityMentionsAnnotator.java'},
    'EntityMentionsAnnotator.requires': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\EntityMentionsAnnotator.java'},
    'Env': {   'req_args': ['p', [], ['variables']],
               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.bind': {   'req_args': [   'name',
                                    'obj',
                                    ['name', 'pattern'],
                                    ['name', 'obj']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.bindStringRegex': {   'req_args': ['var', 'regex'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.clearVariables': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.expandStringRegex': {   'req_args': ['regex'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.get': {   'req_args': ['name', ['name']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultNestedResultsAnnotationKey': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultResultAnnotationKey': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultResultsAnnotationExtractor': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultStringMatchFlags': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultStringPatternFlags': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultTextAnnotationKey': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultTokensAggregator': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultTokensAggregators': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultTokensAnnotationKey': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaultTokensResultAnnotationKey': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getDefaults': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getNodePattern': {   'req_args': ['name'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getSequenceMatchResultExtractor': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getSequencePatternExpr': {   'req_args': ['name', 'copy'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getStringMatchResultExtractor': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getStringPattern': {   'req_args': ['regex'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.getVariables': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.initDefaultBindings': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.lookupAnnotationKey': {   'req_args': ['env', 'name'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\Env.java'},
    'Env.peek': {   'req_args': ['name'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.pop': {   'req_args': ['name'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.push': {   'req_args': ['name', 'value'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultNestedResultsAnnotationKey': {   'req_args': [   'defaultNestedResultsAnnotationKey'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultResultAnnotationKey': {   'req_args': [   'defaultResultAnnotationKey',
                                                             [   'defaultResultAnnotationKey']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultResultsAnnotationExtractor': {   'req_args': [   'defaultResultsAnnotationExtractor'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultStringMatchFlags': {   'req_args': [   'defaultStringMatchFlags'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultStringPatternFlags': {   'req_args': [   'defaultStringPatternFlags'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultTextAnnotationKey': {   'req_args': [   'defaultTextAnnotationKey'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultTokensAggregators': {   'req_args': [   'defaultTokensAggregators'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultTokensAnnotationKey': {   'req_args': [   'defaultTokensAnnotationKey'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaultTokensResultAnnotationKey': {   'req_args': [   'defaultTokensResultAnnotationKey',
                                                                   [   'defaultTokensResultAnnotationKey']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setDefaults': {   'req_args': ['defaults'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setSequenceMatchResultExtractor': {   'req_args': [   'sequenceMatchResultExtractor'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setStringMatchResultExtractor': {   'req_args': [   'stringMatchResultExtractor'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.setVariables': {   'req_args': ['variables'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'Env.unbind': {   'req_args': ['name', ['name']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\Env.java'},
    'EnvLookup': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultNestedResultsAnnotationKey': {   'req_args': ['env'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultResultAnnotationExtractor': {   'req_args': ['env'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultResultAnnotationKey': {   'req_args': ['env'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultTextAnnotationKey': {   'req_args': ['env'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultTokensAggregator': {   'req_args': ['env'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultTokensAggregators': {   'req_args': ['env'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultTokensAnnotationKey': {   'req_args': ['env'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.getDefaultTokensResultAnnotationKey': {   'req_args': ['env'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.lookupAnnotationKey': {   'req_args': ['env', 'name'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EnvLookup.lookupAnnotationKeyWithClassname': {   'req_args': [   'env',
                                                                      'name'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\EnvLookup.java'},
    'EquivalenceClassEval': {   'req_args': [   ['eq'],
                                                ['e'],
                                                ['eq', 'name'],
                                                ['eq', 'e'],
                                                ['eq', 'e', 'summaryName'],
                                                [   'eq',
                                                    'checker',
                                                    'summaryName']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.defaultChecker': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.display': {   'req_args': [['pw']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.displayLast': {   'req_args': [['pw']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.eval': {   'req_args': [   'guesses',
                                                     'golds',
                                                     [   'guesses',
                                                         'golds',
                                                         'pw']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.f1': {   'req_args': [   'key',
                                                   ['precision', 'recall'],
                                                   ['precision', 'recall']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.factory': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastF1': {   'req_args': ['key', []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastNumGolds': {   'req_args': ['key', []],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastNumGoldsCorrect': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastNumGuessed': {   'req_args': ['key', []],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastNumGuessedCorrect': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastPrecision': {   'req_args': ['key', []],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.lastRecall': {   'req_args': ['key', []],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.nullEquivalenceClasser': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.precision': {   'req_args': ['key'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.recall': {   'req_args': ['key'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'EquivalenceClassEval.setBagEval': {   'req_args': ['bagEval'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\EquivalenceClassEval.java'},
    'ErasureUtils': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'ErasureUtils.mkT2DArray': {   'req_args': ['klass', 'dim'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'ErasureUtils.mkTArray': {   'req_args': ['klass', 'size'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'ErasureUtils.noop': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'ErasureUtils.sortedIfPossible': {   'req_args': ['collection'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'ErasureUtils.uncheckedCast': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ErasureUtils.java'},
    'EvalUtils.f1': {   'req_args': ['pNum', 'pDen', 'rNum', 'rDen'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\EvalUtils.java'},
    'EvalUtils.getCombinedF1': {   'req_args': [   'mucWeight',
                                                   'gold',
                                                   'clusters',
                                                   'mentionToGold',
                                                   'mentionToSystem'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\EvalUtils.java'},
    'Evalb': {   'req_args': ['str', 'runningAverages'],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\Evalb.java'},
    'Evalb.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\Evalb.java'},
    'Evalb.main': {   'req_args': ['args'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\Evalb.java'},
    'EvalbByCat': {   'req_args': [   'str',
                                      'runningAverages',
                                      ['str', 'runningAverages', 'labelRegex']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbByCat.java'},
    'EvalbByCat.display': {   'req_args': ['verbose', 'pw'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbByCat.java'},
    'EvalbByCat.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbByCat.java'},
    'EvalbFormatWriter.closeEVALBfiles': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.closeFiles': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.initEVALBfiles': {   'req_args': ['tlpParams'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.initFiles': {   'req_args': [   'tlpParams',
                                                       'goldFilename',
                                                       'testFilename',
                                                       [   'tlpParams',
                                                           'testFilename']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.writeEVALBline': {   'req_args': ['gold', 'test'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.writeTree': {   'req_args': ['test'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'EvalbFormatWriter.writeTrees': {   'req_args': ['gold', 'test'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvalbFormatWriter.java'},
    'Evaluate': {   'req_args': ['model'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'Evaluate.eval': {   'req_args': ['tree'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'Evaluate.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'Evaluate.populatePredictedLabels': {   'req_args': ['trees'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'Evaluate.printSummary': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'Evaluate.reset': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\Evaluate.java'},
    'EvaluateExternalParser': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.buildResponse': {   'req_args': ['f1', 'kbestF1'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.convertDataset': {   'req_args': [   'goldTrees',
                                                                 'results'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.getGoldTrees': {   'req_args': ['parses'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.getResults': {   'req_args': ['parses'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.processInputStream': {   'req_args': ['in', 'out'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.processRequest': {   'req_args': ['parses'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateExternalParser.scoreDataset': {   'req_args': [   'goldTrees',
                                                               'results'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateExternalParser.java'},
    'EvaluateTreebank': {   'req_args': [   'parser',
                                            ['op', 'lex', 'pqFactory'],
                                            [   'op',
                                                'lex',
                                                'pqFactory',
                                                'tagger',
                                                'extraEvals',
                                                'parserQueryEvals']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.getLBScore': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.getPCFGTopKF1': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.getTagScore': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.hasPCFGTopKF1': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.processResults': {   'req_args': [   'pq',
                                                           'goldTree',
                                                           'pwErr',
                                                           'pwOut',
                                                           'pwFileOut',
                                                           'pwStats',
                                                           'treePrint'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluateTreebank.testOnTreebank': {   'req_args': [   'testTreebank',
                                                           ['testTreebank'],
                                                           ['testTreebank']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluateTreebank.java'},
    'EvaluationMetric.getPFractionals': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'EvaluationMetric.getRFractionals': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'EvaluationMetric.getTestInstances': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'EvaluationMetric.numRelevantExamples': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'EvaluationMetric.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'EvaluationMetric.update': {   'req_args': [   'curP',
                                                   'curPnum',
                                                   'curR',
                                                   'curRnum'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\EvaluationMetric.java'},
    'Event.addEntity': {   'req_args': ['event', 'em'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Event.java'},
    'Event.getEventMentions': {   'req_args': ['event'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Event.java'},
    'EventMention': {   'req_args': [   'objectId',
                                        'sentence',
                                        'span',
                                        'type',
                                        'subtype',
                                        'anchor',
                                        'args',
                                        'argNames'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.addArg': {   'req_args': [   'a',
                                               'an',
                                               'discardSameArgDifferentName'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.addArgs': {   'req_args': [   'args',
                                                'argNames',
                                                'discardSameArgDifferentName'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.addParent': {   'req_args': ['p'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.contains': {   'req_args': ['e'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.equals': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.getAnchor': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.getModification': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.getParents': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.getSingleParent': {   'req_args': ['sentence'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.mergeEvent': {   'req_args': [   'e',
                                                   'discardSameArgDifferentName'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.removeFromParents': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.removeParent': {   'req_args': ['p'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.resetArguments': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.setArgs': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.setModification': {   'req_args': ['eventModification'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'EventMention.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\EventMention.java'},
    'ExactAutomatonMinimizer': {   'req_args': ['sparseMode', []],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\ExactAutomatonMinimizer.java'},
    'ExactAutomatonMinimizer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\ExactAutomatonMinimizer.java'},
    'ExactAutomatonMinimizer.minimizeFA': {   'req_args': ['unminimizedFA'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\ExactAutomatonMinimizer.java'},
    'ExactBestSequenceFinder.bestSequence': {   'req_args': ['ts'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ExactBestSequenceFinder.java'},
    'ExactBestSequenceFinder.bestSequenceWithLinearConstraints': {   'req_args': [   'ts',
                                                                                     'linearConstraints'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ExactBestSequenceFinder.java'},
    'ExactGrammarCompactor': {   'req_args': ['op', 'saveGraphs', 'verbose'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExactGrammarCompactor.java'},
    'ExactMatchCost': {   'req_args': [   ['mismatchCost'],
                                          [   'mismatchCost',
                                              'insCost',
                                              'delCost']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ExactMatchCost.java'},
    'ExactMatchCost.cost': {   'req_args': ['k1', 'k2', 'n'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\ExactMatchCost.java'},
    'ExactStringMatch': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\ExactStringMatch.java'},
    'Example': {   'req_args': [   'docId',
                                   'm1',
                                   'm2',
                                   'label',
                                   'pairwiseFeatures',
                                   ['pair', 'isPositive'],
                                   ['feature', 'label']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Example.java'},
    'Example.getFeature': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Example.java'},
    'Example.getLabel': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Example.java'},
    'Example.isNewLink': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\Example.java'},
    'ExciseNode': {   'req_args': ['top', 'bottom', ['node']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ExciseNode.java'},
    'ExciseNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ExciseNode.java'},
    'ExhaustiveDependencyParser': {   'req_args': [   'dg',
                                                      'lex',
                                                      'op',
                                                      'wordIndex',
                                                      'tagIndex'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.displayHeadScores': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getBestParse': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getBestParses': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getBestScore': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getKBestParses': {   'req_args': ['k'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getKGoodParses': {   'req_args': ['k'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.getKSampledParses': {   'req_args': ['k'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.hasParse': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.iPossible': {   'req_args': ['hook'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.iScore': {   'req_args': ['edge'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.oPossible': {   'req_args': ['hook'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.oScore': {   'req_args': ['edge'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustiveDependencyParser.parse': {   'req_args': ['sentence'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustiveDependencyParser.java'},
    'ExhaustivePCFGParser': {   'req_args': [   'bg',
                                                'ug',
                                                'lex',
                                                'op',
                                                'stateIndex',
                                                'wordIndex',
                                                'tagIndex'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getBestParse': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getBestParses': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getBestScore': {   'req_args': [['stateName']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getKBestParses': {   'req_args': ['k'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getKGoodParses': {   'req_args': ['k'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.getKSampledParses': {   'req_args': ['k'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.hasParse': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.iPossible': {   'req_args': ['hook'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.iPossibleL': {   'req_args': ['state', 'start'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.iPossibleR': {   'req_args': ['state', 'end'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.iScore': {   'req_args': ['edge'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.nudgeDownArraySize': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.oPossible': {   'req_args': ['hook'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.oPossibleL': {   'req_args': ['state', 'start'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.oPossibleR': {   'req_args': ['state', 'end'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.oScore': {   'req_args': ['edge'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.parse': {   'req_args': ['sentence', ['lr'], ['lr']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.scoreBinarizedTree': {   'req_args': [   'tree',
                                                                   'start'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.scoreNonBinarizedTree': {   'req_args': ['tree'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'ExhaustivePCFGParser.validateBinarizedTree': {   'req_args': [   'tree',
                                                                      'start'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ExhaustivePCFGParser.java'},
    'Experiments': {   'req_args': [   ['vArray'],
                                       ['vArray', 'maxYs'],
                                       ['vArray', 'ySize'],
                                       ['filename']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.add': {   'req_args': ['m'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.createIndex': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.get': {   'req_args': ['index'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.getNumber': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.numY': {   'req_args': ['x'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.print': {   'req_args': [['pf']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.ptilde': {   'req_args': [['ySize']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.ptildeX': {   'req_args': ['x'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.ptildeXY': {   'req_args': ['x', 'y'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.ptildeY': {   'req_args': ['y'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.setMaxY': {   'req_args': ['maxY'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Experiments.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Experiments.java'},
    'Expressions': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.asExpression': {   'req_args': ['env', 'v'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.asObject': {   'req_args': ['env', 'v'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.asValue': {   'req_args': ['env', 'v'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.convertValueToBoolean': {   'req_args': ['v', 'keepNull'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.convertValueToBooleanValue': {   'req_args': ['v', 'keepNull'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'Expressions.createValue': {   'req_args': ['typename', 'value', 'tags'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Expressions.java'},
    'ExtensionFileFilter': {   'req_args': ['ext', 'recurse', ['ext']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ExtensionFileFilter.java'},
    'ExtensionFileFilter.accept': {   'req_args': ['file'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ExtensionFileFilter.java'},
    'ExtensionFileFilter.getDescription': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ExtensionFileFilter.java'},
    'ExternalEvaluate': {   'req_args': ['op', 'predictedTrees'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ExternalEvaluate.java'},
    'ExternalEvaluate.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ExternalEvaluate.java'},
    'ExternalEvaluate.populatePredictedLabels': {   'req_args': ['trees'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ExternalEvaluate.java'},
    'ExternalParserQuery': {   'req_args': ['sentence', 'results'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestDependencyParse': {   'req_args': [   'debinarize'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestFactoredParse': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestPCFGParse': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestPCFGParses': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestParse': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getBestScore': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getDependencyParser': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getFactoredParser': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getKBestPCFGParses': {   'req_args': ['kbestPCFG'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getKBestParses': {   'req_args': ['k'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getKGoodFactoredParses': {   'req_args': ['kbest'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getPCFGParser': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.getPCFGScore': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.hasFactoredParse': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.originalSentence': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parse': {   'req_args': ['sentence'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseAndReport': {   'req_args': ['sentence', 'pwErr'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseFallback': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseNoMemory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseSkipped': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseSucceeded': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.parseUnparsable': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.restoreOriginalWords': {   'req_args': ['tree'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.saidMemMessage': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExternalParserQuery.setConstraints': {   'req_args': ['constraints'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\ExternalParserQuery.java'},
    'ExtractPhraseFromPattern': {   'req_args': [   [   'ignoreCommonTags',
                                                        'maxPhraseLength']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.descendants': {   'req_args': [   'g',
                                                                'vertex',
                                                                'allCutOffRels',
                                                                'doNotAddThese',
                                                                'ignoreCommonTags',
                                                                'acceptWord',
                                                                'feat'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.getSemGrexPatternNodes': {   'req_args': [   'g',
                                                                           'tokens',
                                                                           'outputNodes',
                                                                           'outputIndices',
                                                                           'pattern',
                                                                           'findSubTrees',
                                                                           'extractedPhrases',
                                                                           'lowercase',
                                                                           'acceptWord'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.printMatchedGraphsForPattern': {   'req_args': [   'filename',
                                                                                 'maxGraphsPerPattern'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.printSubGraph': {   'req_args': [   'g',
                                                                  'w',
                                                                  'additionalCutOffRels',
                                                                  'textTokens',
                                                                  'listOfOutput',
                                                                  'listOfOutputIndices',
                                                                  'seenNodes',
                                                                  'doNotAddThese',
                                                                  'findSubTrees',
                                                                  'extractedPhrases',
                                                                  'pattern',
                                                                  'acceptWord'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.processSentenceForType': {   'req_args': [   'g',
                                                                           'typePatterns',
                                                                           'textTokens',
                                                                           'typePhrases',
                                                                           'typeIndices',
                                                                           'typeTriggerWords',
                                                                           'findSubTrees',
                                                                           'extractedPhrases',
                                                                           'lowercase'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractPhraseFromPattern.setMaxPhraseLength': {   'req_args': [   'maxPhraseLength'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractPhraseFromPattern.java'},
    'ExtractQuotesClassifier': {   'req_args': ['trainingSet', ['modelPath']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ExtractQuotesClassifier.java'},
    'ExtractQuotesClassifier.getClassifier': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ExtractQuotesClassifier.java'},
    'ExtractQuotesClassifier.scoreBestMentionNew': {   'req_args': [   'fd',
                                                                       'doc'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ExtractQuotesClassifier.java'},
    'ExtractQuotesUtil.rangeContains': {   'req_args': ['r1', 'r2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ExtractQuotesUtil.java'},
    'ExtractQuotesUtil.readSerializedProtobufFile': {   'req_args': ['fileIn'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\ExtractQuotesUtil.java'},
    'ExtractedPhrase': {   'req_args': [   'startIndex',
                                           'endIndex',
                                           'pattern',
                                           'value',
                                           [   'startIndex',
                                               'endIndex',
                                               'pattern',
                                               'value',
                                               'features'],
                                           [   'startIndex',
                                               'endIndex',
                                               'pattern',
                                               'value',
                                               'weight',
                                               'articleId',
                                               'sentId'],
                                           [   'startIndex',
                                               'endIndex',
                                               'pattern',
                                               'value',
                                               'weight',
                                               'articleId',
                                               'sentId',
                                               'features'],
                                           ['startIndex', 'endIndex', 'value']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.getFeatures': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.getIndices': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.getPattern': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.getValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractedPhrase.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\dep\\ExtractedPhrase.java'},
    'ExtractionDataSet': {   'req_args': [['original']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.addSentence': {   'req_args': ['sentence'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.addSentences': {   'req_args': ['sentences'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.getSentence': {   'req_args': ['i'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.getSentences': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.sentenceCount': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionDataSet.shuffle': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionDataSet.java'},
    'ExtractionObject': {   'req_args': [   'objectId',
                                            'sentence',
                                            'span',
                                            'type',
                                            'subtype'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.attributeMap': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.concatenateTypes': {   'req_args': ['t1', 't2'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.equals': {   'req_args': ['other'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getDocumentId': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getExtent': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getExtentString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getExtentTokenEnd': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getExtentTokenStart': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getFullValue': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getObjectId': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getSentence': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getSpan': {   'req_args': ['objs'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getSubType': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getType': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getTypeProbabilities': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.getValue': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.printableObject': {   'req_args': ['beam', 'nilLabel'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.setExtent': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.setSentence': {   'req_args': ['sent'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.setType': {   'req_args': ['t'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.setTypeProbabilities': {   'req_args': ['probs'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionObject.sortByExtent': {   'req_args': ['objects'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionObject.java'},
    'ExtractionSentence': {   'req_args': [   'docid',
                                              'textContent',
                                              ['original']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.addEntityMention': {   'req_args': ['arg'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.addEntityMentions': {   'req_args': ['args'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.addEventMention': {   'req_args': ['event'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.addRelationMention': {   'req_args': ['rel'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getAllRelations': {   'req_args': ['factory'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getAllUnrelatedRelations': {   'req_args': ['factory'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getDocumentId': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getEntityMentions': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getEventMentions': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getRelation': {   'req_args': ['factory', 'args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getRelationMentions': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.getTextContent': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.setEntityMentions': {   'req_args': ['newArgs'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.setEventMentions': {   'req_args': ['events'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.setRelationMentions': {   'req_args': ['rels'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.setTextContent': {   'req_args': ['textContent'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'ExtractionSentence.tokensToString': {   'req_args': ['tokens'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\ExtractionSentence.java'},
    'Extractor': {   'req_args': [['position', 'isTag']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.isDynamic': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.isLocal': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.leftContext': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.precondition': {   'req_args': ['tag'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.rightContext': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'Extractor.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractor.java'},
    'ExtractorAllCap': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorAllCap.isDynamic': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorAllCap.isLocal': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorAllCapitalized': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorAllCapitalized.isDynamic': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorAllCapitalized.isLocal': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCNumber': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCNumber.isDynamic': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCNumber.isLocal': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapC': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapC.isDynamic': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapC.isLocal': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapDistLC': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapDistLC.isDynamic': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapDistLC.isLocal': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapLCSeen': {   'req_args': ['tag'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapLCSeen.isDynamic': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapLCSeen.isLocal': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorCapLCSeen.precondition': {   'req_args': ['tag1'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorDash': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorDash.isDynamic': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorDash.isLocal': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorDistsim': {   'req_args': ['distSimPath', 'position'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsim.java'},
    'ExtractorDistsim.isDynamic': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsim.java'},
    'ExtractorDistsim.isLocal': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsim.java'},
    'ExtractorDistsimConjunction': {   'req_args': [   'distSimPath',
                                                       'left',
                                                       'right'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsimConjunction.java'},
    'ExtractorDistsimConjunction.isDynamic': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsimConjunction.java'},
    'ExtractorDistsimConjunction.isLocal': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsimConjunction.java'},
    'ExtractorDistsimConjunction.toString': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorDistsimConjunction.java'},
    'ExtractorFrames': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorFramesRare': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDashDigit': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDashDigit.isDynamic': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDashDigit.isLocal': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDigitDash': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDigitDash.isDynamic': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorLetterDigitDash.isLocal': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMerger': {   'req_args': ['extractors'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMerger.annotate': {   'req_args': ['dataset'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMerger.buildRelationExtractorMerger': {   'req_args': [   'extractorModelNames'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMerger.save': {   'req_args': ['path'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMerger.setLoggerLevel': {   'req_args': ['level'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMerger.train': {   'req_args': ['dataset'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ExtractorMerger.java'},
    'ExtractorMidSentenceCap': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMidSentenceCap.isDynamic': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMidSentenceCap.isLocal': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMidSentenceCapC': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMidSentenceCapC.isDynamic': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorMidSentenceCapC.isLocal': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNonAlphanumeric': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNonAlphanumeric.isDynamic': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNonAlphanumeric.isLocal': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNumeric': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNumeric.isDynamic': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorNumeric.isLocal': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorSpanishAuxiliaryTag': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorSpanishAuxiliaryTag.toString': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorSpanishSemiauxiliaryTag': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorSpanishSemiauxiliaryTag.toString': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorStartSentenceCap': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorStartSentenceCap.isDynamic': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorStartSentenceCap.isLocal': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorSymbols': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorSymbols.isDynamic': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorSymbols.isLocal': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUCase': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUCase.isDynamic': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUCase.isLocal': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUpperDigitDash': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUpperDigitDash.isDynamic': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorUpperDigitDash.isLocal': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorVerbalVBNZero': {   'req_args': ['bound'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorVerbalVBNZero.java'},
    'ExtractorVerbalVBNZero.precondition': {   'req_args': ['tag'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorVerbalVBNZero.java'},
    'ExtractorVerbalVBNZero.toString': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorVerbalVBNZero.java'},
    'ExtractorWordPref': {   'req_args': ['num', 'position'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordPref.isDynamic': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordPref.isLocal': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordPref.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordShapeClassifier': {   'req_args': ['position', 'wsc'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeClassifier.isDynamic': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeClassifier.isLocal': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeClassifier.toString': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeConjunction': {   'req_args': ['left', 'right', 'wsc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeConjunction.isDynamic': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeConjunction.isLocal': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordShapeConjunction.toString': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFrames.java'},
    'ExtractorWordSuff': {   'req_args': ['num', 'position'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordSuff.isDynamic': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordSuff.isLocal': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorWordSuff.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'Extractors': {   'req_args': ['extrs'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractors.java'},
    'Extractors.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractors.java'},
    'Extractors.size': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractors.java'},
    'Extractors.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\Extractors.java'},
    'ExtractorsConjunction': {   'req_args': ['e1', 'e2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorsConjunction.isDynamic': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorsConjunction.isLocal': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ExtractorsConjunction.toString': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'FTBCorrector': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBCorrector.java'},
    'FTBCorrector.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBCorrector.java'},
    'FTBCorrector.transformTree': {   'req_args': ['t'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBCorrector.java'},
    'FTBCorrectorVisitor.visitTree': {   'req_args': ['t'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBCorrectorVisitor.java'},
    'FTBDataset': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBDataset.java'},
    'FTBDataset.build': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBDataset.java'},
    'FTBDataset.setOptions': {   'req_args': ['opts'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\FTBDataset.java'},
    'FactorTable': {   'req_args': ['numClasses', 'windowSize', ['t']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.conditionalLogProbGivenFirst': {   'req_args': ['given', 'of'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.conditionalLogProbGivenNext': {   'req_args': ['given', 'of'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.conditionalLogProbGivenPrevious': {   'req_args': [   'given',
                                                                       'of'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.conditionalLogProbsGivenPrevious': {   'req_args': ['given'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.divideBy': {   'req_args': ['other'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.getValue': {   'req_args': ['index', ['label']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.hasNaN': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.incrementValue': {   'req_args': [   'label',
                                                      'value',
                                                      ['index', 'value']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.logIncrementValue': {   'req_args': ['label', 'value'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.logProb': {   'req_args': ['label'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.logProbEnd': {   'req_args': ['labels', ['label']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.logProbFront': {   'req_args': ['label', ['label']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.multiplyInEnd': {   'req_args': ['other'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.multiplyInFront': {   'req_args': ['other'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.numClasses': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.prob': {   'req_args': ['label'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.setValue': {   'req_args': [   'index',
                                                'value',
                                                ['label', 'value']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.sumOutEnd': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.sumOutFront': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.toArray': {   'req_args': ['index'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.toNonLogString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.toProbString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.toString': {   'req_args': ['classIndex', []],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.totalMass': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.unnormalizedConditionalLogProbGivenFirst': {   'req_args': [   'given',
                                                                                'of'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.unnormalizedLogProb': {   'req_args': [   'label',
                                                           [   'front',
                                                               'end',
                                                               'cutoff']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.unnormalizedLogProbEnd': {   'req_args': ['labels', ['label']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.unnormalizedLogProbFront': {   'req_args': [   'labels',
                                                                ['label']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactorTable.windowSize': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FactorTable.java'},
    'FactoredLexicon': {   'req_args': [   'morphoSpec',
                                           'wordIndex',
                                           'tagIndex',
                                           [   'op',
                                               'morphoSpec',
                                               'wordIndex',
                                               'tagIndex']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexicon.java'},
    'FactoredLexicon.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexicon.java'},
    'FactoredLexicon.ruleIteratorByWord': {   'req_args': [   'word',
                                                              'loc',
                                                              'featureSpec'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexicon.java'},
    'FactoredLexicon.score': {   'req_args': [   'iTW',
                                                 'loc',
                                                 'word',
                                                 'featureSpec'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexicon.java'},
    'FactoredLexicon.train': {   'req_args': ['trees', 'rawTrees'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexicon.java'},
    'FactoredLexiconEvent': {   'req_args': [   'wordId',
                                                'tagId',
                                                'lemmaId',
                                                'morphId',
                                                'loc',
                                                'word',
                                                'featureStr'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.featureStr': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.getLoc': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.lemmaId': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.morphId': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.tagId': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.toString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.word': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredLexiconEvent.wordId': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredLexiconEvent.java'},
    'FactoredParser': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredParser.java'},
    'FactoredParser.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FactoredParser.java'},
    'FactoredSequenceListener': {   'req_args': [   'model1',
                                                    'model2',
                                                    ['models']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceListener.java'},
    'FactoredSequenceListener.setInitialSequence': {   'req_args': ['sequence'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceListener.java'},
    'FactoredSequenceListener.updateSequenceElement': {   'req_args': [   'sequence',
                                                                          'pos',
                                                                          'oldVal'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceListener.java'},
    'FactoredSequenceModel': {   'req_args': [   'model1',
                                                 'model2',
                                                 'wt1',
                                                 'wt2',
                                                 ['model1', 'model2'],
                                                 ['models', 'weights']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.getPossibleValues': {   'req_args': ['position'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.leftWindow': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.length': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.rightWindow': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.scoreOf': {   'req_args': [   'sequence',
                                                         'pos',
                                                         ['sequence']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FactoredSequenceModel.scoresOf': {   'req_args': ['sequence', 'pos'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FactoredSequenceModel.java'},
    'FastDisjointSet': {   'req_args': ['objectSet'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FastDisjointSet.java'},
    'FastDisjointSet.find': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FastDisjointSet.java'},
    'FastDisjointSet.union': {   'req_args': ['a', 'b'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FastDisjointSet.java'},
    'FastExactAutomatonMinimizer.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\FastExactAutomatonMinimizer.java'},
    'FastExactAutomatonMinimizer.minimizeFA': {   'req_args': ['unminimizedFA'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\FastExactAutomatonMinimizer.java'},
    'FastFactoredParser': {   'req_args': [   'pparser',
                                              'dg',
                                              'op',
                                              'numToFind',
                                              'wordIndex',
                                              'tagIndex',
                                              [   'pparser',
                                                  'dg',
                                                  'op',
                                                  'numToFind',
                                                  'projection',
                                                  'wordIndex',
                                                  'tagIndex']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getBestParse': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getBestParses': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getBestScore': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getKBestParses': {   'req_args': ['k'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getKGoodParses': {   'req_args': ['k'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.getKSampledParses': {   'req_args': ['k'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.hasParse': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastFactoredParser.parse': {   'req_args': ['words'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FastFactoredParser.java'},
    'FastNeuralCorefAlgorithm': {   'req_args': ['props', 'dictionaries'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefAlgorithm.java'},
    'FastNeuralCorefAlgorithm.runCoref': {   'req_args': ['document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefAlgorithm.java'},
    'FastNeuralCorefDataExporter': {   'req_args': [   'props',
                                                       'dictionaries',
                                                       'compressor',
                                                       'dataPath',
                                                       'goldClusterPath'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefDataExporter.finish': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefDataExporter.getName': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefDataExporter.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefDataExporter.process': {   'req_args': ['id', 'document'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefDataExporter.writeCompressor': {   'req_args': [   'compressor',
                                                                       'compressorPath'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefDataExporter.java'},
    'FastNeuralCorefModel': {   'req_args': [   'embeddingExtractor',
                                                'pairFeatureIds',
                                                'mentionFeatureIds',
                                                'weights'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.getAllWeights': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.getEmbeddingExtractor': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.getMentionFeatureIds': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.getPairFeatureIds': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.loadFromTextFiles': {   'req_args': ['path'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.loadMapFromTextFile': {   'req_args': ['filename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefModel.score': {   'req_args': [   'antecedent',
                                                      'anaphor',
                                                      'antecedentFeatures',
                                                      'anaphorFeatures',
                                                      'pairFeatures',
                                                      'antecedentCache',
                                                      'anaphorCache'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefModel.java'},
    'FastNeuralCorefProperties.greedyness': {   'req_args': ['props'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefProperties.java'},
    'FastNeuralCorefProperties.modelPath': {   'req_args': ['props'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\fastneural\\FastNeuralCorefProperties.java'},
    'Feature': {   'req_args': [   ['e', 'vals', 'instanceIndex'],
                                   ['e', 'vals', 'instanceIndex'],
                                   ['e', 'numElems', 'instanceIndex'],
                                   ['e', 'indexes', 'vals', 'instanceIndex']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.ftilde': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.getVal': {   'req_args': ['index', ['x', 'y']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.getX': {   'req_args': ['index'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.getY': {   'req_args': ['index'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.initHashVals': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.len': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.print': {   'req_args': [['pf']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.setSum': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'Feature.setValue': {   'req_args': ['index', 'key', 'value'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Feature.java'},
    'FeatureExtractor': {   'req_args': [   'props',
                                            'dictionaries',
                                            'compressor',
                                            [   'props',
                                                'dictionaries',
                                                'compressor',
                                                'wordCountsPath'],
                                            [   'props',
                                                'dictionaries',
                                                'compressor',
                                                'vocabulary']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractor.java'},
    'FeatureExtractor.extract': {   'req_args': [   'id',
                                                    'document',
                                                    'labeledPairs',
                                                    [   'id',
                                                        'document',
                                                        'labeledPairs',
                                                        'compressor']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractor.java'},
    'FeatureExtractor.maximalNp': {   'req_args': ['mentionSubTree'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractor.java'},
    'FeatureExtractor.relaxedStringMatch': {   'req_args': ['m1', 'm2'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractor.java'},
    'FeatureExtractorRunner': {   'req_args': ['props', 'dictionaries'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractorRunner.java'},
    'FeatureExtractorRunner.finish': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractorRunner.java'},
    'FeatureExtractorRunner.process': {   'req_args': ['id', 'document'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\FeatureExtractorRunner.java'},
    'FeatureFactory': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FeatureFactory.java'},
    'FeatureFactory.eachClique': {   'req_args': ['left', 'right', 'consumer'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FeatureFactory.java'},
    'FeatureFactory.featurize': {   'req_args': [   'state',
                                                    ['state', 'features']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.getCliqueFeatures': {   'req_args': [   'info',
                                                            'position',
                                                            'clique'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FeatureFactory.java'},
    'FeatureFactory.getCliques': {   'req_args': [['maxLeft', 'maxRight']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FeatureFactory.java'},
    'FeatureFactory.getCoreLabel': {   'req_args': ['node'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.getFeatureFromCoreLabel': {   'req_args': [   'label',
                                                                  'feature'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.getQueueLabel': {   'req_args': [   'state',
                                                        'offset',
                                                        [   'sentence',
                                                            'tokenPosition',
                                                            'offset']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.getRecentDependent': {   'req_args': [   'stack',
                                                             'transition',
                                                             'nodeNum'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.getStackLabel': {   'req_args': [   'stack',
                                                        'nodeNum',
                                                        'transitions'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FeatureFactory.java'},
    'FeatureFactory.init': {   'req_args': ['flags'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\FeatureFactory.java'},
    'FeatureKey': {   'req_args': [['num', 'val', 'tag']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\FeatureKey.java'},
    'FeatureKey.equals': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\FeatureKey.java'},
    'FeatureKey.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\FeatureKey.java'},
    'FeatureKey.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\FeatureKey.java'},
    'Features': {   'req_args': [['filename', 'domain']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.add': {   'req_args': ['m'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.clean': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.domain': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.get': {   'req_args': ['index'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.print': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.removeLast': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'Features.size': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Features.java'},
    'FetchNode': {   'req_args': ['nodeName'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\FetchNode.java'},
    'FetchNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\FetchNode.java'},
    'FileFilters': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileFilters.java'},
    'FileFilters.conjunctionFileFilter': {   'req_args': ['a', 'b'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileFilters.java'},
    'FileFilters.findRegexFileFilter': {   'req_args': ['regex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileFilters.java'},
    'FileFilters.negationFileFilter': {   'req_args': ['a'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileFilters.java'},
    'FilePanel': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.clearAll': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.getActiveTreebanks': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.getInstance': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.isEmpty': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.loadFiles': {   'req_args': ['filters', 'files'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePanel.setTreeReaderFactory': {   'req_args': ['trf'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FilePanel.java'},
    'FilePathProcessor': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilePathProcessor.java'},
    'FilePathProcessor.processPath': {   'req_args': [   'pathStr',
                                                         'suffix',
                                                         'recursively',
                                                         'processor',
                                                         [   'path',
                                                             'suffix',
                                                             'recursively',
                                                             'processor'],
                                                         [   'path',
                                                             'filter',
                                                             'processor']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilePathProcessor.java'},
    'FileSequentialCollection': {   'req_args': [   ['c'],
                                                    [   'path',
                                                        'suffix',
                                                        'recursively'],
                                                    [   'c',
                                                        'suffix',
                                                        'recursively'],
                                                    ['c', 'filt'],
                                                    ['filename', 'filt'],
                                                    ['filename'],
                                                    [   'c',
                                                        'filt',
                                                        'includeDirs']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSequentialCollection.java'},
    'FileSequentialCollection.iterator': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSequentialCollection.java'},
    'FileSequentialCollection.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSequentialCollection.java'},
    'FileSequentialCollection.size': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSequentialCollection.java'},
    'FileSystem': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.checkExistsOrFail': {   'req_args': ['file'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.checkNotExistsOrFail': {   'req_args': ['file'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.copyFile': {   'req_args': ['sourceFile', 'destFile'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.deleteDir': {   'req_args': ['dir'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.existsAndNonEmpty': {   'req_args': ['file'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.gzipFile': {   'req_args': [   'uncompressedFileName',
                                               'compressedFileName'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileSystem.mkdirOrFail': {   'req_args': ['dir', ['dir']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\FileSystem.java'},
    'FileTreeModel': {   'req_args': ['root'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.addFileFolder': {   'req_args': ['filters', 'files'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.addTreeModelListener': {   'req_args': ['l'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getChild': {   'req_args': ['parent', 'childNum'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getChildCount': {   'req_args': ['parent'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getCurEncoding': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getIndexOfChild': {   'req_args': ['parent', 'child'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getRoot': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.getTRF': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.isEmpty': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.isLeaf': {   'req_args': ['node'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.removeTreeModelListener': {   'req_args': ['l'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.setCurEncoding': {   'req_args': ['curEncoding'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.setTRF': {   'req_args': ['trf'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeModel.treeNodeChanged': {   'req_args': ['n'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeModel.java'},
    'FileTreeNode': {   'req_args': [['file', 'parent']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.addListener': {   'req_args': ['l'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.getDisplay': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.getFile': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.getFilename': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.getTreebank': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.isActive': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.setActive': {   'req_args': ['active'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.setTreebank': {   'req_args': ['t'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FileTreeNode.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\FileTreeNode.java'},
    'FilterConfusingRules': {   'req_args': ['parser'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\FilterConfusingRules.java'},
    'FilterConfusingRules.test': {   'req_args': ['tree'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\FilterConfusingRules.java'},
    'FilterHandler': {   'req_args': ['filters', 'disjunctiveMode'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\FilterHandler.java'},
    'FilterHandler.propagateRecord': {   'req_args': ['record'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\FilterHandler.java'},
    'FilteredEval': {   'req_args': ['str', 'runningAverages', 'subtreeFilter'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\FilteredEval.java'},
    'FilteredEval.childFilteredEval': {   'req_args': [   'str',
                                                          'runningAverages',
                                                          'tlp',
                                                          'childPattern'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\FilteredEval.java'},
    'FilteredIterator': {   'req_args': ['iterator', 'filter'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilteredIterator.java'},
    'FilteredIterator.hasNext': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilteredIterator.java'},
    'FilteredIterator.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilteredIterator.java'},
    'FilteredIterator.next': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilteredIterator.java'},
    'FilteredIterator.remove': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FilteredIterator.java'},
    'FilteringTreeReader': {   'req_args': ['tr', 'f'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreeReader.java'},
    'FilteringTreeReader.close': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreeReader.java'},
    'FilteringTreeReader.readTree': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreeReader.java'},
    'FilteringTreebank': {   'req_args': ['treebank', 'filter'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreebank.java'},
    'FilteringTreebank.apply': {   'req_args': ['tv'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreebank.java'},
    'FilteringTreebank.clear': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreebank.java'},
    'FilteringTreebank.iterator': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreebank.java'},
    'FilteringTreebank.loadPath': {   'req_args': ['path', 'filt'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FilteringTreebank.java'},
    'Filters': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.acceptFilter': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.andFilter': {   'req_args': ['f1', 'f2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.collectionAcceptFilter': {   'req_args': ['objs', ['objs']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.collectionRejectFilter': {   'req_args': ['objs', ['objs']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.filter': {   'req_args': ['elems', 'filter'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.notFilter': {   'req_args': ['filter'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.orFilter': {   'req_args': ['f1', 'f2'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.rejectFilter': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.retainAll': {   'req_args': ['elems', 'filter'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'Filters.switchedFilter': {   'req_args': ['filter', 'negated'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Filters.java'},
    'FinalizeTransition': {   'req_args': ['rootStates'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FinalizeTransition.apply': {   'req_args': [   'state',
                                                    ['state', 'scoreDelta']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FinalizeTransition.equals': {   'req_args': ['o'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FinalizeTransition.hashCode': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FinalizeTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FinalizeTransition.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\FinalizeTransition.java'},
    'FindNearestNeighbors.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\FindNearestNeighbors.java'},
    'FindTreebankTree.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\FindTreebankTree.java'},
    'FiveDimensionalMap': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.fifthKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.firstKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.fourthKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.get': {   'req_args': [   'key1',
                                                  'key2',
                                                  'key3',
                                                  'key4',
                                                  'key5',
                                                  [   'key1',
                                                      'key2',
                                                      'key3',
                                                      'key4'],
                                                  ['key1', 'key2', 'key3'],
                                                  ['key1', 'key2'],
                                                  ['key1']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.getFourDimensionalMap': {   'req_args': ['key1'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.put': {   'req_args': [   'key1',
                                                  'key2',
                                                  'key3',
                                                  'key4',
                                                  'key5',
                                                  'value'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.secondKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.thirdKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FiveDimensionalMap.values': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FiveDimensionalMap.java'},
    'FixLocation': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixLocation.fix': {   'req_args': ['cols'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixLocation.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixLocation.print': {   'req_args': ['cols'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixLocation.query': {   'req_args': ['cols', 'pos'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixLocation.readFile': {   'req_args': ['filename'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\FixLocation.java'},
    'FixedPrioritiesPriorityQueue': {   'req_args': [['capacity']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.add': {   'req_args': ['key', 'priority'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.changePriority': {   'req_args': [   'key',
                                                                       'priority'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.clear': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.clone': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.getFirst': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.getPriority': {   'req_args': ['key', []],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.hasNext': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.iterator': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.next': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.relaxPriority': {   'req_args': [   'key',
                                                                      'priority'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.remove': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.removeFirst': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.size': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.toSortedList': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FixedPrioritiesPriorityQueue.toString': {   'req_args': [   [   'maxKeysToPrint'],
                                                                 [   'maxKeysToPrint',
                                                                     'dblFmt']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FixedPrioritiesPriorityQueue.java'},
    'FloatFactorTable': {   'req_args': ['numClasses', 'windowSize'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.conditionalLogProb': {   'req_args': ['given', 'of'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.divideBy': {   'req_args': ['other'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.getValue': {   'req_args': ['label'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.hasNaN': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.incrementValue': {   'req_args': ['label', 'value'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.logIncrementValue': {   'req_args': ['label', 'value'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.logProb': {   'req_args': ['label'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.logProbEnd': {   'req_args': ['label', ['label']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.logProbFront': {   'req_args': ['label'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.multiplyInEnd': {   'req_args': ['other'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.multiplyInFront': {   'req_args': ['other'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.numClasses': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.prob': {   'req_args': ['label'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.setValue': {   'req_args': ['label', 'value'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.sumOutEnd': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.sumOutFront': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.toProbString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.toString': {   'req_args': ['classIndex', []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.totalMass': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.unnormalizedLogProb': {   'req_args': ['label'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.unnormalizedLogProbEnd': {   'req_args': [   'label',
                                                                   ['label']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.unnormalizedLogProbFront': {   'req_args': ['label'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FloatFactorTable.windowSize': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\FloatFactorTable.java'},
    'FontDetector': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\FontDetector.java'},
    'FontDetector.hasFont': {   'req_args': ['fontName'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\FontDetector.java'},
    'FontDetector.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\FontDetector.java'},
    'FontDetector.supportedFonts': {   'req_args': ['language'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\FontDetector.java'},
    'ForwardEntailer': {   'req_args': [   'maxResults',
                                           'maxTicks',
                                           'weights',
                                           ['maxResults', 'weights'],
                                           ['weights']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ForwardEntailer.java'},
    'ForwardEntailer.apply': {   'req_args': ['parseTree', 'truthOfPremise'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ForwardEntailer.java'},
    'ForwardEntailerSearchProblem': {   'req_args': [   'parseTree',
                                                        'truthOfPremise',
                                                        'maxResults',
                                                        'maxTicks',
                                                        'weights'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ForwardEntailerSearchProblem.java'},
    'ForwardEntailerSearchProblem.search': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\ForwardEntailerSearchProblem.java'},
    'ForwardPropagationException': {   'req_args': ['s'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ForwardPropagationException.java'},
    'FourDimensionalMap': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.firstKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.fourthKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.get': {   'req_args': [   'key1',
                                                  'key2',
                                                  'key3',
                                                  'key4',
                                                  ['key1', 'key2', 'key3'],
                                                  ['key1', 'key2'],
                                                  ['key1']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.getThreeDimensionalMap': {   'req_args': ['key1'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.put': {   'req_args': [   'key1',
                                                  'key2',
                                                  'key3',
                                                  'key4',
                                                  'value'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.remove': {   'req_args': [   'key1',
                                                     'key2',
                                                     'key3',
                                                     'key4'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.secondKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.size': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.thirdKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FourDimensionalMap.values': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FourDimensionalMap.java'},
    'FragDiscardingPennTreeReader': {   'req_args': ['in', 'tf', 'tn', 'tk'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\FragDiscardingPennTreeReader.java'},
    'FragDiscardingPennTreeReader.readTree': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\FragDiscardingPennTreeReader.java'},
    'FragmentTreeFilter.test': {   'req_args': ['tree'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\FragmentTreeFilter.java'},
    'FrenchDocument': {   'req_args': [   'text',
                                          ['ann'],
                                          ['proto'],
                                          ['props', 'text']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\FrenchDocument.java'},
    'FrenchDocument.coref': {   'req_args': ['props'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\FrenchDocument.java'},
    'FrenchHeadFinder': {   'req_args': [['tlp']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchHeadFinder.java'},
    'FrenchHeadFinder.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchHeadFinder.java'},
    'FrenchLexer': {   'req_args': ['r', 'tf', 'props', ['in']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.next': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yyatEOF': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yybegin': {   'req_args': ['newState'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yycharat': {   'req_args': ['position'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yyclose': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yylength': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yypushback': {   'req_args': ['number'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yyreset': {   'req_args': ['reader'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yystate': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchLexer.yytext': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchLexer.java'},
    'FrenchMorphoFeatureSpecification.getValues': {   'req_args': ['feat'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchMorphoFeatureSpecification.java'},
    'FrenchMorphoFeatureSpecification.main': {   'req_args': ['args'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchMorphoFeatureSpecification.java'},
    'FrenchMorphoFeatureSpecification.strToFeatures': {   'req_args': ['spec'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchMorphoFeatureSpecification.java'},
    'FrenchSentence': {   'req_args': ['text', ['tokens'], ['proto']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\FrenchSentence.java'},
    'FrenchTokenizer': {   'req_args': [   'r',
                                           'tf',
                                           'lexerProperties',
                                           'splitCompounds',
                                           'splitContractions'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchTokenizer.java'},
    'FrenchTokenizer.factory': {   'req_args': [['factory', 'options']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchTokenizer.java'},
    'FrenchTokenizer.ftbFactory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchTokenizer.java'},
    'FrenchTokenizer.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\process\\FrenchTokenizer.java'},
    'FrenchTreeNormalizer': {   'req_args': ['ccTagset'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeNormalizer.java'},
    'FrenchTreeNormalizer.normalizeNonterminal': {   'req_args': ['category'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeNormalizer.java'},
    'FrenchTreeNormalizer.normalizeTerminal': {   'req_args': ['terminal'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeNormalizer.java'},
    'FrenchTreeNormalizer.normalizeWholeTree': {   'req_args': ['tree', 'tf'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeNormalizer.java'},
    'FrenchTreeReaderFactory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeReaderFactory.java'},
    'FrenchTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreeReaderFactory.java'},
    'FrenchTreebankLanguagePack.getEncoding': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.morphFeatureSpec': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchTreebankLanguagePack.java'},
    'FrenchTreebankParserParams': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.collinizer': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.diskTreebank': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.display': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.lex': {   'req_args': [   'op',
                                                          'wordIndex',
                                                          'tagIndex'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchTreebankParserParams.java'},
    'FrenchTreebankTokenReport.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankTokenReport.java'},
    'FrenchTreebankUDUpdater.createTagAndWordNode': {   'req_args': [   'tag',
                                                                        'word'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankUDUpdater.java'},
    'FrenchTreebankUDUpdater.fixMWNWithHyphen': {   'req_args': [   'parentTree',
                                                                    'mwnChildTree',
                                                                    'mwnIndex'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankUDUpdater.java'},
    'FrenchTreebankUDUpdater.fixNPWithHyphen': {   'req_args': ['parentTree'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankUDUpdater.java'},
    'FrenchTreebankUDUpdater.fixPREFEndingWithHyphen': {   'req_args': [   'parentTree'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankUDUpdater.java'},
    'FrenchTreebankUDUpdater.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\FrenchTreebankUDUpdater.java'},
    'FrenchUnknownWordModel': {   'req_args': [   'op',
                                                  'lex',
                                                  'wordIndex',
                                                  'tagIndex',
                                                  'unSeenCounter',
                                                  [   'op',
                                                      'lex',
                                                      'wordIndex',
                                                      'tagIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModel.java'},
    'FrenchUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModel.java'},
    'FrenchUnknownWordModel.getSignatureIndex': {   'req_args': [   'index',
                                                                    'sentencePosition',
                                                                    'word'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModel.java'},
    'FrenchUnknownWordModel.score': {   'req_args': [   'iTW',
                                                        'loc',
                                                        'c_Tseen',
                                                        'total',
                                                        'smooth',
                                                        'word'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModel.java'},
    'FrenchUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModelTrainer.java'},
    'FrenchUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                            'lex',
                                                                            'wordIndex',
                                                                            'tagIndex',
                                                                            'totalTrees'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModelTrainer.java'},
    'FrenchUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                               'loc',
                                                               'weight'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\FrenchUnknownWordModelTrainer.java'},
    'FrenchUnknownWordSignatures': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.adjSuffix': {   'req_args': ['s'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.advSuffix': {   'req_args': ['s'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasAdjSuffix': {   'req_args': ['s'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasAdvSuffix': {   'req_args': ['s'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasDigit': {   'req_args': ['s'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasNounSuffix': {   'req_args': ['s'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasPossiblePlural': {   'req_args': ['s'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasPunc': {   'req_args': ['s'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.hasVerbSuffix': {   'req_args': ['s'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.isAllCaps': {   'req_args': ['s'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.isCapitalized': {   'req_args': ['s'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.isDigit': {   'req_args': ['s'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.isPunc': {   'req_args': ['s'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.nounSuffix': {   'req_args': ['s'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.possiblePlural': {   'req_args': ['s'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchUnknownWordSignatures.verbSuffix': {   'req_args': ['s'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\FrenchUnknownWordSignatures.java'},
    'FrenchXMLTreeReader': {   'req_args': [   'in',
                                               'ccTagset',
                                               ['in', 'tf', 'tn']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReader.java'},
    'FrenchXMLTreeReader.close': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReader.java'},
    'FrenchXMLTreeReader.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReader.java'},
    'FrenchXMLTreeReader.readTree': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReader.java'},
    'FrenchXMLTreeReaderFactory': {   'req_args': ['ccTagset'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReaderFactory.java'},
    'FrenchXMLTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\french\\FrenchXMLTreeReaderFactory.java'},
    'FromFileCorefAlgorithm': {   'req_args': ['savedLinkPath'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\FromFileCorefAlgorithm.java'},
    'FromFileCorefAlgorithm.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\FromFileCorefAlgorithm.java'},
    'FromFileCorefAlgorithm.runCoref': {   'req_args': ['document'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\FromFileCorefAlgorithm.java'},
    'Functions': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Functions.java'},
    'Functions.compose': {   'req_args': ['f', 'g'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Functions.java'},
    'Functions.identityFunction': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Functions.java'},
    'Functions.invert': {   'req_args': ['f'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Functions.java'},
    'FuzzyInterval': {   'req_args': ['a', 'b', 'flags'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FuzzyInterval.java'},
    'FuzzyInterval.getRelation': {   'req_args': ['other'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FuzzyInterval.java'},
    'FuzzyInterval.getRelationFlags': {   'req_args': ['other'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FuzzyInterval.java'},
    'FuzzyInterval.toInterval': {   'req_args': ['a', 'b', ['a', 'b', 'flags']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FuzzyInterval.java'},
    'FuzzyInterval.toValidInterval': {   'req_args': [   'a',
                                                         'b',
                                                         ['a', 'b', 'flags']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\FuzzyInterval.java'},
    'GUTimeAnnotator': {   'req_args': [['gutimePath'], ['name', 'props']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GUTimeAnnotator.java'},
    'GUTimeAnnotator.annotate': {   'req_args': ['annotation', ['document']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GUTimeAnnotator.java'},
    'GUTimeAnnotator.requirementsSatisfied': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GUTimeAnnotator.java'},
    'GUTimeAnnotator.requires': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GUTimeAnnotator.java'},
    'Gale2007ChineseSegmenterFeatureFactory.getCliqueFeatures': {   'req_args': [   'cInfo',
                                                                                    'loc',
                                                                                    'clique'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Gale2007ChineseSegmenterFeatureFactory.java'},
    'Gale2007ChineseSegmenterFeatureFactory.init': {   'req_args': ['flags'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Gale2007ChineseSegmenterFeatureFactory.java'},
    'GaleP4LexMapper': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\GaleP4LexMapper.java'},
    'GaleP4LexMapper.canChangeEncoding': {   'req_args': ['parent', 'element'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\GaleP4LexMapper.java'},
    'GaleP4LexMapper.map': {   'req_args': ['parent', 'element'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\GaleP4LexMapper.java'},
    'GaleP4LexMapper.setup': {   'req_args': ['path', 'options'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\GaleP4LexMapper.java'},
    'GamePlayerBenchmark.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\benchmarks\\GamePlayerBenchmark.java'},
    'Gamma': {   'req_args': ['alpha'],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'Gamma.drawSample': {   'req_args': [   'random',
                                            ['random', 'alpha'],
                                            ['r', 'a', 'b']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'Gamma.equals': {   'req_args': ['o'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'Gamma.hashCode': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'Gamma.logProbabilityOf': {   'req_args': ['x'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'Gamma.probabilityOf': {   'req_args': ['x'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Gamma.java'},
    'GenderAnnotator': {   'req_args': ['annotatorName', 'props'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GenderAnnotator.annotate': {   'req_args': ['annotation'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GenderAnnotator.annotateEntityMention': {   'req_args': [   'entityMention',
                                                                 'gender'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GenderAnnotator.loadGenderNames': {   'req_args': [   'genderSet',
                                                           'filePath'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GenderAnnotator.requirementsSatisfied': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GenderAnnotator.requires': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenderAnnotator.java'},
    'GeneralDataset': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.add': {   'req_args': ['d'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.addAll': {   'req_args': ['data'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.applyFeatureCountThreshold': {   'req_args': ['k'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.applyFeatureMaxCountThreshold': {   'req_args': ['k'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.clear': {   'req_args': [['numDatums']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.featureIndex': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getDataArray': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getDatum': {   'req_args': ['index'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getFeatureCounts': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getLabelsArray': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getRVFDatum': {   'req_args': ['index'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.getValuesArray': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.iterator': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.labelIndex': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.labelIterator': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.makeSvmLabelMap': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.mapDataset': {   'req_args': [   'dataset',
                                                     [   'dataset',
                                                         'newLabelIndex',
                                                         'labelMapping',
                                                         'defaultLabel']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.mapDatum': {   'req_args': [   'd',
                                                   'labelMapping',
                                                   'defaultLabel'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.numClasses': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.numDatumsPerLabel': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.numFeatureTokens': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.numFeatureTypes': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.numFeatures': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.printSVMLightFormat': {   'req_args': [['pw']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.printSparseFeatureMatrix': {   'req_args': [['pw']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.randomize': {   'req_args': ['randomSeed'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.retainFeatures': {   'req_args': ['features'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.sampleDataset': {   'req_args': [   'randomSeed',
                                                        'sampleFrac',
                                                        'sampleWithReplacement'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.shuffleWithSideInformation': {   'req_args': [   'randomSeed',
                                                                     'sideInformation'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.size': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.split': {   'req_args': ['start', 'end', ['fractionSplit']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.splitOutFold': {   'req_args': ['fold', 'numFolds'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralDataset.summaryStatistics': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralDataset.java'},
    'GeneralizedCounter': {   'req_args': [['depth']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.conditionalize': {   'req_args': ['l'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.conditionalizeOnce': {   'req_args': ['o'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.containsKey': {   'req_args': ['key'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.counterView': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.depth': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.entrySet': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.getCount': {   'req_args': [   'o',
                                                       ['o1', 'o2'],
                                                       ['o1', 'o2', 'o3']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.getCounts': {   'req_args': ['l'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.incrementCount': {   'req_args': [   'l',
                                                             'o',
                                                             [   'l',
                                                                 'o',
                                                                 'count'],
                                                             ['l'],
                                                             ['l', 'count']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.incrementCount1D': {   'req_args': [   'o',
                                                               ['o', 'count']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.incrementCount2D': {   'req_args': [   'first',
                                                               'second',
                                                               [   'first',
                                                                   'second',
                                                                   'count']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.incrementCount3D': {   'req_args': [   'first',
                                                               'second',
                                                               'third',
                                                               [   'first',
                                                                   'second',
                                                                   'third',
                                                                   'count']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.isEmpty': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.keySet': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.lowestLevelCounterEntrySet': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.oneDimensionalCounterView': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.prettyPrint': {   'req_args': [   ['pw'],
                                                          [   'pw',
                                                              'bufferIncrement']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.reverseKeys': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.toString': {   'req_args': [['param']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.topLevelKeySet': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedCounter.totalCount': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\GeneralizedCounter.java'},
    'GeneralizedExpectationObjectiveFunction': {   'req_args': [   'labeledDataset',
                                                                   'unlabeledDataList',
                                                                   'geFeatures'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralizedExpectationObjectiveFunction.java'},
    'GeneralizedExpectationObjectiveFunction.domainDimension': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralizedExpectationObjectiveFunction.java'},
    'GeneralizedExpectationObjectiveFunction.to2D': {   'req_args': ['x'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\GeneralizedExpectationObjectiveFunction.java'},
    'GenerateAlignmentData.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\GenerateAlignmentData.java'},
    'GenerateTrees.help': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GenerateTrees.java'},
    'GenerateTrees.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GenerateTrees.java'},
    'GenerateTrees.produceTree': {   'req_args': ['state'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GenerateTrees.java'},
    'GenerateTrees.produceTrees': {   'req_args': [   'filename',
                                                      'numTrees',
                                                      ['pout', 'numTrees']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GenerateTrees.java'},
    'GenerateTrees.readGrammar': {   'req_args': ['filename', ['bin']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GenerateTrees.java'},
    'GenericAnnotationSerializer': {   'req_args': ['compress', []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericAnnotationSerializer.java'},
    'GenericAnnotationSerializer.read': {   'req_args': ['is'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericAnnotationSerializer.java'},
    'GenericAnnotationSerializer.write': {   'req_args': ['corpus', 'os'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericAnnotationSerializer.java'},
    'GenericDataSetReader': {   'req_args': [   [   'processor',
                                                    'preProcessSentences',
                                                    'calculateHeadSpan',
                                                    'forceGenerationOfIndexSpans']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.assignSyntacticHead': {   'req_args': [   'ent',
                                                                    'tree',
                                                                    'tokens',
                                                                    'setHeadSpan'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.convertToCoreLabels': {   'req_args': ['tree'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.findSyntacticHead': {   'req_args': [   'ent',
                                                                  'root',
                                                                  'tokens'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.getLoggerLevel': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.getParser': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.originalFindSyntacticHead': {   'req_args': [   'ent',
                                                                          'root',
                                                                          'tokens'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.parse': {   'req_args': ['path'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.preProcessSentences': {   'req_args': ['dataset'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.read': {   'req_args': ['path'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.setLoggerLevel': {   'req_args': ['level'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.setProcessor': {   'req_args': ['p'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericDataSetReader.setUseNewHeadFinder': {   'req_args': [   'useNewHeadFinder'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\GenericDataSetReader.java'},
    'GenericTimeExpressionPatterns': {   'req_args': ['options'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GenericTimeExpressionPatterns.java'},
    'GenericTimeExpressionPatterns.createExtractor': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GenericTimeExpressionPatterns.java'},
    'GenericTimeExpressionPatterns.determineRelFlags': {   'req_args': [   'annotation',
                                                                           'te'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\GenericTimeExpressionPatterns.java'},
    'GenericTreebankParserParams': {   'req_args': ['tlp'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.collinizer': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.diskTreebank': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.display': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GenericTreebankParserParams.java'},
    'GenericWebServiceAnnotator': {   'req_args': ['props'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericWebServiceAnnotator.java'},
    'GenericWebServiceAnnotator.requirementsSatisfied': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericWebServiceAnnotator.java'},
    'GenericWebServiceAnnotator.requires': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\GenericWebServiceAnnotator.java'},
    'Generics': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newArrayList': {   'req_args': [['size'], ['c']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newBinaryHeapPriorityQueue': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newConcurrentHashMap': {   'req_args': [   ['initialCapacity'],
                                                         [   'initialCapacity',
                                                             'loadFactor',
                                                             'concurrencyLevel']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newConcurrentHashSet': {   'req_args': [['set']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newHashMap': {   'req_args': [['initialCapacity'], ['m']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newHashSet': {   'req_args': [['initialCapacity'], ['c']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newIdentityHashMap': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newIdentityHashSet': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newIndex': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newInterner': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newLinkedList': {   'req_args': [['c']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newPair': {   'req_args': ['first', 'second'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newStack': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newSynchronizedInterner': {   'req_args': [   'interner',
                                                            [   'interner',
                                                                'mutex']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newTreeMap': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newTreeSet': {   'req_args': [['comparator'], ['s']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newTriple': {   'req_args': ['first', 'second', 'third'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newWeakHashMap': {   'req_args': [['initialCapacity']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'Generics.newWeakReference': {   'req_args': ['referent'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Generics.java'},
    'GermanDocument': {   'req_args': [   'text',
                                          ['ann'],
                                          ['proto'],
                                          ['props', 'text']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\GermanDocument.java'},
    'GermanDocument.coref': {   'req_args': ['props'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\GermanDocument.java'},
    'GermanSentence': {   'req_args': ['text', ['tokens'], ['proto']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\GermanSentence.java'},
    'GermanTokenizerPostProcessor.mergeTokens': {   'req_args': [   'token',
                                                                    'nextToken'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\process\\GermanTokenizerPostProcessor.java'},
    'GermanTokenizerPostProcessor.process': {   'req_args': ['tokens'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\process\\GermanTokenizerPostProcessor.java'},
    'GermanTokenizerPostProcessor.restore': {   'req_args': [   'originalTokens',
                                                                'processedTokens'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\process\\GermanTokenizerPostProcessor.java'},
    'GermanTreebankTokenReport.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\scripts\\GermanTreebankTokenReport.java'},
    'GermanTreebankUDUpdater.createTagAndWordNode': {   'req_args': [   'tag',
                                                                        'word'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\scripts\\GermanTreebankUDUpdater.java'},
    'GermanTreebankUDUpdater.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\scripts\\GermanTreebankUDUpdater.java'},
    'GermanTreebankUDUpdater.splitHyphenatedToken': {   'req_args': ['tree'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\german\\scripts\\GermanTreebankUDUpdater.java'},
    'GermanUnknownWordModel': {   'req_args': [   'op',
                                                  'lex',
                                                  'wordIndex',
                                                  'tagIndex',
                                                  'unSeenCounter',
                                                  'tagHash',
                                                  'unknownGT',
                                                  'seenEnd',
                                                  [   'op',
                                                      'lex',
                                                      'wordIndex',
                                                      'tagIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GermanUnknownWordModel.java'},
    'GermanUnknownWordModel.score': {   'req_args': ['itw', 'word'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GermanUnknownWordModel.java'},
    'GetPatternsFromDataMultiClass': {   'req_args': [   'props',
                                                         'sents',
                                                         'seedSet',
                                                         'labelUsingSeedSets',
                                                         'answerLabel',
                                                         [   'props',
                                                             'sents',
                                                             'seedSet',
                                                             'labelUsingSeedSets',
                                                             'answerClass',
                                                             'answerLabel'],
                                                         [   'props',
                                                             'sents',
                                                             'seedSet',
                                                             'labelUsingSeedSets',
                                                             'answerLabel',
                                                             'generalizeClasses',
                                                             'ignoreClasses'],
                                                         [   'props',
                                                             'sents',
                                                             'seedSet',
                                                             'labelUsingSeedSets',
                                                             'answerClass',
                                                             'answerLabel',
                                                             'generalizeClasses',
                                                             'ignoreClasses'],
                                                         [   'props',
                                                             'sents',
                                                             'seedSets',
                                                             'labelUsingSeedSets'],
                                                         [   'props',
                                                             'sents',
                                                             'seedSets',
                                                             'labelUsingSeedSets',
                                                             'answerClass'],
                                                         [   'props',
                                                             'sents',
                                                             'seedSets',
                                                             'labelUsingSeedSets',
                                                             'answerClass',
                                                             'generalizeClasses',
                                                             'ignoreClasses']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.FScore': {   'req_args': [   'precision',
                                                                'recall',
                                                                'beta'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.countResults': {   'req_args': [   'doc',
                                                                      'entityTP',
                                                                      'entityFP',
                                                                      'entityFN',
                                                                      'background',
                                                                      'wordTP',
                                                                      'wordTN',
                                                                      'wordFP',
                                                                      'wordFN',
                                                                      'whichClassToCompare',
                                                                      'evalPerEntity'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.countResultsPerToken': {   'req_args': [   'doc',
                                                                              'entityTP',
                                                                              'entityFP',
                                                                              'entityFN',
                                                                              'background',
                                                                              'wordTP',
                                                                              'wordTN',
                                                                              'wordFP',
                                                                              'wordFN',
                                                                              'whichClassToCompare'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.elapsedTime': {   'req_args': ['d1', 'd2'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.evaluate': {   'req_args': [   'testSentences',
                                                                  'evalPerEntity'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getAllOptions': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getFeatures': {   'req_args': [   'graph',
                                                                     'vertex',
                                                                     'isHead',
                                                                     'features',
                                                                     'reln'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getLearnedPatterns': {   'req_args': [   'label',
                                                                            []],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getLearnedPatternsEachIter': {   'req_args': [   [   'label']],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getNonBackgroundLabels': {   'req_args': [   'l'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getPatsForEachToken': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getPatternScoringClass': {   'req_args': [   'patternScoring'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getPatterns': {   'req_args': [   'label',
                                                                     'alreadyIdentifiedPatterns',
                                                                     'p0',
                                                                     'p0Set',
                                                                     'ignorePatterns'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getSubListIndex': {   'req_args': [   'l1',
                                                                         'l2',
                                                                         'subl2',
                                                                         'doNotLabelTheseWords',
                                                                         'seenFuzzyMatches',
                                                                         'minLen4Fuzzy',
                                                                         'fuzzyMatch',
                                                                         'ignoreCaseSeedMatch'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.getThreadBatches': {   'req_args': [   'keyset',
                                                                          'numThreads'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.iterateExtractApply': {   'req_args': [   [   'p0',
                                                                                 'p0Set',
                                                                                 'ignorePatterns']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.labelWords': {   'req_args': [   'label',
                                                                    'sents',
                                                                    'identifiedWords',
                                                                    [   'label',
                                                                        'sents',
                                                                        'identifiedWords',
                                                                        'outFile',
                                                                        'matchedTokensByPat']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.loadFromSavedPatternsWordsDir': {   'req_args': [   'model',
                                                                                       'props'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.main': {   'req_args': ['args'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.matchedTokensByPhraseJsonString': {   'req_args': [   'phrase',
                                                                                         [   ]],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.normalizeSoftMaxMinMaxScores': {   'req_args': [   'scores',
                                                                                      'minMaxNorm',
                                                                                      'softmax',
                                                                                      'oneMinusSoftMax'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.processSents': {   'req_args': [   'sents',
                                                                      'deleteExistingIndex',
                                                                      [   'props',
                                                                          'labels']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.readSeedWords': {   'req_args': [   'props',
                                                                       [   'seedWordsFiles']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.readSeedWordsFromJSONString': {   'req_args': [   'str'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.run': {   'req_args': ['props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.runLabelSeedWords': {   'req_args': [   'sents',
                                                                           'answerclass',
                                                                           'label',
                                                                           'seedWords',
                                                                           'constVars',
                                                                           'overwriteExistingLabels'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.runPOSNEROnTokens': {   'req_args': [   'sentsCM',
                                                                           'posModelPath',
                                                                           'useTargetNERRestriction',
                                                                           'prefix',
                                                                           'useTargetParserParentRestriction',
                                                                           'numThreads',
                                                                           'type'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.runPOSNERParseOnTokens': {   'req_args': [   'sents',
                                                                                'propsoriginal'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.setLearnedPatterns': {   'req_args': [   'patterns',
                                                                            'label'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.tokenize': {   'req_args': [   'textReader',
                                                                  'posModelPath',
                                                                  'lowercase',
                                                                  'useTargetNERRestriction',
                                                                  'sentIDPrefix',
                                                                  'useTargetParserParentRestriction',
                                                                  'numThreads',
                                                                  'batchProcessSents',
                                                                  'numMaxSentencesPerBatchFile',
                                                                  'saveSentencesSerDirFile',
                                                                  'sents',
                                                                  'numFilesTillNow',
                                                                  'type'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.writeColumnOutput': {   'req_args': [   'outFile',
                                                                           'batchProcessSents',
                                                                           'answerclasses'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GetPatternsFromDataMultiClass.writeLabeledData': {   'req_args': [   'outFile'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\GetPatternsFromDataMultiClass.java'},
    'GoldenSectionLineSearch': {   'req_args': [   'tol',
                                                   'low',
                                                   'high',
                                                   [   'tol',
                                                       'low',
                                                       'high',
                                                       'verbose'],
                                                   ['geometric'],
                                                   [   'geometric',
                                                       'tol',
                                                       'low',
                                                       'high'],
                                                   [   'geometric',
                                                       'tol',
                                                       'low',
                                                       'high',
                                                       'verbose']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\GoldenSectionLineSearch.java'},
    'GoldenSectionLineSearch.discretizeCompute': {   'req_args': [   'function',
                                                                     'numPoints',
                                                                     'low',
                                                                     'high'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\GoldenSectionLineSearch.java'},
    'GoldenSectionLineSearch.dumpMemory': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\GoldenSectionLineSearch.java'},
    'GoldenSectionLineSearch.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\GoldenSectionLineSearch.java'},
    'GoldenSectionLineSearch.minimize': {   'req_args': [   'function',
                                                            'tol',
                                                            'low',
                                                            'high',
                                                            ['function']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\GoldenSectionLineSearch.java'},
    'GoogleNGramsSQLBacked.closeConnection': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.existsTable': {   'req_args': ['tablename'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.get1GramRank': {   'req_args': ['str'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.getCount': {   'req_args': ['str'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.getCounts': {   'req_args': ['strs'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.getTotalCount': {   'req_args': ['ngram'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.populateTablesInSQL': {   'req_args': [   'dir',
                                                                     'typesOfPhrases'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GoogleNGramsSQLBacked.setDBName': {   'req_args': ['DBName'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\GoogleNGramsSQLBacked.java'},
    'GrammarCompactor': {   'req_args': ['op'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GrammarCompactor.java'},
    'GrammarCompactor.compactGrammar': {   'req_args': [   'grammar',
                                                           'originalStateIndex',
                                                           [   'grammar',
                                                               'allTrainPaths',
                                                               'allTestPaths',
                                                               'originalStateIndex']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GrammarCompactor.java'},
    'GrammarCompactor.writeFile': {   'req_args': ['graph', 'dir', 'name'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GrammarCompactor.java'},
    'GrammarCoverageChecker.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GrammarCoverageChecker.java'},
    'GrammarCoverageChecker.runTest': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\GrammarCoverageChecker.java'},
    'GrammaticalFunctionTreeNormalizer': {   'req_args': ['tlp', 'nodeCleanup'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalFunctionTreeNormalizer.java'},
    'GrammaticalFunctionTreeNormalizer.normalizeNonterminal': {   'req_args': [   'category'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalFunctionTreeNormalizer.java'},
    'GrammaticalRelation': {   'req_args': [   'language',
                                               'shortName',
                                               'longName',
                                               'parent',
                                               'sourcePattern',
                                               'tregexCompiler',
                                               'targetPatterns',
                                               'specificString',
                                               [   'language',
                                                   'shortName',
                                                   'longName',
                                                   'parent',
                                                   'sourcePattern',
                                                   'tregexCompiler',
                                                   'targetPatterns'],
                                               [   'language',
                                                   'shortName',
                                                   'longName',
                                                   'parent'],
                                               [   'language',
                                                   'shortName',
                                                   'longName',
                                                   'parent',
                                                   'specificString']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.compareTo': {   'req_args': ['o'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.equals': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getLanguage': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getLongName': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getParent': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getRelatedNodes': {   'req_args': [   't',
                                                               'root',
                                                               'headFinder'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getShortName': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.getSpecific': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.hashCode': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.isAncestor': {   'req_args': ['gr'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.isApplicable': {   'req_args': ['t'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.isFromString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.toPrettyString': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalRelation.valueOf': {   'req_args': [   's',
                                                       'values',
                                                       'readValuesLock',
                                                       ['s', 'map'],
                                                       ['language', 's'],
                                                       ['s']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalRelation.java'},
    'GrammaticalStructure': {   'req_args': [   't',
                                                'relations',
                                                'relationsLock',
                                                'transformer',
                                                'hf',
                                                'puncFilter',
                                                'tagFilter',
                                                [   'projectiveDependencies',
                                                    'root']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.allTypedDependencies': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.buildCoNLLXGrammaticalStructure': {   'req_args': [   'tokenFields',
                                                                                'shortNameToGRel',
                                                                                'factory'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.fromStringReps': {   'req_args': [   'tokens',
                                                               'posTags',
                                                               'deps'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.getGrammaticalRelation': {   'req_args': [   'govIndex',
                                                                       'depIndex',
                                                                       [   'gov',
                                                                           'dep']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.getRoots': {   'req_args': ['list'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.isConnected': {   'req_args': ['list'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.readCoNLLXGrammaticalStructureCollection': {   'req_args': [   'fileName',
                                                                                         'shortNameToGRel',
                                                                                         'factory'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.root': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.toString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependencies': {   'req_args': [   [   'includeExtras'],
                                                                  [   'includeExtras']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependenciesCCprocessed': {   'req_args': [   'includeExtras',
                                                                             [   'includeExtras'],
                                                                             [   ]],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependenciesCollapsed': {   'req_args': [   [   'includeExtras'],
                                                                           [   'includeExtras']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependenciesCollapsedTree': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependenciesEnhanced': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructure.typedDependenciesEnhancedPlusPlus': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructure.java'},
    'GrammaticalStructureConversionUtils': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructureConversionUtils.java'},
    'GrammaticalStructureConversionUtils.convertTrees': {   'req_args': [   'args',
                                                                            'defaultLang'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructureConversionUtils.java'},
    'GrammaticalStructureConversionUtils.dependenciesToCoNLLXString': {   'req_args': [   'gs',
                                                                                          'sentence',
                                                                                          [   'deps',
                                                                                              'sentence']],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructureConversionUtils.java'},
    'GrammaticalStructureConversionUtils.dependenciesToString': {   'req_args': [   'gs',
                                                                                    'deps',
                                                                                    'tree',
                                                                                    'conllx',
                                                                                    'extraSep',
                                                                                    'convertToUPOS'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructureConversionUtils.java'},
    'GrammaticalStructureConversionUtils.printDependencies': {   'req_args': [   'gs',
                                                                                 'deps',
                                                                                 'tree',
                                                                                 'conllx',
                                                                                 'extraSep',
                                                                                 'convertToUPOS'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\GrammaticalStructureConversionUtils.java'},
    'GraphLessGrammaticalStructure': {   'req_args': [   'projectiveDependencies',
                                                         'root'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'GraphLessGrammaticalStructureFactory.build': {   'req_args': [   'projectiveDependencies',
                                                                      'root'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'GraphRelation': {   'req_args': [   'symbol',
                                         'type',
                                         'name',
                                         ['symbol', 'type'],
                                         ['symbol']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.getName': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.getPattern': {   'req_args': ['relnType'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.getRelation': {   'req_args': [   'reln',
                                                     'type',
                                                     'name',
                                                     [   'reln',
                                                         'type',
                                                         'num',
                                                         'name'],
                                                     [   'reln',
                                                         'type',
                                                         'num',
                                                         'num2',
                                                         'name']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.isKnownRelation': {   'req_args': ['reln'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphRelation.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\GraphRelation.java'},
    'GraphicalModel.addFactor': {   'req_args': [   'neighborIndices',
                                                    'neighborDimensions',
                                                    'assignmentFeaturizer',
                                                    [   'featureTable',
                                                        'neighborIndices']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.cloneModel': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.getModelMetaDataByReference': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.getProtoBuilder': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.getVariableMetaDataByReference': {   'req_args': [   'variableIndex'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.getVariableSizes': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.readFromProto': {   'req_args': ['proto'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.readFromStream': {   'req_args': ['stream'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.valueEquals': {   'req_args': ['other', 'tolerance'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModel.writeToStream': {   'req_args': ['stream'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\GraphicalModel.java'},
    'GraphicalModelProto': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\GraphicalModelProto.java'},
    'GraphicalModelProto.getDescriptor': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\GraphicalModelProto.java'},
    'GraphicalModelProto.registerAllExtensions': {   'req_args': [   'registry',
                                                                     [   'registry']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\proto\\GraphicalModelProto.java'},
    'GroundTruthConverter.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\GroundTruthConverter.java'},
    'HTKLatticeReader': {   'req_args': [   'filename',
                                            ['filename', 'mergeType'],
                                            [   'filename',
                                                'mergeType',
                                                'debug',
                                                'prettyPrint']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.getLatticeWords': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.getNumStates': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.getWordsOverSpan': {   'req_args': ['a', 'b'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.printWords': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HTKLatticeReader.processLattice': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HTKLatticeReader.java'},
    'HashIndex': {   'req_args': [   ['capacity'],
                                     ['objLookupFactory', 'indexLookupFactory'],
                                     ['objects', 'indexes'],
                                     ['c'],
                                     ['index']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.add': {   'req_args': ['o'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.addAll': {   'req_args': ['c'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.addToIndex': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.addToIndexUnsafe': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.clear': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.contains': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.get': {   'req_args': ['i'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.indexOf': {   'req_args': ['o', ['o', 'add']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.indices': {   'req_args': ['elements'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.isLocked': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.iterator': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.loadFromFileWithList': {   'req_args': ['file'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.loadFromFilename': {   'req_args': ['file'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.loadFromReader': {   'req_args': ['br'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.lock': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.objects': {   'req_args': ['indices'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.objectsList': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.saveToFilename': {   'req_args': ['file'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.saveToWriter': {   'req_args': ['bw'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.size': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.toString': {   'req_args': [['n']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.toStringOneEntryPerLine': {   'req_args': [['n']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.unlock': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashIndex.unmodifiableView': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashIndex.java'},
    'HashableCoreMap': {   'req_args': ['hashkey', ['other', 'hashkey']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashableCoreMap.java'},
    'HashableCoreMap.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashableCoreMap.java'},
    'HashableCoreMap.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashableCoreMap.java'},
    'HashableCoreMap.set': {   'req_args': ['key', 'value'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\HashableCoreMap.java'},
    'HebrewTreeNormalizer': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreeNormalizer.java'},
    'HebrewTreeNormalizer.normalizeWholeTree': {   'req_args': ['tree', 'tf'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreeNormalizer.java'},
    'HebrewTreeReaderFactory.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreeReaderFactory.java'},
    'HebrewTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreeReaderFactory.java'},
    'HebrewTreebankLanguagePack.evalBIgnoredPunctuationTags': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.treeReaderFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\HebrewTreebankLanguagePack.java'},
    'HebrewTreebankParserParams': {   'req_args': [['tlp']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.collinizer': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.diskTreebank': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.display': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.headFinder': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HebrewTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HebrewTreebankParserParams.java'},
    'HeidelTimeAnnotator': {   'req_args': [   ['heideltimePath'],
                                               [   'heideltimePath',
                                                   'language',
                                                   'outputResults'],
                                               ['name', 'props']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeAnnotator.java'},
    'HeidelTimeAnnotator.annotate': {   'req_args': [   'annotation',
                                                        ['document']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeAnnotator.java'},
    'HeidelTimeAnnotator.requirementsSatisfied': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeAnnotator.java'},
    'HeidelTimeAnnotator.requires': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeAnnotator.java'},
    'HeidelTimeKBPAnnotator': {   'req_args': [   ['heideltimePath'],
                                                  [   'heideltimePath',
                                                      'language',
                                                      'outputResults'],
                                                  ['name', 'props']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeKBPAnnotator.java'},
    'HeidelTimeKBPAnnotator.annotate': {   'req_args': [   'annotation',
                                                           ['document']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeKBPAnnotator.java'},
    'HeidelTimeKBPAnnotator.requirementsSatisfied': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeKBPAnnotator.java'},
    'HeidelTimeKBPAnnotator.requires': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\HeidelTimeKBPAnnotator.java'},
    'HighlightUtils': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\HighlightUtils.java'},
    'HighlightUtils.addHighlight': {   'req_args': [   'label',
                                                       'mouseEvent1',
                                                       'mouseEvent2'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\HighlightUtils.java'},
    'HighlightUtils.isInHighlight': {   'req_args': ['e', 'label', 'h'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\HighlightUtils.java'},
    'History': {   'req_args': [   'pairs',
                                   'extractors',
                                   [   'start',
                                       'end',
                                       'current',
                                       'pairs',
                                       'extractors']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\History.java'},
    'History.equals': {   'req_args': ['h1'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\History.java'},
    'History.getX': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\History.java'},
    'History.hashCode': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\History.java'},
    'History.toString': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\History.java'},
    'HistoryTable': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\HistoryTable.java'},
    'HoldTreeNode': {   'req_args': ['t'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\HoldTreeNode.java'},
    'HoldTreeNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\HoldTreeNode.java'},
    'HoldTreeNode.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\HoldTreeNode.java'},
    'Hook': {   'req_args': ['exhaustiveTest', ['h']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'Hook.equals': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'Hook.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'Hook.isPostHook': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'Hook.isPreHook': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'Hook.toString': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Hook.java'},
    'HookChart.addEdge': {   'req_args': ['edge'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.addHook': {   'req_args': ['hook'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.getEdges': {   'req_args': ['hook'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.getPostHooks': {   'req_args': ['edge'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.getPreHooks': {   'req_args': ['edge'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.getRealEdgesWithL': {   'req_args': ['state', 'start'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.getRealEdgesWithR': {   'req_args': ['state', 'end'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.isBuiltL': {   'req_args': ['state', 'start', 'head', 'tag'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.isBuiltR': {   'req_args': ['state', 'end', 'head', 'tag'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.registerEdgeIndexes': {   'req_args': ['edge'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HookChart.registerRealEdge': {   'req_args': ['edge'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HookChart.java'},
    'HungarianTreebankLanguagePack.headFinder': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hungarian\\HungarianTreebankLanguagePack.java'},
    'HungarianTreebankParserParams': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.collinizer': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.display': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.headFinder': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.transformTree': {   'req_args': [   't',
                                                                       'root'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HungarianTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\HungarianTreebankParserParams.java'},
    'HybridCorefAnnotator': {   'req_args': ['props'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefAnnotator.annotate': {   'req_args': ['annotation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefAnnotator.getLinks': {   'req_args': ['result'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefAnnotator.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefAnnotator.requirementsSatisfied': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefAnnotator.requires': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\HybridCorefAnnotator.java'},
    'HybridCorefMentionFinder': {   'req_args': ['headFinder', 'props'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\HybridCorefMentionFinder.java'},
    'HybridCorefMentionFinder.findMentions': {   'req_args': [   'doc',
                                                                 'dict',
                                                                 'props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\HybridCorefMentionFinder.java'},
    'HybridCorefPrinter.linkDistanceAnalysis': {   'req_args': ['args'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.printErrorLog': {   'req_args': [   'm',
                                                            'document',
                                                            'probs',
                                                            'mIdx',
                                                            'dict',
                                                            'sieve'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.printErrorLogDcoref': {   'req_args': [   'm',
                                                                  'found',
                                                                  'document',
                                                                  'dict',
                                                                  'mIdx',
                                                                  'whichResolver'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.printMentionDetectionLog': {   'req_args': ['document'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.printRawDoc': {   'req_args': [   'document',
                                                          'gold',
                                                          'printClusterID'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefPrinter.sentenceStringWithMention': {   'req_args': [   'i',
                                                                        'document',
                                                                        'gold',
                                                                        'printClusterID'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefPrinter.java'},
    'HybridCorefProperties': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.addMissingAnnotations': {   'req_args': ['props'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.calculateFeatureImportance': {   'req_args': [   'props'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.checkMemory': {   'req_args': ['props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.checkTime': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.combineObjectRoles': {   'req_args': [   'props',
                                                                    'sievename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.debug': {   'req_args': ['props'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.doAnalysis': {   'req_args': ['props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.doPMIFeatureSelection': {   'req_args': [   'props',
                                                                       'sievename'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.doPostProcessing': {   'req_args': ['props'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.doScore': {   'req_args': ['props'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getAntecedentType': {   'req_args': [   'props',
                                                                   'sievename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getAntecedentTypeStr': {   'req_args': [   'props',
                                                                      'sievename'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getClassifierType': {   'req_args': [   'props',
                                                                   'sievename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getCurrentSieveForTrain': {   'req_args': ['props'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getDownsamplingRate': {   'req_args': [   'props',
                                                                     'sievename'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getFeatureCountThreshold': {   'req_args': [   'props',
                                                                          'sievename'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getGenderNumber': {   'req_args': ['props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getLanguage': {   'req_args': ['props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getMaxSentDistForSieve': {   'req_args': [   'props',
                                                                        'sievename'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getMentionType': {   'req_args': [   'props',
                                                                'sievename'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getMentionTypeStr': {   'req_args': [   'props',
                                                                   'sievename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getMergeThreshold': {   'req_args': [   'props',
                                                                   'sievename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getNumFeatures': {   'req_args': [   'props',
                                                                'sievename'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getNumTrees': {   'req_args': ['props', 'sievename'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getPMIThres': {   'req_args': ['props', 'sievename'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getPathModel': {   'req_args': [   'props',
                                                              'sievename'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getPathSerialized': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getPathSerializedWordVectors': {   'req_args': [   'props'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getPathWord2Vec': {   'req_args': ['props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getSeed': {   'req_args': ['props'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getSieves': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getSkipAntecedentType': {   'req_args': ['props'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getSkipMentionType': {   'req_args': ['props'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getThreadCounts': {   'req_args': ['props'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.getTreeDepth': {   'req_args': [   'props',
                                                              'sievename'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.loadWordEmbedding': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.printMDLog': {   'req_args': ['props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.setMergeThreshold': {   'req_args': [   'props',
                                                                   'sievename',
                                                                   'value'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.storeTrainData': {   'req_args': ['props'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useBasicFeatures': {   'req_args': [   'props',
                                                                  'sievename'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useCoNLLAuto': {   'req_args': ['props'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useDcorefRules': {   'req_args': [   'props',
                                                                'sievename'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useDefaultPronounAgreement': {   'req_args': [   'props'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useLexicalFeatures': {   'req_args': [   'props',
                                                                    'sievename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useMentionDetectionFeatures': {   'req_args': [   'props',
                                                                             'sievename'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.usePOSFeatures': {   'req_args': [   'props',
                                                                'sievename'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useSemantics': {   'req_args': ['props'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefProperties.useWordEmbedding': {   'req_args': [   'props',
                                                                  'sievename'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefProperties.java'},
    'HybridCorefSystem': {   'req_args': ['props', 'dictionaries', ['props']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefSystem.java'},
    'HybridCorefSystem.coref': {   'req_args': [   'document',
                                                   'output',
                                                   ['document'],
                                                   ['anno']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefSystem.java'},
    'HybridCorefSystem.dictionaries': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefSystem.java'},
    'HybridCorefSystem.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefSystem.java'},
    'HybridCorefSystem.runCoref': {   'req_args': [   'args',
                                                      ['props'],
                                                      ['document']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\HybridCorefSystem.java'},
    'HybridMinimizer': {   'req_args': [   'minimizerOne',
                                           'minimizerTwo',
                                           'iterationCutoff'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\HybridMinimizer.java'},
    'HybridMinimizer.minimize': {   'req_args': [   'function',
                                                    'functionTolerance',
                                                    'initial',
                                                    [   'function',
                                                        'functionTolerance',
                                                        'initial',
                                                        'maxIterations']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\HybridMinimizer.java'},
    'HybridMinimizer.setEvaluators': {   'req_args': ['iters', 'evaluators'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\HybridMinimizer.java'},
    'IBMArabicEscaper': {   'req_args': [['annoteAndClassOnly']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\IBMArabicEscaper.java'},
    'IBMArabicEscaper.apply': {   'req_args': ['sentence', ['w']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\IBMArabicEscaper.java'},
    'IBMArabicEscaper.disableWarnings': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\IBMArabicEscaper.java'},
    'IBMArabicEscaper.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\IBMArabicEscaper.java'},
    'IBMMTArabicDataset': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\IBMMTArabicDataset.java'},
    'IBMMTArabicDataset.build': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\IBMMTArabicDataset.java'},
    'IBMMTArabicDataset.getFilenames': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\IBMMTArabicDataset.java'},
    'IBMMTArabicDataset.setOptions': {   'req_args': ['opts'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\IBMMTArabicDataset.java'},
    'IBMMTArabicDataset.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\IBMMTArabicDataset.java'},
    'IOBUtils': {   'req_args': [[]],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.IOBToString': {   'req_args': [   'labeledSequence',
                                                'prefixMarker',
                                                'suffixMarker',
                                                [   'labeledSequence',
                                                    'prefixMarker',
                                                    'suffixMarker',
                                                    'startIndex',
                                                    'endIndex'],
                                                [   'labeledSequence',
                                                    'segmentationMarker'],
                                                ['labeledSequence']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.StringToIOB': {   'req_args': [   'tokenList',
                                                'segMarker',
                                                'applyRewriteRules',
                                                [   'tokenList',
                                                    'segMarker',
                                                    'applyRewriteRules',
                                                    'tf',
                                                    'origText'],
                                                [   'tokenList',
                                                    'segMarker',
                                                    'applyRewriteRules',
                                                    'stripRewrites'],
                                                [   'tokenList',
                                                    'segMarker',
                                                    'applyRewriteRules',
                                                    'stripRewrites',
                                                    'tf',
                                                    'origText'],
                                                ['string'],
                                                ['str', 'segMarker']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.TokenSpansForIOB': {   'req_args': ['labeledSequence'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.countEntityResults': {   'req_args': [   'doc',
                                                       'entityTP',
                                                       'entityFP',
                                                       'entityFN',
                                                       'background'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOBUtils.entitySubclassify': {   'req_args': [   'tokens',
                                                      'key',
                                                      'backgroundLabel',
                                                      'style',
                                                      'intern'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOBUtils.getBoundaryCharacter': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.isDifferentEntityBoundary': {   'req_args': [   'beforeEntity',
                                                              'afterEntity'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOBUtils.isEntityBoundary': {   'req_args': [   'beforeEntity',
                                                     'beforePrefix',
                                                     'afterEntity',
                                                     'afterPrefix'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOBUtils.isSameEntityBoundary': {   'req_args': [   'beforeEntity',
                                                         'beforePrefix',
                                                         'afterEntity',
                                                         'afterPrefix'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOBUtils.labelDomain': {   'req_args': ['tokenList', 'domain'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\IOBUtils.java'},
    'IOBUtils.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\IOBUtils.java'},
    'IOUtils': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.closeIgnoringExceptions': {   'req_args': ['c'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.console': {   'req_args': ['prompt', 'callback', ['callback']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.cp': {   'req_args': [   'source',
                                      'target',
                                      'recursive',
                                      ['source', 'target']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.deleteDirRecursively': {   'req_args': ['dir'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.deleteRecursively': {   'req_args': ['file'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.encodedInputStreamReader': {   'req_args': ['stream', 'encoding'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.encodedOutputStreamPrintWriter': {   'req_args': [   'stream',
                                                                  'encoding',
                                                                  'autoFlush'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.encodedOutputStreamWriter': {   'req_args': ['stream', 'encoding'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.ensureDir': {   'req_args': ['tgtDir'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.existsInClasspathOrFileSystem': {   'req_args': ['name'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getBZip2PipedInputStream': {   'req_args': ['filename'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getBZip2PipedOutputStream': {   'req_args': ['filename'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getBufferedFileReader': {   'req_args': ['filename'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getBufferedReaderFromClasspathOrFileSystem': {   'req_args': [   'filename'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getDataInputStream': {   'req_args': ['filenameUrlOrClassPath'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getDataOutputStream': {   'req_args': ['filename'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getExtension': {   'req_args': ['fileName'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getFileInputStream': {   'req_args': ['filename'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getFileOutputStream': {   'req_args': [   'filename',
                                                       ['filename', 'append']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getInputStreamFromURLOrClasspathOrFileSystem': {   'req_args': [   'textFileOrUrl'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getJNLPLocalScratch': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getLineIterable': {   'req_args': [   'r',
                                                   'includeEol',
                                                   [   'r',
                                                       'bufferSize',
                                                       'includeEol']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getPrintWriter': {   'req_args': [   'textFile',
                                                  ['textFile', 'encoding'],
                                                  ['filename'],
                                                  ['filename', 'encoding']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getPrintWriterIgnoringExceptions': {   'req_args': ['filename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getPrintWriterOrDie': {   'req_args': ['filename'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.getUrlEncoding': {   'req_args': ['connection'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.inputStreamFromFile': {   'req_args': ['file'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.iterFilesRecursive': {   'req_args': [   'dir',
                                                      ['dir', 'ext'],
                                                      ['dir', 'pattern']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.lineCount': {   'req_args': ['textFileOrUrl'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.linesFromFile': {   'req_args': [   'filename',
                                                 ['filename', 'encoding'],
                                                 [   'filename',
                                                     'encoding',
                                                     'ignoreHeader']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.promptUserInput': {   'req_args': ['prompt'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readCSVStrictly': {   'req_args': [   'csvContents',
                                                   'numColumns',
                                                   ['filename', 'numColumns']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readCSVWithHeader': {   'req_args': [   'path',
                                                     'quoteChar',
                                                     'escapeChar',
                                                     ['path']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readColumnSet': {   'req_args': ['infile', 'field'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readLines': {   'req_args': [   'path',
                                             ['path', 'encoding'],
                                             ['file'],
                                             ['file', 'fileInputStreamWrapper'],
                                             [   'file',
                                                 'fileInputStreamWrapper',
                                                 'encoding']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readMap': {   'req_args': ['filename'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectAnnouncingTimingFromURLOrClasspathOrFileSystem': {   'req_args': [   'log',
                                                                                            'msg',
                                                                                            'path'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectFromColumns': {   'req_args': [   'objClass',
                                                         'filename',
                                                         'fieldNames',
                                                         'delimiter'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectFromFile': {   'req_args': ['file', ['filename']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectFromFileNoExceptions': {   'req_args': ['file'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectFromObjectStream': {   'req_args': ['ois'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readObjectFromURLOrClasspathOrFileSystem': {   'req_args': [   'filename'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readStreamFromString': {   'req_args': ['filenameOrUrl'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readerFromFile': {   'req_args': ['file', ['file', 'encoding']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readerFromStdin': {   'req_args': [['encoding']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.readerFromString': {   'req_args': [   'textFileOrUrl',
                                                    [   'textFileOrUrl',
                                                        'encoding']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpFile': {   'req_args': [   'file',
                                             ['file', 'encoding'],
                                             ['filename', 'encoding'],
                                             ['filename']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpFileNoExceptions': {   'req_args': [   'filename',
                                                         'encoding',
                                                         ['file'],
                                                         ['filename']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpGZippedFile': {   'req_args': ['filename', ['file']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpInputStream': {   'req_args': ['input', 'encoding'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpReader': {   'req_args': ['reader'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpURL': {   'req_args': ['u', 'encoding', ['u'], ['path']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.slurpURLNoExceptions': {   'req_args': [   'u',
                                                        'encoding',
                                                        ['u'],
                                                        ['path']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.stringFromFile': {   'req_args': [   'filename',
                                                  ['filename', 'encoding']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.tail': {   'req_args': ['f', 'n', 'encoding', ['f', 'n']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.throwableToStackTrace': {   'req_args': ['t'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeObjectToFile': {   'req_args': [   'o',
                                                     'filename',
                                                     ['o', 'file'],
                                                     ['o', 'file', 'append']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeObjectToFileNoExceptions': {   'req_args': ['o', 'filename'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeObjectToTempFile': {   'req_args': ['o', 'filename'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeObjectToTempFileNoExceptions': {   'req_args': [   'o',
                                                                     'filename'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStreamFromString': {   'req_args': ['serializePath'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStreamToStream': {   'req_args': ['input', 'output'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStringToFile': {   'req_args': [   'contents',
                                                     'path',
                                                     'encoding'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStringToFileNoExceptions': {   'req_args': [   'contents',
                                                                 'path',
                                                                 'encoding'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStringToTempFile': {   'req_args': [   'contents',
                                                         'path',
                                                         'encoding',
                                                         ['contents', 'path']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'IOUtils.writeStringToTempFileNoExceptions': {   'req_args': [   'contents',
                                                                     'path',
                                                                     'encoding',
                                                                     [   'contents',
                                                                         'path']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\IOUtils.java'},
    'ISODateInstance': {   'req_args': [   ['date'],
                                           ['date', 'openRangeMarker'],
                                           ['start', 'end'],
                                           ['referenceDate', 'relativeDate']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.contains': {   'req_args': ['other'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.extractDay': {   'req_args': ['inputDate'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.extractMonth': {   'req_args': ['inputDate'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.extractWeekday': {   'req_args': ['inputDate'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.extractYear': {   'req_args': ['inputDate'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.fromDateString': {   'req_args': ['date'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.getDateString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.getEndDate': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.getStartDate': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isAfter': {   'req_args': ['dateString'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isCompatible': {   'req_args': ['date1', 'date2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isCompatibleDate': {   'req_args': ['other'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isDayCompatible': {   'req_args': ['other'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isMonthCompatible': {   'req_args': ['other'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isRange': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isUnparseable': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.isYearCompatible': {   'req_args': ['other'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'ISODateInstance.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\ISODateInstance.java'},
    'IdentityFunction.apply': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\IdentityFunction.java'},
    'IdentityHashSet': {   'req_args': [['expectedMaxSize'], ['c']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.add': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.clear': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.clone': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.contains': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.isEmpty': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.iterator': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.remove': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdentityHashSet.size': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IdentityHashSet.java'},
    'IdleTransition.apply': {   'req_args': ['state', ['state', 'scoreDelta']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\IdleTransition.java'},
    'IdleTransition.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\IdleTransition.java'},
    'IdleTransition.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\IdleTransition.java'},
    'IdleTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\IdleTransition.java'},
    'IdleTransition.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\IdleTransition.java'},
    'IfExistsNode': {   'req_args': ['name', 'invert', 'children'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\IfExistsNode.java'},
    'IfExistsNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\IfExistsNode.java'},
    'IndexedWord': {   'req_args': [   ['w'],
                                       ['w'],
                                       ['docID', 'sentenceIndex', 'index']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.after': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.backingLabel': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.before': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.beginPosition': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.compareTo': {   'req_args': ['w'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.containsKey': {   'req_args': ['key'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.copyCount': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.docID': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.endPosition': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.equals': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.factory': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.get': {   'req_args': ['key'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.getOriginal': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.getString': {   'req_args': ['key', ['key', 'def']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.hashCode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.index': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.isCopy': {   'req_args': ['otherWord'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.keySet': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.labelFactory': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.lemma': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.makeCopy': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.makeSoftCopy': {   'req_args': ['count', []],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.ner': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.originalText': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.pseudoPosition': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.remove': {   'req_args': ['key'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.sentIndex': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.set': {   'req_args': ['key', 'value'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setAfter': {   'req_args': ['after'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setBefore': {   'req_args': ['before'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setBeginPosition': {   'req_args': ['beginPos'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setCopyCount': {   'req_args': ['count'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setDocID': {   'req_args': ['docID'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setEndPosition': {   'req_args': ['endPos'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setFromString': {   'req_args': ['labelStr'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setIndex': {   'req_args': ['index'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setLemma': {   'req_args': ['lemma'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setNER': {   'req_args': ['ner'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setOriginalText': {   'req_args': ['originalText'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setPseudoPosition': {   'req_args': ['position'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setSentIndex': {   'req_args': ['sentIndex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setTag': {   'req_args': ['tag'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setValue': {   'req_args': ['value'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.setWord': {   'req_args': ['word'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.tag': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.toCopyIndex': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.toPrimes': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.toString': {   'req_args': [['format']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.value': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'IndexedWord.word': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\IndexedWord.java'},
    'InefficientSGDMinimizer': {   'req_args': [   ['SGDGain', 'batchSize'],
                                                   [   'SGDGain',
                                                       'batchSize',
                                                       'passes'],
                                                   [   'SGDGain',
                                                       'batchSize',
                                                       'passes',
                                                       'outputToFile'],
                                                   [   'SGDGain',
                                                       'batchSize',
                                                       'passes',
                                                       'maxTime'],
                                                   [   'SGDGain',
                                                       'batchSize',
                                                       'passes',
                                                       'maxTime',
                                                       'outputToFile']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\InefficientSGDMinimizer.java'},
    'InefficientSGDMinimizer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\InefficientSGDMinimizer.java'},
    'InefficientSGDMinimizer.setBatchSize': {   'req_args': ['batchSize'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\InefficientSGDMinimizer.java'},
    'InefficientSGDMinimizer.shutUp': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\InefficientSGDMinimizer.java'},
    'InefficientSGDMinimizer.tune': {   'req_args': [   'function',
                                                        'initial',
                                                        'msPerTest',
                                                        'gainLow',
                                                        'gainHigh',
                                                        [   'function',
                                                            'initial',
                                                            'msPerTest']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\InefficientSGDMinimizer.java'},
    'InfoTemplate': {   'req_args': [   'whomepage',
                                        'wacronym',
                                        'wname',
                                        'chomepage',
                                        'cacronym',
                                        'cname',
                                        'ct'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\InfoTemplate.java'},
    'InfoTemplate.equals': {   'req_args': ['obj'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\InfoTemplate.java'},
    'InfoTemplate.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\InfoTemplate.java'},
    'InfoTemplate.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\InfoTemplate.java'},
    'InlineXMLOutputter': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\InlineXMLOutputter.java'},
    'InlineXMLOutputter.print': {   'req_args': [   'annotation',
                                                    'stream',
                                                    'options'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\InlineXMLOutputter.java'},
    'InputDoc': {   'req_args': [   'anno',
                                    ['anno', 'docInfo'],
                                    ['anno', 'docInfo', 'goldMentions'],
                                    [   'anno',
                                        'docInfo',
                                        'goldMentions',
                                        'conllDoc']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\InputDoc.java'},
    'InputPanel': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.actionPerformed': {   'req_args': ['e'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.doError': {   'req_args': ['txt', 'e'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.enableTsurgeon': {   'req_args': ['enable'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.getHistoryList': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.getHistoryString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.getInstance': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.setHeadFinder': {   'req_args': ['hf'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.setNumRecentPatterns': {   'req_args': ['n'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.setScriptAndPattern': {   'req_args': [   'tregexPatternString',
                                                          'tsurgeonScriptString'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.stateChanged': {   'req_args': ['e'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.updateBrowseStats': {   'req_args': ['treeMatches'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.updateFoundStats': {   'req_args': [   'pattern',
                                                       'treeMatches',
                                                       'totalMatches'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.updateProgressBar': {   'req_args': ['progress'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InputPanel.useProgressBar': {   'req_args': ['useProgressBar'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\InputPanel.java'},
    'InsertNode': {   'req_args': ['child', 'l', ['t', 'l']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\InsertNode.java'},
    'InsertNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\InsertNode.java'},
    'InsertNode.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\InsertNode.java'},
    'IntArray': {   'req_args': ['array'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntArray.java'},
    'IntArray.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntArray.java'},
    'IntArray.get': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntArray.java'},
    'IntArray.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntArray.java'},
    'IntCounter': {   'req_args': [['mapFactory'], ['c']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.addAll': {   'req_args': ['counter'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.argmax': {   'req_args': ['tieBreaker', []],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.argmin': {   'req_args': ['tieBreaker', []],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.averageCount': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.clear': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.clone': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.containsKey': {   'req_args': ['key'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.decrementCount': {   'req_args': ['key', 'count', ['key']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.decrementCounts': {   'req_args': ['keys', 'count', ['keys']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.defaultReturnValue': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.doubleMax': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.entrySet': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.equals': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getCount': {   'req_args': ['key'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getCountAsString': {   'req_args': ['key'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getFactory': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getIntCount': {   'req_args': ['key'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getMapFactory': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.getNormalizedCount': {   'req_args': ['key'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.incrementCount': {   'req_args': [   'key',
                                                     'count',
                                                     ['key'],
                                                     ['key', 'value']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.incrementCounts': {   'req_args': ['keys', 'count', ['keys']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.isEmpty': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.iterator': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.keySet': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.keysAbove': {   'req_args': ['countThreshold'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.keysAt': {   'req_args': ['count'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.keysBelow': {   'req_args': ['countThreshold'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.max': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.min': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.prettyLog': {   'req_args': ['channels', 'description'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.remove': {   'req_args': ['key'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.removeAll': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.removeZeroCounts': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.setCount': {   'req_args': [   'key',
                                               'count',
                                               ['key', 's'],
                                               ['key', 'value']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.setCounts': {   'req_args': ['keys', 'count'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.setDefaultReturnValue': {   'req_args': ['rv', ['rv']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.size': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.subtractAll': {   'req_args': ['counter'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.toString': {   'req_args': [   [   'nf',
                                                   'preAppend',
                                                   'postAppend',
                                                   'keyValSeparator',
                                                   'itemSeparator'],
                                               ['nf']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.totalCount': {   'req_args': ['filter', []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.totalDoubleCount': {   'req_args': [['filter']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.totalIntCount': {   'req_args': [['filter']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntCounter.values': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\IntCounter.java'},
    'IntDependency': {   'req_args': [   'head',
                                         'arg',
                                         'leftHeaded',
                                         'distance',
                                         [   'headWord',
                                             'headTag',
                                             'argWord',
                                             'argTag',
                                             'leftHeaded',
                                             'distance']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntDependency.java'},
    'IntDependency.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntDependency.java'},
    'IntDependency.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntDependency.java'},
    'IntDependency.toString': {   'req_args': [['wordIndex', 'tagIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntDependency.java'},
    'IntPair': {   'req_args': [['src', 'trgt']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntPair.equals': {   'req_args': ['iO'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntPair.getCopy': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntPair.getSource': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntPair.getTarget': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntPair.hashCode': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntPair.java'},
    'IntQuadruple': {   'req_args': [['src', 'mid', 'trgt', 'trgt2']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntQuadruple.getCopy': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntQuadruple.getMiddle': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntQuadruple.getSource': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntQuadruple.getTarget': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntQuadruple.getTarget2': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntQuadruple.java'},
    'IntTaggedWord': {   'req_args': [   'word',
                                         'tag',
                                         [   's',
                                             'splitChar',
                                             'wordIndex',
                                             'tagIndex'],
                                         [   'wordString',
                                             'tagString',
                                             'wordIndex',
                                             'tagIndex']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.compareTo': {   'req_args': ['that'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.tag': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.tagString': {   'req_args': ['tagIndex'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.toLexicalEntry': {   'req_args': ['wordIndex', 'tagIndex'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.toString': {   'req_args': [   ['wordIndex', 'tagIndex'],
                                                  [   'arg',
                                                      'wordIndex',
                                                      'tagIndex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.toTaggedWord': {   'req_args': ['wordIndex', 'tagIndex'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.word': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTaggedWord.wordString': {   'req_args': ['wordIndex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IntTaggedWord.java'},
    'IntTriple': {   'req_args': [['src', 'mid', 'trgt']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTriple.java'},
    'IntTriple.getCopy': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTriple.java'},
    'IntTriple.getMiddle': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTriple.java'},
    'IntTriple.getSource': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTriple.java'},
    'IntTriple.getTarget': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTriple.java'},
    'IntTuple': {   'req_args': ['arr', ['num']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.compareTo': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.concat': {   'req_args': ['t1', 't2'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.elems': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.equals': {   'req_args': ['iO'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.get': {   'req_args': ['num'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.getCopy': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.getIntTuple': {   'req_args': ['num', ['integers']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.length': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.print': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.set': {   'req_args': ['num', 'val'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.shiftLeft': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntTuple.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntTuple.java'},
    'IntUni': {   'req_args': [['src']],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntUni.java'},
    'IntUni.add': {   'req_args': ['val'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntUni.java'},
    'IntUni.getCopy': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntUni.java'},
    'IntUni.getSource': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntUni.java'},
    'IntUni.setSource': {   'req_args': ['src'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntUni.java'},
    'Interner': {   'req_args': [['initialCapacity']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.clear': {   'req_args': [['initialCapacity']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.getGlobal': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.globalIntern': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.intern': {   'req_args': ['o', ['o']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Interner.java'},
    'Interner.internAll': {   'req_args': ['s'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.setGlobal': {   'req_args': ['interner'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'Interner.size': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interner.java'},
    'InterruptibleMulticoreWrapper': {   'req_args': [   'numThreads',
                                                         'processor',
                                                         'orderResults',
                                                         'timeout'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\InterruptibleMulticoreWrapper.java'},
    'InterruptibleMulticoreWrapper.awaitTermination': {   'req_args': [   'timeout',
                                                                          'unit'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\InterruptibleMulticoreWrapper.java'},
    'InterruptibleMulticoreWrapper.joinWithTimeout': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\InterruptibleMulticoreWrapper.java'},
    'Interval': {   'req_args': ['a', 'b', 'flags'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.checkFlagExclusiveSet': {   'req_args': ['flags', 'flag', 'mask'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.checkFlagSet': {   'req_args': ['flags', 'flag'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.checkMultipleBitSet': {   'req_args': ['flags'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.compareIntervalOrder': {   'req_args': ['other'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.contains': {   'req_args': ['p', ['other']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.containsOpen': {   'req_args': ['p'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.expand': {   'req_args': ['other'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.extractRelationSubflags': {   'req_args': ['flags', 'shift'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getBegin': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getEnd': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getInterval': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getMidPoint': {   'req_args': ['interval'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getRadius': {   'req_args': ['interval'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getRelation': {   'req_args': ['other'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.getRelationFlags': {   'req_args': ['other'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.includesBegin': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.includesEnd': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.intersect': {   'req_args': ['other'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.isIntervalComparable': {   'req_args': ['other'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.lengthEndpointsComparator': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.lengthScorer': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.overlaps': {   'req_args': ['other'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.toInterval': {   'req_args': ['a', 'b', ['a', 'b', 'flags']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'Interval.toValidInterval': {   'req_args': ['a', 'b', ['a', 'b', 'flags']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Interval.java'},
    'IntervalTree.add': {   'req_args': [   'target',
                                            ['node', 'target'],
                                            ['node', 'target', 'alpha']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.addNonNested': {   'req_args': ['target'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.addNonOverlapping': {   'req_args': ['target'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.balance': {   'req_args': [['node']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.check': {   'req_args': [['treeNode']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.clear': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.contains': {   'req_args': ['o', ['target']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.containsInterval': {   'req_args': [   'target',
                                                         'exact',
                                                         ['n', 'p', 'exact'],
                                                         [   'node',
                                                             'target',
                                                             'exact']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.containsValue': {   'req_args': ['node', 'target'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getLeftmostNode': {   'req_args': ['node'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getNode': {   'req_args': ['node', 'nodeIndex'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getNonNested': {   'req_args': [   'items',
                                                     'toIntervalFunc',
                                                     'compareFunc'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getNonOverlapping': {   'req_args': [   'items',
                                                          'toIntervalFunc',
                                                          [   'items',
                                                              'toIntervalFunc',
                                                              'compareFunc'],
                                                          [   'items',
                                                              'compareFunc'],
                                                          ['items']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getNonOverlappingMaxScore': {   'req_args': [   'items',
                                                                  'toIntervalFunc',
                                                                  'scoreFunc',
                                                                  [   'items',
                                                                      'scoreFunc']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getOverlapping': {   'req_args': [   'target',
                                                       ['n', 'p'],
                                                       ['n', 'target'],
                                                       ['n', 'p', 'result'],
                                                       [   'node',
                                                           'target',
                                                           'result']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.getRightmostNode': {   'req_args': ['node'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.height': {   'req_args': [['node']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.isAlphaBalanced': {   'req_args': ['node', 'alpha'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.isEmpty': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.iterator': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.leftRotate': {   'req_args': ['oldRoot'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.overlaps': {   'req_args': [   'target',
                                                 ['n', 'p'],
                                                 ['node', 'target']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.remove': {   'req_args': [   'o',
                                               ['target'],
                                               ['node', 'target']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.removeAll': {   'req_args': ['c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.retainAll': {   'req_args': ['c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.rightRotate': {   'req_args': ['oldRoot'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.rotateUp': {   'req_args': ['node', 'target'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.size': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'IntervalTree.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IntervalTree.java'},
    'InvertedIndexByTokens': {   'req_args': [   'props',
                                                 'stopWords',
                                                 'transformSentenceToString',
                                                 [   'props',
                                                     'stopWords',
                                                     'transformSentenceToString',
                                                     'index']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.add': {   'req_args': ['sents', 'addProcessedText'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.createIndex': {   'req_args': [   'sentences',
                                                             'props',
                                                             'stopWords',
                                                             'dir',
                                                             'transformCoreLabeltoString'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.finishUpdating': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.getFileSentIds': {   'req_args': ['relevantWords'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.getFileSentIdsFromPats': {   'req_args': ['pats'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.loadIndex': {   'req_args': [   'props',
                                                           'stopwords',
                                                           'dir',
                                                           'transformSentenceToString'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.queryIndex': {   'req_args': ['patterns'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.saveIndex': {   'req_args': ['dir'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'InvertedIndexByTokens.update': {   'req_args': ['tokens', 'sentid'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\InvertedIndexByTokens.java'},
    'ItalianTreebankLanguagePack.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\italian\\ItalianTreebankLanguagePack.java'},
    'ItalianTreebankParserParams': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.collinizer': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.display': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.transformTree': {   'req_args': ['t', 'root'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'ItalianTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ItalianTreebankParserParams.java'},
    'Item': {   'req_args': ['exhaustiveTest', ['item']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Item.java'},
    'Item.isEdge': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Item.java'},
    'Item.isPostHook': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Item.java'},
    'Item.isPreHook': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Item.java'},
    'Item.score': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Item.java'},
    'IterableIterator': {   'req_args': ['it', ['iterable'], ['stream']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'IterableIterator.hasNext': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'IterableIterator.iterator': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'IterableIterator.next': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'IterableIterator.remove': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'IterableIterator.spliterator': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\IterableIterator.java'},
    'Iterables': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.addAll': {   'req_args': ['iter', 'c'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.asArrayList': {   'req_args': ['iter'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.asCollection': {   'req_args': ['iter', 'cf'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.asHashSet': {   'req_args': ['iter'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.cast': {   'req_args': ['iterable', 'type'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.chain': {   'req_args': ['iterables', ['iterables'], ['arrays']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.drop': {   'req_args': [   'array',
                                          'toDrop',
                                          ['iterable', 'toDrop']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.filter': {   'req_args': ['iterable', 'accept'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.flatMap': {   'req_args': ['iterables', 'trans'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.group': {   'req_args': ['iterable', 'comparator'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.merge': {   'req_args': [   'iter1',
                                           'iter2',
                                           'comparator',
                                           ['iter1', 'iter2', 'comparator'],
                                           [   'iter1',
                                               'iter2',
                                               'iter3',
                                               'comparatorA',
                                               'comparatorB'],
                                           [   'iter1',
                                               'iter2',
                                               'iter3',
                                               'comparator']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.sample': {   'req_args': ['items', 'n', 'k', 'random'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.take': {   'req_args': ['array', 'max', ['iterable', 'max']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.toString': {   'req_args': ['iter', 'glue'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.transform': {   'req_args': ['iterable', 'function'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'Iterables.zip': {   'req_args': [   'iter1',
                                         'iter2',
                                         ['iter', 'array'],
                                         ['array', 'iter'],
                                         ['array1', 'array2'],
                                         ['iter1', 'iter2']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Iterables.java'},
    'IterativeCKYPCFGParser': {   'req_args': [   'bg',
                                                  'ug',
                                                  'lex',
                                                  'op',
                                                  'stateIndex',
                                                  'wordIndex',
                                                  'tagIndex'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\IterativeCKYPCFGParser.java'},
    'JFlexDummyLexer': {   'req_args': ['in'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.getYYEOF': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.pushBack': {   'req_args': ['n'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yyatEOF': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yybegin': {   'req_args': ['newState'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yycharat': {   'req_args': ['position'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yyclose': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yylength': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yylex': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yypushback': {   'req_args': ['number'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yyreset': {   'req_args': ['reader'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yystate': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JFlexDummyLexer.yytext': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\JFlexDummyLexer.java'},
    'JJTTsurgeonParserState': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.clearNodeScope': {   'req_args': ['n'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.closeNodeScope': {   'req_args': [   'n',
                                                                 'num',
                                                                 [   'n',
                                                                     'condition']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.nodeArity': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.nodeCreated': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.openNodeScope': {   'req_args': ['n'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.peekNode': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.popNode': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.pushNode': {   'req_args': ['n'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.reset': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JJTTsurgeonParserState.rootNode': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\JJTTsurgeonParserState.java'},
    'JSONAnnotationReader.extractSubList': {   'req_args': ['array', 'list'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.read': {   'req_args': ['text'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toAnnotation': {   'req_args': ['json'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toCorefChain': {   'req_args': ['array', 'cid'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toCorefMention': {   'req_args': ['json', 'cid'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toDependencyParse': {   'req_args': ['array'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toEntityMention': {   'req_args': ['json'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toList': {   'req_args': ['array', 'f'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toMap': {   'req_args': [   'array',
                                                      'keyf',
                                                      'valuef',
                                                      ['m', 'keyf', 'valuef'],
                                                      ['m', 'pairf']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toNullable': {   'req_args': ['obj', 'f'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toNullableList': {   'req_args': ['array', 'f'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toNullableMap': {   'req_args': ['json', 'pairf'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toQuotation': {   'req_args': ['json'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toRelationTriple': {   'req_args': ['json', 'tokens'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toSection': {   'req_args': ['json', 'sentences'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toSentence': {   'req_args': ['json'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toTimex': {   'req_args': ['json'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONAnnotationReader.toToken': {   'req_args': ['json'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONAnnotationReader.java'},
    'JSONOutputter.jsonPrint': {   'req_args': [   'annotation',
                                                   ['annotation', 'os'],
                                                   [   'annotation',
                                                       'os',
                                                       'pipeline'],
                                                   [   'annotation',
                                                       'os',
                                                       'options']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONOutputter.java'},
    'JSONOutputter.print': {   'req_args': ['doc', 'target', 'options'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\JSONOutputter.java'},
    'JarFileChooser': {   'req_args': ['pattern', 'panel'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ui\\JarFileChooser.java'},
    'JarFileChooser.getFiles': {   'req_args': ['jarFile'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ui\\JarFileChooser.java'},
    'JarFileChooser.show': {   'req_args': ['filename', 'location'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ui\\JarFileChooser.java'},
    'JarFileChooser.showListSelectionDialog': {   'req_args': [   'files',
                                                                  'location'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ui\\JarFileChooser.java'},
    'JavaUtilLoggingAdaptor': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\JavaUtilLoggingAdaptor.java'},
    'JavaUtilLoggingAdaptor.adapt': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\JavaUtilLoggingAdaptor.java'},
    'JavaUtilLoggingAdaptor.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\JavaUtilLoggingAdaptor.java'},
    'JavaUtilLoggingHandler.print': {   'req_args': ['channel', 'line'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\JavaUtilLoggingHandler.java'},
    'JodaTimeUtils': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.addForce': {   'req_args': ['p', 'd', 'scalar'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.combine': {   'req_args': ['p1', 'p2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.combineMoreGeneralFields': {   'req_args': [   'p1',
                                                                  'p2',
                                                                  [   'p1',
                                                                      'p2',
                                                                      'mgf']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.discardMoreSpecificFields': {   'req_args': [   'p',
                                                                   'd',
                                                                   ['p', 'dft'],
                                                                   [   'p',
                                                                       'dft',
                                                                       'chronology']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.getInstant': {   'req_args': ['p', ['p', 'timezone']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.getPartial': {   'req_args': ['t', 'p'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.getSupportedDurationFields': {   'req_args': ['p'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.getUnsupportedDurationPeriod': {   'req_args': [   'p',
                                                                      'offset'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.isCompatible': {   'req_args': ['p1', 'p2'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.isMoreGeneral': {   'req_args': ['df1', 'df2', 'chronology'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.isMoreSpecific': {   'req_args': [   'df1',
                                                        'df2',
                                                        'chronology'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.maximumValue': {   'req_args': ['type', 'reference'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.minimumValue': {   'req_args': ['type', 'reference'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.padMoreSpecificFields': {   'req_args': ['p', 'granularity'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.resolveDowToDay': {   'req_args': ['p1', 'p2', ['p']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.resolveWeek': {   'req_args': ['p1', 'p2', ['p']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.timexDateValue': {   'req_args': [   'begin',
                                                        'end',
                                                        [   'begin',
                                                            'end',
                                                            'opts']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.timexDurationValue': {   'req_args': [   'duration',
                                                            'opts',
                                                            ['duration'],
                                                            ['begin', 'end']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.timexTimeValue': {   'req_args': ['time'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JodaTimeUtils.withWeekYear': {   'req_args': ['p'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JodaTimeUtils.java'},
    'JointParser': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParser.java'},
    'JointParser.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParser.java'},
    'JointParsingModel.getAnnotatedBinaryTreebankFromTreebank': {   'req_args': [   'trainTreebank'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JointParsingModel.getParserDataFromTreebank': {   'req_args': [   'trainTreebank'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JointParsingModel.run': {   'req_args': [   'trainTreebankFile',
                                                 'testTreebankFile',
                                                 'inputStream'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JointParsingModel.setMaxEvalSentLen': {   'req_args': ['maxSentLen'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JointParsingModel.setSerInput': {   'req_args': ['ser_input'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JointParsingModel.setVerbose': {   'req_args': ['b'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\parsesegment\\JointParsingModel.java'},
    'JollyDayHolidays.bind': {   'req_args': ['env'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JollyDayHolidays.java'},
    'JollyDayHolidays.getAllHolidays': {   'req_args': [   'holidays',
                                                           'allHolidays',
                                                           [   'config',
                                                               'allHolidays'],
                                                           ['config']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JollyDayHolidays.java'},
    'JollyDayHolidays.getAllHolidaysCVMap': {   'req_args': [   'allHolidays',
                                                                ['config']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JollyDayHolidays.java'},
    'JollyDayHolidays.getAllHolidaysMap': {   'req_args': [   'allHolidays',
                                                              ['config']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JollyDayHolidays.java'},
    'JollyDayHolidays.init': {   'req_args': ['prefix', 'props'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\JollyDayHolidays.java'},
    'KBPAnnotator': {   'req_args': ['name', 'props', ['properties']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPAnnotator.annotate': {   'req_args': ['annotation'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPAnnotator.corefChainToKBPMentions': {   'req_args': [   'corefChain',
                                                                'ann',
                                                                'kbpMentions'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPAnnotator.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPAnnotator.requirementsSatisfied': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPAnnotator.requires': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\KBPAnnotator.java'},
    'KBPBasicSpanishCorefSystem.approximateEntityMatchScore': {   'req_args': [   'higherGloss',
                                                                                  'lowerGloss'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.bestEntityMention': {   'req_args': [   'entityMentionCluster'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.canonicalMentionMapFromEntityMentions': {   'req_args': [   'entityMentions'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.clusterEntityMentions': {   'req_args': [   'entityMentions'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.createCanonicalMentionMap': {   'req_args': [   'entityMentionClusters'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.firstNameMatch': {   'req_args': [   'firstNameOne',
                                                                     'firstNameTwo'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.moreCanonicalMention': {   'req_args': [   'entityMention',
                                                                           'potentialCanonicalMention'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.noSpecialChars': {   'req_args': ['original'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPBasicSpanishCorefSystem.wrapEntityMentions': {   'req_args': [   'entityMentions'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPBasicSpanishCorefSystem.java'},
    'KBPEnsembleExtractor': {   'req_args': ['extractors'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPEnsembleExtractor.java'},
    'KBPEnsembleExtractor.classify': {   'req_args': ['input'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPEnsembleExtractor.java'},
    'KBPEnsembleExtractor.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPEnsembleExtractor.java'},
    'KBPSemgrexExtractor': {   'req_args': [   'semgrexdir',
                                               ['semgrexdir', 'verbose']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPSemgrexExtractor.java'},
    'KBPSemgrexExtractor.classify': {   'req_args': ['input'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPSemgrexExtractor.java'},
    'KBPSemgrexExtractor.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPSemgrexExtractor.java'},
    'KBPStatisticalExtractor': {   'req_args': ['classifier'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPStatisticalExtractor.java'},
    'KBPStatisticalExtractor.classify': {   'req_args': ['input'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPStatisticalExtractor.java'},
    'KBPStatisticalExtractor.features': {   'req_args': ['input'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPStatisticalExtractor.java'},
    'KBPStatisticalExtractor.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPStatisticalExtractor.java'},
    'KBPStatisticalExtractor.trainMultinomialClassifier': {   'req_args': [   'dataset',
                                                                              'featureThreshold',
                                                                              'sigma'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPStatisticalExtractor.java'},
    'KBPTokensregexExtractor': {   'req_args': [   'tokensregexDir',
                                                   [   'tokensregexDir',
                                                       'verbose']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPTokensregexExtractor.java'},
    'KBPTokensregexExtractor.classify': {   'req_args': ['input'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPTokensregexExtractor.java'},
    'KBPTokensregexExtractor.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\KBPTokensregexExtractor.java'},
    'KBestSequenceFinder.bestSequence': {   'req_args': ['ts'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\KBestSequenceFinder.java'},
    'KBestSequenceFinder.kBestSequences': {   'req_args': ['ts', 'k'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\KBestSequenceFinder.java'},
    'KNNClassifier': {   'req_args': ['k', 'weightedVotes', 'l2Normalize'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifier.java'},
    'KNNClassifier.classOf': {   'req_args': ['example'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifier.java'},
    'KNNClassifier.labels': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifier.java'},
    'KNNClassifier.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifier.java'},
    'KNNClassifier.scoresOf': {   'req_args': ['datum'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifier.java'},
    'KNNClassifierFactory': {   'req_args': [   'k',
                                                'weightedVotes',
                                                'l2NormalizeVectors'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifierFactory.java'},
    'KNNClassifierFactory.train': {   'req_args': [   'instances',
                                                      ['vectors', 'labelMap'],
                                                      ['vecBag']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\KNNClassifierFactory.java'},
    'KNNSceneGraphParser': {   'req_args': ['modelPath'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\KNNSceneGraphParser.java'},
    'KNNSceneGraphParser.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\KNNSceneGraphParser.java'},
    'KNNSceneGraphParser.parse': {   'req_args': [   'sg',
                                                     ['tokens', 'trainImages']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\KNNSceneGraphParser.java'},
    'KillAllIncomingEdges': {   'req_args': ['nodeName'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\KillAllIncomingEdges.java'},
    'KillAllIncomingEdges.evaluate': {   'req_args': ['sg', 'sm'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\KillAllIncomingEdges.java'},
    'KillAllIncomingEdges.toEditString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\KillAllIncomingEdges.java'},
    'KillNonRootedNodes.evaluate': {   'req_args': ['sg', 'sm'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\KillNonRootedNodes.java'},
    'KillNonRootedNodes.toEditString': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\KillNonRootedNodes.java'},
    'LDCPosMapper': {   'req_args': [['addDeterminer']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LDCPosMapper.canChangeEncoding': {   'req_args': ['parent', 'element'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LDCPosMapper.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LDCPosMapper.map': {   'req_args': ['posTag', 'terminal'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LDCPosMapper.setup': {   'req_args': ['path', 'options'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LDCPosMapper.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LDCPosMapper.java'},
    'LabelDictionary': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LabelDictionary.java'},
    'LabelDictionary.getConstrainedSet': {   'req_args': ['observation'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LabelDictionary.java'},
    'LabelDictionary.increment': {   'req_args': ['observation', 'label'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LabelDictionary.java'},
    'LabelDictionary.isConstrained': {   'req_args': ['observation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LabelDictionary.java'},
    'LabelDictionary.lock': {   'req_args': ['threshold', 'labelIndex'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LabelDictionary.java'},
    'LabeledATBDataset.build': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\LabeledATBDataset.java'},
    'LabeledChunkIdentifier.getAnnotatedChunks': {   'req_args': [   'tokens',
                                                                     'totalTokensOffset',
                                                                     'textKey',
                                                                     'labelKey',
                                                                     [   'tokens',
                                                                         'totalTokensOffset',
                                                                         'textKey',
                                                                         'labelKey',
                                                                         'checkTokensCompatible'],
                                                                     [   'tokens',
                                                                         'totalTokensOffset',
                                                                         'textKey',
                                                                         'labelKey',
                                                                         'tokenChunkKey',
                                                                         'tokenLabelKey'],
                                                                     [   'tokens',
                                                                         'totalTokensOffset',
                                                                         'textKey',
                                                                         'labelKey',
                                                                         'tokenChunkKey',
                                                                         'tokenLabelKey',
                                                                         'checkTokensCompatible']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.getDefaultNegTag': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.getDefaultPosTag': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.getNegLabel': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.getTagType': {   'req_args': ['label'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.isEndOfChunk': {   'req_args': ['prev', 'cur'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.isIgnoreProvidedTag': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.isStartOfChunk': {   'req_args': ['prev', 'cur'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.setDefaultNegTag': {   'req_args': [   'defaultNegTag'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.setDefaultPosTag': {   'req_args': [   'defaultPosTag'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.setIgnoreProvidedTag': {   'req_args': [   'ignoreProvidedTag'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledChunkIdentifier.setNegLabel': {   'req_args': ['negLabel'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LabeledChunkIdentifier.java'},
    'LabeledConstituent': {   'req_args': [   ['start', 'end'],
                                              ['start', 'end', 'label'],
                                              ['start', 'end', 'stringValue']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.constituentFactory': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.factory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.label': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.labelFactory': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.setFromString': {   'req_args': ['labelStr'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledConstituent.setLabel': {   'req_args': ['label'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledConstituent.java'},
    'LabeledScoredConstituent': {   'req_args': [   ['start', 'end'],
                                                    [   'start',
                                                        'end',
                                                        'label',
                                                        'score']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituent.constituentFactory': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituent.factory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituent.labelFactory': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituent.score': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituent.setScore': {   'req_args': ['score'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituent.java'},
    'LabeledScoredConstituentFactory.newConstituent': {   'req_args': [   'start',
                                                                          'end',
                                                                          [   'start',
                                                                              'end',
                                                                              'label',
                                                                              'score']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredConstituentFactory.java'},
    'LabeledScoredTreeFactory': {   'req_args': [['lf']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeFactory.java'},
    'LabeledScoredTreeFactory.newLeaf': {   'req_args': ['word', ['label']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeFactory.java'},
    'LabeledScoredTreeFactory.newTreeNode': {   'req_args': [   'parent',
                                                                'children',
                                                                [   'parentLabel',
                                                                    'children']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeFactory.java'},
    'LabeledScoredTreeNode': {   'req_args': [   ['label'],
                                                 ['label', 'score'],
                                                 [   'label',
                                                     'daughterTreesList']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.children': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.factory': {   'req_args': [['lf']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.label': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.nodeString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.score': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.setChildren': {   'req_args': ['children'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.setLabel': {   'req_args': ['label'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.setScore': {   'req_args': ['score'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeNode.treeFactory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeNode.java'},
    'LabeledScoredTreeReaderFactory': {   'req_args': [   ['lf'],
                                                          ['tm'],
                                                          ['lf', 'tm']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeReaderFactory.java'},
    'LabeledScoredTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LabeledScoredTreeReaderFactory.java'},
    'LabeledWord': {   'req_args': [['word'], ['word', 'tag'], ['word', 'tag']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LabeledWord.factory': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LabeledWord.labelFactory': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LabeledWord.setTag': {   'req_args': ['tag'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LabeledWord.tag': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LabeledWord.toString': {   'req_args': [['divider']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\LabeledWord.java'},
    'LambdaSolve': {   'req_args': ['p1', 'eps1', 'nerr1', ['filename'], []],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.GainCompute': {   'req_args': ['f', 'errorGain'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.checkCorrectness': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.divide': {   'req_args': ['first', 'second'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.expectedValue': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.getDerivatives': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.getDerivativesExpectedValue': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.getDerivativesLossDomination': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.getDerivativesNeg': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.improvedIterative': {   'req_args': [['iters']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.logLikelihood': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.logLikelihoodNeg': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.logLikelihoodScratch': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.lossDomination': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.pcond': {   'req_args': ['y', 'x'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.print': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.readL': {   'req_args': ['filename'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.read_lambdas': {   'req_args': ['rf'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.save_lambdas': {   'req_args': ['filename', ['rf', 'lambdas']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.setBinary': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.setNonBinary': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolve.transformValues': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\iis\\LambdaSolve.java'},
    'LambdaSolveTagger': {   'req_args': [   'p1',
                                             'eps1',
                                             'fnumArr',
                                             ['dataStream'],
                                             ['lambda']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\LambdaSolveTagger.java'},
    'LambdaSolveTagger.checkCorrectness': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\LambdaSolveTagger.java'},
    'LanguageInfo': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.getLanguageFromString': {   'req_args': ['inputString'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.getLanguageProperties': {   'req_args': ['inputString'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.getLanguagePropertiesFile': {   'req_args': ['inputString'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.isSegmenterLanguage': {   'req_args': [   'language',
                                                            ['inputString']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.isStanfordCoreNLPSupportedLang': {   'req_args': ['lang'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'LanguageInfo.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\LanguageInfo.java'},
    'Lattice': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.addBoundary': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.addConstraint': {   'req_args': ['c'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.addEdge': {   'req_args': ['e'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.getConstraints': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.getEdgesOverSpan': {   'req_args': ['start', 'end'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.getNumEdges': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.getNumNodes': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.iterator': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.setEdge': {   'req_args': ['id', 'e'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'Lattice.toString': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Lattice.java'},
    'LatticeEdge': {   'req_args': ['word', 'weight', 'start', 'end'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeEdge.getAttr': {   'req_args': ['key'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeEdge.setAttr': {   'req_args': ['key', 'value'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeEdge.setLabel': {   'req_args': ['l'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeEdge.setWeight': {   'req_args': ['w'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeEdge.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeEdge.java'},
    'LatticeXMLReader': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeXMLReader.java'},
    'LatticeXMLReader.getNumLattices': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeXMLReader.java'},
    'LatticeXMLReader.iterator': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeXMLReader.java'},
    'LatticeXMLReader.load': {   'req_args': ['stream', 'isObject'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeXMLReader.java'},
    'LatticeXMLReader.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LatticeXMLReader.java'},
    'Lazy.cache': {   'req_args': ['fn'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.from': {   'req_args': ['definedElement'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.get': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.getIfDefined': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.isCache': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.isGarbageCollected': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'Lazy.of': {   'req_args': ['fn'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Lazy.java'},
    'LeafAncestorEval': {   'req_args': ['str'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\LeafAncestorEval.java'},
    'LeafAncestorEval.display': {   'req_args': ['verbose', 'pw'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\LeafAncestorEval.java'},
    'LeafAncestorEval.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\LeafAncestorEval.java'},
    'LeafAncestorEval.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\LeafAncestorEval.java'},
    'LearnImportantFeatures.getRandomBoolean': {   'req_args': ['random', 'p'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\LearnImportantFeatures.java'},
    'LearnImportantFeatures.getTopFeatures': {   'req_args': [   'sentsf',
                                                                 'perSelectRand',
                                                                 'perSelectNeg',
                                                                 'externalFeatureWeightsFileLabel'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\LearnImportantFeatures.java'},
    'LearnImportantFeatures.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\LearnImportantFeatures.java'},
    'LearnImportantFeatures.setUp': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\LearnImportantFeatures.java'},
    'LeastRecentlyUsedCache': {   'req_args': ['maxSize'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\LeastRecentlyUsedCache.java'},
    'LeastRecentlyUsedCache.add': {   'req_args': ['key', 'value'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\LeastRecentlyUsedCache.java'},
    'LeastRecentlyUsedCache.getOrDefault': {   'req_args': [   'key',
                                                               'defaultValue'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\LeastRecentlyUsedCache.java'},
    'LeastRecentlyUsedCache.size': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\LeastRecentlyUsedCache.java'},
    'LeftHeadFinder.determineHead': {   'req_args': ['t', ['t', 'parent']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LeftHeadFinder.java'},
    'LengthTreeFilter': {   'req_args': ['length'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LengthTreeFilter.java'},
    'LengthTreeFilter.test': {   'req_args': ['tree'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\LengthTreeFilter.java'},
    'LexerTokenizer': {   'req_args': ['l', ['l', 'r']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerTokenizer.java'},
    'LexerTokenizer.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerTokenizer.java'},
    'LexerUtils': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.asciiQuotes': {   'req_args': ['in'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.escapeChar': {   'req_args': ['s', 'c'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.handleDashes': {   'req_args': ['tok', 'dashesStyle'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.handleEllipsis': {   'req_args': ['tok', 'ellipsesStyle'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.handleQuotes': {   'req_args': [   'tok',
                                                   'probablyLeft',
                                                   'quoteStyle'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.minimallyNormalizeCurrency': {   'req_args': ['in'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.normalizeAmp': {   'req_args': ['in'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.normalizeCurrency': {   'req_args': ['in'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.normalizeFractions': {   'req_args': [   'normalizeFractions',
                                                         'escapeForwardSlashAsterisk',
                                                         'in'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.pennNormalizeParens': {   'req_args': [   'input',
                                                          'normalizeParentheses'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.processCp1252misc': {   'req_args': ['arg'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexerUtils.removeSoftHyphens': {   'req_args': ['in'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LexerUtils.java'},
    'LexicalChainMatch': {   'req_args': [[]],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\LexicalChainMatch.java'},
    'LexicalizedParser': {   'req_args': [   'lex',
                                             'bg',
                                             'ug',
                                             'dg',
                                             'stateIndex',
                                             'wordIndex',
                                             'tagIndex',
                                             'op'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.buildTrainBinarizer': {   'req_args': ['op'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.buildTrainTransformer': {   'req_args': [   'op',
                                                                   [   'op',
                                                                       'binarizer']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.copyLexicalizedParser': {   'req_args': ['parser'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.defaultCoreNLPFlags': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getAnnotatedBinaryTreebankFromTreebank': {   'req_args': [   'trainTreebank',
                                                                                    'secondaryTreebank',
                                                                                    'tuneTreebank',
                                                                                    'op'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getExtraEvals': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getLexicon': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getOp': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getParserFromFile': {   'req_args': [   'parserFileOrUrl',
                                                               'op'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getParserFromSerializedFile': {   'req_args': [   'serializedFileOrUrl'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getParserFromTreebank': {   'req_args': [   'trainTreebank',
                                                                   'secondaryTrainTreebank',
                                                                   'weight',
                                                                   'compactor',
                                                                   'op',
                                                                   'tuneTreebank',
                                                                   'extraTaggedWords'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getParserQueryEvals': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getTLPParams': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.getTreePrint': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.lexicalizedParserQuery': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.loadModel': {   'req_args': [   ['op', 'extraFlags'],
                                                       [   'parserFileOrUrl',
                                                           'extraFlags'],
                                                       [   'parserFileOrUrl',
                                                           'extraFlags'],
                                                       [   'parserFileOrUrl',
                                                           'op',
                                                           'extraFlags'],
                                                       ['ois']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.parse': {   'req_args': ['lst'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.parseMultiple': {   'req_args': [   'sentences',
                                                           [   'sentences',
                                                               'nthreads']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.parseStrings': {   'req_args': ['lst'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.parseTree': {   'req_args': ['sentence'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.parserQuery': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.requiresTags': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.saveParserToSerialized': {   'req_args': ['filename'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.saveParserToTextFile': {   'req_args': ['filename'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.setOptionFlags': {   'req_args': ['flags'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.trainFromTreebank': {   'req_args': [   'trainTreebank',
                                                               'compactor',
                                                               'op',
                                                               [   'treebankPath',
                                                                   'filt',
                                                                   'op'],
                                                               [   'trainTreebank',
                                                                   'op']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParser.treebankLanguagePack': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParser.java'},
    'LexicalizedParserClient': {   'req_args': ['host', 'port'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.getDependencies': {   'req_args': [   'query',
                                                                   'mode'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.getLemmas': {   'req_args': ['query'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.getParse': {   'req_args': ['query', 'binarized'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.getTokenizedText': {   'req_args': ['query'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.getTree': {   'req_args': ['query'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserClient.sendQuit': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserClient.java'},
    'LexicalizedParserQuery': {   'req_args': ['parser'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestDependencyParse': {   'req_args': [   [   'debinarize']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestFactoredParse': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestPCFGParse': {   'req_args': [   [   'stripSubcategories']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestPCFGParses': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestParse': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getBestScore': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getDependencyParser': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getFactoredParser': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getKBestPCFGParses': {   'req_args': ['k'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getKBestParses': {   'req_args': ['k'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getKGoodFactoredParses': {   'req_args': ['k'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getPCFGParser': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getPCFGScore': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.getTreePrint': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.hasFactoredParse': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.originalSentence': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parse': {   'req_args': ['sentence'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseAndReport': {   'req_args': [   'sentence',
                                                                 'pwErr'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseFallback': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseNoMemory': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseSkipped': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseSucceeded': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.parseUnparsable': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.restoreOriginalWords': {   'req_args': ['tree'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.saidMemMessage': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserQuery.setConstraints': {   'req_args': ['constraints'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LexicalizedParserQuery.java'},
    'LexicalizedParserServer': {   'req_args': [   'port',
                                                   'parserModel',
                                                   [   'port',
                                                       'parserModel',
                                                       'taggerModel'],
                                                   ['port', 'parser']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleDependencies': {   'req_args': [   'arg',
                                                                      'outStream',
                                                                      'commandArgs'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleLemma': {   'req_args': ['arg', 'outStream'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleParse': {   'req_args': [   'arg',
                                                               'outStream',
                                                               'binarized'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleQuit': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleTokenize': {   'req_args': [   'arg',
                                                                  'outStream'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.handleTree': {   'req_args': ['arg', 'outStream'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.listen': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LexicalizedParserServer.processRequest': {   'req_args': ['clientSocket'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\server\\LexicalizedParserServer.java'},
    'LibSVMReaderAndWriter.getIterator': {   'req_args': ['r'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\LibSVMReaderAndWriter.java'},
    'LibSVMReaderAndWriter.init': {   'req_args': ['flags'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\LibSVMReaderAndWriter.java'},
    'LibSVMReaderAndWriter.printAnswers': {   'req_args': ['doc', 'out'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\LibSVMReaderAndWriter.java'},
    'LineIterator': {   'req_args': ['r', ['r', 'op']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\LineIterator.java'},
    'LineIterator.getFactory': {   'req_args': [['op']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\LineIterator.java'},
    'LineIterator.hasNext': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\LineIterator.java'},
    'LineIterator.next': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\LineIterator.java'},
    'LineIterator.peek': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\LineIterator.java'},
    'LinearClassifier': {   'req_args': [   [   'weights',
                                                'featureIndex',
                                                'labelIndex'],
                                            [   'weights',
                                                'featureIndex',
                                                'labelIndex',
                                                'thresholds'],
                                            ['weights', 'weightIndex'],
                                            ['weightCounter'],
                                            ['weightCounter', 'thresholdsC']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.adaptWeights': {   'req_args': ['adapt', 'lcf'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.classOf': {   'req_args': ['example', ['example']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.dump': {   'req_args': [['pw']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.dumpSorted': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.featureIndex': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.features': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.getFeatureCount': {   'req_args': [   'threshold',
                                                            'useMagnitude',
                                                            [   'labels',
                                                                'threshold',
                                                                'useMagnitude']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.getTopFeatures': {   'req_args': [   'threshold',
                                                           'useMagnitude',
                                                           'numFeatures',
                                                           [   'labels',
                                                               'threshold',
                                                               'useMagnitude',
                                                               'numFeatures',
                                                               'descending']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.justificationOf': {   'req_args': [   'example',
                                                            ['example', 'pw'],
                                                            [   'example',
                                                                'pw',
                                                                'sorted'],
                                                            [   'example',
                                                                'pw',
                                                                'printer'],
                                                            [   'example',
                                                                'pw',
                                                                'printer',
                                                                'sortedByFeature']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.labelIndex': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.labels': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.logProbabilityOf': {   'req_args': [   'example',
                                                             ['features'],
                                                             ['example']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.probabilityOf': {   'req_args': [   'example',
                                                          ['example'],
                                                          ['features']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.readClassifier': {   'req_args': ['loadPath'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.saveToFilename': {   'req_args': ['file'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.scoreOf': {   'req_args': ['example', 'label'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.scoresOf': {   'req_args': [   'example',
                                                     ['features'],
                                                     ['example'],
                                                     [   'example',
                                                         'possibleLabels']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.setWeights': {   'req_args': ['newWeights'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.toAllWeightsString': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.toBiggestWeightFeaturesString': {   'req_args': [   'useMagnitude',
                                                                          'numFeatures',
                                                                          'printDescending'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.toDistributionString': {   'req_args': ['threshold'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.toHistogramString': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.toString': {   'req_args': [['style', 'param']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.topFeaturesToString': {   'req_args': ['topFeatures'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.totalSize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.weight': {   'req_args': ['feature', 'label'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.weights': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.weightsAsMapOfCounters': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifier.writeClassifier': {   'req_args': [   'classifier',
                                                            'serializePath'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifier.java'},
    'LinearClassifierFactory': {   'req_args': [   ['min'],
                                                   ['min'],
                                                   ['min', 'tol', 'useSum'],
                                                   ['min', 'tol', 'useSum'],
                                                   ['tol', 'useSum', 'sigma'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'sigma'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'sigma'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma'],
                                                   [   'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma',
                                                       'epsilon'],
                                                   [   'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma',
                                                       'epsilon',
                                                       'mem'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma',
                                                       'epsilon'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'prior',
                                                       'sigma',
                                                       'epsilon'],
                                                   [   'min',
                                                       'tol',
                                                       'useSum',
                                                       'logPrior'],
                                                   [   'minimizerCreator',
                                                       'tol',
                                                       'useSum',
                                                       'logPrior']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.adaptWeights': {   'req_args': [   'origWeights',
                                                                'adaptDataset'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.crossValidateSetSigma': {   'req_args': [   'dataset',
                                                                         [   'dataset',
                                                                             'kfold'],
                                                                         [   'dataset',
                                                                             'kfold',
                                                                             'scorer'],
                                                                         [   'dataset',
                                                                             'kfold',
                                                                             'minimizer'],
                                                                         [   'dataset',
                                                                             'kfold',
                                                                             'scorer',
                                                                             'minimizer']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.getClassifierCreator': {   'req_args': ['dataset'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.getSigma': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.heldOutSetSigma': {   'req_args': [   'train',
                                                                   [   'train',
                                                                       'scorer'],
                                                                   [   'train',
                                                                       'dev'],
                                                                   [   'train',
                                                                       'dev',
                                                                       'scorer'],
                                                                   [   'train',
                                                                       'dev',
                                                                       'minimizer'],
                                                                   [   'trainSet',
                                                                       'devSet',
                                                                       'scorer',
                                                                       'minimizer']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.loadFromFilename': {   'req_args': ['file'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.resetWeight': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setEpsilon': {   'req_args': ['eps'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setEvaluators': {   'req_args': [   'iters',
                                                                 'evaluators'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setHeldOutSearcher': {   'req_args': [   'heldOutSearcher'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setMem': {   'req_args': ['mem'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setMinimizerCreator': {   'req_args': [   'minimizerCreator'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setPrior': {   'req_args': ['logPrior'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setRetrainFromScratchAfterSigmaTuning': {   'req_args': [   'retrainFromScratchAfterSigmaTuning'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setSigma': {   'req_args': ['sigma'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setTol': {   'req_args': ['tol'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setTuneSigmaCV': {   'req_args': ['folds'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setTuneSigmaHeldOut': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setUseSum': {   'req_args': ['useSum'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.setVerbose': {   'req_args': ['verbose'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainClassifier': {   'req_args': [   'dataIterable',
                                                                   [   'dataset',
                                                                       'dataWeights',
                                                                       'prior'],
                                                                   ['dataset'],
                                                                   [   'dataset',
                                                                       'initial']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainClassifierSemiSup': {   'req_args': [   'data',
                                                                          'biasedData',
                                                                          'confusionMatrix',
                                                                          'initial'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainClassifierV': {   'req_args': [   'train',
                                                                    'validation',
                                                                    'min',
                                                                    'max',
                                                                    'accuracy',
                                                                    [   'train',
                                                                        'min',
                                                                        'max',
                                                                        'accuracy']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainClassifierWithInitialWeights': {   'req_args': [   'dataset',
                                                                                     'initialWeights2D',
                                                                                     [   'dataset',
                                                                                         'initialClassifier']],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainSemiSupGE': {   'req_args': [   'labeledDataset',
                                                                  'unlabeledDataList',
                                                                  'GEFeatures',
                                                                  'convexComboCoeff',
                                                                  [   'labeledDataset',
                                                                      'unlabeledDataList'],
                                                                  [   'labeledDataset',
                                                                      'unlabeledDataList',
                                                                      'convexComboCoeff']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainWeights': {   'req_args': [   'dataset',
                                                                [   'dataset',
                                                                    'initial'],
                                                                [   'dataset',
                                                                    'initial',
                                                                    'bypassTuneSigma']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.trainWeightsSemiSup': {   'req_args': [   'data',
                                                                       'biasedData',
                                                                       'confusionMatrix',
                                                                       'initial'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useConjugateGradientAscent': {   'req_args': [   'verbose',
                                                                              [   ]],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useHybridMinimizer': {   'req_args': [   [   'initialSMDGain',
                                                                          'stochasticBatchSize',
                                                                          'stochasticMethod',
                                                                          'cutoffIteration']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useHybridMinimizerWithInPlaceSGD': {   'req_args': [   'SGDPasses',
                                                                                    'tuneSampleSize',
                                                                                    'sigma'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useInPlaceStochasticGradientDescent': {   'req_args': [   [   'SGDPasses',
                                                                                           'tuneSampleSize',
                                                                                           'sigma']],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useQuasiNewton': {   'req_args': [['useRobust']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useStochasticGradientDescent': {   'req_args': [   [   'gainSGD',
                                                                                    'stochasticBatchSize']],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useStochasticGradientDescentToQuasiNewton': {   'req_args': [   'SGDGain',
                                                                                             'batchSize',
                                                                                             'sgdPasses',
                                                                                             'qnPasses',
                                                                                             'hessSamples',
                                                                                             'QNMem',
                                                                                             'outputToFile'],
                                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useStochasticMetaDescent': {   'req_args': [   [   'initialSMDGain',
                                                                                'stochasticBatchSize',
                                                                                'stochasticMethod',
                                                                                'passes']],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearClassifierFactory.useStochasticQN': {   'req_args': [   'initialSMDGain',
                                                                   'stochasticBatchSize'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LinearClassifierFactory.java'},
    'LinearCliquePotentialFunction': {   'req_args': ['weights', ['weights']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LinearCliquePotentialFunction.java'},
    'LinearCliquePotentialFunction.computeCliquePotential': {   'req_args': [   'cliqueSize',
                                                                                'labelIndex',
                                                                                'cliqueFeatures',
                                                                                'featureVal',
                                                                                'posInSent'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\LinearCliquePotentialFunction.java'},
    'LinearGrammarSmoother': {   'req_args': [   'trainOptions',
                                                 'stateIndex',
                                                 'tagIndex'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LinearGrammarSmoother.java'},
    'LinearGrammarSmoother.apply': {   'req_args': ['bgug'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LinearGrammarSmoother.java'},
    'LinearGrammarSmoother.basicCategory': {   'req_args': ['category'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\LinearGrammarSmoother.java'},
    'LogConditionalEqConstraintFunction': {   'req_args': [   'numFeatures',
                                                              'numClasses',
                                                              'data',
                                                              'labels',
                                                              [   'numFeatures',
                                                                  'numClasses',
                                                                  'data',
                                                                  'labels',
                                                                  'sigma'],
                                                              [   'numFeatures',
                                                                  'numClasses',
                                                                  'data',
                                                                  'labels',
                                                                  'prior',
                                                                  'sigma',
                                                                  'epsilon']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalEqConstraintFunction.java'},
    'LogConditionalEqConstraintFunction.domainDimension': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalEqConstraintFunction.java'},
    'LogConditionalEqConstraintFunction.initial': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalEqConstraintFunction.java'},
    'LogConditionalEqConstraintFunction.priors': {   'req_args': ['x1'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalEqConstraintFunction.java'},
    'LogConditionalEqConstraintFunction.to3D': {   'req_args': ['x1'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalEqConstraintFunction.java'},
    'LogConditionalObjectiveFunction': {   'req_args': [   'dataset',
                                                           ['dataset', 'prior'],
                                                           [   'dataset',
                                                               'dataWeights',
                                                               'prior'],
                                                           [   'dataset',
                                                               'prior',
                                                               'useSumCondObjFun'],
                                                           [   'dataset',
                                                               'prior',
                                                               'useSumCondObjFun',
                                                               'dataWeights'],
                                                           [   'dataIterable',
                                                               'logPrior',
                                                               'featureIndex',
                                                               'labelIndex'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'useSumCondObjFun'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'prior'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'dataWeights'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'dataWeights',
                                                               'prior'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'dataWeights',
                                                               'prior',
                                                               'useSummedConditionalLikelihood'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'labels',
                                                               'intPrior',
                                                               'sigma',
                                                               'epsilon'],
                                                           [   'numFeatures',
                                                               'numClasses',
                                                               'data',
                                                               'values',
                                                               'labels',
                                                               'intPrior',
                                                               'sigma',
                                                               'epsilon']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.calculateStochastic': {   'req_args': [   'x',
                                                                               'v',
                                                                               'batch'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.calculateStochasticFiniteDifference': {   'req_args': [   'x',
                                                                                               'v',
                                                                                               'h',
                                                                                               'batch'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.calculateStochasticGradient': {   'req_args': [   'x',
                                                                                       'batch'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.calculateStochasticGradientLocal': {   'req_args': [   'x',
                                                                                            'batch'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.calculateStochasticUpdate': {   'req_args': [   'x',
                                                                                     'xscale',
                                                                                     'batch',
                                                                                     'gain'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.dataDimension': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.domainDimension': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.to2D': {   'req_args': ['x'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogConditionalObjectiveFunction.valueAt': {   'req_args': [   'x',
                                                                   'xscale',
                                                                   'batch'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogConditionalObjectiveFunction.java'},
    'LogLikelihoodDifferentiableFunction.getSummaryForInstance': {   'req_args': [   'model',
                                                                                     'weights',
                                                                                     'gradient'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\learning\\LogLikelihoodDifferentiableFunction.java'},
    'LogPrior': {   'req_args': [   ['intPrior'],
                                    ['type'],
                                    ['intPrior', 'sigma', 'epsilon'],
                                    ['type', 'sigma', 'epsilon'],
                                    ['C']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.compute': {   'req_args': ['x', 'grad'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.computeStochastic': {   'req_args': [   'x',
                                                      'grad',
                                                      'fractionOfData'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getAdaptationPrior': {   'req_args': ['means', 'otherPrior'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getEpsilon': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getSigma': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getSigmaSquared': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getSigmaSquaredM': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.getType': {   'req_args': ['name', []],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.setEpsilon': {   'req_args': ['epsilon'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.setSigma': {   'req_args': ['sigma'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.setSigmaSquared': {   'req_args': ['sigmaSq'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogPrior.setSigmaSquaredM': {   'req_args': ['sigmaSq'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogPrior.java'},
    'LogRecordHandler.handle': {   'req_args': ['record'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\LogRecordHandler.java'},
    'LogRecordHandler.signalEndTrack': {   'req_args': [   'newDepth',
                                                           'timeEnded'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\LogRecordHandler.java'},
    'LogRecordHandler.signalShutdown': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\LogRecordHandler.java'},
    'LogRecordHandler.signalStartTrack': {   'req_args': ['signal'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\LogRecordHandler.java'},
    'LogisticClassifier': {   'req_args': [   'weights',
                                              'featureIndex',
                                              'classes',
                                              ['biased'],
                                              ['prior'],
                                              ['prior', 'biased']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.classOf': {   'req_args': [   'datum',
                                                      ['example'],
                                                      ['features'],
                                                      ['features']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.getFeatureIndex': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.getLabelForInternalNegativeClass': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.getLabelForInternalPositiveClass': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.getWeights': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.justificationOf': {   'req_args': [   'features',
                                                              ['features']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.labels': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.probabilityOf': {   'req_args': [   'example',
                                                            [   'features',
                                                                'label'],
                                                            ['example'],
                                                            [   'features',
                                                                'label']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.scoreOf': {   'req_args': ['features', ['features']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.scoresOf': {   'req_args': ['datum', ['example']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.train': {   'req_args': [   'data',
                                                    ['data', 'l1reg', 'tol']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.trainWeightedData': {   'req_args': [   'data',
                                                                'dataWeights'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifier.weightsAsCounter': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifier.java'},
    'LogisticClassifierFactory.trainClassifier': {   'req_args': [   'data',
                                                                     [   'data',
                                                                         'prior',
                                                                         'biased'],
                                                                     [   'data',
                                                                         'l1reg'],
                                                                     [   'data',
                                                                         'l1reg',
                                                                         'tol'],
                                                                     [   'data',
                                                                         'l1reg',
                                                                         'tol',
                                                                         'prior'],
                                                                     [   'data',
                                                                         'l1reg',
                                                                         'tol',
                                                                         'biased'],
                                                                     [   'data',
                                                                         'l1reg',
                                                                         'tol',
                                                                         'prior',
                                                                         'biased']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifierFactory.java'},
    'LogisticClassifierFactory.trainWeightedData': {   'req_args': [   'data',
                                                                       'dataWeights'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticClassifierFactory.java'},
    'LogisticObjectiveFunction': {   'req_args': [   'numFeatures',
                                                     'data',
                                                     'labels',
                                                     [   'numFeatures',
                                                         'data',
                                                         'labels',
                                                         'prior'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'labels',
                                                         'dataweights'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'labels',
                                                         'prior',
                                                         'dataweights'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'values',
                                                         'labels'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'values',
                                                         'labels',
                                                         'prior'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'values',
                                                         'labels',
                                                         'dataweights'],
                                                     [   'numFeatures',
                                                         'data',
                                                         'values',
                                                         'labels',
                                                         'prior',
                                                         'dataweights']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticObjectiveFunction.java'},
    'LogisticObjectiveFunction.domainDimension': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticObjectiveFunction.java'},
    'LogisticUtils.calculateSigmoids': {   'req_args': [   'weights',
                                                           'featureIndices',
                                                           'featureValues'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.calculateSums': {   'req_args': [   'weights',
                                                       'featureIndices',
                                                       'featureValues',
                                                       [   'weights',
                                                           'featureIndices',
                                                           'featureValues',
                                                           'intercepts']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.convertToArray': {   'req_args': ['input'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.dotProduct': {   'req_args': ['array', 'indices', 'values'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.flatten': {   'req_args': ['input'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.getValue': {   'req_args': ['weights', 'prior'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.identityMatrix': {   'req_args': ['n'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.indicesOf': {   'req_args': ['input', 'index'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.initializeDataValues': {   'req_args': ['data'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.prettyPrint': {   'req_args': [   'gammas',
                                                     'thetas',
                                                     'zprobs',
                                                     ['name', 'matrix'],
                                                     [   'name',
                                                         'matrix',
                                                         'maxCount']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.sample': {   'req_args': ['sigmoids'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LogisticUtils.unflatten': {   'req_args': ['input', 'output'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\LogisticUtils.java'},
    'LooseConversationalSieve': {   'req_args': [   'doc',
                                                    'characterMap',
                                                    'pronounCorefMap',
                                                    'animacySet'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\LooseConversationalSieve.java'},
    'LooseConversationalSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\LooseConversationalSieve.java'},
    'LooseConversationalSpeakerSieve': {   'req_args': [   'doc',
                                                           'characterMap',
                                                           'pronounCorefMap',
                                                           'animacySet'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\LooseConversationalSpeakerSieve.java'},
    'LooseConversationalSpeakerSieve.doMentionToSpeaker': {   'req_args': [   'doc'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\LooseConversationalSpeakerSieve.java'},
    'LowercaseAndAmericanizeFunction.apply': {   'req_args': ['input'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LowercaseAndAmericanizeFunction.java'},
    'LowercaseFunction.apply': {   'req_args': ['input'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\LowercaseFunction.java'},
    'LuceneSentenceIndex': {   'req_args': [   'props',
                                               'stopWords',
                                               'indexDirStr',
                                               'transformer'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.add': {   'req_args': [   'sentences',
                                                   'addProcessedText'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.createIndex': {   'req_args': [   'sentences',
                                                           'props',
                                                           'stopWords',
                                                           'indexDiskDir',
                                                           'transformer'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.finishUpdating': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.listAllDocuments': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.loadIndex': {   'req_args': [   'props',
                                                         'stopwords',
                                                         'dir',
                                                         'transformSentenceToString'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.queryIndex': {   'req_args': ['patterns'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.saveIndex': {   'req_args': ['dir'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'LuceneSentenceIndex.update': {   'req_args': ['tokens', 'sentid'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\LuceneSentenceIndex.java'},
    'MLEDependencyGrammar': {   'req_args': [   'tlpParams',
                                                'directional',
                                                'distance',
                                                'coarseDistance',
                                                'basicCategoryTagsInDependencyGrammar',
                                                'op',
                                                'wordIndex',
                                                'tagIndex',
                                                [   'tagProjection',
                                                    'tlpParams',
                                                    'directional',
                                                    'useDistance',
                                                    'useCoarseDistance',
                                                    'op',
                                                    'wordIndex',
                                                    'tagIndex']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.addRule': {   'req_args': ['dependency', 'count'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.countHistory': {   'req_args': ['dependency'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.dumpSizes': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.pruneTW': {   'req_args': ['argTW'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.readData': {   'req_args': ['in'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.scoreAll': {   'req_args': ['deps'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.scoreTB': {   'req_args': ['dependency'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.toString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.treeToDependencyList': {   'req_args': [   'tree',
                                                                     'wordIndex',
                                                                     'tagIndex'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.tune': {   'req_args': ['trees'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammar.writeData': {   'req_args': ['out'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammar.java'},
    'MLEDependencyGrammarExtractor': {   'req_args': [   'op',
                                                         'wordIndex',
                                                         'tagIndex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammarExtractor.java'},
    'MLEDependencyGrammarExtractor.formResult': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MLEDependencyGrammarExtractor.java'},
    'MSSieve': {   'req_args': [   'doc',
                                   'characterMap',
                                   'pronounCorefMap',
                                   'animacyList'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\MSSieve.java'},
    'MSSieve.doMentionToSpeaker': {   'req_args': ['doc'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\MSSieve.java'},
    'MUCDocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MUCDocumentReaderAndWriter.java'},
    'MUCDocumentReaderAndWriter.init': {   'req_args': ['flags'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MUCDocumentReaderAndWriter.java'},
    'MUCDocumentReaderAndWriter.printAnswers': {   'req_args': ['doc', 'pw'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MUCDocumentReaderAndWriter.java'},
    'MUCMentionExtractor': {   'req_args': [   'dict',
                                               'props',
                                               'semantics',
                                               [   'dict',
                                                   'props',
                                                   'semantics',
                                                   'singletonModel']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MUCMentionExtractor.java'},
    'MUCMentionExtractor.nextDoc': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MUCMentionExtractor.java'},
    'MUCMentionExtractor.resetDocs': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MUCMentionExtractor.java'},
    'MWEFrequencyDist': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\MWEFrequencyDist.java'},
    'MWEFrequencyDist.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\MWEFrequencyDist.java'},
    'MWEPreprocessor': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWEPreprocessor.countMWEStatistics': {   'req_args': [   't',
                                                              'unigramTagger',
                                                              'labelPreterm',
                                                              'pretermLabel',
                                                              'labelTerm',
                                                              'termLabel'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWEPreprocessor.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWEPreprocessor.printCounter': {   'req_args': ['cnt', 'fname'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWEPreprocessor.traverseAndFix': {   'req_args': [   't',
                                                          'pretermLabel',
                                                          'unigramTagger'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWEPreprocessor.updateTagger': {   'req_args': ['tagger', 't'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\pipeline\\MWEPreprocessor.java'},
    'MWETreeVisitor': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\MWETreeVisitor.java'},
    'MWETreeVisitor.visitTree': {   'req_args': ['t'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\MWETreeVisitor.java'},
    'MWETreeVisitorExternal': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\MWETreeVisitorExternal.java'},
    'MWETreeVisitorExternal.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\MWETreeVisitorExternal.java'},
    'MWETreeVisitorExternal.visitTree': {   'req_args': ['tree'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\MWETreeVisitorExternal.java'},
    'MWTAnnotator': {   'req_args': ['name', 'props'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MWTAnnotator.java'},
    'MWTAnnotator.annotate': {   'req_args': ['annotation'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MWTAnnotator.java'},
    'MWTAnnotator.loadMultiWordTokenMappings': {   'req_args': [   'dictionary',
                                                                   'mapFilePath'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MWTAnnotator.java'},
    'MWTAnnotator.requirementsSatisfied': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MWTAnnotator.java'},
    'MWTAnnotator.requires': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MWTAnnotator.java'},
    'MachineReading': {   'req_args': ['args', []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.annotate': {   'req_args': ['testing'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getAuxReader': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getDatasets': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getEntityResultsPrinterSet': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getPredictions': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getReader': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.getRelationResultsPrinterSet': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.makeEntityExtractor': {   'req_args': [   'entityExtractorClass',
                                                              'gazetteerPath'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.makeMachineReading': {   'req_args': ['args'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.makeMachineReadingForAnnotation': {   'req_args': [   'reader',
                                                                          'entityExtractor',
                                                                          'relationExtractor',
                                                                          'eventExtractor',
                                                                          'consistencyChecker',
                                                                          'relationPostProcessor',
                                                                          'testRelationsUsingPredictedEntities',
                                                                          'verbose'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.makeRelationFeatureFactory': {   'req_args': [   'relationFeatureFactoryClass',
                                                                     'relationFeatureList',
                                                                     'doNotLexicalizeFirstArg'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.run': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setAuxReader': {   'req_args': ['auxReader'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setConsoleLevel': {   'req_args': ['level'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setDatasets': {   'req_args': ['datasets'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setEntityResultsPrinterSet': {   'req_args': [   'entityResultsPrinterSet'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setExtractEntities': {   'req_args': ['extractEntities'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setExtractEvents': {   'req_args': ['extractEvents'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setExtractRelations': {   'req_args': ['extractRelations'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setForceParseSentences': {   'req_args': [   'forceParseSentences'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setLoggerLevel': {   'req_args': ['level'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setPredictions': {   'req_args': ['predictions'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setReader': {   'req_args': ['reader'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReading.setRelationResultsPrinterSet': {   'req_args': [   'relationResultsPrinterSet'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReading.java'},
    'MachineReadingAnnotations': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\MachineReadingAnnotations.java'},
    'MachineReadingProperties': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\MachineReadingProperties.java'},
    'Macros': {   'req_args': [],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Macros.java'},
    'Macros.addAllMacros': {   'req_args': [   'compiler',
                                               'filename',
                                               'encoding',
                                               ['compiler', 'br']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Macros.java'},
    'Macros.readMacros': {   'req_args': [   'filename',
                                             ['filename', 'encoding'],
                                             ['bin']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Macros.java'},
    'MajoritySpeakerSieve': {   'req_args': [   'doc',
                                                'characterMap',
                                                'pronounCorefMap',
                                                'animacySet'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\MajoritySpeakerSieve.java'},
    'MajoritySpeakerSieve.doMentionToSpeaker': {   'req_args': ['doc'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\MajoritySpeakerSieve.java'},
    'MajoritySpeakerSieve.getTopSpeakerList': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\MSSieves\\MajoritySpeakerSieve.java'},
    'MakePrefixFile': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\MakePrefixFile.java'},
    'MakePrefixFile.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\util\\MakePrefixFile.java'},
    'MalletFeatureFactory.getCliqueFeatures': {   'req_args': [   'info',
                                                                  'position',
                                                                  'clique'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MalletFeatureFactory.java'},
    'MalletReaderAndWriter.getIterator': {   'req_args': ['r'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MalletReaderAndWriter.java'},
    'MalletReaderAndWriter.init': {   'req_args': ['flags'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MalletReaderAndWriter.java'},
    'MalletReaderAndWriter.printAnswers': {   'req_args': ['doc', 'out'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\MalletReaderAndWriter.java'},
    'ManipulateTopBracket.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ManipulateTopBracket.java'},
    'MapFactory': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.arrayMapFactory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.hashMapFactory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.identityHashMapFactory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.linkedHashMapFactory': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.newMap': {   'req_args': [['initCapacity']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.newSet': {   'req_args': [['init']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.setMap': {   'req_args': ['map', ['map', 'initCapacity']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.treeMapFactory': {   'req_args': [['comparator']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapFactory.weakHashMapFactory': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapFactory.java'},
    'MapList': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapList.add': {   'req_args': ['key', 'val', ['key', 'vals']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapList.containsKey': {   'req_args': ['key'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapList.get': {   'req_args': ['key', 'index'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapList.keySet': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapList.size': {   'req_args': ['key'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MapList.java'},
    'MapNodePattern': {   'req_args': [   'annotationPatterns',
                                          ['annotationPatterns'],
                                          ['key', 'pattern']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MapNodePattern.java'},
    'Maps': {   'req_args': [],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.addAll': {   'req_args': ['to', 'from', 'function'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.compose': {   'req_args': ['map1', 'map2'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.getAll': {   'req_args': ['map', 'indices'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.invert': {   'req_args': ['map'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.invertSet': {   'req_args': ['map'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.main': {   'req_args': ['args'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.putIntoValueArrayList': {   'req_args': ['map', 'key', 'value'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.putIntoValueCollection': {   'req_args': [   'map',
                                                       'key',
                                                       'value',
                                                       'cf'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.putIntoValueHashSet': {   'req_args': ['map', 'key', 'value'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.removeKeys': {   'req_args': ['map', 'removekeys'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.sortedEntries': {   'req_args': ['entries', ['map']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.toString': {   'req_args': [   'map',
                                         'preAppend',
                                         'postAppend',
                                         'keyValSeparator',
                                         'itemSeparator'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'Maps.toStringSorted': {   'req_args': ['map', 'builder', ['map']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Maps.java'},
    'MarkRole': {   'req_args': [[]],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\MarkRole.java'},
    'Match': {   'req_args': [['matched', 'value', 'begin', 'end']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.equals': {   'req_args': ['o'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getBegin': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getCustom': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getEnd': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getInterval': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getMatched': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getMatchedLength': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.getValue': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.hashCode': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.setCustom': {   'req_args': ['customMatchObject'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'Match.toString': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\Match.java'},
    'MatchException': {   'req_args': ['m'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\MatchException.java'},
    'MatchedExpression': {   'req_args': [   'me',
                                             [   'charOffsets',
                                                 'tokenOffsets',
                                                 'extractFunc',
                                                 'priority',
                                                 'weight']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.extractAnnotation': {   'req_args': [   'env',
                                                               'sourceAnnotation',
                                                               [   'env',
                                                                   'source']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getAnnotation': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getBestMatched': {   'req_args': ['matches', 'scorer'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getCharOffsets': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getChunkOffsets': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getOrder': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getPriority': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getText': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getTokenOffsets': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getValue': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.getWeight': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.isIncludeNested': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.removeNested': {   'req_args': ['chunks'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.removeNullValues': {   'req_args': ['chunks'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.removeOverlapping': {   'req_args': ['chunks'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.replaceMerged': {   'req_args': ['list', 'matchedExprs'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.replaceMergedUsingTokenOffsets': {   'req_args': [   'list',
                                                                            'matchedExprs'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.setIncludeNested': {   'req_args': ['includeNested'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchedExpression.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MatchedExpression.java'},
    'MatchesPanel': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.addListener': {   'req_args': ['l', ['l']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.focusOnList': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.getInstance': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.getMatchedParts': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.getMatchedSentences': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.getMatches': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.getSelectedMatch': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.isEmpty': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.isShowOnlyMatchedPortion': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.removeAllMatches': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.selectNextMatch': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.selectPreviousMatch': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.setFontName': {   'req_args': ['fontName'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.setHighlightColor': {   'req_args': ['highlightColor'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.setMatches': {   'req_args': ['matches', 'matchedParts'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.setMaxMatches': {   'req_args': ['maxMatches'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.setShowOnlyMatchedPortion': {   'req_args': [   'showOnlyMatchedPortion'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MatchesPanel.valueChanged': {   'req_args': ['arg0'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\MatchesPanel.java'},
    'MaxMarginMentionRanker': {   'req_args': ['builder'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MaxMarginMentionRanker.java'},
    'MaxMarginMentionRanker.learn': {   'req_args': [   'correct',
                                                        'incorrect',
                                                        'mentionFeatures',
                                                        'compressor',
                                                        'errorType'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MaxMarginMentionRanker.java'},
    'MaxMarginMentionRanker.newBuilder': {   'req_args': ['name', 'meta'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MaxMarginMentionRanker.java'},
    'MaxMatchSegmenter.finishTraining': {   'req_args': [[]],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.greedilySegmentWords': {   'req_args': ['s'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.initializeTraining': {   'req_args': [   'numTrees',
                                                                ['numTrees']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.loadSegmenter': {   'req_args': [   'filename',
                                                           ['filename']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.maxMatchSegmentation': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.segment': {   'req_args': ['s', ['s']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.segmentWords': {   'req_args': ['h'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\MaxMatchSegmenter.java'},
    'MaxMatchSegmenter.train': {   'req_args': [   'trees',
                                                   ['tree'],
                                                   ['sentence'],
                                                   ['trees'],
                                                   ['tree'],
                                                   ['sentence']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\MaxMatchSegmenter.java'},
    'MaxSizeConcurrentHashSet': {   'req_args': [['maxSize'], ['s']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.add': {   'req_args': ['e'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.addAll': {   'req_args': ['c'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.clear': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.contains': {   'req_args': ['o'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.containsAll': {   'req_args': ['c'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.equals': {   'req_args': ['o'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.forEach': {   'req_args': ['action'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.getMaxSize': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.hashCode': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.isEmpty': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.iterator': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.parallelStream': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.remove': {   'req_args': ['o'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.removeAll': {   'req_args': ['c'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.removeIf': {   'req_args': ['filter'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.retainAll': {   'req_args': ['c'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.setMaxSize': {   'req_args': ['maxSize'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.size': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.spliterator': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.stream': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.toArray': {   'req_args': [['a']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxSizeConcurrentHashSet.toString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MaxSizeConcurrentHashSet.java'},
    'MaxentTagger': {   'req_args': [   ['config'],
                                        ['modelFile'],
                                        ['modelStream'],
                                        ['modelFile', 'config'],
                                        ['modelFile', 'config', 'printLoading'],
                                        [   'modelStream',
                                            'config',
                                            'printLoading']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.addTag': {   'req_args': ['tag'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.apply': {   'req_args': ['in'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.getTag': {   'req_args': ['index'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.getTagIndex': {   'req_args': ['tag'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.lemmatize': {   'req_args': ['sentence', 'morpha'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.numTags': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.outputTaggedSentence': {   'req_args': [   'sentence',
                                                             'outputLemmas',
                                                             'outputStyle',
                                                             'outputVerbosity',
                                                             'numSentences',
                                                             'separator',
                                                             'writer'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.process': {   'req_args': ['sentences'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.runTagger': {   'req_args': [   'document',
                                                  'writer',
                                                  'outputStyle',
                                                  [   'reader',
                                                      'writer',
                                                      'tagInside',
                                                      'outputStyle']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.runTaggerSGML': {   'req_args': [   'reader',
                                                      'writer',
                                                      'outputStyle'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.runTaggerStdin': {   'req_args': [   'reader',
                                                       'writer',
                                                       'outputStyle'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagAndOutputSentence': {   'req_args': [   'sentence',
                                                             'outputLemmas',
                                                             'morpha',
                                                             'outputStyle',
                                                             'outputVerbosity',
                                                             'numSentences',
                                                             'separator',
                                                             'writer'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagCoreLabels': {   'req_args': [   'sentence',
                                                      [   'sentence',
                                                          'reuseTags']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagCoreLabelsOrHasWords': {   'req_args': [   'sentence',
                                                                'morpha',
                                                                'outputLemmas'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagFromXML': {   'req_args': [   'input',
                                                   'writer',
                                                   'xmlTags',
                                                   [   'input',
                                                       'writer',
                                                       'xmlTags']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagSentence': {   'req_args': [   'sentence',
                                                    ['sentence', 'reuseTags']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagSet': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagString': {   'req_args': ['toTag'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tagTokenizedString': {   'req_args': ['toTag'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTagger.tokenizeText': {   'req_args': [   'r',
                                                     ['r', 'tokenizerFactory']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTagger.java'},
    'MaxentTaggerGUI': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTaggerGUI.java'},
    'MaxentTaggerGUI.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTaggerGUI.java'},
    'MaxentTaggerServer': {   'req_args': ['port', 'tagger', 'charset'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTaggerServer.java'},
    'MaxentTaggerServer.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTaggerServer.java'},
    'MaxentTaggerServer.run': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\MaxentTaggerServer.java'},
    'MemoryEvaluator': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\MemoryEvaluator.java'},
    'MemoryEvaluator.evaluate': {   'req_args': ['x'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\MemoryEvaluator.java'},
    'MemoryEvaluator.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\MemoryEvaluator.java'},
    'MemoryMonitor': {   'req_args': [['millis']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getMaxAvailableMemory': {   'req_args': [['accurate']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getMaxMemory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getSystemFreeMemory': {   'req_args': ['accurate'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getSystemSwapsPerSec': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getSystemUsedSwap': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getUsedMemory': {   'req_args': [['accurate']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getUsedMemoryStatic': {   'req_args': [['r']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.getUsedMemoryString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.pollAtMostEvery': {   'req_args': ['millis'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.pollFree': {   'req_args': ['force'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.pollVMstat': {   'req_args': ['force'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.systemIsSwapping': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryMonitor.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MemoryMonitor.java'},
    'MemoryTreebank': {   'req_args': [   ['tm'],
                                          ['encoding'],
                                          ['trf'],
                                          ['trf', 'encoding'],
                                          ['trees', 'trf', 'encoding'],
                                          ['initialCapacity'],
                                          ['initialCapacity', 'trf']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.add': {   'req_args': ['index', 'element', ['element']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.addAll': {   'req_args': ['index', 'c'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.apply': {   'req_args': ['tp'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.clear': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.get': {   'req_args': ['i'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.indexOf': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.iterator': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.lastIndexOf': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.listIterator': {   'req_args': [['index']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.load': {   'req_args': ['r', ['r', 'id']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.loadPath': {   'req_args': [   'path',
                                                   'filt',
                                                   ['path', 'filt', 'srlFile']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.processFile': {   'req_args': ['file'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.remove': {   'req_args': ['index'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.set': {   'req_args': ['index', 'element'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.size': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.subList': {   'req_args': ['fromIndex', 'toIndex'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'MemoryTreebank.transform': {   'req_args': ['treeTrans'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\MemoryTreebank.java'},
    'Mention': {   'req_args': [   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'sentenceWords',
                                       'basicDependency',
                                       'enhancedDependency'],
                                   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'sentenceWords',
                                       'basicDependency',
                                       'enhancedDependency',
                                       'mentionSpan'],
                                   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'sentenceWords',
                                       'basicDependency',
                                       'enhancedDependency',
                                       'mentionSpan',
                                       'mentionTree'],
                                   [],
                                   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'dependency'],
                                   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'dependency',
                                       'mentionSpan'],
                                   [   'mentionID',
                                       'startIndex',
                                       'endIndex',
                                       'dependency',
                                       'mentionSpan',
                                       'mentionTree']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.addApposition': {   'req_args': ['m', ['m']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.addBelongsToList': {   'req_args': ['m', ['m']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.addListMember': {   'req_args': ['m', ['m']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.addPredicateNominatives': {   'req_args': ['m', ['m']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.addRelativePronoun': {   'req_args': ['m', ['m']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.animaciesAgree': {   'req_args': [   'm',
                                                  ['m', 'strict'],
                                                  ['m'],
                                                  ['m', 'strict']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.appearEarlierThan': {   'req_args': ['m', ['m']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.attributesAgree': {   'req_args': [   'potentialAntecedent',
                                                   'dict',
                                                   [   'potentialAntecedent',
                                                       'dict']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.buildQueryText': {   'req_args': ['terms', ['terms']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.entityTypesAgree': {   'req_args': [   'm',
                                                    'dict',
                                                    ['m', 'dict', 'strict'],
                                                    ['m', 'dict'],
                                                    ['m', 'dict', 'strict']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.equals': {   'req_args': ['obj'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.gendersAgree': {   'req_args': [   'm',
                                                ['m', 'strict'],
                                                ['m'],
                                                ['m', 'strict']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getContext': {   'req_args': [[]],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getCoordination': {   'req_args': [[]],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getModal': {   'req_args': ['dict', ['dict']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getModifiers': {   'req_args': ['dict', ['dict']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getNegation': {   'req_args': ['dict', ['dict']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getPattern': {   'req_args': [['pTokens'], [], ['pTokens']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getPosition': {   'req_args': [[]],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getPostmodifiers': {   'req_args': [[]],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getPremodifierContext': {   'req_args': [[]],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getPremodifiers': {   'req_args': [[]],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getQuantification': {   'req_args': ['dict', ['dict']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getRelation': {   'req_args': [[]],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getReportEmbedding': {   'req_args': ['dict', ['dict']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getSingletonFeatures': {   'req_args': ['dict'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getSplitPattern': {   'req_args': [[]],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.getType': {   'req_args': [[]],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.hashCode': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.headsAgree': {   'req_args': ['m'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.includedIn': {   'req_args': ['m', ['m']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.insideIn': {   'req_args': ['m', ['m']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isApposition': {   'req_args': ['m', ['m']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isCoordinated': {   'req_args': [[]],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isDemonym': {   'req_args': ['m', 'dict', ['m', 'dict']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isListMemberOf': {   'req_args': ['m', ['m']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isMemberOfSameList': {   'req_args': ['m', ['m']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isPredicateNominatives': {   'req_args': ['m', ['m']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isPronominal': {   'req_args': [[]],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isRelativePronoun': {   'req_args': ['m', ['m']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.isRoleAppositive': {   'req_args': ['m', 'dict', ['m', 'dict']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.longestNNPEndsWithHead': {   'req_args': [[]],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.lowercaseNormalizedSpanString': {   'req_args': [[]],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.lowestNPIncludesHead': {   'req_args': [[]],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.moreRepresentativeThan': {   'req_args': ['m', ['m']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.nerName': {   'req_args': [[]],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.nerTokens': {   'req_args': [[]],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.numbersAgree': {   'req_args': ['m', ['m']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.preprocessSearchTerm': {   'req_args': [[]],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.process': {   'req_args': [   'dict',
                                           'semantics',
                                           [   'dict',
                                               'semantics',
                                               'singletonPredictor'],
                                           [   'dict',
                                               'semantics',
                                               'mentionExtractor'],
                                           [   'dict',
                                               'semantics',
                                               'mentionExtractor',
                                               'singletonPredictor']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.removeParenthesis': {   'req_args': ['text', ['text']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.removePhraseAfterHead': {   'req_args': [[]],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.sameSentence': {   'req_args': ['m', ['m']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.spanToString': {   'req_args': [[]],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.stringWithoutArticle': {   'req_args': ['str', ['str']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'Mention.toString': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Mention.java'},
    'MentionDetectionClassifier': {   'req_args': ['rf'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\MentionDetectionClassifier.java'},
    'MentionDetectionClassifier.classifyMentions': {   'req_args': [   'predictedMentions',
                                                                       'dict',
                                                                       'props'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\MentionDetectionClassifier.java'},
    'MentionDetectionClassifier.extractFeatures': {   'req_args': [   'p',
                                                                      'shares',
                                                                      'neStrings',
                                                                      'dict',
                                                                      'props'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\MentionDetectionClassifier.java'},
    'MentionDetectionClassifier.loadMentionDetectionClassifier': {   'req_args': [   'filename'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\MentionDetectionClassifier.java'},
    'MentionDetectionClassifier.probabilityOf': {   'req_args': [   'p',
                                                                    'shares',
                                                                    'neStrings',
                                                                    'dict',
                                                                    'props'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\MentionDetectionClassifier.java'},
    'MentionDetectionEvaluator.finish': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\MentionDetectionEvaluator.java'},
    'MentionDetectionEvaluator.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\MentionDetectionEvaluator.java'},
    'MentionDetectionEvaluator.process': {   'req_args': ['id', 'document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\MentionDetectionEvaluator.java'},
    'MentionExtractor': {   'req_args': ['dict', 'semantics'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.arrange': {   'req_args': [   'anno',
                                                    'words',
                                                    'trees',
                                                    'unorderedMentions',
                                                    [   'anno',
                                                        'words',
                                                        'trees',
                                                        'unorderedMentions',
                                                        'unorderedGoldMentions',
                                                        'doMergeLabels'],
                                                    [   'anno',
                                                        'words',
                                                        'trees',
                                                        'unorderedMentions',
                                                        'doMergeLabels']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.findExactMatch': {   'req_args': [   'tree',
                                                           'first',
                                                           'last'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.initializeUtterance': {   'req_args': ['tokens'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.mergeLabels': {   'req_args': ['tree', 'sentence'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.nextDoc': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.resetDocs': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MentionExtractor.setMentionFinder': {   'req_args': ['mentionFinder'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\MentionExtractor.java'},
    'MetaClass': {   'req_args': ['classname', ['classname']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.cast': {   'req_args': ['value', 'type'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.castWithoutKnowingType': {   'req_args': ['value'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.checkConstructor': {   'req_args': ['params'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.create': {   'req_args': ['classname', ['clazz']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.createFactory': {   'req_args': [   'classes',
                                                   ['classes'],
                                                   ['objects']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.createInstance': {   'req_args': ['objects', ['type', 'params']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaClass.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MetaClass.java'},
    'MetaFeatureExtractor': {   'req_args': ['builder'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetaFeatureExtractor.anaphoricityMFE': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetaFeatureExtractor.filterOut': {   'req_args': [   'c',
                                                          'disallowedPrefixes'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetaFeatureExtractor.getFeatures': {   'req_args': [   'example',
                                                            'mentionFeatures',
                                                            'compressor'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetaFeatureExtractor.newBuilder': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetaFeatureExtractor.toString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetaFeatureExtractor.java'},
    'MetadataWriter': {   'req_args': ['countWords'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetadataWriter.java'},
    'MetadataWriter.finish': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetadataWriter.java'},
    'MetadataWriter.process': {   'req_args': ['id', 'document'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\MetadataWriter.java'},
    'MixDisambiguation': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\truecaser\\MixDisambiguation.java'},
    'MixDisambiguation.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\truecaser\\MixDisambiguation.java'},
    'MnistConverter': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\demo\\MnistConverter.java'},
    'MnistConverter.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\demo\\MnistConverter.java'},
    'ModCollinsHeadFinder': {   'req_args': [['tlp']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ModCollinsHeadFinder.java'},
    'ModelBatch': {   'req_args': [   ['filename'],
                                      ['filename', 'featurizer'],
                                      ['inputStream'],
                                      ['inputStream', 'featurizer']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\storage\\ModelBatch.java'},
    'ModelBatch.writeToFile': {   'req_args': ['filename'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\storage\\ModelBatch.java'},
    'ModelBatch.writeToFileWithoutFactors': {   'req_args': ['filename'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\storage\\ModelBatch.java'},
    'ModelBatch.writeToStream': {   'req_args': ['outputStream'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\storage\\ModelBatch.java'},
    'ModelBatch.writeToStreamWithoutFactors': {   'req_args': ['outputStream'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\storage\\ModelBatch.java'},
    'ModelSerializer.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\ModelSerializer.java'},
    'Morpha': {   'req_args': ['in'],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.next': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yyatEOF': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yybegin': {   'req_args': ['newState'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yycharat': {   'req_args': ['position'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yyclose': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yylength': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yypushback': {   'req_args': ['number'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yyreset': {   'req_args': ['reader'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yystate': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'Morpha.yytext': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morpha.java'},
    'MorphaAnnotator': {   'req_args': [['verbose']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MorphaAnnotator.java'},
    'MorphaAnnotator.annotate': {   'req_args': ['annotation'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MorphaAnnotator.java'},
    'MorphaAnnotator.requirementsSatisfied': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MorphaAnnotator.java'},
    'MorphaAnnotator.requires': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\MorphaAnnotator.java'},
    'MorphoFeatureSpecification': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.activate': {   'req_args': ['feat'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.getValues': {   'req_args': ['feat'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.isActive': {   'req_args': ['feat'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.splitMorphString': {   'req_args': [   'word',
                                                                       'morphStr'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.strToFeatures': {   'req_args': ['spec'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatureSpecification.toString': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatureSpecification.java'},
    'MorphoFeatures': {   'req_args': [['other']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.addFeature': {   'req_args': ['feat', 'val'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.fromTagString': {   'req_args': ['str'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.getAltTag': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.getTag': {   'req_args': ['baseTag'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.getValue': {   'req_args': ['feat'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.hasFeature': {   'req_args': ['feat'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.numActiveFeatures': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.numFeatureMatches': {   'req_args': ['other'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.setAltTag': {   'req_args': ['tag'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'MorphoFeatures.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\morph\\MorphoFeatures.java'},
    'Morphology': {   'req_args': [['in'], ['in', 'flags']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.apply': {   'req_args': ['in'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.lemma': {   'req_args': [   'word',
                                            'tag',
                                            ['word', 'tag', 'lowercase']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.lemmaStatic': {   'req_args': [   'word',
                                                  'tag',
                                                  ['word', 'tag', 'lowercase']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.lemmatize': {   'req_args': ['wT'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.lemmatizeStatic': {   'req_args': ['wT'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.next': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.stem': {   'req_args': [   'w',
                                           ['word'],
                                           ['label'],
                                           ['label', 'ann']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'Morphology.stemStatic': {   'req_args': ['word', 'tag', ['wT']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Morphology.java'},
    'MoveNode': {   'req_args': ['child', 'l', 'prune'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\MoveNode.java'},
    'MoveNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\MoveNode.java'},
    'MoveNode.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\MoveNode.java'},
    'MultiClassAccuracyStats': {   'req_args': [   ['scoreType'],
                                                   ['file'],
                                                   ['file', 'scoreType'],
                                                   [   'classifier',
                                                       'data',
                                                       'file'],
                                                   [   'classifier',
                                                       'data',
                                                       'file',
                                                       'scoreType']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.confidenceWeightedAccuracy': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.getAccCoverage': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.getDescription': {   'req_args': ['numDigits'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.initMC': {   'req_args': ['classifier', 'data'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.numCorrect': {   'req_args': ['recall'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.numSamples': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.score': {   'req_args': ['classifier', 'data', []],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassAccuracyStats.toString': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassAccuracyStats.java'},
    'MultiClassChunkEvalStats': {   'req_args': [   'classifier',
                                                    'data',
                                                    'negLabel',
                                                    ['negLabel'],
                                                    [   'dataLabelIndex',
                                                        'negLabel']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassChunkEvalStats.java'},
    'MultiClassChunkEvalStats.clearCounts': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassChunkEvalStats.java'},
    'MultiClassChunkEvalStats.getChunker': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassChunkEvalStats.java'},
    'MultiClassChunkEvalStats.getConllEvalString': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassChunkEvalStats.java'},
    'MultiClassChunkEvalStats.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassChunkEvalStats.java'},
    'MultiClassPrecisionRecallExtendedStats': {   'req_args': [   'classifier',
                                                                  'data',
                                                                  'negLabel',
                                                                  ['negLabel'],
                                                                  [   'dataLabelIndex',
                                                                      'negLabel']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.addGuesses': {   'req_args': [   'guesses',
                                                                             'trueLabels'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.clearCounts': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getAccuracy': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getAccuracyDescription': {   'req_args': [   'numDigits'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getAccuracyInfo': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getConllEvalString': {   'req_args': [   [   'ignoreNegLabel']],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getCorrect': {   'req_args': [   [   'label']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getLabels': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getRelevant': {   'req_args': [   'label',
                                                                              [   ]],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.getRetrieved': {   'req_args': [   'label',
                                                                               [   ]],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.score': {   'req_args': [   'classifier',
                                                                        'data',
                                                                        [   'guesses',
                                                                            'trueLabels',
                                                                            'dataLabelIndex'],
                                                                        [   'guesses',
                                                                            'trueLabels'],
                                                                        [],
                                                                        [   'filename',
                                                                            'delimiter'],
                                                                        [   'filename',
                                                                            'delimiter',
                                                                            'boundary'],
                                                                        [   'br',
                                                                            'delimiter'],
                                                                        [   'br',
                                                                            'delimiter',
                                                                            'boundary']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallExtendedStats.setLabelIndex': {   'req_args': [   'dataLabelIndex'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallExtendedStats.java'},
    'MultiClassPrecisionRecallStats': {   'req_args': [   'classifier',
                                                          'data',
                                                          'negLabel',
                                                          ['negLabel']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getDescription': {   'req_args': [   'numDigits'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getF1Description': {   'req_args': [   'numDigits',
                                                                           [   'numDigits',
                                                                               'label']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getFMeasure': {   'req_args': ['label', []],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getNegLabel': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getPrecision': {   'req_args': [   'label',
                                                                       []],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getPrecisionDescription': {   'req_args': [   'numDigits',
                                                                                  [   'numDigits',
                                                                                      'label']],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getPrecisionInfo': {   'req_args': [   'label',
                                                                           []],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getRecall': {   'req_args': ['label', []],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getRecallDescription': {   'req_args': [   'numDigits',
                                                                               [   'numDigits',
                                                                                   'label']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.getRecallInfo': {   'req_args': [   'label',
                                                                        []],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiClassPrecisionRecallStats.score': {   'req_args': [   'classifier',
                                                                'data',
                                                                [   'classifier',
                                                                    'data']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\MultiClassPrecisionRecallStats.java'},
    'MultiCoreMapNodePattern': {   'req_args': [   ['nodePattern'],
                                                   [   'nodePattern',
                                                       'aggregators']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiCoreMapNodePattern.java'},
    'MultiMatch': {   'req_args': [   [   'matched',
                                          'value',
                                          'begin',
                                          'end',
                                          'multimatches']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.equals': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.getMultimatched': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.getMultimatches': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.getMultioffsets': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.getMultivalues': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiMatch.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\MultiMatch.java'},
    'MultiNodePattern.getMaxNodes': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiNodePattern.getMinNodes': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiNodePattern.isGreedyMatch': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiNodePattern.setGreedyMatch': {   'req_args': ['greedyMatch'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiNodePattern.setMaxNodes': {   'req_args': ['maxNodes'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiNodePattern.setMinNodes': {   'req_args': ['minNodes'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiNodePattern.java'},
    'MultiPatternMatcher': {   'req_args': [   'patternTrigger',
                                               'patterns',
                                               ['patternTrigger', 'patterns'],
                                               ['patterns'],
                                               ['patterns']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.find': {   'req_args': ['elements', 'findType'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.findAllNonOverlappingMatchesPerPattern': {   'req_args': [   'elements'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.findNonOverlapping': {   'req_args': [   'elements',
                                                                  [   'elements',
                                                                      'cmp']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.findNonOverlappingMaxScore': {   'req_args': [   'elements',
                                                                          [   'elements',
                                                                              'scorer']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.getTriggeredPatterns': {   'req_args': ['elements'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.isMatchWithResult': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiPatternMatcher.setMatchWithResult': {   'req_args': [   'matchWithResult'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiPatternMatcher.java'},
    'MultiTokenTag': {   'req_args': ['tag', 'index'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiTokenTag.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiTokenTag.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiTokenTag.isEnd': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiTokenTag.isStart': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiTokenTag.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\MultiTokenTag.java'},
    'MultiWordPreprocessor.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\MultiWordPreprocessor.java'},
    'MultiWordPreprocessor.traverseAndFix': {   'req_args': [   't',
                                                                'parent',
                                                                'unigramTagger',
                                                                'retainNER'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\MultiWordPreprocessor.java'},
    'MultiWordPreprocessor.updateTagger': {   'req_args': ['tagger', 't'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\MultiWordPreprocessor.java'},
    'MultiWordStringMatcher': {   'req_args': ['matchType', ['matchTypeStr']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.createPattern': {   'req_args': ['targetString'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.findOffsets': {   'req_args': [   'pattern',
                                                              'text',
                                                              [   'pattern',
                                                                  'text',
                                                                  'start',
                                                                  'end']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.findTargetStringOffsets': {   'req_args': [   'text',
                                                                          'targetString',
                                                                          [   'text',
                                                                              'targetString',
                                                                              'start',
                                                                              'end']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getExctWsRegex': {   'req_args': ['targetString'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getLWsRegex': {   'req_args': ['targetString'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getLnrmRegex': {   'req_args': ['targetString'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getMatchType': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getPattern': {   'req_args': [   'targetStrings',
                                                             ['targetString']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.getRegex': {   'req_args': [   'targetStrings',
                                                           ['targetString']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.putSpacesAroundTargetString': {   'req_args': [   'text',
                                                                              'targetString'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordStringMatcher.setMatchType': {   'req_args': ['matchType'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\MultiWordStringMatcher.java'},
    'MultiWordTreeExpander.expandPhrases': {   'req_args': ['t', 'tn', 'tf'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\pipeline\\MultiWordTreeExpander.java'},
    'MulticoreWrapper': {   'req_args': [   'nThreads',
                                            'processor',
                                            [   'numThreads',
                                                'processor',
                                                'orderResults']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.join': {   'req_args': [['destroyThreadpool']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.nThreads': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.peek': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.poll': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.put': {   'req_args': ['item'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapper.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\MulticoreWrapper.java'},
    'MulticoreWrapperDemo': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\MulticoreWrapperDemo.java'},
    'MulticoreWrapperDemo.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\MulticoreWrapperDemo.java'},
    'Multinomial': {   'req_args': ['parameters'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.drawSample': {   'req_args': ['random'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.equals': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.getParameters': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.hashCode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.logProbabilityOf': {   'req_args': ['object'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'Multinomial.probabilityOf': {   'req_args': ['object'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\Multinomial.java'},
    'MultinomialLogisticClassifier': {   'req_args': [   'weights',
                                                         'featureIndex',
                                                         'labelIndex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.classOf': {   'req_args': [   'example',
                                                                 ['example']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.labels': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.logProbabilityOf': {   'req_args': [   'example'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.probabilityOf': {   'req_args': ['example'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.scoresOf': {   'req_args': [   'example',
                                                                  ['example']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MultinomialLogisticClassifier.weightsAsGenericCounter': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\MultinomialLogisticClassifier.java'},
    'MungeTreesWithMorfetteAnalyses.main': {   'req_args': ['args'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\MungeTreesWithMorfetteAnalyses.java'},
    'MutableDouble': {   'req_args': [['d'], ['num']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.byteValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.compareTo': {   'req_args': ['anotherMutableDouble'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.doubleValue': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.equals': {   'req_args': ['obj'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.floatValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.intValue': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.longValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.set': {   'req_args': ['d'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.shortValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableDouble.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableDouble.java'},
    'MutableInteger': {   'req_args': [['i']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.byteValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.compareTo': {   'req_args': ['anotherMutableInteger'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.doubleValue': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.equals': {   'req_args': ['obj'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.floatValue': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.incValue': {   'req_args': ['val'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.intValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.longValue': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.set': {   'req_args': ['i'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.shortValue': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableInteger.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableInteger.java'},
    'MutableLong': {   'req_args': [['i']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.byteValue': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.compareTo': {   'req_args': ['anotherMutableLong'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.doubleValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.equals': {   'req_args': ['obj'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.floatValue': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.hashCode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.incValue': {   'req_args': ['val'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.intValue': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.longValue': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.set': {   'req_args': ['i'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.shortValue': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'MutableLong.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\MutableLong.java'},
    'NBLinearClassifierFactory': {   'req_args': [   ['sigma'],
                                                     [   'sigma',
                                                         'interpretAlwaysOnFeatureAsPrior']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NBLinearClassifierFactory.java'},
    'NBLinearClassifierFactory.setTuneSigmaCV': {   'req_args': ['folds'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NBLinearClassifierFactory.java'},
    'NDArray': {   'req_args': ['dimensions'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.cloneArray': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.combinatorialNeighborStatesCount': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.fastPassByReferenceIterator': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.getAssignmentValue': {   'req_args': ['assignment'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.getDimensions': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.iterator': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArray.setAssignmentValue': {   'req_args': ['assignment', 'value'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArray.java'},
    'NDArrayDoubles': {   'req_args': ['dimensions', []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.combinatorialNeighborStatesCount': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.fastPassByReferenceIterator': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.getAssignmentValue': {   'req_args': ['assignment'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.getDimensions': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.iterator': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NDArrayDoubles.setAssignmentValue': {   'req_args': [   'assignment',
                                                             'value'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\model\\NDArrayDoubles.java'},
    'NERClassifierCombiner': {   'req_args': [   'props',
                                                 ['loadPaths'],
                                                 [   'applyNumericClassifiers',
                                                     'useSUTime',
                                                     'loadPaths'],
                                                 [   'applyNumericClassifiers',
                                                     'nerLanguage',
                                                     'useSUTime',
                                                     'nscProps',
                                                     'loadPaths'],
                                                 ['classifiers'],
                                                 [   'applyNumericClassifiers',
                                                     'useSUTime',
                                                     'classifiers'],
                                                 ['ois', 'props']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.appliesNumericClassifiers': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.classify': {   'req_args': ['tokens'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.classifyWithGlobalInformation': {   'req_args': [   'tokens',
                                                                               'document',
                                                                               'sentence'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.createNERClassifierCombiner': {   'req_args': [   'name',
                                                                             'properties',
                                                                             [   'name',
                                                                                 'passDownProperties',
                                                                                 'properties']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.finalizeAnnotation': {   'req_args': ['annotation'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.getClassifier': {   'req_args': [   'loadPath',
                                                               'props',
                                                               [   'ois',
                                                                   'props']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.serializeClassifier': {   'req_args': ['oos'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.showNCCInfo': {   'req_args': ['ncc'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERClassifierCombiner.usesSUTime': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERClassifierCombiner.java'},
    'NERCombinerAnnotator': {   'req_args': [   'properties',
                                                [],
                                                ['verbose'],
                                                ['verbose', 'classifiers'],
                                                ['ner', 'verbose'],
                                                [   'ner',
                                                    'verbose',
                                                    'nThreads',
                                                    'maxTime'],
                                                [   'ner',
                                                    'verbose',
                                                    'nThreads',
                                                    'maxTime',
                                                    'maxSentenceLength'],
                                                [   'ner',
                                                    'verbose',
                                                    'nThreads',
                                                    'maxTime',
                                                    'maxSentenceLength',
                                                    'fineGrained',
                                                    'entityMentions']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.annotate': {   'req_args': ['annotation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.doOneFailedSentence': {   'req_args': [   'annotation',
                                                                    'sentence'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.doOneSentence': {   'req_args': [   'annotation',
                                                              'sentence'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.mergeTokens': {   'req_args': ['token', 'nextToken'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.requirementsSatisfied': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.requires': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERCombinerAnnotator.transferNERAnnotationsToAnnotation': {   'req_args': [   'nerTokenizedAnnotation',
                                                                                   'originalAnnotation'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NERCombinerAnnotator.java'},
    'NERDemo.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\demo\\NERDemo.java'},
    'NERFeatureFactory': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERFeatureFactory.java'},
    'NERFeatureFactory.clearMemory': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERFeatureFactory.java'},
    'NERFeatureFactory.describeDistsimLexicon': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERFeatureFactory.java'},
    'NERFeatureFactory.getCliqueFeatures': {   'req_args': [   'cInfo',
                                                               'loc',
                                                               'clique'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERFeatureFactory.java'},
    'NERFeatureFactory.init': {   'req_args': ['flags'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERFeatureFactory.java'},
    'NERGUI.checkFile': {   'req_args': ['file'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.clearDocument': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.colorToHTML': {   'req_args': ['color', ['color']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.displayError': {   'req_args': ['title', 'message'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.exit': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.getFile': {   'req_args': ['open', ['open']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.getNColors': {   'req_args': ['n'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.getURL': {   'req_args': [[]],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.loadClassifier': {   'req_args': [   'file',
                                                 'crf',
                                                 ['file'],
                                                 ['resource']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.loadDefaultClassifier': {   'req_args': ['crf'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.main': {   'req_args': ['args', ['args']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.makeTagToColorMap': {   'req_args': [   'tags',
                                                    'backgroundSymbol',
                                                    [   'tags',
                                                        'backgroundSymbol']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.openFile': {   'req_args': ['file', ['file']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.openURL': {   'req_args': ['url'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.redraw': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.saveFile': {   'req_args': ['file', 'contents'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERGUI.saveUntaggedContents': {   'req_args': ['file'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERGUI.java'},
    'NERServer': {   'req_args': ['port', 'asc', 'charset'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERServer.java'},
    'NERServer.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERServer.java'},
    'NERServer.run': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NERServer.java'},
    'NERServlet.doGet': {   'req_args': ['request', 'response'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\webapp\\NERServlet.java'},
    'NERServlet.doPost': {   'req_args': ['request', 'response'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\webapp\\NERServlet.java'},
    'NERServlet.init': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\ner\\webapp\\NERServlet.java'},
    'NPTmpRetainingTreeNormalizer': {   'req_args': [   [   'temporalAnnotation',
                                                            'doSGappedStuff'],
                                                        [   'temporalAnnotation',
                                                            'doSGappedStuff',
                                                            'leaveItAll',
                                                            'doAdverbialNP'],
                                                        [   'temporalAnnotation',
                                                            'doSGappedStuff',
                                                            'leaveItAll',
                                                            'doAdverbialNP',
                                                            'headFinder'],
                                                        [   'temporalAnnotation',
                                                            'doSGappedStuff',
                                                            'leaveItAll',
                                                            'doAdverbialNP',
                                                            'doGappingStuff'],
                                                        [   'temporalAnnotation',
                                                            'doSGappedStuff',
                                                            'leaveItAll',
                                                            'doAdverbialNP',
                                                            'doGappingStuff',
                                                            'headFinder']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NPTmpRetainingTreeNormalizer.java'},
    'NPTmpRetainingTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                           'tf'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NPTmpRetainingTreeNormalizer.java'},
    'NaiveBayesClassifier': {   'req_args': [   'weights',
                                                'priors',
                                                'labels',
                                                'features',
                                                'addZero',
                                                [   'weights',
                                                    'priors',
                                                    'labels']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifier.accuracy': {   'req_args': ['exampleIterator'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifier.classOf': {   'req_args': ['example', ['example']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifier.labels': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifier.print': {   'req_args': ['pw', []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifier.scoresOf': {   'req_args': ['example', ['example']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifier.java'},
    'NaiveBayesClassifierFactory': {   'req_args': [   [   'alphaC',
                                                           'alphaF',
                                                           'sigma',
                                                           'prior',
                                                           'kind']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifierFactory.java'},
    'NaiveBayesClassifierFactory.trainClassifier': {   'req_args': [   'examples',
                                                                       'featureSet',
                                                                       [   'dataset']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\NaiveBayesClassifierFactory.java'},
    'NameMatch': {   'req_args': [[]],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\NameMatch.java'},
    'NameMatch.checkEntityMatch': {   'req_args': [   'document',
                                                      'mentionCluster',
                                                      'potentialAntecedent',
                                                      'dict',
                                                      'roleSet',
                                                      [   'document',
                                                          'mentionCluster',
                                                          'potentialAntecedent',
                                                          'dict',
                                                          'roleSet']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\NameMatch.java'},
    'NameMatch.init': {   'req_args': ['props', ['props']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\NameMatch.java'},
    'NameMatchPrecise': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\NameMatchPrecise.java'},
    'NamedDependency': {   'req_args': [   'regent',
                                           'dependent',
                                           'name',
                                           ['regent', 'dependent', 'name']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.dependencyFactory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.factory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.name': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NamedDependency.toString': {   'req_args': [['format']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\NamedDependency.java'},
    'NaturalLogicAnnotator': {   'req_args': [   'annotatorName',
                                                 'props',
                                                 ['props'],
                                                 []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicAnnotator.java'},
    'NaturalLogicAnnotator.requirementsSatisfied': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicAnnotator.java'},
    'NaturalLogicAnnotator.requires': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicAnnotator.java'},
    'NaturalLogicWeights': {   'req_args': [   ['upperProbabilityCap'],
                                               [   'affinityModels',
                                                   'upperProbabilityCap']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NaturalLogicWeights.deletionProbability': {   'req_args': [   'edgeType',
                                                                   [   'edge',
                                                                       'neighbors']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NaturalLogicWeights.fromString': {   'req_args': ['str'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NaturalLogicWeights.objDeletionProbability': {   'req_args': [   'edge',
                                                                      'neighbors'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NaturalLogicWeights.ppDeletionProbability': {   'req_args': [   'edge',
                                                                     'neighbors'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NaturalLogicWeights.subjDeletionProbability': {   'req_args': [   'edge',
                                                                       'neighbors'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NaturalLogicWeights.java'},
    'NegraHeadFinder': {   'req_args': [['tlp']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraHeadFinder.java'},
    'NegraHeadFinder.basicCategory': {   'req_args': ['category'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraHeadFinder.java'},
    'NegraHeadFinder.isLabelAnnotationIntroducingCharacter': {   'req_args': [   'ch'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraHeadFinder.java'},
    'NegraHeadFinder.negraSemanticHeadFinder': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraHeadFinder.java'},
    'NegraLabel': {   'req_args': [   ['str'],
                                      ['str', 'features'],
                                      ['str', 'edge', 'features']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.featureValue': {   'req_args': ['feature'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.getEdge': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.labelFactory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.setEdge': {   'req_args': ['edge'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.setFeatureValue': {   'req_args': ['feature', 'value'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLabel.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLabel.java'},
    'NegraLexer': {   'req_args': ['in'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.getYYEOF': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.main': {   'req_args': ['argv'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.pushBack': {   'req_args': ['n'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yyatEOF': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yybegin': {   'req_args': ['newState'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yycharat': {   'req_args': ['position'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yyclose': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yylength': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yylex': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yypushback': {   'req_args': ['number'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yyreset': {   'req_args': ['reader'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yystate': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraLexer.yytext': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraLexer.java'},
    'NegraPennCollinizer': {   'req_args': ['tlpp', ['tlpp', 'deletePunct']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennCollinizer.java'},
    'NegraPennCollinizer.transformTree': {   'req_args': ['tree'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennCollinizer.java'},
    'NegraPennLanguagePack': {   'req_args': [   ['leaveGF'],
                                                 ['leaveGF', 'gfChar']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.basicCategory': {   'req_args': ['category'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.evalBIgnoredPunctuationTags': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.getEncoding': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.headFinder': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.isLeaveGF': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.punctuationTags': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.punctuationWords': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.setLeaveGF': {   'req_args': ['leaveGF'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.startSymbols': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.stripGF': {   'req_args': ['category'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.treeReaderFactory': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.treebankFileExtension': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLanguagePack.java'},
    'NegraPennLexer': {   'req_args': ['in'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.getYYEOF': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.main': {   'req_args': ['argv'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.pushBack': {   'req_args': ['n'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yyatEOF': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yybegin': {   'req_args': ['newState'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yycharat': {   'req_args': ['position'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yyclose': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yylength': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yylex': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yypushback': {   'req_args': ['number'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yyreset': {   'req_args': ['reader'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yystate': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennLexer.yytext': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennLexer.java'},
    'NegraPennTokenizer': {   'req_args': ['r'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTokenizer.java'},
    'NegraPennTokenizer.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTokenizer.java'},
    'NegraPennTreeNormalizer': {   'req_args': [   ['tlp'],
                                                   ['tlp', 'nodeCleanup']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.getInsertNPinPP': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.nonUnaryRootSymbol': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.normalizeNonterminal': {   'req_args': [   'category'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.normalizeTerminal': {   'req_args': ['leaf'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                      'tf'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.rootSymbol': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeNormalizer.setInsertNPinPP': {   'req_args': ['b'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeNormalizer.java'},
    'NegraPennTreeReaderFactory': {   'req_args': [   ['tlp'],
                                                      [   'nodeCleanup',
                                                          'treeNormalizerInsertNPinPP',
                                                          'treeNormalizerLeaveGF',
                                                          'tlp']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeReaderFactory.java'},
    'NegraPennTreeReaderFactory.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeReaderFactory.java'},
    'NegraPennTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\negra\\NegraPennTreeReaderFactory.java'},
    'NegraPennTreebankParserParams': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.collinizer': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.diskTreebank': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.display': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.headFinder': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.lex': {   'req_args': [   'op',
                                                             'wordIndex',
                                                             'tagIndex'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.setOptionFlag': {   'req_args': [   'args',
                                                                       'i'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.transformTree': {   'req_args': [   't',
                                                                       'root'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NegraPennTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NegraPennTreebankParserParams.java'},
    'NeuralCorefAlgorithm': {   'req_args': ['props', 'dictionaries'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefAlgorithm.java'},
    'NeuralCorefAlgorithm.runCoref': {   'req_args': ['document'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefAlgorithm.java'},
    'NeuralCorefDataExporter': {   'req_args': [   'props',
                                                   'dictionaries',
                                                   'dataPath',
                                                   'goldClusterPath'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefDataExporter.java'},
    'NeuralCorefDataExporter.exportData': {   'req_args': [   'outputPath',
                                                              'dataset',
                                                              'props',
                                                              'dictionaries'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefDataExporter.java'},
    'NeuralCorefDataExporter.finish': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefDataExporter.java'},
    'NeuralCorefDataExporter.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefDataExporter.java'},
    'NeuralCorefDataExporter.process': {   'req_args': ['id', 'document'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefDataExporter.java'},
    'NeuralCorefModel': {   'req_args': [   'antecedentMatrix',
                                            'anaphorMatrix',
                                            'pairFeaturesMatrix',
                                            'pairwiseFirstLayerBias',
                                            'anaphoricityModel',
                                            'pairwiseModel',
                                            'wordEmbeddings'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAnaphorEmbedding': {   'req_args': [   'mentionEmbedding'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAnaphorMatrix': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAnaphoricityModel': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAnaphoricityScore': {   'req_args': [   'mentionEmbedding',
                                                                 'anaphoricityFeatures'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAntecedentEmbedding': {   'req_args': [   'mentionEmbedding'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getAntecedentMatrix': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getPairFeaturesMatrix': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getPairwiseFirstLayerBias': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getPairwiseModel': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getPairwiseScore': {   'req_args': [   'antecedentEmbedding',
                                                             'anaphorEmbedding',
                                                             'pairFeatures'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefModel.getWordEmbeddings': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefModel.java'},
    'NeuralCorefProperties.greedyness': {   'req_args': ['props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefProperties.java'},
    'NeuralCorefProperties.modelPath': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefProperties.java'},
    'NeuralCorefProperties.pretrainedEmbeddingsPath': {   'req_args': ['props'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\neural\\NeuralCorefProperties.java'},
    'NeuralUtils': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.concatenate': {   'req_args': ['vectors'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.concatenateWithBias': {   'req_args': ['vectors'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.convertTextMatrix': {   'req_args': ['text'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.cosine': {   'req_args': ['vector1', 'vector2'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.dot': {   'req_args': ['vector1', 'vector2'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.elementwiseApplyLog': {   'req_args': ['input'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.elementwiseApplyReLU': {   'req_args': ['input'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.elementwiseApplyTanh': {   'req_args': ['input'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.elementwiseApplyTanhDerivative': {   'req_args': ['input'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.isZero': {   'req_args': ['matrix'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.loadTextMatrices': {   'req_args': ['path'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.loadTextMatrix': {   'req_args': ['path', ['file']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.oneHot': {   'req_args': ['index', 'size'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.paramsToVector': {   'req_args': [   'totalSize',
                                                      'matrices',
                                                      [   'scale',
                                                          'totalSize',
                                                          'matrices']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.randomGaussian': {   'req_args': [   'numRows',
                                                      'numCols',
                                                      'rand'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.sigmoid': {   'req_args': ['x'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.softmax': {   'req_args': ['input'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.toString': {   'req_args': ['matrix', 'format'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NeuralUtils.vectorToParams': {   'req_args': ['theta', 'matrices'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\NeuralUtils.java'},
    'NewlineLogFormatter.format': {   'req_args': ['rec'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\NewlineLogFormatter.java'},
    'NilLabelValidator.validLabel': {   'req_args': ['label', 'object'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\NilLabelValidator.java'},
    'NoEmptiesCTBTreeReaderFactory': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\NoEmptiesCTBTreeReaderFactory.java'},
    'NoPunctuationHeadFinder.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\NoPunctuationHeadFinder.java'},
    'NoSuchParseException': {   'req_args': [['error']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\NoSuchParseException.java'},
    'NodeAttributes': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.attributes': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.empty': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.root': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.setAttribute': {   'req_args': ['key', 'value'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.setEmpty': {   'req_args': ['empty'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodeAttributes.setRoot': {   'req_args': ['root'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodeAttributes.java'},
    'NodePattern': {   'req_args': [   'r',
                                       'negDesc',
                                       'attrs',
                                       'root',
                                       'empty',
                                       'name',
                                       [   'r',
                                           'negDesc',
                                           'attrs',
                                           'root',
                                           'empty',
                                           'name',
                                           'variableGroups']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.getChildren': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.getName': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.isNull': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.isRoot': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.localString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.makeLink': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.match': {   'req_args': ['node'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\NodePattern.java'},
    'NodePattern.matchWithResult': {   'req_args': ['node'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\NodePattern.java'},
    'NodePattern.matcher': {   'req_args': [   'sg',
                                               'node',
                                               'namesToNodes',
                                               'namesToRelations',
                                               'variableStrings',
                                               'ignoreCase',
                                               [   'sg',
                                                   'alignment',
                                                   'sg_align',
                                                   'hyp',
                                                   'node',
                                                   'namesToNodes',
                                                   'namesToRelations',
                                                   'variableStrings',
                                                   'ignoreCase']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.nodeAttrMatch': {   'req_args': ['node', 'sg', 'ignoreCase'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.setChild': {   'req_args': ['n'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePattern.toString': {   'req_args': [   ['hasPrecedence'],
                                                ['hasPrecedence', 'addChild']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\NodePattern.java'},
    'NodePruner': {   'req_args': ['parser', 'debinarizer'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NodePruner.java'},
    'NodePruner.prune': {   'req_args': ['tree'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NodePruner.java'},
    'NoisyLabelLinearCliquePotentialFunction': {   'req_args': [   'weights',
                                                                   'docLabels',
                                                                   'errorMatrix'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NoisyLabelLinearCliquePotentialFunction.java'},
    'NoisyLabelLinearCliquePotentialFunction.computeCliquePotential': {   'req_args': [   'cliqueSize',
                                                                                          'labelIndex',
                                                                                          'cliqueFeatures',
                                                                                          'featureVal',
                                                                                          'posInSent'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NoisyLabelLinearCliquePotentialFunction.java'},
    'NonDict2': {   'req_args': ['flags'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\NonDict2.java'},
    'NonDict2.checkDic': {   'req_args': ['c2', 'flags'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\NonDict2.java'},
    'NonDict2.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\NonDict2.java'},
    'NonLinearCliquePotentialFunction': {   'req_args': [   'linearWeights',
                                                            'inputLayerWeights',
                                                            'outputLayerWeights',
                                                            'flags'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearCliquePotentialFunction.java'},
    'NonLinearCliquePotentialFunction.computeCliquePotential': {   'req_args': [   'cliqueSize',
                                                                                   'labelIndex',
                                                                                   'cliqueFeatures',
                                                                                   'featureVal',
                                                                                   'posInSent'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearCliquePotentialFunction.java'},
    'NonLinearCliquePotentialFunction.hiddenLayerOutput': {   'req_args': [   'inputLayerWeights',
                                                                              'nodeCliqueFeatures',
                                                                              'aFlag',
                                                                              'featureVal'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearCliquePotentialFunction.java'},
    'NonLinearSecondOrderCliquePotentialFunction': {   'req_args': [   'inputLayerWeights4Edge',
                                                                       'outputLayerWeights4Edge',
                                                                       'inputLayerWeights',
                                                                       'outputLayerWeights',
                                                                       'flags'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearSecondOrderCliquePotentialFunction.java'},
    'NonLinearSecondOrderCliquePotentialFunction.computeCliquePotential': {   'req_args': [   'cliqueSize',
                                                                                              'labelIndex',
                                                                                              'cliqueFeatures',
                                                                                              'featureVal',
                                                                                              'posInSent'],
                                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearSecondOrderCliquePotentialFunction.java'},
    'NonLinearSecondOrderCliquePotentialFunction.hiddenLayerOutput': {   'req_args': [   'inputLayerWeights',
                                                                                         'nodeCliqueFeatures',
                                                                                         'aFlag',
                                                                                         'featureVal',
                                                                                         'cliqueSize'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\crf\\NonLinearSecondOrderCliquePotentialFunction.java'},
    'NotTreeException': {   'req_args': ['graph', 'originalGraph'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\NotTreeException.java'},
    'NullGrammarProjection': {   'req_args': ['bg', 'ug'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullGrammarProjection.project': {   'req_args': ['state'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullGrammarProjection.sourceBG': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullGrammarProjection.sourceUG': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullGrammarProjection.targetBG': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullGrammarProjection.targetUG': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\NullGrammarProjection.java'},
    'NullOutputStream.flush': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NullOutputStream.java'},
    'NullOutputStream.write': {   'req_args': ['i', ['b', 'off', 'len'], ['b']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NullOutputStream.java'},
    'NumberAnnotator': {   'req_args': [   ['verbose'],
                                           ['verbose', 'useSUTime'],
                                           [   'backgroundSymbol',
                                               'verbose',
                                               'useSUTime'],
                                           ['name', 'props']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NumberAnnotator.java'},
    'NumberAnnotator.annotate': {   'req_args': ['annotation'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NumberAnnotator.java'},
    'NumberAnnotator.requirementsSatisfied': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NumberAnnotator.java'},
    'NumberAnnotator.requires': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\NumberAnnotator.java'},
    'NumberMatchingRegex': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\NumberMatchingRegex.java'},
    'NumberMatchingRegex.isDecimalInteger': {   'req_args': ['string'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\NumberMatchingRegex.java'},
    'NumberMatchingRegex.isDouble': {   'req_args': ['string'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\NumberMatchingRegex.java'},
    'NumberNormalizer': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.findAndAnnotateNumericExpressions': {   'req_args': [   'annotation'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.findAndAnnotateNumericExpressionsWithRanges': {   'req_args': [   'annotation'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.findAndMergeNumbers': {   'req_args': ['annotationRaw'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.findNumbers': {   'req_args': ['annotation'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.getNewEnv': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.setVerbose': {   'req_args': ['verbose'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberNormalizer.wordToNumber': {   'req_args': ['str'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\NumberNormalizer.java'},
    'NumberRangeFileFilter': {   'req_args': ['min', 'max', 'recurse'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NumberRangeFileFilter.java'},
    'NumberRangeFileFilter.accept': {   'req_args': ['file'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NumberRangeFileFilter.java'},
    'NumberRangesFileFilter': {   'req_args': ['ranges', 'recurse'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NumberRangesFileFilter.java'},
    'NumberRangesFileFilter.accept': {   'req_args': ['file', ['str']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NumberRangesFileFilter.java'},
    'NumberRangesFileFilter.toString': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\NumberRangesFileFilter.java'},
    'NumberSequenceClassifier': {   'req_args': [   ['useSUTime'],
                                                    [   'props',
                                                        'useSUTime',
                                                        'sutimeProps']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.alignSentence': {   'req_args': ['sentence'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.classify': {   'req_args': ['document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokens',
                                                                                  'document',
                                                                                  'sentence'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.copyTokens': {   'req_args': [   'srcTokens',
                                                               'srcSentence'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.finalizeClassification': {   'req_args': [   'document'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.loadClassifier': {   'req_args': ['in', 'props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                                        [   'oos']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.train': {   'req_args': [   'docs',
                                                          'readerAndWriter'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'NumberSequenceClassifier.transferAnnotations': {   'req_args': [   'src',
                                                                        'dst'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\NumberSequenceClassifier.java'},
    'OSXAdapter': {   'req_args': ['inApp'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'OSXAdapter.enablePrefs': {   'req_args': ['enabled'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'OSXAdapter.handleAbout': {   'req_args': ['ae'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'OSXAdapter.handlePreferences': {   'req_args': ['ae'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'OSXAdapter.handleQuit': {   'req_args': ['ae'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'OSXAdapter.registerMacOSXApplication': {   'req_args': ['inApp'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\OSXAdapter.java'},
    'ObjectBank': {   'req_args': ['rif', 'ifrf'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.add': {   'req_args': ['o'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.addAll': {   'req_args': ['c'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.clear': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.clearMemory': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.contains': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.containsAll': {   'req_args': ['c'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.getLineIterator': {   'req_args': [   'filename',
                                                      ['filename', 'op'],
                                                      ['filename', 'encoding'],
                                                      ['reader'],
                                                      ['reader', 'op'],
                                                      ['file'],
                                                      ['file', 'op'],
                                                      ['file', 'encoding'],
                                                      [   'file',
                                                          'op',
                                                          'encoding'],
                                                      [   'filesStringsAndReaders',
                                                          'op'],
                                                      [   'filesStringsAndReaders',
                                                          'encoding'],
                                                      [   'filesStringsAndReaders',
                                                          'op',
                                                          'encoding']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.isEmpty': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.iterator': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.keepInMemory': {   'req_args': ['keep'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.remove': {   'req_args': ['o'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.removeAll': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.retainAll': {   'req_args': ['c'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.size': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBank.toArray': {   'req_args': [['o']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ObjectBank.java'},
    'ObjectBankWrapper': {   'req_args': ['flags', 'wrapped', 'knownLCWords'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.add': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.addAll': {   'req_args': ['c'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.clear': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.clearMemory': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.contains': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.containsAll': {   'req_args': ['c'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.isEmpty': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.iterator': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.keepInMemory': {   'req_args': ['keep'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.processDocument': {   'req_args': ['doc'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.remove': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.removeAll': {   'req_args': ['c'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.retainAll': {   'req_args': ['c'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectBankWrapper.size': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ObjectBankWrapper.java'},
    'ObjectSceneGraphParser': {   'req_args': ['entityClassifierPath'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\ObjectSceneGraphParser.java'},
    'ObjectSceneGraphParser.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\ObjectSceneGraphParser.java'},
    'ObjectSceneGraphParser.parse': {   'req_args': ['sg'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\ObjectSceneGraphParser.java'},
    'OneNameSentenceSieve': {   'req_args': [   'doc',
                                                'characterMap',
                                                'pronounCorefMap',
                                                'animacySet'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\OneNameSentenceSieve.java'},
    'OneNameSentenceSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\OneNameSentenceSieve.java'},
    'OneNameSentenceSieve.oneNameSentence': {   'req_args': ['doc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\OneNameSentenceSieve.java'},
    'OneToOneMap': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.clear': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.containsLeftAsKey': {   'req_args': ['l'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.containsRightAsKey': {   'req_args': ['r'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.entrySetLeftAsKey': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.entrySetRightAsKey': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.getLeftAsKey': {   'req_args': ['l'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.getRightAsKey': {   'req_args': ['r'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.isEmpty': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.put': {   'req_args': ['l', 'r'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.removeLeftAsKey': {   'req_args': ['l'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.removeRightAsKey': {   'req_args': ['r'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.valuesLeftAsKey': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneToOneMap.valuesRightAsKey': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\OneToOneMap.java'},
    'OneVsAllClassifier': {   'req_args': [   'featureIndex',
                                              'labelIndex',
                                              [   'featureIndex',
                                                  'labelIndex',
                                                  'binaryClassifiers'],
                                              [   'featureIndex',
                                                  'labelIndex',
                                                  'binaryClassifiers',
                                                  'defaultLabel']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OneVsAllClassifier.addBinaryClassifier': {   'req_args': [   'label',
                                                                  'classifier'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OneVsAllClassifier.classOf': {   'req_args': ['example'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OneVsAllClassifier.labels': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OneVsAllClassifier.scoresOf': {   'req_args': ['example'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OneVsAllClassifier.train': {   'req_args': [   'classifierFactory',
                                                    'dataset',
                                                    [   'classifierFactory',
                                                        'dataset',
                                                        'trainLabels']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\OneVsAllClassifier.java'},
    'OntoNotesFilePreparation': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\OntoNotesFilePreparation.java'},
    'OntoNotesFilePreparation.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\OntoNotesFilePreparation.java'},
    'OntoNotesUDUpdater.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\OntoNotesUDUpdater.java'},
    'OpenIEDemo': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OpenIEDemo.java'},
    'OpenIEDemo.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OpenIEDemo.java'},
    'OpenIEParser': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\OpenIEParser.java'},
    'OpenIEParser.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\OpenIEParser.java'},
    'OpenIEParser.parse': {   'req_args': ['sg', ['annotation']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\OpenIEParser.java'},
    'OpenIEServlet.annotate': {   'req_args': ['pipeline', 'ann'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenIEServlet.doGet': {   'req_args': ['request', 'response'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenIEServlet.doPost': {   'req_args': ['request', 'response'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenIEServlet.init': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenIEServlet.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenIEServlet.quote': {   'req_args': ['string'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\demo\\OpenIEServlet.java'},
    'OpenPageDialog': {   'req_args': ['parent', 'modal'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ui\\OpenPageDialog.java'},
    'OpenPageDialog.getPage': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ui\\OpenPageDialog.java'},
    'OpenPageDialog.getStatus': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ui\\OpenPageDialog.java'},
    'OpenPageDialog.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ui\\OpenPageDialog.java'},
    'OpenPageDialog.setFileChooser': {   'req_args': ['jfc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ui\\OpenPageDialog.java'},
    'OperatorSpec': {   'req_args': [   'instance',
                                        'quantifierBegin',
                                        'quantifierEnd',
                                        'subjectBegin',
                                        'subjectEnd',
                                        'objectBegin',
                                        'objectEnd',
                                        [   'instance',
                                            'quantifierBegin',
                                            'quantifierEnd',
                                            'subjectBegin',
                                            'subjectEnd',
                                            'objectBegin',
                                            'objectEnd',
                                            'sentenceLength']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.equals': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.isBinary': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.isExplicit': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.merge': {   'req_args': ['x', 'y'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.quantifierLength': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'OperatorSpec.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\OperatorSpec.java'},
    'Options': {   'req_args': [   'name',
                                   'props',
                                   [],
                                   ['tlpParams'],
                                   [],
                                   ['name', 'props']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Options.java'},
    'Options.display': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.langpack': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.newTestOptions': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.newTrainOptions': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.readData': {   'req_args': ['in'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.setOption': {   'req_args': ['flags', 'i'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.setOptionOrWarn': {   'req_args': ['flags', 'i'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.setOptions': {   'req_args': [   'flags',
                                              [   'flags',
                                                  'startIndex',
                                                  'endIndexPlusOne']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.setOptionsOrWarn': {   'req_args': [   'flags',
                                                    [   'flags',
                                                        'startIndex',
                                                        'endIndexPlusOne']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'Options.writeData': {   'req_args': ['w'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\Options.java'},
    'OracleSieve': {   'req_args': ['props', 'sievename'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\OracleSieve.java'},
    'OracleSieve.findCoreferentAntecedent': {   'req_args': [   'm',
                                                                'mIdx',
                                                                'document',
                                                                'dict',
                                                                'props',
                                                                'sbLog'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\OracleSieve.java'},
    'OrderedCombinationTreeNormalizer': {   'req_args': [['tns']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OrderedCombinationTreeNormalizer.java'},
    'OrderedCombinationTreeNormalizer.addTreeNormalizer': {   'req_args': [   'tn'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OrderedCombinationTreeNormalizer.java'},
    'OrderedCombinationTreeNormalizer.normalizeNonterminal': {   'req_args': [   'category'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OrderedCombinationTreeNormalizer.java'},
    'OrderedCombinationTreeNormalizer.normalizeTerminal': {   'req_args': [   'leaf'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OrderedCombinationTreeNormalizer.java'},
    'OrderedCombinationTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                               'tf'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OrderedCombinationTreeNormalizer.java'},
    'OutputHandler.colorChannel': {   'req_args': ['channel', 'color'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.handle': {   'req_args': ['record'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.print': {   'req_args': ['channel', 'line'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.setColorChannels': {   'req_args': ['colorChannels'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.signalEndTrack': {   'req_args': ['newDepth', 'timeOfEnd'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.signalStartTrack': {   'req_args': ['signal'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputHandler.styleChannel': {   'req_args': ['channel', 'style'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\OutputHandler.java'},
    'OutputSubtrees.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\OutputSubtrees.java'},
    'OutsideRuleFilter': {   'req_args': ['bg', 'stateIndex', 'tagIndex'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'OutsideRuleFilter.advanceLeft': {   'req_args': ['tags'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'OutsideRuleFilter.advanceRight': {   'req_args': ['tags'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'OutsideRuleFilter.init': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'OutsideRuleFilter.leftAccepting': {   'req_args': ['result'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'OutsideRuleFilter.rightAccepting': {   'req_args': ['result'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\OutsideRuleFilter.java'},
    'POSTaggerAnnotator': {   'req_args': [   ['verbose'],
                                              ['posLoc', 'verbose'],
                                              [   'posLoc',
                                                  'verbose',
                                                  'maxSentenceLength',
                                                  'numThreads'],
                                              ['model'],
                                              [   'model',
                                                  'maxSentenceLength',
                                                  'numThreads'],
                                              ['annotatorName', 'props']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\POSTaggerAnnotator.java'},
    'POSTaggerAnnotator.annotate': {   'req_args': ['annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\POSTaggerAnnotator.java'},
    'POSTaggerAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\POSTaggerAnnotator.java'},
    'POSTaggerAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\POSTaggerAnnotator.java'},
    'PRCurve': {   'req_args': [   'filename',
                                   ['filename', 'svm'],
                                   ['dataScores']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.accuracy': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.correct': {   'req_args': ['score', 'cls'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.cwa': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.cwaArray': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.f1': {   'req_args': ['tp', 'fp', 'fn'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.fmeasure': {   'req_args': ['numleft', 'numright', ['recall']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.init': {   'req_args': ['dataScores'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.initMC': {   'req_args': ['dataScores'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.logLikelihood': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.logPrecision': {   'req_args': ['recall'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.opFmeasure': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.optFmeasure': {   'req_args': ['recall'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.optimalAccuracy': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.optimalCwa': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.optimalCwaArray': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PRCurve.precision': {   'req_args': ['recall'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\PRCurve.java'},
    'PTB2TextLexer': {   'req_args': ['in'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.next': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yyatEOF': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yybegin': {   'req_args': ['newState'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yycharat': {   'req_args': ['position'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yyclose': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yylength': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yypushback': {   'req_args': ['number'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yyreset': {   'req_args': ['reader'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yystate': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTB2TextLexer.yytext': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTB2TextLexer.java'},
    'PTBEscapingProcessor': {   'req_args': [   ['fixQuotes'],
                                                [   'escapeChars',
                                                    'replaceEscapes',
                                                    'substChars',
                                                    'replaceSubsts',
                                                    'fixQuotes']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBEscapingProcessor.apply': {   'req_args': ['hasWordsList'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBEscapingProcessor.escapeString': {   'req_args': ['s'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBEscapingProcessor.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBEscapingProcessor.process': {   'req_args': ['input'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBEscapingProcessor.unprocess': {   'req_args': ['s'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBEscapingProcessor.java'},
    'PTBLexer': {   'req_args': ['r', 'tf', 'options', ['in']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.next': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yyatEOF': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yybegin': {   'req_args': ['newState'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yycharat': {   'req_args': ['position'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yyclose': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yylength': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yypushback': {   'req_args': ['number'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yyreset': {   'req_args': ['reader'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yystate': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBLexer.yytext': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBLexer.java'},
    'PTBTokenizer': {   'req_args': [   'r',
                                        'tokenizeNLs',
                                        'invertible',
                                        'suppressEscaping',
                                        'tokenFactory',
                                        ['r', 'tokenFactory', 'options']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.coreLabelFactory': {   'req_args': [['options']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.factory': {   'req_args': [   ['tokenizeNLs', 'invertible'],
                                                ['factory', 'options']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.getNewlineToken': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.labelList2Text': {   'req_args': ['ptbWords'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.newPTBTokenizer': {   'req_args': [   'r',
                                                        [   'r',
                                                            'tokenizeNLs',
                                                            'invertible']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.ptb2Text': {   'req_args': [   'ptbText',
                                                 ['ptbText', 'w'],
                                                 ['ptbWords']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PTBTokenizer.ptbToken2Text': {   'req_args': ['ptbText'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\PTBTokenizer.java'},
    'PaddedList': {   'req_args': ['l', ['l', 'padding']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.get': {   'req_args': ['i'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.getPad': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.getWrappedList': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.sameInnerList': {   'req_args': ['p'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.size': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'PaddedList.valueOf': {   'req_args': ['list', 'padding'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PaddedList.java'},
    'Pair': {   'req_args': [['first', 'second']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.asList': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.compareTo': {   'req_args': ['another'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.equals': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.first': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.internedStringPair': {   'req_args': ['first', 'second'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.makePair': {   'req_args': ['x', 'y'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.prettyLog': {   'req_args': ['channels', 'description'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.save': {   'req_args': ['out'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.second': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.setFirst': {   'req_args': ['o'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.setSecond': {   'req_args': ['o'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.stringIntern': {   'req_args': ['p'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'Pair.toString': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pair.java'},
    'PairsHolder': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\PairsHolder.java'},
    'PairsHolder.setSize': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\PairsHolder.java'},
    'PairsHolder.size': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\PairsHolder.java'},
    'PairsHolder.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\PairsHolder.java'},
    'PairwiseModel': {   'req_args': ['builder'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.getClassifier': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.getDefaultOutputPath': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.getNumEpochs': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.getNumTrainingExamples': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.learn': {   'req_args': [   'example',
                                               'mentionFeatures',
                                               'compressor',
                                               [   'example',
                                                   'mentionFeatures',
                                                   'compressor',
                                                   'weight'],
                                               [   'correct',
                                                   'incorrect',
                                                   'mentionFeatures',
                                                   'compressor',
                                                   'weight']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.newBuilder': {   'req_args': ['name', 'meta'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.predict': {   'req_args': [   'example',
                                                 'mentionFeatures',
                                                 'compressor'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModel.writeModel': {   'req_args': [['outputPath']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModel.java'},
    'PairwiseModelTrainer.getAnaphoricityExamples': {   'req_args': [   'documents'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'PairwiseModelTrainer.getExamples': {   'req_args': ['documents'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'PairwiseModelTrainer.test': {   'req_args': [   'model',
                                                     'predictionsName',
                                                     'anaphoricityModel'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'PairwiseModelTrainer.trainClassification': {   'req_args': [   'model',
                                                                    'anaphoricityModel'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'PairwiseModelTrainer.trainRanking': {   'req_args': ['model'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'PairwiseModelTrainer.writeScores': {   'req_args': [   'examples',
                                                            'compressor',
                                                            'model',
                                                            'writer',
                                                            'scores'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\PairwiseModelTrainer.java'},
    'ParagraphAnnotator': {   'req_args': ['props', 'verbose'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\ParagraphAnnotator.java'},
    'ParagraphAnnotator.annotate': {   'req_args': ['annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\ParagraphAnnotator.java'},
    'ParagraphAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\ParagraphAnnotator.java'},
    'ParagraphAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\ParagraphAnnotator.java'},
    'ParagraphEndQuoteClosestSieve': {   'req_args': [   'doc',
                                                         'characterMap',
                                                         'pronounCorefMap',
                                                         'animacySet'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ParagraphEndQuoteClosestSieve.java'},
    'ParagraphEndQuoteClosestSieve.doQuoteToMention': {   'req_args': ['doc'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ParagraphEndQuoteClosestSieve.java'},
    'ParagraphEndQuoteClosestSieve.paragraphEndQuoteClosestBefore': {   'req_args': [   'doc'],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\ParagraphEndQuoteClosestSieve.java'},
    'ParentAnnotationStats': {   'req_args': ['tlp', 'doTags'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.getEnglishSplitCategories': {   'req_args': [   'treebankRoot'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.getSplitCategories': {   'req_args': [   't',
                                                                    'cutOff',
                                                                    'tlp',
                                                                    [   't',
                                                                        'doTags',
                                                                        'algorithm',
                                                                        'phrasalCutOff',
                                                                        'tagCutOff',
                                                                        'tlp']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.kidLabels': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.printStats': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.processTreeHelper': {   'req_args': ['gP', 'p', 't'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParentAnnotationStats.visitTree': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParentAnnotationStats.java'},
    'ParseAndPrintMatrices.findRootTree': {   'req_args': ['vectors'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\ParseAndPrintMatrices.java'},
    'ParseAndPrintMatrices.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\ParseAndPrintMatrices.java'},
    'ParseAndPrintMatrices.outputMatrix': {   'req_args': ['bout', 'matrix'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\ParseAndPrintMatrices.java'},
    'ParseAndPrintMatrices.outputTreeMatrices': {   'req_args': [   'bout',
                                                                    'tree',
                                                                    'vectors'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\ParseAndPrintMatrices.java'},
    'ParseAndSetLabels': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.loadParser': {   'req_args': [   'parserFile',
                                                        'taggerFile'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.parseSentences': {   'req_args': [   'sentences',
                                                            'parser',
                                                            'binarizer'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.readLabelMap': {   'req_args': [   'labelsFile',
                                                          'separator',
                                                          'remapLabels'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.readSentences': {   'req_args': ['sentencesFile'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.setLabels': {   'req_args': [   'tree',
                                                       'labelMap',
                                                       'missing',
                                                       'defaultLabel',
                                                       'unknowns',
                                                       [   'trees',
                                                           'labelMap',
                                                           'missing',
                                                           'defaultLabel']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseAndSetLabels.writeTrees': {   'req_args': ['trees', 'outputFile'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\ParseAndSetLabels.java'},
    'ParseException': {   'req_args': [   'currentTokenVal',
                                          'expectedTokenSequencesVal',
                                          'tokenImageVal',
                                          [],
                                          ['message'],
                                          [   'currentTokenVal',
                                              'expectedTokenSequencesVal',
                                              'tokenImageVal'],
                                          [],
                                          ['message'],
                                          [   'currentTokenVal',
                                              'expectedTokenSequencesVal',
                                              'tokenImageVal'],
                                          [],
                                          ['message'],
                                          [   'currentTokenVal',
                                              'expectedTokenSequencesVal',
                                              'tokenImageVal'],
                                          [],
                                          ['message']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\ParseException.java'},
    'ParseFiles': {   'req_args': ['op', 'treePrint', 'pqFactory'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParseFiles.java'},
    'ParseFiles.parseFiles': {   'req_args': [   'args',
                                                 'argIndex',
                                                 'tokenized',
                                                 'tokenizerFactory',
                                                 'elementDelimiter',
                                                 'sentenceDelimiter',
                                                 'escaper',
                                                 'tagDelimiter',
                                                 'op',
                                                 'treePrint',
                                                 'pqFactory',
                                                 [   'args',
                                                     'argIndex',
                                                     'tokenized',
                                                     'tokenizerFactory',
                                                     'elementDelimiter',
                                                     'sentenceDelimiter',
                                                     'escaper',
                                                     'tagDelimiter']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParseFiles.java'},
    'ParseFiles.processResults': {   'req_args': ['parserQuery', 'num', 'pwo'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ParseFiles.java'},
    'ParsedGigawordReader': {   'req_args': ['directory'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\ParsedGigawordReader.java'},
    'ParsedGigawordReader.iterator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\ParsedGigawordReader.java'},
    'Parser': {   'req_args': [['parserFilename', 'dataFilename']],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\Parser.java'},
    'Parser.main': {   'req_args': ['args'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\Parser.java'},
    'ParserAnnotations': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserAnnotations.java'},
    'ParserAnnotator': {   'req_args': [   'verbose',
                                           'maxSent',
                                           [   'parserLoc',
                                               'verbose',
                                               'maxSent',
                                               'flags'],
                                           ['parser', 'verbose', 'maxSent'],
                                           [   'parser',
                                               'verbose',
                                               'maxSent',
                                               'treeMap'],
                                           ['annotatorName', 'props']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotator.java'},
    'ParserAnnotator.doOneFailedSentence': {   'req_args': [   'annotation',
                                                               'sentence'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotator.java'},
    'ParserAnnotator.requirementsSatisfied': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotator.java'},
    'ParserAnnotator.requires': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotator.java'},
    'ParserAnnotator.signature': {   'req_args': ['annotatorName', 'props'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotator.java'},
    'ParserAnnotatorUtils': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotatorUtils.java'},
    'ParserAnnotatorUtils.fillInParseAnnotations': {   'req_args': [   'verbose',
                                                                       'buildGraphs',
                                                                       'gsf',
                                                                       'sentence',
                                                                       'trees',
                                                                       'extras'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ParserAnnotatorUtils.java'},
    'ParserConstraint': {   'req_args': [   'start',
                                            'end',
                                            'pattern',
                                            ['start', 'end', 'state']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserConstraint.java'},
    'ParserConstraint.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserConstraint.java'},
    'ParserDemo': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo.java'},
    'ParserDemo.demoAPI': {   'req_args': ['lp'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo.java'},
    'ParserDemo.demoDP': {   'req_args': ['lp', 'filename'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo.java'},
    'ParserDemo.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo.java'},
    'ParserDemo2': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo2.java'},
    'ParserDemo2.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\demo\\ParserDemo2.java'},
    'ParserGrammar.apply': {   'req_args': ['words'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.defaultCoreNLPFlags': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.getExtraEvals': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.getOp': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.getParserQueryEvals': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.getTLPParams': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.lemmatize': {   'req_args': ['sentence', ['tokens']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.loadModel': {   'req_args': ['path', 'extraFlags'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.loadModelFromZip': {   'req_args': [   'zipFilename',
                                                          'modelName'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.loadTagger': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.parse': {   'req_args': ['sentence', ['words']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.parseTree': {   'req_args': ['words'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.parserQuery': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.requiresTags': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.setOptionFlags': {   'req_args': ['flags'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.tokenize': {   'req_args': ['sentence'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserGrammar.treebankLanguagePack': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserGrammar.java'},
    'ParserPanel': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.loadFile': {   'req_args': [['filename']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.loadJarParser': {   'req_args': ['jarFile', 'model'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.loadParser': {   'req_args': [['filename']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.parse': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.saveOutput': {   'req_args': [['filename']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.scrollBack': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.scrollForward': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserPanel.setStatus': {   'req_args': ['status'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\ParserPanel.java'},
    'ParserUtils': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserUtils.java'},
    'ParserUtils.flattenTallTrees': {   'req_args': ['maxHeight', 'trees'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserUtils.java'},
    'ParserUtils.printOutOfMemory': {   'req_args': ['pw'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserUtils.java'},
    'ParserUtils.xTree': {   'req_args': ['words'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParserUtils.java'},
    'ParsingSystem': {   'req_args': [   'tlp',
                                         'labels',
                                         'transitions',
                                         'verbose'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.apply': {   'req_args': ['c', 't'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.canApply': {   'req_args': ['c', 't'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.evaluate': {   'req_args': [   'sentences',
                                                  'trees',
                                                  'goldTrees'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.getOracle': {   'req_args': ['c', 'dTree'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.getTransitionID': {   'req_args': ['s'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.getUAS': {   'req_args': ['sentences', 'trees', 'goldTrees'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.getUASnoPunc': {   'req_args': [   'sentences',
                                                      'trees',
                                                      'goldTrees'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.initialConfiguration': {   'req_args': ['sentence'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingSystem.numTransitions': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\ParsingSystem.java'},
    'ParsingThreadsafeProcessor': {   'req_args': [   'pqFactory',
                                                      ['pqFactory', 'pwErr']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParsingThreadsafeProcessor.java'},
    'ParsingThreadsafeProcessor.newInstance': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParsingThreadsafeProcessor.java'},
    'ParsingThreadsafeProcessor.process': {   'req_args': ['sentence'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\common\\ParsingThreadsafeProcessor.java'},
    'PascalTemplate': {   'req_args': [['pt']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.acronymMatch': {   'req_args': [   's1',
                                                       's2',
                                                       'stemmedAcronymIndex'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.equals': {   'req_args': ['obj'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.getFieldIndex': {   'req_args': ['tag'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.getValue': {   'req_args': ['fieldName'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.mergeCliqueTemplates': {   'req_args': [   'dt',
                                                               'location',
                                                               'wi'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.print': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.setValue': {   'req_args': [   'fieldName',
                                                   'value',
                                                   ['index', 'value']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.stemAcronym': {   'req_args': ['s', 'ct'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.unpackToCliqueTemplates': {   'req_args': ['ct', 'score'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PascalTemplate.writeToFieldValueCounter': {   'req_args': [   'fieldValueCounter',
                                                                   'score'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\PascalTemplate.java'},
    'PathExtractor': {   'req_args': ['hf', 'op'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PathExtractor.java'},
    'PathExtractor.formResult': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PathExtractor.java'},
    'Pattern': {   'req_args': ['type'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.equalContext': {   'req_args': ['p'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.getContext': {   'req_args': [   'patternClass',
                                              'sent',
                                              'i',
                                              'stopWords'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.getRelevantWords': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.sameGenre': {   'req_args': ['patternClass', 'p1', 'p2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.subsumes': {   'req_args': ['patternClass', 'pat', 'p'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.toString': {   'req_args': ['notAllowedClasses'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'Pattern.toStringSimple': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\Pattern.java'},
    'PatternFactory.doNotUse': {   'req_args': ['word', 'stopWords'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PatternFactory.java'},
    'PatternFactory.getPatternsAroundTokens': {   'req_args': [   'patternType',
                                                                  'sent',
                                                                  'stopWords'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PatternFactory.java'},
    'PatternFactory.setUp': {   'req_args': ['props', 'patternType', 'labels'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PatternFactory.java'},
    'PatternToken': {   'req_args': [   'tag',
                                        'useTag',
                                        'getCompoundPhrases',
                                        'numWordsCompound',
                                        'nerTag',
                                        'useNER',
                                        'useTargetParserParentRestriction',
                                        'grandparentParseTag'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternToken.java'},
    'PatternToken.copy': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternToken.java'},
    'PatternToken.equals': {   'req_args': ['b'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternToken.java'},
    'PatternToken.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternToken.java'},
    'PatternToken.toStringToWrite': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternToken.java'},
    'PatternsForEachToken.addPatterns': {   'req_args': ['pats', ['id', 'p']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.close': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.createIndexIfUsingDBAndNotExists': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.getPatternsForAllTokens': {   'req_args': [   'sentId',
                                                                        [   'sampledSentIds']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.getPatternsInstance': {   'req_args': [   'props',
                                                                    'storePatsForEachToken'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.getStoreWay': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.load': {   'req_args': ['allPatternsDir'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.save': {   'req_args': ['dir'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.setupSearch': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachToken.updatePatterns': {   'req_args': ['tempPatsForSents'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachToken.java'},
    'PatternsForEachTokenDB': {   'req_args': ['props', 'pats', ['props']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.DBTableExists': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.addPatterns': {   'req_args': ['pats', ['id', 'p']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.close': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.containsSentId': {   'req_args': ['sentId'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.createIndexIfUsingDBAndNotExists': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.createUpsertFunction': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.createUpsertFunctionPatternIndex': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.getPatternsForAllTokens': {   'req_args': [   'sentId',
                                                                          [   'sampledSentIds']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.load': {   'req_args': ['allPatternsDir'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.save': {   'req_args': ['dir'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.setupSearch': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenDB.size': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenDB.java'},
    'PatternsForEachTokenInMemory': {   'req_args': [   'props',
                                                        'pats',
                                                        ['props']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.addPatterns': {   'req_args': [   'sentId',
                                                                    'patterns',
                                                                    ['pats']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.close': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.containsSentId': {   'req_args': ['sentId'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.createIndexIfUsingDBAndNotExists': {   'req_args': [   ],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.getPatternsForAllTokens': {   'req_args': [   'sentId',
                                                                                [   'sampledSentIds']],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.load': {   'req_args': ['allPatternsDir'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.save': {   'req_args': ['dir'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.setupSearch': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenInMemory.size': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenInMemory.java'},
    'PatternsForEachTokenLucene': {   'req_args': ['props', 'pats', ['props']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.addPatterns': {   'req_args': [   'pats',
                                                                  ['id', 'p']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.checkClean': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.close': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.createIndexIfUsingDBAndNotExists': {   'req_args': [   ],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.getPatternsForAllTokens': {   'req_args': [   'sentId',
                                                                              [   'sentIds']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.load': {   'req_args': ['allPatternsDir'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.save': {   'req_args': ['dir'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PatternsForEachTokenLucene.setupSearch': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\PatternsForEachTokenLucene.java'},
    'PennTreeReader': {   'req_args': [   'in',
                                          ['in', 'tf'],
                                          ['in', 'tf', 'tn'],
                                          ['in', 'tf', 'tn', 'st']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReader.java'},
    'PennTreeReader.close': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReader.java'},
    'PennTreeReader.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReader.java'},
    'PennTreeReader.readTree': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReader.java'},
    'PennTreeReaderFactory': {   'req_args': [['tf'], ['tn'], ['tf', 'tn']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReaderFactory.java'},
    'PennTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreeReaderFactory.java'},
    'PennTreebankLanguagePack': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.evalBIgnoredPunctuationTags': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.grammaticalStructureFactory': {   'req_args': [   [   'puncFilter'],
                                                                                [   'puncFilter',
                                                                                    'hf']],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.headFinder': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.supportsGrammaticalStructures': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankLanguagePack.java'},
    'PennTreebankTokenizer': {   'req_args': ['r'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\PennTreebankTokenizer.java'},
    'PerceptronModel': {   'req_args': [   'op',
                                           'transitionIndex',
                                           'knownStates',
                                           'rootStates',
                                           'rootOnlyStates',
                                           ['other']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.averageModels': {   'req_args': ['models'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.averageScoredModels': {   'req_args': ['scoredModels'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.findHighestScoringTransitions': {   'req_args': [   'state',
                                                                         'requireLegal',
                                                                         'numTransitions',
                                                                         'constraints'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.maxAbs': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.numWeights': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.outputStats': {   'req_args': ['result'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'PerceptronModel.trainModel': {   'req_args': [   'op',
                                                      'transitionIndex',
                                                      'knownStates',
                                                      'rootStates',
                                                      'rootOnlyStates',
                                                      'initialModel',
                                                      'serializedPath',
                                                      'tagger',
                                                      'random',
                                                      'trainingData',
                                                      'devTreebank',
                                                      'nThreads'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\PerceptronModel.java'},
    'Person': {   'req_args': ['name', 'gender', 'aliases'],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Person.java'},
    'Person.contains': {   'req_args': ['name'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Person.java'},
    'Person.toString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Person.java'},
    'PhraseScorer': {   'req_args': ['constvar'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getDictOddsScore': {   'req_args': [   'word',
                                                         'label',
                                                         'defaultWt'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getDistSimWtScore': {   'req_args': ['ph', 'label'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getDomainNgramScore': {   'req_args': ['g'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getGoogleNgramScore': {   'req_args': ['g'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getPhraseWeightFromWords': {   'req_args': [   'weights',
                                                                 'ph',
                                                                 'defaultWt'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.getWordShapeScore': {   'req_args': ['word', 'label'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.printReasonForChoosing': {   'req_args': ['phrases'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.scorePhrases': {   'req_args': [   'label',
                                                     'terms',
                                                     'forLearningPatterns'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseScorer.wordShape': {   'req_args': ['word'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\PhraseScorer.java'},
    'PhraseTable': {   'req_args': [   ['initSize'],
                                       [   'normalize',
                                           'caseInsensitive',
                                           'ignorePunctuation']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.addPhrase': {   'req_args': [   'phraseText',
                                                 ['phraseText', 'tag'],
                                                 [   'phraseText',
                                                     'tag',
                                                     'phraseData'],
                                                 ['tokens'],
                                                 ['tokens', 'tag'],
                                                 [   'tokens',
                                                     'tag',
                                                     'phraseData']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.addPhrases': {   'req_args': [   'phraseTexts',
                                                  ['taggedPhraseTexts']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.clear': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.containsKey': {   'req_args': ['key'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.findAllMatches': {   'req_args': [   'text',
                                                      ['tokens'],
                                                      [   'acceptablePhrases',
                                                          'text'],
                                                      [   'acceptablePhrases',
                                                          'tokens'],
                                                      [   'tokens',
                                                          'tokenStart',
                                                          'tokenEnd',
                                                          'needNormalization'],
                                                      [   'acceptablePhrases',
                                                          'tokens',
                                                          'tokenStart',
                                                          'tokenEnd',
                                                          'needNormalization']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.findMatches': {   'req_args': [   'text',
                                                   ['tokens'],
                                                   [   'tokens',
                                                       'tokenStart',
                                                       'tokenEnd',
                                                       'needNormalization'],
                                                   [   'text',
                                                       'tokenStart',
                                                       'tokenEnd',
                                                       'needNormalization']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.findNonOverlappingPhrases': {   'req_args': ['phraseMatches'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.get': {   'req_args': ['key'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.getLongestPhrase': {   'req_args': ['phrases'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.getNormalizedForm': {   'req_args': ['word'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.isEmpty': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.iterator': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.lookup': {   'req_args': ['phrase', ['wordList']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.lookupNormalized': {   'req_args': ['phrase'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.readPhrases': {   'req_args': [   'filename',
                                                   'checkTag',
                                                   [   'filename',
                                                       'checkTag',
                                                       'delimiterRegex'],
                                                   [   'filename',
                                                       'checkTag',
                                                       'delimiterPattern'],
                                                   [   'filename',
                                                       'phraseColIndex',
                                                       'tagColIndex']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.readPhrasesWithTagScores': {   'req_args': [   'filename',
                                                                [   'filename',
                                                                    'fieldDelimiterRegex',
                                                                    'countDelimiterRegex'],
                                                                [   'filename',
                                                                    'fieldDelimiterPattern',
                                                                    'countDelimiterPattern']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.setNormalizationCacheSize': {   'req_args': ['cacheSize'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.splitText': {   'req_args': ['phraseText'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.toNormalizedWordList': {   'req_args': ['phraseText'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.toString': {   'req_args': ['wordList'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PhraseTable.toWordList': {   'req_args': ['phraseText'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\PhraseTable.java'},
    'PlainTextDocumentReaderAndWriter': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\PlainTextDocumentReaderAndWriter.java'},
    'PlainTextDocumentReaderAndWriter.getAnswers': {   'req_args': [   'l',
                                                                       'outputStyle',
                                                                       'preserveSpacing'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\PlainTextDocumentReaderAndWriter.java'},
    'PlainTextDocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\PlainTextDocumentReaderAndWriter.java'},
    'PlainTextDocumentReaderAndWriter.init': {   'req_args': [   'flags',
                                                                 [   'flags',
                                                                     'tokenizerFactory']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\PlainTextDocumentReaderAndWriter.java'},
    'PlainTextDocumentReaderAndWriter.printAnswers': {   'req_args': [   'list',
                                                                         'out',
                                                                         [   'l',
                                                                             'out',
                                                                             'outputStyle',
                                                                             'preserveSpacing']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\PlainTextDocumentReaderAndWriter.java'},
    'PluralAcronymDetector': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'PluralAcronymDetector.isDynamic': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'PluralAcronymDetector.isLocal': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'Pointer': {   'req_args': [['impl']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pointer.java'},
    'Pointer.dereference': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pointer.java'},
    'Pointer.set': {   'req_args': ['impl', ['impl']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Pointer.java'},
    'Polarity': {   'req_args': [   'operatorsInNarrowingScopeOrder',
                                    ['projectionFunction']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.isDownwards': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.isUpwards': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.maintainsFalsehood': {   'req_args': ['lexicalRelation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.maintainsTruth': {   'req_args': ['lexicalRelation'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.negatesFalsehood': {   'req_args': ['lexicalRelation'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.negatesTruth': {   'req_args': ['lexicalRelation'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.projectLexicalRelation': {   'req_args': ['lexicalRelation'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Polarity.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Polarity.java'},
    'Ports.available': {   'req_args': ['port'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\net\\Ports.java'},
    'Ports.findAvailable': {   'req_args': ['min', 'max'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\net\\Ports.java'},
    'PostSplitter': {   'req_args': ['tlpParams', 'op'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PostSplitter.java'},
    'PostSplitter.dumpStats': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PostSplitter.java'},
    'PostSplitter.transformTree': {   'req_args': ['t'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PostSplitter.java'},
    'PostSplitter.transformTreeHelper': {   'req_args': ['t', 'root', 'tf'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\PostSplitter.java'},
    'PreciseConstructs': {   'req_args': [[]],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\PreciseConstructs.java'},
    'PrecisionRecallStats': {   'req_args': [   [   'classifier',
                                                    'data',
                                                    'positiveClass'],
                                                ['tp', 'fp', 'fn']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.addCounts': {   'req_args': ['prs'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.addFN': {   'req_args': ['count'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.addFP': {   'req_args': ['count'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.addTP': {   'req_args': ['count'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getF1Description': {   'req_args': ['numDigits'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getFMeasure': {   'req_args': [['alpha']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getFN': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getFP': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getPrecision': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getPrecisionDescription': {   'req_args': [   'numDigits'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getRecall': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getRecallDescription': {   'req_args': ['numDigits'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.getTP': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.incrementFN': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.incrementFP': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.incrementTP': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'PrecisionRecallStats.toString': {   'req_args': [['numDigits']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\PrecisionRecallStats.java'},
    'Preferences.getEnableTsurgeon': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getEncoding': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getFont': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getFontSize': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getHeadFinder': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getHighlightColor': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getHistorySize': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getMatchPortionOnly': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getMatchedColor': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getMaxMatches': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getTreeColor': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.getTreeReaderFactory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setEnableTsurgeon': {   'req_args': ['enableTsurgeon'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setEncoding': {   'req_args': ['encoding'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setFont': {   'req_args': ['font'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setFontSize': {   'req_args': ['fontSize'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setHeadFinder': {   'req_args': ['hf'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setHighlightColor': {   'req_args': ['highlightColor'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setHistorySize': {   'req_args': ['historySize'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setMatchPortionOnly': {   'req_args': ['matchPortionOnly'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setMatchedColor': {   'req_args': ['matchedColor'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setMaxMatches': {   'req_args': ['maxMatches'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setTreeColor': {   'req_args': ['treeColor'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'Preferences.setTreeReaderFactory': {   'req_args': ['trf'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Preferences.java'},
    'PreferencesPanel': {   'req_args': ['gui'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\PreferencesPanel.java'},
    'PreferencesPanel.alignLeft': {   'req_args': ['box'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\PreferencesPanel.java'},
    'PreferencesPanel.makeColorButton': {   'req_args': [   'promptText',
                                                            'iconColor',
                                                            'parent'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\PreferencesPanel.java'},
    'PresetSequenceClassifier': {   'req_args': ['props'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PresetSequenceClassifier.classify': {   'req_args': ['document'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PresetSequenceClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSeq',
                                                                                  'doc',
                                                                                  'sent'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PresetSequenceClassifier.loadClassifier': {   'req_args': ['ois', 'props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PresetSequenceClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                                        [   'oos']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PresetSequenceClassifier.train': {   'req_args': [   'objectBankWrapper',
                                                          'readerAndWriter'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\PresetSequenceClassifier.java'},
    'PrettyLogger': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\PrettyLogger.java'},
    'PrettyLogger.dispatchable': {   'req_args': ['obj'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\PrettyLogger.java'},
    'PrettyLogger.log': {   'req_args': [   'obj',
                                            ['description', 'obj'],
                                            ['channels', 'obj'],
                                            ['channels', 'description', 'obj']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\PrettyLogger.java'},
    'PrintFile': {   'req_args': ['filename', ['file']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\PrintFile.java'},
    'PrintTagList.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\PrintTagList.java'},
    'Prior': {   'req_args': ['reader'],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Prior.java'},
    'Prior.get': {   'req_args': ['presentFields'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Prior.java'},
    'Prior.main': {   'req_args': ['args'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\Prior.java'},
    'Problem': {   'req_args': ['d', 'f', []],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Problem.java'},
    'Problem.add': {   'req_args': ['f'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Problem.java'},
    'Problem.print': {   'req_args': [['filename']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Problem.java'},
    'Problem.removeLast': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\maxent\\Problem.java'},
    'ProcessSemgrexRequest.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ProcessSemgrexRequest.java'},
    'ProcessSemgrexRequest.matchSentence': {   'req_args': [   'pattern',
                                                               'graph',
                                                               'patternIdx',
                                                               'graphIdx'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ProcessSemgrexRequest.java'},
    'ProcessSemgrexRequest.processInputStream': {   'req_args': ['in', 'out'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ProcessSemgrexRequest.java'},
    'ProcessSemgrexRequest.processRequest': {   'req_args': ['request'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ProcessSemgrexRequest.java'},
    'ProcessTokensRegexRequest.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ProcessTokensRegexRequest.java'},
    'ProcessTokensRegexRequest.matchPattern': {   'req_args': [   'pattern',
                                                                  'sentences'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ProcessTokensRegexRequest.java'},
    'ProcessTokensRegexRequest.processInputStream': {   'req_args': [   'in',
                                                                        'out'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ProcessTokensRegexRequest.java'},
    'ProcessTokensRegexRequest.processRequest': {   'req_args': ['request'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\ProcessTokensRegexRequest.java'},
    'ProcessTsurgeonRequest.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ProcessTsurgeonRequest.java'},
    'ProcessTsurgeonRequest.processInputStream': {   'req_args': ['in', 'out'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ProcessTsurgeonRequest.java'},
    'ProcessTsurgeonRequest.processRequest': {   'req_args': ['request'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ProcessTsurgeonRequest.java'},
    'ProcessUniversalEnhancerRequest.enhanceDependencies': {   'req_args': [   'relativePronounsPattern',
                                                                               'annotation'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProcessUniversalEnhancerRequest.enhanceEnglishDependencies': {   'req_args': [   'annotation'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProcessUniversalEnhancerRequest.getRelativePronouns': {   'req_args': [   'request'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProcessUniversalEnhancerRequest.main': {   'req_args': ['args'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProcessUniversalEnhancerRequest.processInputStream': {   'req_args': [   'in',
                                                                              'out'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProcessUniversalEnhancerRequest.processRequest': {   'req_args': [   'relativePronounsPattern',
                                                                          'request'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\ProcessUniversalEnhancerRequest.java'},
    'ProjectionScorer': {   'req_args': ['scorer', 'gp', 'op'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'ProjectionScorer.iPossible': {   'req_args': ['hook'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'ProjectionScorer.iScore': {   'req_args': ['edge'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'ProjectionScorer.oPossible': {   'req_args': ['hook'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'ProjectionScorer.oScore': {   'req_args': ['edge'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'ProjectionScorer.parse': {   'req_args': ['words'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\ProjectionScorer.java'},
    'PronounMatch': {   'req_args': [[]],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\PronounMatch.java'},
    'PropertiesUtils': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.asMap': {   'req_args': ['properties'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.asProperties': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.asString': {   'req_args': ['props'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.checkProperties': {   'req_args': [   'properties',
                                                           'defaults'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.extractPrefixedProperties': {   'req_args': [   'properties',
                                                                     'prefix',
                                                                     [   'properties',
                                                                         'prefix',
                                                                         'keepPrefix']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.extractSelectedProperties': {   'req_args': [   'properties',
                                                                     'keptProperties'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.fromString': {   'req_args': ['str'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.get': {   'req_args': [   'props',
                                               'key',
                                               'defaultValue',
                                               'type'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getBool': {   'req_args': [   'props',
                                                   'key',
                                                   [   'props',
                                                       'key',
                                                       'defaultValue']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getDirPath': {   'req_args': [   'props',
                                                      'key',
                                                      'defaultValue'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getDouble': {   'req_args': [   'props',
                                                     'key',
                                                     [   'props',
                                                         'key',
                                                         'defaultValue']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getDoubleArray': {   'req_args': ['props', 'key'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getInt': {   'req_args': [   'props',
                                                  'key',
                                                  [   'props',
                                                      'key',
                                                      'defaultValue']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getIntArray': {   'req_args': ['props', 'key'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getLong': {   'req_args': ['props', 'key', 'defaultValue'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getSignature': {   'req_args': [   'name',
                                                        'properties',
                                                        'supportedProperties',
                                                        ['name', 'properties']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getSortedEntries': {   'req_args': ['properties'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getString': {   'req_args': [   'props',
                                                     'key',
                                                     'defaultValue'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.getStringArray': {   'req_args': [   'props',
                                                          'key',
                                                          [   'props',
                                                              'key',
                                                              'defaults']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.hasProperty': {   'req_args': ['props', 'key'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.hasPropertyPrefix': {   'req_args': ['props', 'prefix'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.noClobberWriteProperties': {   'req_args': ['bp', 'ovp'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.overWriteProperties': {   'req_args': ['bp', 'ovp'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.printProperties': {   'req_args': [   'message',
                                                           'properties',
                                                           'stream',
                                                           [   'message',
                                                               'properties']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'PropertiesUtils.propsAsJsonString': {   'req_args': ['props'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\PropertiesUtils.java'},
    'ProtobufAnnotationSerializer': {   'req_args': [   [   'enforceLosslessSerialization']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.createIndexedWordProtoFromCL': {   'req_args': [   'cl'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.createIndexedWordProtoFromIW': {   'req_args': [   'iw'],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.fromProto': {   'req_args': [   'proto',
                                                                  ['proto'],
                                                                  ['proto'],
                                                                  ['proto'],
                                                                  ['proto'],
                                                                  ['lang'],
                                                                  ['operator'],
                                                                  ['polarity'],
                                                                  [   'proto',
                                                                      'sentence',
                                                                      'docid'],
                                                                  [   'proto',
                                                                      'doc',
                                                                      'sentenceIndex'],
                                                                  [   'fragment',
                                                                      'tree'],
                                                                  ['proto'],
                                                                  ['proto']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.read': {   'req_args': ['is'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.readUndelimited': {   'req_args': ['in'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toFlattenedTree': {   'req_args': [   'tree',
                                                                        'treeBuilder',
                                                                        [   'tree']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toMapIntStringProto': {   'req_args': ['map'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toMapStringStringProto': {   'req_args': [   'map'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toProto': {   'req_args': [   'coreLabel',
                                                                ['sentence'],
                                                                ['doc'],
                                                                ['parseTree'],
                                                                ['graph'],
                                                                ['chain'],
                                                                ['mention'],
                                                                ['speakerInfo'],
                                                                ['timex'],
                                                                ['ent'],
                                                                ['rel'],
                                                                ['lang'],
                                                                ['op'],
                                                                ['pol'],
                                                                ['fragment'],
                                                                ['triple']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toProtoBuilder': {   'req_args': [   'sentence',
                                                                       ['doc']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toProtoMention': {   'req_args': ['mention'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toProtoQuote': {   'req_args': ['quote'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.toProtoSection': {   'req_args': ['section'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'ProtobufAnnotationSerializer.write': {   'req_args': ['corpus', 'os'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ProtobufAnnotationSerializer.java'},
    'PruneNode': {   'req_args': ['children', ['children']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\PruneNode.java'},
    'PruneNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\PruneNode.java'},
    'PunctCountingTreeVisitor': {   'req_args': [['regex']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctCountingTreeVisitor.countAnywhere': {   'req_args': ['t'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctCountingTreeVisitor.countFinal': {   'req_args': ['t'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctCountingTreeVisitor.countNode': {   'req_args': ['t', 'counter'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctCountingTreeVisitor.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctCountingTreeVisitor.visitTree': {   'req_args': ['t'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\PunctCountingTreeVisitor.java'},
    'PunctEquivalenceClasser.getPunctClass': {   'req_args': ['punc'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\PunctEquivalenceClasser.java'},
    'PunctFrequencyDist.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\PunctFrequencyDist.java'},
    'QMSieve': {   'req_args': [   'doc',
                                   'characterMap',
                                   'pronounCorefMap',
                                   'animacySet',
                                   'sieveName'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\QMSieve.java'},
    'QMSieve.doQuoteToMention': {   'req_args': ['doc'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\QMSieve.java'},
    'QMSieve.fillInMention': {   'req_args': [   'quote',
                                                 'text',
                                                 'begin',
                                                 'end',
                                                 'sieveName',
                                                 'mentionType'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\QMSieve.java'},
    'QNMinimizer': {   'req_args': [   ['m'],
                                       ['m', 'useRobustOptions'],
                                       ['monitor'],
                                       ['monitor', 'm'],
                                       ['monitor', 'm', 'useRobustOptions'],
                                       ['monitor']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.minimize': {   'req_args': [   'function',
                                                'functionTolerance',
                                                'initial',
                                                [   'function',
                                                    'functionTolerance',
                                                    'initial'],
                                                [   'dFunction',
                                                    'functionTolerance',
                                                    'initial',
                                                    'maxFunctionEvaluations'],
                                                [   'dFunction',
                                                    'functionTolerance',
                                                    'initial',
                                                    'maxFunctionEvaluations',
                                                    'qn']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.newQNInfo': {   'req_args': ['s', 'y'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setEvaluators': {   'req_args': [   'iters',
                                                     'evaluators',
                                                     [   'iters',
                                                         'startEvaluateIters',
                                                         'evaluators']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setHistory': {   'req_args': ['s', 'y'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setIterationCallbackFunction': {   'req_args': ['func'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setM': {   'req_args': ['m'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setOldOptions': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setRobustOptions': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.setTerminateOnEvalImprovementNumOfEpoch': {   'req_args': [   'terminateOnEvalImprovementNumOfEpoch'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.shutUp': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.suppressTestPrompt': {   'req_args': ['suppressTestPrompt'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.terminateOnAverageImprovement': {   'req_args': [   'toTerminate'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.terminateOnEvalImprovement': {   'req_args': ['toTerminate'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.terminateOnMaxItr': {   'req_args': ['maxItr'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.terminateOnNumericalZero': {   'req_args': ['toTerminate'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.terminateOnRelativeNorm': {   'req_args': ['toTerminate'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.useBacktracking': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.useDiagonalScaling': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.useMinPackSearch': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.useOWLQN': {   'req_args': ['use', 'lambda'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.useScalarScaling': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QNMinimizer.wasSuccessful': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\QNMinimizer.java'},
    'QPTreeTransformer': {   'req_args': [['universalDependencies']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\QPTreeTransformer.java'},
    'QPTreeTransformer.QPtransform': {   'req_args': ['t'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\QPTreeTransformer.java'},
    'QPTreeTransformer.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\QPTreeTransformer.java'},
    'QPTreeTransformer.transformTree': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\QPTreeTransformer.java'},
    'Quadruple': {   'req_args': ['first', 'second', 'third', 'fourth'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.asList': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.compareTo': {   'req_args': ['another'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.first': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.fourth': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.makeQuadruple': {   'req_args': ['t1', 't2', 't3', 't4'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.prettyLog': {   'req_args': ['channels', 'description'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.second': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.setFirst': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.setFourth': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.setSecond': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.setThird': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.third': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'Quadruple.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quadruple.java'},
    'QuantifiableEntityExtractor.extract': {   'req_args': ['annotation'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\QuantifiableEntityExtractor.java'},
    'QuantifiableEntityExtractor.get': {   'req_args': ['amount', 'unitName'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\QuantifiableEntityExtractor.java'},
    'QuantifiableEntityExtractor.init': {   'req_args': [   'name',
                                                            'props',
                                                            ['options']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\QuantifiableEntityExtractor.java'},
    'QuantifiableEntityExtractor.main': {   'req_args': ['args'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\QuantifiableEntityExtractor.java'},
    'QuantifiableEntityNormalizer': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.addNormalizedQuantitiesToEntities': {   'req_args': [   'l',
                                                                                          [   'l',
                                                                                              'concatenate'],
                                                                                          [   'list',
                                                                                              'concatenate',
                                                                                              'usesSUTime']],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.applySpecializedNER': {   'req_args': ['l'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.collapseNERLabels': {   'req_args': ['l'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.isCompatible': {   'req_args': [   'tag',
                                                                     'prev',
                                                                     'cur'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizeClassifierOutput': {   'req_args': [   'l'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizedNumberString': {   'req_args': [   's',
                                                                               'nextWord',
                                                                               'numberFromSUTime'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizedNumberStringQuiet': {   'req_args': [   's',
                                                                                    'multiplier',
                                                                                    'nextWord',
                                                                                    'numberFromSUTime'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizedOrdinalString': {   'req_args': [   's',
                                                                                'numberFromSUTime'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizedPercentString': {   'req_args': [   's',
                                                                                'numberFromSUTime'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizer.normalizedTimeString': {   'req_args': [   's',
                                                                             'timexFromSUTime'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\QuantifiableEntityNormalizer.java'},
    'QuantifiableEntityNormalizingAnnotator': {   'req_args': [   ['verbose'],
                                                                  [   'name',
                                                                      'props'],
                                                                  [   'backgroundSymbol',
                                                                      'verbose'],
                                                                  [   'verbose',
                                                                      'collapse'],
                                                                  [   'backgroundSymbol',
                                                                      'verbose',
                                                                      'collapse']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuantifiableEntityNormalizingAnnotator.java'},
    'QuantifiableEntityNormalizingAnnotator.annotate': {   'req_args': [   'annotation'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuantifiableEntityNormalizingAnnotator.java'},
    'QuantifiableEntityNormalizingAnnotator.requirementsSatisfied': {   'req_args': [   ],
                                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuantifiableEntityNormalizingAnnotator.java'},
    'QuantifiableEntityNormalizingAnnotator.requires': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuantifiableEntityNormalizingAnnotator.java'},
    'QuasiDeterminizer.computeLambda': {   'req_args': ['graph'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\QuasiDeterminizer.java'},
    'QuasiDeterminizer.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\QuasiDeterminizer.java'},
    'QuasiDeterminizer.processGraph': {   'req_args': ['graph'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\QuasiDeterminizer.java'},
    'QuasiDeterminizer.pushLambdas': {   'req_args': ['graph', 'lambda'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\QuasiDeterminizer.java'},
    'QuestionToStatementTranslator.main': {   'req_args': ['args'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\QuestionToStatementTranslator.java'},
    'QuestionToStatementTranslator.toStatement': {   'req_args': ['question'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\QuestionToStatementTranslator.java'},
    'Quintuple': {   'req_args': [   'first',
                                     'second',
                                     'third',
                                     'fourth',
                                     'fifth'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.asList': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.compareTo': {   'req_args': ['another'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.fifth': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.first': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.fourth': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.makeQuadruple': {   'req_args': ['t1', 't2', 't3', 't4', 't5'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.prettyLog': {   'req_args': ['channels', 'description'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.second': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.setFifth': {   'req_args': ['fifth'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.setFirst': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.setFourth': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.setSecond': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.setThird': {   'req_args': ['o'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.third': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'Quintuple.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Quintuple.java'},
    'QuoteAnnotator': {   'req_args': [   'name',
                                          'props',
                                          ['props'],
                                          ['name', 'props', 'verbose']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.annotate': {   'req_args': ['annotation'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.gatherQuotes': {   'req_args': ['curr'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.getCoreMapQuotes': {   'req_args': [   'quotes',
                                                           'tokens',
                                                           'sentences',
                                                           'text',
                                                           'docID',
                                                           'unclosed'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.getQuoteComparator': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.getQuotes': {   'req_args': ['text'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.isSingleQuote': {   'req_args': ['c'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.isWhitespaceOrPunct': {   'req_args': ['c'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.makeQuote': {   'req_args': [   'surfaceForm',
                                                    'begin',
                                                    'end',
                                                    'quoteTokens',
                                                    'tokenOffset',
                                                    'sentenceBeginIndex',
                                                    'sentenceEndIndex',
                                                    'docID'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.recursiveQuotes': {   'req_args': [   'text',
                                                          'offset',
                                                          'prevQuote'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.replaceUnicode': {   'req_args': ['text'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.requirementsSatisfied': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.requires': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAnnotator.xmlFreeText': {   'req_args': [   'documentText',
                                                      'annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAnnotator.java'},
    'QuoteAttributionAnnotator': {   'req_args': ['props'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAttributionAnnotator.java'},
    'QuoteAttributionAnnotator.annotate': {   'req_args': ['annotation'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAttributionAnnotator.java'},
    'QuoteAttributionAnnotator.entityMentionsToCharacterMap': {   'req_args': [   'annotation'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAttributionAnnotator.java'},
    'QuoteAttributionAnnotator.requirementsSatisfied': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAttributionAnnotator.java'},
    'QuoteAttributionAnnotator.requires': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\QuoteAttributionAnnotator.java'},
    'QuoteAttributionEvaluation.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionEvaluation.java'},
    'QuoteAttributionUtils.addEnhancedSentences': {   'req_args': [   'doc',
                                                                      'parser'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.annotateForDependencyParse': {   'req_args': [   'doc',
                                                                            'parser'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getParagraphBeginNumber': {   'req_args': ['quote'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getParagraphEndNumber': {   'req_args': ['quote'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getParagraphRank': {   'req_args': ['doc', 'quote'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getQuoteParagraphIndex': {   'req_args': [   'doc',
                                                                        'quote'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getRemainderInSentence': {   'req_args': [   'doc',
                                                                        'quote'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getSentsForQuoteParagraphs': {   'req_args': [   'doc',
                                                                            'quote'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getSentsInParagraph': {   'req_args': [   'doc',
                                                                     'paragraph'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getTokenRangeFollowingQuote': {   'req_args': [   'doc',
                                                                             'quote'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.getTokenRangePrecedingQuote': {   'req_args': [   'doc',
                                                                             'quote'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.isPronominal': {   'req_args': ['potentialPronoun'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.rangeContains': {   'req_args': ['r1', 'r2'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.readAnimacyList': {   'req_args': ['filename'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.readCharacterList': {   'req_args': ['filename'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.readFamilyRelations': {   'req_args': ['filename'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.readGenderedNounList': {   'req_args': ['filename'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.readPersonMap': {   'req_args': [   'personList',
                                                               ['fileName']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'QuoteAttributionUtils.setupCoref': {   'req_args': [   'bammanFile',
                                                            'characterMap',
                                                            'doc'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\QuoteAttributionUtils.java'},
    'RFSieve': {   'req_args': ['rf', 'props', 'sievename'],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\RFSieve.java'},
    'RFSieve.extractDatum': {   'req_args': [   'm',
                                                'candidate',
                                                'document',
                                                'mentionDist',
                                                'dict',
                                                'props',
                                                'sievename'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\RFSieve.java'},
    'RFSieve.findCoreferentAntecedent': {   'req_args': [   'm',
                                                            'mIdx',
                                                            'document',
                                                            'dict',
                                                            'props',
                                                            'sbLog'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\RFSieve.java'},
    'RHSFrequency.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\RHSFrequency.java'},
    'RNNCoreAnnotations': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getGoldClass': {   'req_args': ['tree'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getNodeVector': {   'req_args': ['tree'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getPredictedClass': {   'req_args': ['tree', ['label']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getPredictedClassProb': {   'req_args': ['label'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getPredictionError': {   'req_args': ['tree'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getPredictions': {   'req_args': ['tree'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.getPredictionsAsStringList': {   'req_args': ['tree'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.setGoldClass': {   'req_args': ['tree', 'goldClass'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNCoreAnnotations.setPredictionError': {   'req_args': ['tree', 'error'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\RNNCoreAnnotations.java'},
    'RNNOptions.setOption': {   'req_args': ['args', 'argIndex'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\RNNOptions.java'},
    'RNNOptions.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\RNNOptions.java'},
    'RNNTrainOptions.getClassWeight': {   'req_args': ['i'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\RNNTrainOptions.java'},
    'RNNTrainOptions.setOption': {   'req_args': ['args', 'argIndex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\RNNTrainOptions.java'},
    'RNNTrainOptions.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\RNNTrainOptions.java'},
    'RVFDataset': {   'req_args': [   [   'numDatums',
                                          'featureIndex',
                                          'labelIndex'],
                                      ['featureIndex', 'labelIndex'],
                                      ['numDatums'],
                                      [   'labelIndex',
                                          'labels',
                                          'featureIndex',
                                          'data',
                                          'values']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.add': {   'req_args': ['d', ['d', 'src', 'id']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.addAll': {   'req_args': ['data'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.addAllWithSourcesAndIds': {   'req_args': ['data'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.applyFeatureCountThreshold': {   'req_args': ['k'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.applyFeatureMaxCountThreshold': {   'req_args': ['k'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.clear': {   'req_args': [['numDatums']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.ensureRealValues': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getDatum': {   'req_args': ['index'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getRVFDatum': {   'req_args': ['index'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getRVFDatumId': {   'req_args': ['index'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getRVFDatumSource': {   'req_args': ['index'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getRVFDatumWithId': {   'req_args': ['index'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.getValuesArray': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.iterator': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.printFullFeatureMatrix': {   'req_args': ['pw'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.printFullFeatureMatrixWithValues': {   'req_args': ['pw'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.printSparseFeatureMatrix': {   'req_args': [['pw']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.printSparseFeatureValues': {   'req_args': [   'pw',
                                                               [   'datumNo',
                                                                   'pw']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.randomize': {   'req_args': ['randomSeed'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.readSVMLightFormat': {   'req_args': [   'filename',
                                                         ['filename', 'lines'],
                                                         [   'filename',
                                                             'featureIndex',
                                                             'labelIndex'],
                                                         ['file']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleDataset': {   'req_args': ['dataset'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleDatasetGaussian': {   'req_args': ['dataset'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleDatum': {   'req_args': ['datum'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleDatumGaussian': {   'req_args': ['datum'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleFeatures': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.scaleFeaturesGaussian': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.selectFeaturesFromSet': {   'req_args': ['featureSet'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.shuffleWithSideInformation': {   'req_args': [   'randomSeed',
                                                                 'sideInformation'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.split': {   'req_args': ['percentDev', ['start', 'end']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.summaryStatistics': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.svmLightLineToRVFDatum': {   'req_args': ['l'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.toSummaryString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDataset.writeSVMLightFormat': {   'req_args': ['file', ['writer']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\RVFDataset.java'},
    'RVFDatum': {   'req_args': ['features', 'label', ['m'], ['features'], []],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.asFeatures': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.asFeaturesCounter': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.getFeatureCount': {   'req_args': ['feature'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.id': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.label': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.labels': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.setID': {   'req_args': ['id'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.setLabel': {   'req_args': ['label'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RVFDatum.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\RVFDatum.java'},
    'RadicalMap': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\RadicalMap.java'},
    'RadicalMap.getChars': {   'req_args': ['ch'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\RadicalMap.java'},
    'RadicalMap.getRadical': {   'req_args': ['ch'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\RadicalMap.java'},
    'RadicalMap.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\RadicalMap.java'},
    'RandomForest': {   'req_args': ['featureIndex', 'numTrees'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\RandomForest.java'},
    'RandomForest.probabilityOfTrue': {   'req_args': ['datum', ['features']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\rf\\RandomForest.java'},
    'RandomWalk': {   'req_args': ['data', 'steps'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RandomWalk.java'},
    'RandomWalk.score': {   'req_args': [   'hidden',
                                            'seen',
                                            ['hidden', 'seen', 'steps']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RandomWalk.java'},
    'RandomWalk.step': {   'req_args': ['hidden', 'seen', 'steps'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RandomWalk.java'},
    'RandomWalk.train': {   'req_args': ['data'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RandomWalk.java'},
    'RareExtractor': {   'req_args': [['position']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ExtractorFramesRare.java'},
    'ReadDataTagged': {   'req_args': ['config', 'maxentTagger', 'pairs'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ReadDataTagged.java'},
    'ReadDataTagged.getSize': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\ReadDataTagged.java'},
    'ReadSentimentDataset': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ReadSentimentDataset.java'},
    'ReadSentimentDataset.convertTree': {   'req_args': [   'parentPointers',
                                                            'sentence',
                                                            'phraseIds',
                                                            'sentimentScores',
                                                            'escaper',
                                                            'numClasses'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ReadSentimentDataset.java'},
    'ReadSentimentDataset.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\ReadSentimentDataset.java'},
    'ReaderInputStream': {   'req_args': ['reader', ['reader', 'encoding']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.available': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.close': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.mark': {   'req_args': ['limit'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.markSupported': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.read': {   'req_args': [['b', 'off', 'len']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderInputStream.reset': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\ReaderInputStream.java'},
    'ReaderIteratorFactory': {   'req_args': [   'c',
                                                 ['c', 'encoding'],
                                                 ['o'],
                                                 ['o', 'encoding'],
                                                 []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.add': {   'req_args': ['o'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.addAll': {   'req_args': ['c'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.iterator': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.remove': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.removeAll': {   'req_args': ['c'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'ReaderIteratorFactory.retainAll': {   'req_args': ['c'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ReaderIteratorFactory.java'},
    'RecordIterator': {   'req_args': [   'reader',
                                          'fields',
                                          'filter',
                                          'delim',
                                          [   'filename',
                                              'fields',
                                              'filter',
                                              'delim'],
                                          ['in', 'fields', 'filter', 'delim'],
                                          ['filename', 'fields', 'filter'],
                                          ['filename', 'filter'],
                                          ['filename', 'fields'],
                                          ['filename', 'delim'],
                                          ['filename'],
                                          ['in']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.determineNumFields': {   'req_args': [   'filename',
                                                             'delim',
                                                             ['filename']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.firstRecord': {   'req_args': [   'filename',
                                                      'delim',
                                                      ['filename']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.hasNext': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.next': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecordIterator.remove': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RecordIterator.java'},
    'RecursiveTreeTransformer.transformHelper': {   'req_args': ['tree'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformLabel': {   'req_args': ['tree'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformNonterminal': {   'req_args': ['tree'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformNonterminalLabel': {   'req_args': [   'tree'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformTerminal': {   'req_args': ['tree'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformTerminalLabel': {   'req_args': ['tree'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RecursiveTreeTransformer.transformTree': {   'req_args': ['tree'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RecursiveTreeTransformer.java'},
    'RedirectOutputHandler': {   'req_args': [   'logger',
                                                 'loggingMethod',
                                                 [   'logger',
                                                     'loggingMethod',
                                                     'channelMapping',
                                                     'defaultChannel']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedirectOutputHandler.java'},
    'RedirectOutputHandler.fromJavaUtilLogging': {   'req_args': ['logger'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedirectOutputHandler.java'},
    'RedirectOutputHandler.print': {   'req_args': ['channels', 'line'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedirectOutputHandler.java'},
    'Redwood': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.channels': {   'req_args': ['channelNames'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.endThreads': {   'req_args': ['check'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.endTrack': {   'req_args': ['title', []],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.finishThread': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.forceTrack': {   'req_args': ['name', []],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.formatTimeDifference': {   'req_args': ['diff'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.hideChannelsEverywhere': {   'req_args': ['channels'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.log': {   'req_args': ['args'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.logf': {   'req_args': [   'format',
                                        'args',
                                        ['level', 'format', 'args']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.startThreads': {   'req_args': ['title'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.startTrack': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'Redwood.stop': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\Redwood.java'},
    'RedwoodConfiguration': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.apply': {   'req_args': [['props']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.capture': {   'req_args': ['stream'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.channelWidth': {   'req_args': ['width'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.clear': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.current': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.debugLevel': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.empty': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.errorLevel': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.handlers': {   'req_args': ['paths'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.infoLevel': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.javaUtilLogging': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.listenOnChannels': {   'req_args': [   'listener',
                                                                 'channels'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.minimal': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.neatExit': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.output': {   'req_args': ['method'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.parse': {   'req_args': ['props'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.restore': {   'req_args': ['stream'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.slf4j': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodConfiguration.standard': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodConfiguration.java'},
    'RedwoodPrintStream': {   'req_args': ['tag', 'realStream'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.append': {   'req_args': [   'charSequence',
                                                     [   'charSequence',
                                                         'i',
                                                         'i1'],
                                                     ['c']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.checkError': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.close': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.flush': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.format': {   'req_args': [   's',
                                                     'objects',
                                                     [   'locale',
                                                         's',
                                                         'objects']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.print': {   'req_args': [   'b',
                                                    ['c'],
                                                    ['i'],
                                                    ['l'],
                                                    ['f'],
                                                    ['d'],
                                                    ['chars'],
                                                    ['s'],
                                                    ['o']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.printf': {   'req_args': [   's',
                                                     'objects',
                                                     [   'locale',
                                                         's',
                                                         'objects']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'RedwoodPrintStream.println': {   'req_args': [   'b',
                                                      ['c'],
                                                      ['i'],
                                                      ['l'],
                                                      ['f'],
                                                      ['d'],
                                                      ['chars'],
                                                      ['s'],
                                                      ['o'],
                                                      []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RedwoodPrintStream.java'},
    'ReflectionLoading': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ReflectionLoading.java'},
    'ReflectionLoading.loadByReflection': {   'req_args': [   'className',
                                                              'arguments'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ReflectionLoading.java'},
    'RegExFileFilter': {   'req_args': ['string', ['pattern']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RegExFileFilter.java'},
    'RegExFileFilter.accept': {   'req_args': ['file'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RegExFileFilter.java'},
    'RegexNERAnnotator': {   'req_args': [   'name',
                                             'properties',
                                             ['mapping'],
                                             ['mapping', 'ignoreCase'],
                                             [   'mapping',
                                                 'ignoreCase',
                                                 'validPosPattern'],
                                             [   'mapping',
                                                 'ignoreCase',
                                                 'overwriteMyLabels',
                                                 'validPosPattern',
                                                 'verbose']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RegexNERAnnotator.java'},
    'RegexNERAnnotator.annotate': {   'req_args': ['annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RegexNERAnnotator.java'},
    'RegexNERAnnotator.requirementsSatisfied': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RegexNERAnnotator.java'},
    'RegexNERAnnotator.requires': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RegexNERAnnotator.java'},
    'RegexNERSequenceClassifier': {   'req_args': [   'mapping',
                                                      'ignoreCase',
                                                      'overwriteMyLabels',
                                                      [   'mapping',
                                                          'ignoreCase',
                                                          'overwriteMyLabels',
                                                          'validPosRegex'],
                                                      [   'reader',
                                                          'ignoreCase',
                                                          'overwriteMyLabels',
                                                          'validPosRegex']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.classify': {   'req_args': ['document'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.classifyWithGlobalInformation': {   'req_args': [   'tokenSeq',
                                                                                    'doc',
                                                                                    'sent'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.labels': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.loadClassifier': {   'req_args': [   'in',
                                                                     'props'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.serializeClassifier': {   'req_args': [   'serializePath',
                                                                          [   'oos']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexNERSequenceClassifier.train': {   'req_args': [   'docs',
                                                            'readerAndWriter'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\regexp\\RegexNERSequenceClassifier.java'},
    'RegexStringFilter': {   'req_args': ['pattern'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RegexStringFilter.java'},
    'RegexStringFilter.equals': {   'req_args': ['other'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RegexStringFilter.java'},
    'RegexStringFilter.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RegexStringFilter.java'},
    'RegexStringFilter.test': {   'req_args': ['text'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RegexStringFilter.java'},
    'RelabelNode': {   'req_args': ['child', 'newLabel'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\RelabelNode.java'},
    'RelabelNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\RelabelNode.java'},
    'RelabelNode.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\RelabelNode.java'},
    'Relation': {   'req_args': ['symbol'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Relation.java'},
    'Relation.addRelation': {   'req_args': ['relation', 'rm'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Relation.java'},
    'Relation.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Relation.java'},
    'Relation.getRelationMentions': {   'req_args': ['relation'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Relation.java'},
    'Relation.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Relation.java'},
    'Relation.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\Relation.java'},
    'RelationExtractorAnnotator': {   'req_args': ['props'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RelationExtractorAnnotator.java'},
    'RelationExtractorAnnotator.annotate': {   'req_args': ['annotation'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RelationExtractorAnnotator.java'},
    'RelationExtractorAnnotator.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RelationExtractorAnnotator.java'},
    'RelationExtractorAnnotator.requirementsSatisfied': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RelationExtractorAnnotator.java'},
    'RelationExtractorAnnotator.requires': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\RelationExtractorAnnotator.java'},
    'RelationExtractorResultsPrinter': {   'req_args': [   'factory',
                                                           [],
                                                           [   'createUnrelatedRelations'],
                                                           [   'factory',
                                                               'createUnrelatedRelations']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationExtractorResultsPrinter.java'},
    'RelationExtractorResultsPrinter.printResults': {   'req_args': [   'pw',
                                                                        'goldStandard',
                                                                        'extractorOutput'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationExtractorResultsPrinter.java'},
    'RelationExtractorResultsPrinter.printResultsUsingLabels': {   'req_args': [   'pw',
                                                                                   'goldStandard',
                                                                                   'extractorOutput'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationExtractorResultsPrinter.java'},
    'RelationFeatureFactory.createDatum': {   'req_args': [   'rel',
                                                              'label',
                                                              ['rel']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationFeatureFactory.java'},
    'RelationFeatureFactory.createTestDatum': {   'req_args': ['rel', 'logger'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationFeatureFactory.java'},
    'RelationFeatureFactory.getFeature': {   'req_args': [   'rel',
                                                             'dependency_path_lowlevel'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationFeatureFactory.java'},
    'RelationFeatureFactory.getFeatures': {   'req_args': [   'rel',
                                                              'dependency_path_words'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationFeatureFactory.java'},
    'RelationFeatureFactory.setDoNotLexicalizeFirstArgument': {   'req_args': [   'doNotLexicalizeFirstArg'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\RelationFeatureFactory.java'},
    'RelationMention': {   'req_args': [   'objectId',
                                           'sentence',
                                           'span',
                                           'type',
                                           'subtype',
                                           'args',
                                           [   'objectId',
                                               'sentence',
                                               'span',
                                               'type',
                                               'subtype',
                                               'args',
                                               'argNames'],
                                           [   'objectId',
                                               'sentence',
                                               'span',
                                               'type',
                                               'subtype',
                                               'args']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.addArg': {   'req_args': ['a'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.argsMatch': {   'req_args': [   'rel',
                                                     ['inputArgs'],
                                                     ['inputArgs']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.createUnrelatedRelation': {   'req_args': [   'factory',
                                                                   'args'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.filterUnrelatedRelations': {   'req_args': [   'relationMentions'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getArg': {   'req_args': ['argpos'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getArgNames': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getArgs': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getEntityMentionArgs': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getFirstSyntacticHeadPosition': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getLastSyntacticHeadPosition': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.getSignature': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.isNegativeRelation': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.isUnrelatedLabel': {   'req_args': ['label'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.makeUniqueId': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.printableObject': {   'req_args': ['beam'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.removeArgument': {   'req_args': [   'argToRemove',
                                                          'removeParent'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.removeArguments': {   'req_args': [   'argsToRemove',
                                                           'removeParent'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.replaceGoldArgsWithPredicted': {   'req_args': [   'predictedMentions'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.setArgNames': {   'req_args': ['argNames'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.setArgs': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.setSignature': {   'req_args': ['s'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMention.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMention.java'},
    'RelationMentionFactory.constructRelationMention': {   'req_args': [   'objectId',
                                                                           'sentence',
                                                                           'span',
                                                                           'type',
                                                                           'subtype',
                                                                           'args',
                                                                           'probs'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\RelationMentionFactory.java'},
    'RelationTriple': {   'req_args': [   'subject',
                                          'relation',
                                          'object',
                                          'confidence',
                                          ['subject', 'relation', 'object'],
                                          [   'subject',
                                              'canonicalSubject',
                                              'relation',
                                              'object',
                                              'canonicalObject',
                                              'confidence'],
                                          [   'subject',
                                              'canonicalSubject',
                                              'relation',
                                              'canonicalObject',
                                              'object']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.allTokens': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.asDependencyTree': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.asSentence': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.compareTo': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.confidenceGloss': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.isPrefixBe': {   'req_args': [['newValue']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.isSuffixBe': {   'req_args': [['newValue']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.isSuffixOf': {   'req_args': [['newValue']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.istmod': {   'req_args': [['newValue']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.iterator': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.objectGloss': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.objectHead': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.objectLemmaGloss': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.objectLink': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.objectTokenSpan': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.relationGloss': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.relationHead': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.relationLemmaGloss': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.relationTokenSpan': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.subjectGloss': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.subjectHead': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.subjectLemmaGloss': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.subjectLink': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.subjectTokenSpan': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.toQaSrlString': {   'req_args': ['sentence'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.toReverbString': {   'req_args': ['docid', 'sentence'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTriple.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\util\\RelationTriple.java'},
    'RelationTripleSegmenter': {   'req_args': ['allowNominalsWithoutNER', []],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\RelationTripleSegmenter.java'},
    'RelationTripleSegmenter.extract': {   'req_args': ['parse', 'tokens'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\RelationTripleSegmenter.java'},
    'RelationTripleSegmenter.segment': {   'req_args': [   'parse',
                                                           'confidence',
                                                           'consumeAll',
                                                           [   'parse',
                                                               'confidence']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\RelationTripleSegmenter.java'},
    'RelaxedExactStringMatch': {   'req_args': [[]],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\RelaxedExactStringMatch.java'},
    'RelaxedHeadMatch': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\RelaxedHeadMatch.java'},
    'RemoveEdge': {   'req_args': ['relation', 'govName', 'depName'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveEdge.evaluate': {   'req_args': ['sg', 'sm'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveEdge.getDepName': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveEdge.getGovName': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveEdge.getRelationName': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveEdge.toEditString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveEdge.java'},
    'RemoveNamedEdge': {   'req_args': ['edgeName', 'govName', 'depName'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'RemoveNamedEdge.evaluate': {   'req_args': ['sg', 'sm'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'RemoveNamedEdge.getDepName': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'RemoveNamedEdge.getEdgeName': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'RemoveNamedEdge.getGovName': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'RemoveNamedEdge.toEditString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\RemoveNamedEdge.java'},
    'ReorderingOracle': {   'req_args': ['op', 'rootOnlyStates'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ReorderingOracle.java'},
    'RepeatedRecordHandler': {   'req_args': ['repeatSemantics'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RepeatedRecordHandler.java'},
    'RepeatedRecordHandler.handle': {   'req_args': ['record'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RepeatedRecordHandler.java'},
    'RepeatedRecordHandler.signalEndTrack': {   'req_args': [   'newDepth',
                                                                'timeEnded'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RepeatedRecordHandler.java'},
    'RepeatedRecordHandler.signalShutdown': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RepeatedRecordHandler.java'},
    'RepeatedRecordHandler.signalStartTrack': {   'req_args': ['signal'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RepeatedRecordHandler.java'},
    'ReplaceNode': {   'req_args': [   'oldNode',
                                       'newNodes',
                                       ['oldNode', 'trees']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ReplaceNode.java'},
    'ReplaceNode.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\ReplaceNode.java'},
    'RerankingParserQuery': {   'req_args': ['op', 'parserQuery', 'reranker'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestDependencyParse': {   'req_args': [   'debinarize'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestFactoredParse': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestPCFGParse': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestPCFGParses': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestParse': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getBestScore': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getDependencyParser': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getFactoredParser': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getKBestPCFGParses': {   'req_args': ['kbestPCFG'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getKBestParses': {   'req_args': ['k'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getKGoodFactoredParses': {   'req_args': ['kbest'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getPCFGParser': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.getPCFGScore': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.hasFactoredParse': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.originalSentence': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parse': {   'req_args': ['sentence'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseAndReport': {   'req_args': [   'sentence',
                                                               'pwErr'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseFallback': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseNoMemory': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseSkipped': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseSucceeded': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.parseUnparsable': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.rerankerQuery': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.restoreOriginalWords': {   'req_args': ['tree'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.saidMemMessage': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerankingParserQuery.setConstraints': {   'req_args': ['constraints'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\RerankingParserQuery.java'},
    'RerouteChannel': {   'req_args': ['oldChannelName', 'newChannelName'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RerouteChannel.java'},
    'RerouteChannel.handle': {   'req_args': ['record'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\RerouteChannel.java'},
    'ResettableReaderIteratorFactory': {   'req_args': [   'c',
                                                           ['c', 'encoding'],
                                                           ['o'],
                                                           ['o', 'encoding'],
                                                           []],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ResettableReaderIteratorFactory.java'},
    'ResettableReaderIteratorFactory.iterator': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\ResettableReaderIteratorFactory.java'},
    'ResultStoringFloatMonitor': {   'req_args': ['outputFreq', 'filename'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringFloatMonitor.java'},
    'ResultStoringFloatMonitor.domainDimension': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringFloatMonitor.java'},
    'ResultStoringFloatMonitor.valueAt': {   'req_args': ['x'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringFloatMonitor.java'},
    'ResultStoringMonitor': {   'req_args': ['outputFreq', 'filename'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringMonitor.java'},
    'ResultStoringMonitor.domainDimension': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringMonitor.java'},
    'ResultStoringMonitor.valueAt': {   'req_args': ['x'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ResultStoringMonitor.java'},
    'ResultsPrinter.align': {   'req_args': ['list1', 'list2'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ResultsPrinter.java'},
    'ResultsPrinter.printResults': {   'req_args': [   'goldStandard',
                                                       'extractorOutput',
                                                       [   'goldStandard',
                                                           'extractorOutput'],
                                                       [   'pw',
                                                           'goldStandard',
                                                           'extractorOutput']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ResultsPrinter.java'},
    'ResultsPrinter.printResultsUsingLabels': {   'req_args': [   'pw',
                                                                  'goldStandard',
                                                                  'extractorOutput'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\ResultsPrinter.java'},
    'RightHeadFinder.determineHead': {   'req_args': ['t', ['t', 'parent']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\RightHeadFinder.java'},
    'RobustTokenizer': {   'req_args': [   'buffer',
                                           ['caseInsensitive', 'buffer']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.block': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.countNewLines': {   'req_args': ['s', 'start', 'end'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isAcronym': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isDigitSeq': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isEmail': {   'req_args': ['s'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isSgml': {   'req_args': ['s'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isSlashDate': {   'req_args': ['s'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.isUrl': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.main': {   'req_args': ['argv'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.oneOrMore': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.or': {   'req_args': [   's1',
                                              's2',
                                              ['s1', 's2', 's3'],
                                              ['s1', 's2', 's3', 's4'],
                                              ['s1', 's2', 's3', 's4', 's5'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7',
                                                  's8'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7',
                                                  's8',
                                                  's9'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7',
                                                  's8',
                                                  's9',
                                                  's10'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7',
                                                  's8',
                                                  's9',
                                                  's10',
                                                  's11'],
                                              [   's1',
                                                  's2',
                                                  's3',
                                                  's4',
                                                  's5',
                                                  's6',
                                                  's7',
                                                  's8',
                                                  's9',
                                                  's10',
                                                  's11',
                                                  's12']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.range': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.rangeNot': {   'req_args': ['s'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.tokenizeText': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.tokenizeToWordTokens': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.tokenizeToWords': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.zeroOrMore': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RobustTokenizer.zeroOrOne': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\ace\\reader\\RobustTokenizer.java'},
    'RothCONLL04Reader': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothCONLL04Reader.java'},
    'RothCONLL04Reader.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothCONLL04Reader.java'},
    'RothCONLL04Reader.read': {   'req_args': ['path'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothCONLL04Reader.java'},
    'RothEntityExtractor': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothEntityExtractor.java'},
    'RothEntityExtractor.getEntityTypeForTag': {   'req_args': ['ner'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothEntityExtractor.java'},
    'RothResultsByRelation.printResults': {   'req_args': [   'pw',
                                                              'goldStandard',
                                                              'extractorOutput'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothResultsByRelation.java'},
    'RothResultsByRelation.printResultsUsingLabels': {   'req_args': [   'pw',
                                                                         'goldStandard',
                                                                         'extractorOutput'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\domains\\roth\\RothResultsByRelation.java'},
    'RuleBasedCorefMentionFinder': {   'req_args': [   'headFinder',
                                                       'props',
                                                       [   'allowReparsing',
                                                           'headFinder',
                                                           'lang'],
                                                       [],
                                                       ['allowReparsing']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedCorefMentionFinder.extractNPorPRP': {   'req_args': [   's',
                                                                      'mentions',
                                                                      'mentionSpanSet',
                                                                      'namedEntitySpanSet'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedCorefMentionFinder.extractPredictedMentions': {   'req_args': [   'doc',
                                                                                'maxID',
                                                                                'dict'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedCorefMentionFinder.filterPredictedMentions': {   'req_args': [   'allGoldMentions',
                                                                               'doc',
                                                                               'dict',
                                                                               'props',
                                                                               [   'allGoldMentions',
                                                                                   'doc',
                                                                                   'dict']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedCorefMentionFinder.findMentions': {   'req_args': [   'doc',
                                                                    'dict',
                                                                    'props'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedCorefMentionFinder.removeSpuriousMentionsEn': {   'req_args': [   'doc',
                                                                                'predictedMentions',
                                                                                'dict'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\md\\RuleBasedCorefMentionFinder.java'},
    'RuleBasedParser': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\RuleBasedParser.java'},
    'RuleBasedParser.countDoubleNumMods': {   'req_args': ['images'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\RuleBasedParser.java'},
    'RuleBasedParser.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\RuleBasedParser.java'},
    'RuleBasedParser.parse': {   'req_args': ['sg'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\RuleBasedParser.java'},
    'RuleBranchingFactor.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\RuleBranchingFactor.java'},
    'Rules.antecedentIsMentionSpeaker': {   'req_args': [   'document',
                                                            'mention',
                                                            'ant',
                                                            'dict'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.antecedentMatchesMentionSpeakerAnnotation': {   'req_args': [   'mention',
                                                                           'ant',
                                                                           [   'mention',
                                                                               'ant',
                                                                               'document']],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.contextIncompatible': {   'req_args': ['men', 'ant', 'dict'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityAlias': {   'req_args': [   'mentionCluster',
                                             'potentialAntecedent',
                                             'semantics',
                                             'dict'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityAttributesAgree': {   'req_args': [   'mentionCluster',
                                                       'potentialAntecedent',
                                                       [   'mentionCluster',
                                                           'potentialAntecedent',
                                                           'ignoreGender']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityBothHaveProper': {   'req_args': [   'mentionCluster',
                                                      'potentialAntecedent'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityClusterAllCorefDictionary': {   'req_args': [   'menCluster',
                                                                 'antCluster',
                                                                 'dict',
                                                                 'dictColumn',
                                                                 'freq'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityCorefDictionary': {   'req_args': [   'men',
                                                       'ant',
                                                       'dict',
                                                       'dictVersion',
                                                       'freq'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityExactStringMatch': {   'req_args': [   'mentionCluster',
                                                        'potentialAntecedent',
                                                        'dict',
                                                        'roleSet'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityHaveDifferentLocation': {   'req_args': ['m', 'a', 'dict'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityHaveExtraProperNoun': {   'req_args': [   'm',
                                                           'a',
                                                           'exceptWords'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityHaveIncompatibleModifier': {   'req_args': [   'mentionCluster',
                                                                'potentialAntecedent',
                                                                ['m', 'ant']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityHeadsAgree': {   'req_args': [   'mentionCluster',
                                                  'potentialAntecedent',
                                                  'm',
                                                  'ant',
                                                  'dict'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIWithinI': {   'req_args': [   'mentionCluster',
                                                'potentialAntecedent',
                                                'dict',
                                                ['m1', 'm2', 'dict']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIsAcronym': {   'req_args': [   'document',
                                                 'mentionCluster',
                                                 'potentialAntecedent'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIsApposition': {   'req_args': [   'mentionCluster',
                                                    'potentialAntecedent',
                                                    'm1',
                                                    'm2'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIsPredicateNominatives': {   'req_args': [   'mentionCluster',
                                                              'potentialAntecedent',
                                                              'm1',
                                                              'm2'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIsRelativePronoun': {   'req_args': ['m1', 'm2'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityIsRoleAppositive': {   'req_args': [   'mentionCluster',
                                                        'potentialAntecedent',
                                                        'm1',
                                                        'm2',
                                                        'dict'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityNumberInLaterMention': {   'req_args': ['mention', 'ant'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityPersonDisagree': {   'req_args': [   'document',
                                                      'mentionCluster',
                                                      'potentialAntecedent',
                                                      'dict',
                                                      [   'document',
                                                          'm',
                                                          'ant',
                                                          'dict']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityRelaxedExactStringMatch': {   'req_args': [   'mentionCluster',
                                                               'potentialAntecedent',
                                                               'mention',
                                                               'ant',
                                                               'dict',
                                                               'roleSet'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityRelaxedHeadsAgreeBetweenMentions': {   'req_args': [   'mentionCluster',
                                                                        'potentialAntecedent',
                                                                        'm',
                                                                        'ant'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entitySameProperHeadLastWord': {   'req_args': [   'mentionCluster',
                                                              'potentialAntecedent',
                                                              'mention',
                                                              'ant',
                                                              ['m', 'a']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entitySameSpeaker': {   'req_args': ['document', 'm', 'ant'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entitySubjectObject': {   'req_args': ['m1', 'm2'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityTokenDistance': {   'req_args': ['m1', 'm2'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.entityWordsIncluded': {   'req_args': [   'mentionCluster',
                                                     'potentialAntecedent',
                                                     'mention',
                                                     'ant'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.getSpeakerClusterId': {   'req_args': ['document', 'speakerString'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.isAcronym': {   'req_args': ['first', 'second'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.mentionMatchesSpeaker': {   'req_args': [   'mention',
                                                       'speakerInfo',
                                                       'strictMatch'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'Rules.sentenceContextIncompatible': {   'req_args': ['men', 'ant', 'dict'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\Rules.java'},
    'RunParagraphAnnotator.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\RunParagraphAnnotator.java'},
    'RunParagraphAnnotator.runTest': {   'req_args': ['test', 'num'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\paragraphs\\RunParagraphAnnotator.java'},
    'RuntimeClassNotFoundException': {   'req_args': ['e'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RuntimeClassNotFoundException.java'},
    'RuntimeIOException': {   'req_args': [   ['message'],
                                              ['cause'],
                                              ['message', 'cause']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\RuntimeIOException.java'},
    'RuntimeInterruptedException': {   'req_args': [['e']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\RuntimeInterruptedException.java'},
    'SGDMinimizer': {   'req_args': [   'sigma',
                                        'numPasses',
                                        ['sigma', 'numPasses', 'tuningSamples'],
                                        [   'sigma',
                                            'numPasses',
                                            'tuningSamples',
                                            'batchSize'],
                                        [   'prior',
                                            'numPasses',
                                            'batchSize',
                                            'tuningSamples']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.getObjective': {   'req_args': [   'function',
                                                     'w',
                                                     'wscale',
                                                     'sample'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.minimize': {   'req_args': [   'function',
                                                 'functionTolerance',
                                                 'initial',
                                                 [   'f',
                                                     'functionTolerance',
                                                     'initial',
                                                     'maxIterations']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.setEvaluators': {   'req_args': ['iters', 'evaluators'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.shutUp': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.tryEta': {   'req_args': [   'function',
                                               'initial',
                                               'sample',
                                               'eta'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDMinimizer.tune': {   'req_args': [   'function',
                                             'initial',
                                             'sampleSize',
                                             'seta'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDMinimizer.java'},
    'SGDToQNMinimizer': {   'req_args': [   'SGDGain',
                                            'batchSize',
                                            'SGDPasses',
                                            'QNPasses',
                                            [   'SGDGain',
                                                'batchSize',
                                                'sgdPasses',
                                                'qnPasses',
                                                'hessSamples',
                                                'QNMem'],
                                            [   'SGDGain',
                                                'batchSize',
                                                'sgdPasses',
                                                'qnPasses',
                                                'hessSamples',
                                                'QNMem',
                                                'outputToFile']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDToQNMinimizer.java'},
    'SGDToQNMinimizer.minimize': {   'req_args': [   'function',
                                                     'functionTolerance',
                                                     'initial',
                                                     [   'function',
                                                         'functionTolerance',
                                                         'initial',
                                                         'maxIterations']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDToQNMinimizer.java'},
    'SGDToQNMinimizer.shutUp': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDToQNMinimizer.java'},
    'SGDWithAdaGradAndFOBOS': {   'req_args': [   'initRate',
                                                  'lambda',
                                                  'numPasses',
                                                  [   'initRate',
                                                      'lambda',
                                                      'numPasses',
                                                      'batchSize'],
                                                  [   'initRate',
                                                      'lambda',
                                                      'numPasses',
                                                      'batchSize',
                                                      'priorType',
                                                      'alpha',
                                                      'useAdaDelta',
                                                      'useAdaDiff',
                                                      'adaGradEps',
                                                      'adaDeltaRho']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.minimize': {   'req_args': [   'function',
                                                           'functionTolerance',
                                                           'initial',
                                                           [   'f',
                                                               'functionTolerance',
                                                               'initial',
                                                               'maxIterations']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.setEvaluators': {   'req_args': [   'iters',
                                                                'evaluators'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.setHessSampleSize': {   'req_args': ['hessSize'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.setTerminateOnEvalImprovementNumOfEpoch': {   'req_args': [   'terminateOnEvalImprovementNumOfEpoch'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.shutUp': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.suppressTestPrompt': {   'req_args': [   'suppressTestPrompt'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.terminateOnAvgImprovement': {   'req_args': [   'toTerminate',
                                                                            'tolerance'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.terminateOnEvalImprovement': {   'req_args': [   'toTerminate'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SGDWithAdaGradAndFOBOS.toContinue': {   'req_args': ['x', 'currEval'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SGDWithAdaGradAndFOBOS.java'},
    'SLF4JHandler.handle': {   'req_args': ['record'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\SLF4JHandler.java'},
    'SLF4JHandler.print': {   'req_args': ['channel', 'line'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\SLF4JHandler.java'},
    'SMDMinimizer': {   'req_args': [   [   'initialSMDGain',
                                            'batchSize',
                                            'method',
                                            'passes'],
                                        [   'initGain',
                                            'batchSize',
                                            'method',
                                            'passes',
                                            'outputToFile']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SMDMinimizer.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SMDMinimizer.minimize': {   'req_args': [   'function',
                                                 'functionTolerance',
                                                 'initial'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SMDMinimizer.setBatchSize': {   'req_args': ['batchSize'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SMDMinimizer.shutUp': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SMDMinimizer.tune': {   'req_args': ['function', 'initial', 'msPerTest'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SMDMinimizer.java'},
    'SPIEDServlet.doGet': {   'req_args': ['request', 'response'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SPIEDServlet.java'},
    'SPIEDServlet.doPost': {   'req_args': ['request', 'response'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SPIEDServlet.java'},
    'SPIEDServlet.init': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SPIEDServlet.java'},
    'SPIEDServlet.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SPIEDServlet.java'},
    'SPIEDServlet.quote': {   'req_args': ['string'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SPIEDServlet.java'},
    'SQLConnection.getConnection': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SQLConnection.java'},
    'SQNMinimizer': {   'req_args': [   'm',
                                        [],
                                        [   'mem',
                                            'initialGain',
                                            'batchSize',
                                            'output']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SQNMinimizer.java'},
    'SQNMinimizer.getName': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SQNMinimizer.java'},
    'SQNMinimizer.setM': {   'req_args': ['m'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SQNMinimizer.java'},
    'SQNMinimizer.tune': {   'req_args': ['function', 'initial', 'msPerTest'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SQNMinimizer.java'},
    'SUTime': {   'req_args': [],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTime.java'},
    'SUTime.createTemporal': {   'req_args': [   'timeType',
                                                 'temporal',
                                                 [   'timeType',
                                                     'label',
                                                     'temporal'],
                                                 [   'timeType',
                                                     'label',
                                                     'mod',
                                                     'temporal']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTime.java'},
    'SUTime.getCurrentTime': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTime.java'},
    'SUTime.parseDateTime': {   'req_args': [   'dateStr',
                                                'allowPartial',
                                                ['dateStr']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTime.java'},
    'SUTime.parseInstant': {   'req_args': ['value', 'timezone'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTime.java'},
    'SUTimeMain': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.annotationToTmlTextElement': {   'req_args': ['annotation'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.annotationToXmlDocument': {   'req_args': ['annotation'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.getPipeline': {   'req_args': ['props', 'tokenize'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTempEval2': {   'req_args': [   'pipeline',
                                                       'in',
                                                       'out',
                                                       'eval',
                                                       'dct'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTempEval2Tab': {   'req_args': [   'pipeline',
                                                          'in',
                                                          'out',
                                                          'docDates'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTempEval3': {   'req_args': [   'pipeline',
                                                       'in',
                                                       'out',
                                                       'evalCmd'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTempEval3File': {   'req_args': [   'pipeline',
                                                           'in',
                                                           'out'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processText': {   'req_args': [   'pipeline',
                                                  'text',
                                                  'out',
                                                  'date'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTextFile': {   'req_args': [   'pipeline',
                                                      'in',
                                                      'out',
                                                      'date'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.processTimebankCsv': {   'req_args': [   'pipeline',
                                                         'in',
                                                         'out',
                                                         'eval'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.sentencesToDocument': {   'req_args': [   'documentID',
                                                          'docDate',
                                                          'sentences'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.textToAnnotatedXml': {   'req_args': [   'pipeline',
                                                         'text',
                                                         'date'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimeMain.textToAnnotation': {   'req_args': ['pipeline', 'text', 'date'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeMain.java'},
    'SUTimePipeline': {   'req_args': [['props']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimePipeline.java'},
    'SUTimePipeline.getTimeAnnotator': {   'req_args': [   'annotatorType',
                                                           'props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimePipeline.java'},
    'SUTimePipeline.isDateOkay': {   'req_args': ['dateString'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimePipeline.java'},
    'SUTimePipeline.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimePipeline.java'},
    'SUTimePipeline.process': {   'req_args': [   'sentence',
                                                  'dateString',
                                                  'timeAnnotator'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimePipeline.java'},
    'SUTimeServlet.doGet': {   'req_args': ['request', 'response'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimeServlet.java'},
    'SUTimeServlet.doPost': {   'req_args': ['request', 'response'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimeServlet.java'},
    'SUTimeServlet.init': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimeServlet.java'},
    'SUTimeServlet.parseBoolean': {   'req_args': ['value'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\suservlet\\SUTimeServlet.java'},
    'SUTimeSimpleParser': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeSimpleParser.java'},
    'SUTimeSimpleParser.parse': {   'req_args': ['str'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeSimpleParser.java'},
    'SUTimeSimpleParser.parseOrNull': {   'req_args': ['str'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeSimpleParser.java'},
    'SUTimeSimpleParser.parseUsingCache': {   'req_args': ['str'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\SUTimeSimpleParser.java'},
    'SVMLightClassifier': {   'req_args': [   'weightCounter',
                                              'thresholds',
                                              [   'weightCounter',
                                                  'thresholds',
                                                  'platt']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifier.java'},
    'SVMLightClassifier.logProbabilityOf': {   'req_args': [   'example',
                                                               ['example']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifier.java'},
    'SVMLightClassifier.setPlatt': {   'req_args': ['platt'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifier.java'},
    'SVMLightClassifierFactory': {   'req_args': [   'svmLightLearn',
                                                     'svmStructLearn',
                                                     'svmPerfLearn',
                                                     [],
                                                     ['useSVMPerf']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.crossValidateSetC': {   'req_args': [   'dataset',
                                                                       'numFolds',
                                                                       'scorer',
                                                                       'minimizer'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getC': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getDeleteTempFilesOnExitFlag': {   'req_args': [   ],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getFolds': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getHeldOutPercent': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getScorer': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getSvmLightVerbosity': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getTuneCV': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getTuneHeldOut': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getTuneMinimizer': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.getUseSigma': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.heldOutSetC': {   'req_args': [   'train',
                                                                 'percentHeldOut',
                                                                 'scorer',
                                                                 'minimizer',
                                                                 [   'trainSet',
                                                                     'devSet',
                                                                     'scorer',
                                                                     'minimizer']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setC': {   'req_args': ['C'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setDeleteTempFilesOnExitFlag': {   'req_args': [   'deleteTempFilesOnExit'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setFolds': {   'req_args': ['folds'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setHeldOutPercent': {   'req_args': [   'heldOutPercent'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setScorer': {   'req_args': ['scorer'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setSvmLightVerbosity': {   'req_args': [   'svmLightVerbosity'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setTuneCV': {   'req_args': ['tuneCV'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setTuneHeldOut': {   'req_args': ['tuneHeldOut'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setTuneMinimizer': {   'req_args': ['minimizer'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.setUseSigmoid': {   'req_args': ['useSigmoid'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.trainClassifier': {   'req_args': ['dataset'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'SVMLightClassifierFactory.trainClassifierBasic': {   'req_args': [   'dataset'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SVMLightClassifierFactory.java'},
    'Sandbox.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\Sandbox.java'},
    'ScaledSGDMinimizer': {   'req_args': [   'SGDGain',
                                              'batchSize',
                                              'sgdPasses',
                                              [   'SGDGain',
                                                  'batchSize',
                                                  'sgdPasses',
                                                  'method'],
                                              [   'SGDGain',
                                                  'batchSize',
                                                  'sgdPasses',
                                                  'method',
                                                  'outputToFile'],
                                              ['SGDGain', 'batchSize']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.getDiag': {   'req_args': ['loadPath'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.getName': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.getWeights': {   'req_args': ['loadPath'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.serializeWeights': {   'req_args': [   'serializePath',
                                                               'weights',
                                                               [   'serializePath',
                                                                   'weights',
                                                                   'diag']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.setBatchSize': {   'req_args': ['batchSize'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.setMaxTime': {   'req_args': ['max'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.shutUp': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.tune': {   'req_args': [   'function',
                                                   'initial',
                                                   'msPerTest'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.tuneFixedGain': {   'req_args': [   'function',
                                                            'initial',
                                                            'msPerTest',
                                                            'fixedStart'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'ScaledSGDMinimizer.updateDiagBFGS': {   'req_args': ['diag', 's', 'y'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\ScaledSGDMinimizer.java'},
    'SceneGraph': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.addEdge': {   'req_args': ['source', 'target', 'relation'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.addNode': {   'req_args': ['value', ['node']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.getOrAddNode': {   'req_args': ['value'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.nodeListSorted': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.relationListSorted': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.toJSON': {   'req_args': ['imageID', 'url', 'phrase'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraph.toReadableString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraph.java'},
    'SceneGraphAttribute': {   'req_args': ['attribute'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphAttribute.java'},
    'SceneGraphAttribute.equals': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphAttribute.java'},
    'SceneGraphAttribute.hashCode': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphAttribute.java'},
    'SceneGraphAttribute.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphAttribute.java'},
    'SceneGraphAttribute.value': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphAttribute.java'},
    'SceneGraphCoreAnnotations': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphCoreAnnotations.java'},
    'SceneGraphEvaluation.evaluate': {   'req_args': [   'scene',
                                                         'region',
                                                         [   'predicted',
                                                             'region']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphEvaluation.java'},
    'SceneGraphEvaluation.toSmatchString': {   'req_args': [   'scene',
                                                               'region',
                                                               'predWriter',
                                                               'goldWriter',
                                                               [   'predicted',
                                                                   'region',
                                                                   'predWriter',
                                                                   'goldWriter']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphEvaluation.java'},
    'SceneGraphImage': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.addAttribute': {   'req_args': ['attr'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.addRelationship': {   'req_args': ['reln'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.readFromJSON': {   'req_args': ['json'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.removeRegion': {   'req_args': ['region'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImage.toJSON': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImage.java'},
    'SceneGraphImageAttribute.attributeGloss': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.attributeLemmaGloss': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.clone': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.equals': {   'req_args': ['otherObj'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.fromJSONObject': {   'req_args': ['img', 'obj'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.hashCode': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.print': {   'req_args': ['out'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.subjectGloss': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.subjectLemmaGloss': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageAttribute.toJSONObject': {   'req_args': ['img'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageAttribute.java'},
    'SceneGraphImageBoundingBox': {   'req_args': ['h', 'w', 'x', 'y'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageBoundingBox.java'},
    'SceneGraphImageCleaner.cleanupImage': {   'req_args': ['img'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageCleaner.java'},
    'SceneGraphImageCleaner.extractAllAttributes': {   'req_args': ['images'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageCleaner.java'},
    'SceneGraphImageCleaner.lemmatize': {   'req_args': ['img'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageCleaner.java'},
    'SceneGraphImageCleaner.splitAttributeConjunctions': {   'req_args': [   'img'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageCleaner.java'},
    'SceneGraphImageCleaner.trimFunctionWords': {   'req_args': ['img'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageCleaner.java'},
    'SceneGraphImageDependencyParser.main': {   'req_args': ['args'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageDependencyParser.java'},
    'SceneGraphImageFilter.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImageFilter.java'},
    'SceneGraphImageObject': {   'req_args': ['boundingBox', 'names', 'labels'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageObject.java'},
    'SceneGraphImageObject.fromJSONObject': {   'req_args': ['img', 'obj'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageObject.java'},
    'SceneGraphImageObject.toJSONObject': {   'req_args': ['sceneGraphImage'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageObject.java'},
    'SceneGraphImagePCFGParser.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphImagePCFGParser.java'},
    'SceneGraphImageRegion.fromJSONObject': {   'req_args': ['img', 'obj'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRegion.java'},
    'SceneGraphImageRegion.getBasicSemanticGraph': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRegion.java'},
    'SceneGraphImageRegion.getEnhancedSemanticGraph': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRegion.java'},
    'SceneGraphImageRegion.toJSONObject': {   'req_args': ['sceneGraphImage'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRegion.java'},
    'SceneGraphImageRegion.toReadableString': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRegion.java'},
    'SceneGraphImageRelationship.clone': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.equals': {   'req_args': ['otherObj'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.fromJSONObject': {   'req_args': [   'img',
                                                                      'obj'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.hashCode': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.objectGloss': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.objectLemmaGloss': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.predicateGloss': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.predicateLemmaGloss': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.print': {   'req_args': ['out'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.subjectGloss': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.subjectLemmaGloss': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageRelationship.toJSONObject': {   'req_args': ['img'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageRelationship.java'},
    'SceneGraphImageUtils.containsLemma': {   'req_args': ['list', 'lemma'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.containsWord': {   'req_args': ['list', 'word'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.findLemma': {   'req_args': ['tokens', 'lemma'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.findWord': {   'req_args': ['tokens', 'word'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.getSemanticGraph': {   'req_args': [   'depTriplets',
                                                                 'tokens'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.grammaticalStructureToJSON': {   'req_args': ['gs'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.labelFromString': {   'req_args': ['str'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphImageUtils.labelToString': {   'req_args': ['label'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\image\\SceneGraphImageUtils.java'},
    'SceneGraphNode': {   'req_args': ['value'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.addAttribute': {   'req_args': ['value', ['attribute']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.compareTo': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.getAttributes': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.hasAttribute': {   'req_args': ['attribute'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.removeAttribute': {   'req_args': ['attribute'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.toJSONString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphNode.value': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphNode.java'},
    'SceneGraphRelation': {   'req_args': ['source', 'target', 'relation'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.compareTo': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.equals': {   'req_args': ['o'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.getRelation': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.getSource': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.getTarget': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphRelation.hashCode': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphRelation.java'},
    'SceneGraphSentenceMatcher': {   'req_args': ['embeddings'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphSentenceMatcher.java'},
    'SceneGraphSentenceMatcher.findClosestPair': {   'req_args': [   'subjects',
                                                                     'objects'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphSentenceMatcher.java'},
    'SceneGraphSentenceMatcher.getRelationTriples': {   'req_args': ['region'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphSentenceMatcher.java'},
    'SceneGraphSentenceMatcher.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphSentenceMatcher.java'},
    'SceneGraphUtils.getClosestIndices': {   'req_args': ['w1', 'w2'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphUtils.java'},
    'SceneGraphUtils.getCommonAncestor': {   'req_args': ['sg', 'w1', 'w2'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphUtils.java'},
    'SceneGraphUtils.inSameSubTree': {   'req_args': ['sg', 'w1', 'w2'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SceneGraphUtils.java'},
    'ScorePatterns': {   'req_args': [   'constVars',
                                         'patternScoring',
                                         'label',
                                         'allCandidatePhrases',
                                         'patternsandWords4Label',
                                         'negPatternsandWords4Label',
                                         'unLabeledPatternsandWords4Label',
                                         'props'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatterns.java'},
    'ScorePatterns.score': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatterns.java'},
    'ScorePatterns.setUp': {   'req_args': ['props'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatterns.java'},
    'ScorePatternsF1': {   'req_args': [   'constVars',
                                           'patternScoring',
                                           'label',
                                           'allCandidatePhrases',
                                           'patternsandWords4Label',
                                           'negPatternsandWords4Label',
                                           'unLabeledPatternsandWords4Label',
                                           'props',
                                           'p0Set',
                                           'p0'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ScorePatternsF1.java'},
    'ScorePatternsF1.score': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ScorePatternsF1.java'},
    'ScorePatternsF1.setUp': {   'req_args': ['props'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\ScorePatternsF1.java'},
    'ScorePatternsFreqBased': {   'req_args': [   'constVars',
                                                  'patternScoring',
                                                  'label',
                                                  'allCandidatePhrases',
                                                  'patternsandWords4Label',
                                                  'negPatternsandWords4Label',
                                                  'unLabeledPatternsandWords4Label',
                                                  'props'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsFreqBased.java'},
    'ScorePatternsFreqBased.score': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsFreqBased.java'},
    'ScorePatternsFreqBased.setUp': {   'req_args': ['props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsFreqBased.java'},
    'ScorePatternsRatioModifiedFreq': {   'req_args': [   'constVars',
                                                          'patternScoring',
                                                          'label',
                                                          'allCandidatePhrases',
                                                          'patternsandWords4Label',
                                                          'negPatternsandWords4Label',
                                                          'unLabeledPatternsandWords4Label',
                                                          'phInPatScores',
                                                          'scorePhrases',
                                                          'props'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsRatioModifiedFreq.java'},
    'ScorePatternsRatioModifiedFreq.score': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsRatioModifiedFreq.java'},
    'ScorePatternsRatioModifiedFreq.setUp': {   'req_args': ['props'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePatternsRatioModifiedFreq.java'},
    'ScorePhrases': {   'req_args': ['props', 'cv'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrases.java'},
    'ScorePhrases.applyPats': {   'req_args': [   'patterns',
                                                  'label',
                                                  'wordsandLemmaPatExtracted',
                                                  'matchedTokensByPat',
                                                  'alreadyLabeledWords'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrases.java'},
    'ScorePhrases.chooseTopWords': {   'req_args': [   'newdt',
                                                       'terms',
                                                       'useThresholdNumPatternsForTheseWords',
                                                       'ignoreWords',
                                                       'thresholdWordExtract'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrases.java'},
    'ScorePhrases.learnNewPhrases': {   'req_args': [   'label',
                                                        'patternsForEachToken',
                                                        'patternsLearnedThisIter',
                                                        'allSelectedPatterns',
                                                        'tokensMatchedPatterns',
                                                        'scoreForAllWordsThisIteration',
                                                        'terms',
                                                        'wordsPatExtracted',
                                                        'patternsAndWords4Label',
                                                        'identifier',
                                                        'ignoreWords'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrases.java'},
    'ScorePhrases.removeKeys': {   'req_args': [   'counter',
                                                   'removeKeysCollection'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrases.java'},
    'ScorePhrasesAverageFeatures': {   'req_args': ['constvar'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesAverageFeatures.java'},
    'ScorePhrasesAverageFeatures.printReasonForChoosing': {   'req_args': [   'phrases'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesAverageFeatures.java'},
    'ScorePhrasesAverageFeatures.scorePhrases': {   'req_args': [   'label',
                                                                    'terms',
                                                                    'wordsPatExtracted',
                                                                    'allSelectedPatterns',
                                                                    'alreadyIdentifiedWords',
                                                                    'forLearningPatterns',
                                                                    [   'label',
                                                                        'terms',
                                                                        'forLearningPatterns']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesAverageFeatures.java'},
    'ScorePhrasesLearnFeatWt': {   'req_args': ['constvar'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.choosedatums': {   'req_args': [   'forLearningPattern',
                                                                'answerLabel',
                                                                'wordsPatExtracted',
                                                                'allSelectedPatterns',
                                                                'computeRawFreq'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.getRandomBoolean': {   'req_args': ['random', 'p'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.learnClassifier': {   'req_args': [   'label',
                                                                   'forLearningPatterns',
                                                                   'wordsPatExtracted',
                                                                   'allSelectedPatterns'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.printReasonForChoosing': {   'req_args': [   'phrases'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.scorePhrases': {   'req_args': [   'label',
                                                                'terms',
                                                                'wordsPatExtracted',
                                                                'allSelectedPatterns',
                                                                'alreadyIdentifiedWords',
                                                                'forLearningPatterns',
                                                                [   'label',
                                                                    'terms',
                                                                    'forLearningPatterns']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScorePhrasesLearnFeatWt.scoreUsingClassifer': {   'req_args': [   'classifier',
                                                                       'word',
                                                                       'label',
                                                                       'forLearningPatterns',
                                                                       'patternsThatExtractedPat',
                                                                       'allSelectedPatterns'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\ScorePhrasesLearnFeatWt.java'},
    'ScoredComparator': {   'req_args': ['ascending'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredComparator.java'},
    'ScoredComparator.compare': {   'req_args': ['o1', 'o2'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredComparator.java'},
    'ScoredComparator.equals': {   'req_args': ['o'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredComparator.java'},
    'ScoredComparator.hashCode': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredComparator.java'},
    'ScoredComparator.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredComparator.java'},
    'ScoredObject': {   'req_args': ['object', 'score'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScoredObject.object': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScoredObject.score': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScoredObject.setObject': {   'req_args': ['object'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScoredObject.setScore': {   'req_args': ['score'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScoredObject.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ScoredObject.java'},
    'ScorerBCubed': {   'req_args': ['_type'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ScorerBCubed.java'},
    'ScorerMUC': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ScorerMUC.java'},
    'ScorerPairwise': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\ScorerPairwise.java'},
    'ScrollableTreeJPanel': {   'req_args': [['i', 'j']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getDefaultColor': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getFontName': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getFontSize': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getMatchedColor': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getMatchedPartCoordinates': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getMatchedParts': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.getPreferredSize': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.paintComponent': {   'req_args': ['g'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setDefaultColor': {   'req_args': ['defaultColor'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setDiffConstituents': {   'req_args': [   'diffConstituents'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setFontName': {   'req_args': ['fontName'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setFontSize': {   'req_args': ['fontSize'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setMatchedColor': {   'req_args': ['matchedColor'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'ScrollableTreeJPanel.setMatchedParts': {   'req_args': ['matchedParts'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\ScrollableTreeJPanel.java'},
    'SegDemo.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\demo\\SegDemo.java'},
    'SegmenterCoreAnnotations': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SegmenterCoreAnnotations.java'},
    'SemanticGraph': {   'req_args': [   ['g'],
                                         ['g', 'prevToNewMap'],
                                         ['dependencies']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.addComment': {   'req_args': ['comment'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.addEdge': {   'req_args': [   's',
                                                 'd',
                                                 'reln',
                                                 'weight',
                                                 'isExtra',
                                                 ['edge']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.addRoot': {   'req_args': ['root'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.addVertex': {   'req_args': ['vertex'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.attachedNegatedVerb': {   'req_args': ['vertex'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.childPairs': {   'req_args': ['vertex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.childRelns': {   'req_args': ['vertex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.commonAncestor': {   'req_args': ['v1', 'v2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.containsEdge': {   'req_args': [   'source',
                                                      'target',
                                                      ['edge']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.containsVertex': {   'req_args': ['vertex'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.deleteDuplicateEdges': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.descendants': {   'req_args': ['vertex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.edgeCount': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.edgeIterable': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.edgeListSorted': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.findAllRelns': {   'req_args': [   'tgtRelation',
                                                      ['tgtRelationShortname']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getAllEdges': {   'req_args': ['gov', 'dep'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getAllNodesByPartOfSpeechPattern': {   'req_args': [   'pattern'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getAllNodesByWordPattern': {   'req_args': ['pattern'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getChildList': {   'req_args': ['vertex'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getChildWithReln': {   'req_args': ['vertex', 'reln'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getChildren': {   'req_args': ['vertex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getChildrenWithReln': {   'req_args': ['vertex', 'reln'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getChildrenWithRelns': {   'req_args': ['vertex', 'relns'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getComments': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getCommonAncestor': {   'req_args': ['v1', 'v2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getEdge': {   'req_args': [   'gov',
                                                 'dep',
                                                 ['gov', 'dep', 'reln']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getFirstRoot': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getIncomingEdgesSorted': {   'req_args': ['vertex'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getLeafVertices': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getNodeByIndex': {   'req_args': ['index'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getNodeByIndexAndCopyCount': {   'req_args': [   'index',
                                                                    'copyCount'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getNodeByIndexAndCopyCountSafe': {   'req_args': [   'index',
                                                                        'copyCount'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getNodeByIndexSafe': {   'req_args': ['index'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getNodeByWordPattern': {   'req_args': ['pattern'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getOutEdgesSorted': {   'req_args': ['vertex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getParent': {   'req_args': ['vertex'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getParentList': {   'req_args': ['vertex'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getParents': {   'req_args': ['vertex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getParentsWithReln': {   'req_args': [   'vertex',
                                                            'reln',
                                                            [   'vertex',
                                                                'relnName']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getPathToRoot': {   'req_args': ['vertex'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getRoots': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getShortestDirectedPathEdges': {   'req_args': [   'source',
                                                                      'target'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getShortestDirectedPathNodes': {   'req_args': [   'source',
                                                                      'target'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getShortestUndirectedPathEdges': {   'req_args': [   'source',
                                                                        'target'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getShortestUndirectedPathNodes': {   'req_args': [   'source',
                                                                        'target'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getSiblings': {   'req_args': ['vertex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.getSubgraphVertices': {   'req_args': ['root'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.hasChild': {   'req_args': ['vertex', 'reln', 'childLemma'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.hasChildWithReln': {   'req_args': ['vertex', 'reln'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.hasChildren': {   'req_args': ['vertex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.hasParentWithReln': {   'req_args': ['vertex', 'reln'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.inDegree': {   'req_args': ['vertex'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.incomingEdgeIterable': {   'req_args': ['v'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.incomingEdgeIterator': {   'req_args': ['v'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.incomingEdgeList': {   'req_args': ['v'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isAncestor': {   'req_args': ['child', 'ancestor'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isAuxiliaryVerb': {   'req_args': ['vertex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isDag': {   'req_args': [['root']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isEmpty': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isInConditionalContext': {   'req_args': ['vertex'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.isNegatedVertex': {   'req_args': ['vertex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.makeSoftCopy': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.matchPatternToVertex': {   'req_args': [   'pattern',
                                                              'vertex',
                                                              'det',
                                                              [   'pattern',
                                                                  'vertex']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.outDegree': {   'req_args': ['vertex'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.outgoingEdgeIterable': {   'req_args': ['v'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.outgoingEdgeIterator': {   'req_args': ['v'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.outgoingEdgeList': {   'req_args': ['v'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.parentPairs': {   'req_args': ['vertex'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.prettyPrint': {   'req_args': ['formatter', []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.reln': {   'req_args': ['a', 'b'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.relns': {   'req_args': ['vertex'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.removeEdge': {   'req_args': ['e'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.removeVertex': {   'req_args': ['vertex'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.resetRoots': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.setRoot': {   'req_args': ['word'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.setRoots': {   'req_args': ['words'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.size': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toCompactString': {   'req_args': [['showTags']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toDotFormat': {   'req_args': [   ['graphname'],
                                                     [   'graphname',
                                                         'indexedWordFormat']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toEnUncollapsedSentenceString': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toFormattedString': {   'req_args': [['formatter']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toList': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toPOSList': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toRecoveredSentenceString': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toRecoveredSentenceStringWithIndexMarking': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.toString': {   'req_args': [['wordFormat'], ['format']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.topologicalSort': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.typedDependencies': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.valueOf': {   'req_args': ['s', 'language', ['s']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.vertexListSorted': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.vertexSet': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.yield': {   'req_args': ['word'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraph.yieldSpan': {   'req_args': ['word'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraph.java'},
    'SemanticGraphEdge': {   'req_args': [   'source',
                                             'target',
                                             'relation',
                                             'weight',
                                             'isExtra',
                                             ['e']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.compareTo': {   'req_args': ['other'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.equals': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getDependent': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getGovernor': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getRelation': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getSource': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getTarget': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.getWeight': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.isExtra': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.orderByTargetComparator': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.setIsExtra': {   'req_args': ['isExtra'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.setRelation': {   'req_args': ['relation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.setWeight': {   'req_args': ['weight'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEdge.typeEquals': {   'req_args': ['e'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphEdge.java'},
    'SemanticGraphEnhancer.collapseCompounds': {   'req_args': ['sg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.collapseParticles': {   'req_args': ['sg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.enhance': {   'req_args': ['sg'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.processQuanftificationModifiers': {   'req_args': [   'sg'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.resolvePlurals': {   'req_args': ['sg'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphEnhancer.resolvePronouns': {   'req_args': ['sg'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SemanticGraphEnhancer.java'},
    'SemanticGraphFactory': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.deepCopyFromGraphs': {   'req_args': [   'graphs',
                                                                   'lengths'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.duplicateKeepNodes': {   'req_args': ['sg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.generateCCProcessedDependencies': {   'req_args': [   'tree',
                                                                                [   'gs'],
                                                                                [   'gs',
                                                                                    'extras']],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.generateCollapsedDependencies': {   'req_args': [   'tree',
                                                                              [   'gs'],
                                                                              [   'gs',
                                                                                  'extras']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.generateEnhancedDependencies': {   'req_args': [   'tree',
                                                                             [   'gs']],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.generateEnhancedPlusPlusDependencies': {   'req_args': [   'tree',
                                                                                     [   'gs']],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.generateUncollapsedDependencies': {   'req_args': [   'tree',
                                                                                [   'gs'],
                                                                                [   'gs',
                                                                                    'extras']],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.makeFromEdges': {   'req_args': ['edges'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.makeFromGraphs': {   'req_args': ['sgList'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.makeFromTree': {   'req_args': [   'tree',
                                                             'mode',
                                                             'includeExtras',
                                                             'filter',
                                                             'originalDependencies',
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras',
                                                                 'filter',
                                                                 'originalDependencies',
                                                                 'includePunctuationDependencies'],
                                                             [   'gs',
                                                                 'mode',
                                                                 'includeExtras',
                                                                 'filter'],
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras',
                                                                 'filter'],
                                                             ['structure'],
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras',
                                                                 'filter'],
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras',
                                                                 'filter'],
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras'],
                                                             [   'tree',
                                                                 'mode',
                                                                 'includeExtras']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFactory.makeFromVertices': {   'req_args': ['sg', 'nodes'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFactory.java'},
    'SemanticGraphFormatter': {   'req_args': [   [   'width',
                                                      'indent',
                                                      'smartIndent',
                                                      'showRelns',
                                                      'showTags',
                                                      'showAnnos',
                                                      'showIndices']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFormatter.java'},
    'SemanticGraphFormatter.formatSemanticGraph': {   'req_args': ['sg'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFormatter.java'},
    'SemanticGraphFormatter.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphFormatter.java'},
    'SemanticGraphPrinter': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphPrinter.java'},
    'SemanticGraphPrinter.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphPrinter.java'},
    'SemanticGraphUtils': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.allEdgesInSet': {   'req_args': ['vertices', 'sg'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.anonymyizeNodes': {   'req_args': ['verts', 'prefix'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.descendantsTabuRelns': {   'req_args': [   'sg',
                                                                   'vertex',
                                                                   'tabuRelns'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.descendantsTabuTestAndRelns': {   'req_args': [   'sg',
                                                                          'vertex',
                                                                          'tabuRelns',
                                                                          'tabuTest',
                                                                          [   'sg',
                                                                              'vertex',
                                                                              'tabuNodes',
                                                                              'tabuRelns',
                                                                              'tabuTest'],
                                                                          [   'sg',
                                                                              'vertex',
                                                                              'tabuNodes',
                                                                              'tabuRelns',
                                                                              'tabuTest']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.diffEdges': {   'req_args': [   'edges1',
                                                        'edges2',
                                                        'sg1',
                                                        'sg2',
                                                        'compareObj'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.edgesWithReln': {   'req_args': ['edges', 'reln'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.enRepairEdges': {   'req_args': ['sg'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.findAllRelnsWithPrefix': {   'req_args': [   'sg',
                                                                     'prefix'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.findMatchingNode': {   'req_args': ['node', 'sg'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getChildrenWithPrepC': {   'req_args': ['sg', 'vertex'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getChildrenWithRelnPrefix': {   'req_args': [   'graph',
                                                                        'vertex',
                                                                        'relnPrefix',
                                                                        [   'graph',
                                                                            'vertex',
                                                                            'relnPrefixes']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getDependencyBlanket': {   'req_args': [   'sg',
                                                                   'assertedNodes'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getEdgesSpannedByVertices': {   'req_args': [   'nodes',
                                                                        'sg'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getSubTreeEdges': {   'req_args': [   'vertice',
                                                              'sg',
                                                              'excludedEdge'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.getSubTreeEdgesHelper': {   'req_args': [   'vertice',
                                                                    'sg',
                                                                    'tabuEdges'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.incomingEdgesWithReln': {   'req_args': [   'node',
                                                                    'sg',
                                                                    'reln'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.isTree': {   'req_args': ['sg'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.killNonRooted': {   'req_args': ['sg'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.leftMostChildVertice': {   'req_args': [   'startNode',
                                                                   'sg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.leftRightMostChildVertices': {   'req_args': [   'startNode',
                                                                         'sg'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.lemmatize': {   'req_args': ['sg'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.makeBlanketVertices': {   'req_args': ['verts'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.makeGenericVertices': {   'req_args': ['verts'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.makeGraphFromNodes': {   'req_args': [   'nodes',
                                                                 'srcGraph'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.makeReplacedEdges': {   'req_args': [   'edges',
                                                                'vertReplacementMap',
                                                                'useGenericReplacement'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.mapTreeToSg': {   'req_args': ['tree', 'sg'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.outgoingEdgesWithReln': {   'req_args': [   'node',
                                                                    'sg',
                                                                    'reln'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.printEdges': {   'req_args': ['edges'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.printVertices': {   'req_args': [   'sg',
                                                            ['sg', 'params']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.removeDuplicates': {   'req_args': [   'graphs',
                                                               [   'graphs',
                                                                   'tabuGraphs'],
                                                               [   'graphs',
                                                                   'tabuGraph']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.replaceNode': {   'req_args': [   'newNode',
                                                          'oldNode',
                                                          'sg'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.resetVerticeOrdering': {   'req_args': ['sg'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.sanitizeForSemgrexName': {   'req_args': ['text'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.semgrexFromGraph': {   'req_args': [   'sg',
                                                               'matchTag',
                                                               'matchWord',
                                                               'nodeNameMap',
                                                               [   'sg',
                                                                   'wildcardNodes',
                                                                   'useTag',
                                                                   'useWord',
                                                                   'nodeNameMap'],
                                                               [   'sg',
                                                                   'wildcardNodes',
                                                                   'nodeNameMap',
                                                                   'wordTransformation'],
                                                               [   'edges',
                                                                   'matchTag',
                                                                   'matchWord',
                                                                   'nodeNameMap']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.semgrexFromGraphOrderedNodes': {   'req_args': [   'sg',
                                                                           'wildcardNodes',
                                                                           'nodeNameMap',
                                                                           'wordTransformation'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.setSentIndex': {   'req_args': ['sg', 'newSentIndex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticGraphUtils.tabuDescendants': {   'req_args': [   'sg',
                                                              'vertex',
                                                              'tabu',
                                                              [   'sg',
                                                                  'vertex',
                                                                  'tabu',
                                                                  'tabuRelns']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\SemanticGraphUtils.java'},
    'SemanticHeadFinder': {   'req_args': [   ['noCopulaHead'],
                                              ['tlp', 'noCopulaHead']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SemanticHeadFinder.java'},
    'SemanticHeadFinder.isVerbalAuxiliary': {   'req_args': ['t'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SemanticHeadFinder.java'},
    'SemanticHeadFinder.makesCopulaHead': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SemanticHeadFinder.java'},
    'Semantics': {   'req_args': [['dict'], [], ['dict']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\Semantics.java'},
    'SemgrexBatchParser': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexBatchParser.java'},
    'SemgrexBatchParser.compileStream': {   'req_args': ['is', ['is', 'env']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexBatchParser.java'},
    'SemgrexDemo': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\demo\\SemgrexDemo.java'},
    'SemgrexDemo.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\demo\\SemgrexDemo.java'},
    'SemgrexMatcher': {   'req_args': [   'sg',
                                          'alignment',
                                          'sg_aligned',
                                          'hyp',
                                          'node',
                                          'namesToNodes',
                                          'namesToRelations',
                                          'variableStrings',
                                          [   'sg',
                                              'node',
                                              'namesToNodes',
                                              'namesToRelations',
                                              'variableStrings']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.find': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.findNextMatchingNode': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getGraph': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getMatch': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getNode': {   'req_args': ['name'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getNodeNames': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getRelationNames': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.getRelnString': {   'req_args': ['name'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.matches': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.matchesAt': {   'req_args': ['node'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.reset': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexMatcher.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexMatcher.java'},
    'SemgrexParseException': {   'req_args': ['message', ['message', 'cause']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParseException.java'},
    'SemgrexParser': {   'req_args': [   'stream',
                                         ['stream', 'encoding'],
                                         ['stream'],
                                         ['tm']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.AddAttribute': {   'req_args': ['attributes'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.Child': {   'req_args': ['r'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.Description': {   'req_args': ['r'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.ModNode': {   'req_args': ['r'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.ModRelation': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.NodeConj': {   'req_args': ['r'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.NodeDisj': {   'req_args': ['r'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.ReInit': {   'req_args': [   'stream',
                                                ['stream', 'encoding'],
                                                ['stream'],
                                                ['tm']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.RelChild': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.Relation': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.RelationConj': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.RelationDisj': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.Root': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.SubNode': {   'req_args': ['r'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.disable_tracing': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.enable_tracing': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.generateParseException': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.getNextToken': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.getToken': {   'req_args': ['index'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParser.trace_enabled': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParser.java'},
    'SemgrexParserTokenManager': {   'req_args': [   'stream',
                                                     ['stream', 'lexState']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParserTokenManager.java'},
    'SemgrexParserTokenManager.ReInit': {   'req_args': [   'stream',
                                                            [   'stream',
                                                                'lexState']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParserTokenManager.java'},
    'SemgrexParserTokenManager.SwitchTo': {   'req_args': ['lexState'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParserTokenManager.java'},
    'SemgrexParserTokenManager.getNextToken': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParserTokenManager.java'},
    'SemgrexParserTokenManager.setDebugStream': {   'req_args': ['ds'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexParserTokenManager.java'},
    'SemgrexPattern': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.compile': {   'req_args': ['semgrex', 'env', ['semgrex']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.equals': {   'req_args': ['o'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.help': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.matcher': {   'req_args': [   'sg',
                                                  ['sg', 'root'],
                                                  ['sg', 'variables'],
                                                  ['sg', 'ignoreCase'],
                                                  [   'hypGraph',
                                                      'alignment',
                                                      'txtGraph'],
                                                  [   'hypGraph',
                                                      'alignment',
                                                      'txtGraph',
                                                      'ignoreCase']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.pattern': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.prettyPrint': {   'req_args': ['pw', ['ps'], []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.setEnv': {   'req_args': ['env'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemgrexPattern.toString': {   'req_args': [['hasPrecedence']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\SemgrexPattern.java'},
    'SemiSupervisedLogConditionalObjectiveFunction': {   'req_args': [   'objFunc',
                                                                         'biasedObjFunc',
                                                                         'prior',
                                                                         'convexComboFrac',
                                                                         [   'objFunc',
                                                                             'biasedObjFunc',
                                                                             'prior']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SemiSupervisedLogConditionalObjectiveFunction.java'},
    'SemiSupervisedLogConditionalObjectiveFunction.domainDimension': {   'req_args': [   ],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SemiSupervisedLogConditionalObjectiveFunction.java'},
    'SemiSupervisedLogConditionalObjectiveFunction.setPrior': {   'req_args': [   'prior'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\SemiSupervisedLogConditionalObjectiveFunction.java'},
    'Sentence': {   'req_args': [   'doc',
                                    'props',
                                    ['text', 'props'],
                                    ['text'],
                                    ['doc', 'tokens', 'props'],
                                    ['tokens'],
                                    ['docFn', 'proto', 'props'],
                                    ['proto'],
                                    ['doc', 'sentenceIndex'],
                                    ['doc', 'proto', 'defaultProps'],
                                    ['doc', 'proto', 'text', 'defaultProps'],
                                    ['doc', 'sentence'],
                                    ['sentence'],
                                    ['sentence']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.after': {   'req_args': [['index']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.algorithms': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.asCoreLabels': {   'req_args': ['functions'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.asCoreMap': {   'req_args': ['functions'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.before': {   'req_args': [['index']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.cased': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.caseless': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.characterOffsetBegin': {   'req_args': [['index']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.characterOffsetEnd': {   'req_args': [['index']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.coref': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.dependencyGraph': {   'req_args': [   'props',
                                                    'mode',
                                                    ['props'],
                                                    [],
                                                    ['mode']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.deserialize': {   'req_args': ['in'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.equals': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.find': {   'req_args': ['pattern', 'fn', ['pattern', 'fn']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.governor': {   'req_args': [   'props',
                                             'index',
                                             'mode',
                                             ['props', 'index'],
                                             ['index', 'mode'],
                                             ['index']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.governors': {   'req_args': [   'props',
                                              'mode',
                                              ['props'],
                                              ['mode'],
                                              []],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.hashCode': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.incomingDependencyLabel': {   'req_args': [   'props',
                                                            'index',
                                                            'mode',
                                                            ['props', 'index'],
                                                            ['index', 'mode'],
                                                            ['index']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.incomingDependencyLabels': {   'req_args': [   'props',
                                                             'mode',
                                                             ['mode'],
                                                             ['props'],
                                                             []],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.kbp': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.kbpTriples': {   'req_args': ['props', []],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.lemma': {   'req_args': ['index'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.lemmas': {   'req_args': ['props', []],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.length': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.matches': {   'req_args': ['pattern', ['pattern']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.mentions': {   'req_args': ['nerTag', []],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.natlogPolarities': {   'req_args': ['props', []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.natlogPolarity': {   'req_args': ['props', 'index', ['index']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.nerTag': {   'req_args': ['index'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.nerTags': {   'req_args': ['props', []],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.openie': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.openieTriples': {   'req_args': ['props', []],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.operatorAt': {   'req_args': ['props', 'i', ['i']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.operators': {   'req_args': ['props', []],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.operatorsNonempty': {   'req_args': ['props', []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.originalText': {   'req_args': ['index'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.originalTexts': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.parse': {   'req_args': ['props', []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.posTag': {   'req_args': ['index'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.posTags': {   'req_args': ['props', []],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.rawSentence': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.rawToken': {   'req_args': ['i'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.regexner': {   'req_args': ['mappingFile', 'ignorecase'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.semgrex': {   'req_args': ['pattern', 'fn', ['pattern', 'fn']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.sentenceIndex': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.sentenceTokenOffsetBegin': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.sentenceTokenOffsetEnd': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.sentenceid': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.sentiment': {   'req_args': [['props']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.serialize': {   'req_args': [['out']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.substring': {   'req_args': ['start', 'end'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.text': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.tokens': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.word': {   'req_args': ['index'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'Sentence.words': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Sentence.java'},
    'SentenceAlgorithms': {   'req_args': ['impl'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.allSpans': {   'req_args': [   'selector',
                                                       'maxLength',
                                                       ['selector'],
                                                       []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.dependencyPathBetween': {   'req_args': [   'start',
                                                                    'end',
                                                                    'selector',
                                                                    [   'start',
                                                                        'end']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.headOfSpan': {   'req_args': ['tokenSpan'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.keyphraseSpans': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.keyphrases': {   'req_args': ['toString', []],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.modeInSpan': {   'req_args': ['span', 'selector'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAlgorithms.unescapeHTML': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SentenceAlgorithms.java'},
    'SentenceAnnotator.annotate': {   'req_args': ['annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentenceAnnotator.java'},
    'SentenceFragment': {   'req_args': ['tree', 'assumedTruth', 'copy'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.changeScore': {   'req_args': ['score'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.equals': {   'req_args': ['o'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.hashCode': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.length': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.paddedWords': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceFragment.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\SentenceFragment.java'},
    'SentenceIndex': {   'req_args': [   'stopWords',
                                         'transformCoreLabeltoString'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.add': {   'req_args': ['sents', 'addProcessedText'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.createIndex': {   'req_args': [   'indexClass',
                                                     'sents',
                                                     'props',
                                                     'stopWords',
                                                     'indexDirectory',
                                                     'transformCoreLabeltoString'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.finishUpdating': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.loadIndex': {   'req_args': [   'indexClass',
                                                   'props',
                                                   'stopWords',
                                                   'indexDirectory',
                                                   'transformCoreLabeltoString'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.queryIndex': {   'req_args': ['Es'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.saveIndex': {   'req_args': ['dir'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.setUp': {   'req_args': ['props'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.size': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceIndex.update': {   'req_args': ['value', 'key'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\SentenceIndex.java'},
    'SentenceUtils': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.extractNgram': {   'req_args': ['list', 'start', 'end'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.listToOriginalTextString': {   'req_args': [   'list',
                                                                  [   'list',
                                                                      'printBeforeBeforeStart']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.listToString': {   'req_args': [   'list',
                                                      ['list', 'justValue'],
                                                      [   'list',
                                                          'justValue',
                                                          'separator'],
                                                      ['list', 'keys']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.toCoreLabelList': {   'req_args': ['words', ['words']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.toTaggedList': {   'req_args': ['lex', 'tags'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.toUntaggedList': {   'req_args': ['lex', ['words']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.toWordList': {   'req_args': ['words'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentenceUtils.wordToString': {   'req_args': [   'o',
                                                      'justValue',
                                                      [   'o',
                                                          'justValue',
                                                          'separator']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\SentenceUtils.java'},
    'SentimentAnnotator': {   'req_args': ['annotatorName', 'props'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentimentAnnotator.java'},
    'SentimentAnnotator.doOneFailedSentence': {   'req_args': [   'annotation',
                                                                  'sentence'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentimentAnnotator.java'},
    'SentimentAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentimentAnnotator.java'},
    'SentimentAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentimentAnnotator.java'},
    'SentimentAnnotator.signature': {   'req_args': ['annotatorName', 'props'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SentimentAnnotator.java'},
    'SentimentCostAndGradient': {   'req_args': ['model', 'trainingBatch'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentCostAndGradient.java'},
    'SentimentCostAndGradient.calculate': {   'req_args': ['theta'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentCostAndGradient.java'},
    'SentimentCostAndGradient.domainDimension': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentCostAndGradient.java'},
    'SentimentCostAndGradient.forwardPropagateTree': {   'req_args': ['tree'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentCostAndGradient.java'},
    'SentimentModel': {   'req_args': [   'binaryTransform',
                                          'binaryTensors',
                                          'binaryClassification',
                                          'unaryClassification',
                                          'wordVectors',
                                          'op',
                                          ['op', 'trainingTrees']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.basicCategory': {   'req_args': ['category'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getBinaryClassification': {   'req_args': ['left', 'right'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getBinaryTensor': {   'req_args': ['left', 'right'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getBinaryTransform': {   'req_args': ['left', 'right'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getClassWForNode': {   'req_args': ['node'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getTensorForNode': {   'req_args': ['node'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getUnaryClassification': {   'req_args': ['category'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getVocabWord': {   'req_args': ['word'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getWForNode': {   'req_args': ['node'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.getWordVector': {   'req_args': ['word'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.loadSerialized': {   'req_args': ['path'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.paramsToVector': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.printParamInformation': {   'req_args': ['index'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.saveSerialized': {   'req_args': ['path'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.totalParamSize': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentModel.vectorToParams': {   'req_args': ['theta'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentModel.java'},
    'SentimentPipeline': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentPipeline.java'},
    'SentimentPipeline.getAnnotations': {   'req_args': [   'tokenizer',
                                                            'inputFormat',
                                                            'filename',
                                                            'filterUnknown'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentPipeline.java'},
    'SentimentPipeline.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentPipeline.java'},
    'SentimentTraining': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentTraining.java'},
    'SentimentTraining.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentTraining.java'},
    'SentimentTraining.runGradientCheck': {   'req_args': ['model', 'trees'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentTraining.java'},
    'SentimentTraining.train': {   'req_args': [   'model',
                                                   'modelPath',
                                                   'trainingTrees',
                                                   'devTrees'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentTraining.java'},
    'SentimentUtils': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.attachLabels': {   'req_args': ['tree', 'annotationClass'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.filterUnknownRoots': {   'req_args': ['trees'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.readTreesWithGoldLabels': {   'req_args': ['path'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.readTreesWithLabels': {   'req_args': [   'path',
                                                              'annotationClass'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.readTreesWithPredictedLabels': {   'req_args': ['path'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SentimentUtils.sentimentString': {   'req_args': ['model', 'sentiment'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SentimentUtils.java'},
    'SeqClassifierFlags': {   'req_args': [['props'], ['props', 'printProps']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SeqClassifierFlags.java'},
    'SeqClassifierFlags.flagsToNumArgs': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SeqClassifierFlags.java'},
    'SeqClassifierFlags.getNotNullTrueStringRep': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SeqClassifierFlags.java'},
    'SeqClassifierFlags.setProperties': {   'req_args': [   'props',
                                                            [   'props',
                                                                'printProps']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SeqClassifierFlags.java'},
    'SeqClassifierFlags.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SeqClassifierFlags.java'},
    'SequenceGibbsSampler': {   'req_args': [   'numSamples',
                                                'sampleInterval',
                                                'listener',
                                                'document',
                                                'returnLastFoundSequence',
                                                'samplingStyle',
                                                'chromaticSize',
                                                'partition',
                                                'speedUpThreshold',
                                                'priorEn',
                                                'priorCh',
                                                [   'numSamples',
                                                    'sampleInterval',
                                                    'listener',
                                                    'document'],
                                                [   'numSamples',
                                                    'sampleInterval',
                                                    'listener'],
                                                [   'numSamples',
                                                    'sampleInterval',
                                                    'listener',
                                                    'samplingStyle',
                                                    'chromaticSize',
                                                    'partition',
                                                    'speedUpThreshold',
                                                    'priorEn',
                                                    'priorCh']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.bestSequence': {   'req_args': ['model'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.collectSamples': {   'req_args': [   'model',
                                                               'numSamples',
                                                               'sampleInterval',
                                                               [   'model',
                                                                   'numSamples',
                                                                   'sampleInterval',
                                                                   'initialSequence']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.copy': {   'req_args': ['a'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.findBestUsingAnnealing': {   'req_args': [   'model',
                                                                       'schedule',
                                                                       [   'model',
                                                                           'schedule',
                                                                           'initialSequence']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.findBestUsingSampling': {   'req_args': [   'model',
                                                                      'numSamples',
                                                                      'sampleInterval',
                                                                      'initialSequence'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.getRandomSequence': {   'req_args': ['model'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.printSamples': {   'req_args': ['samples', 'out'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.samplePosition': {   'req_args': [   'model',
                                                               'sequence',
                                                               'pos',
                                                               [   'model',
                                                                   'sequence',
                                                                   'pos',
                                                                   'temperature']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.sampleSequenceBackward': {   'req_args': [   'model',
                                                                       'sequence',
                                                                       [   'model',
                                                                           'sequence',
                                                                           'temperature']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.sampleSequenceForward': {   'req_args': [   'model',
                                                                      'sequence',
                                                                      [   'model',
                                                                          'sequence',
                                                                          'temperature',
                                                                          'onlySampleThesePositions']],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceGibbsSampler.sampleSequenceRepeatedly': {   'req_args': [   'model',
                                                                         'sequence',
                                                                         'numSamples',
                                                                         [   'model',
                                                                             'numSamples']],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceGibbsSampler.java'},
    'SequenceMatchRules': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createAnnotationExtractor': {   'req_args': [   'env',
                                                                        'r'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createAssignmentRule': {   'req_args': [   'env',
                                                                   'var',
                                                                   'result'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createExtractionRule': {   'req_args': [   'env',
                                                                   'ruleType',
                                                                   'pattern',
                                                                   'result'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createMultiTokenPatternRule': {   'req_args': [   'env',
                                                                          'template',
                                                                          'patterns'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createRule': {   'req_args': ['env', 'cv'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createTextPatternRule': {   'req_args': [   'env',
                                                                    'expr',
                                                                    'result'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatchRules.createTokenPatternRule': {   'req_args': [   'env',
                                                                     'expr',
                                                                     'result'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatchRules.java'},
    'SequenceMatcher': {   'req_args': ['pattern', 'elements'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.end': {   'req_args': ['group'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.find': {   'req_args': ['start', []],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.findAllNonOverlapping': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.get': {   'req_args': ['i'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.getFindType': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.groupInfo': {   'req_args': ['group'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.groupMatchResult': {   'req_args': ['group', 'index'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.groupMatchResults': {   'req_args': ['group'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.groupNodes': {   'req_args': ['group'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.groupValue': {   'req_args': ['group'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.isMatchWithResult': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.matches': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.nodeMatchResult': {   'req_args': ['index'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.region': {   'req_args': ['start', 'end'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.regionEnd': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.regionStart': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.replaceAll': {   'req_args': ['replacement'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.replaceAllExtended': {   'req_args': ['replacement'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.replaceFirst': {   'req_args': ['replacement'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.replaceFirstExtended': {   'req_args': ['replacement'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.reset': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.setBranchLimit': {   'req_args': ['blimit'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.setFindType': {   'req_args': ['findType'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.setMatchWithResult': {   'req_args': ['matchWithResult'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.start': {   'req_args': ['group'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequenceMatcher.toBasicSequenceMatchResult': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequenceMatcher.java'},
    'SequencePattern': {   'req_args': [   'nodeSequencePattern',
                                           [   'patternStr',
                                               'nodeSequencePattern'],
                                           [   'patternStr',
                                               'nodeSequencePattern',
                                               'action']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.compile': {   'req_args': ['env', 'string'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.findNodePattern': {   'req_args': ['filter'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.findNodePatterns': {   'req_args': [   'filter',
                                                            'allowOptional',
                                                            'allowBranching'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.getAction': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.getMatcher': {   'req_args': ['tokens'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.getPriority': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.getTotalGroups': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.getWeight': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.pattern': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.setAction': {   'req_args': ['action'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.setPriority': {   'req_args': ['priority'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.setWeight': {   'req_args': ['weight'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequencePattern.transform': {   'req_args': ['transformer'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\SequencePattern.java'},
    'SequenceSampler.bestSequence': {   'req_args': ['ts'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\SequenceSampler.java'},
    'SerializedAnnotationCreator': {   'req_args': [   'serializer',
                                                       ['name', 'props']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SerializedAnnotationCreator.java'},
    'SerializedAnnotationCreator.create': {   'req_args': [   'stream',
                                                              'encoding'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\SerializedAnnotationCreator.java'},
    'ServerAnnotatorImplementations': {   'req_args': [   'host',
                                                          'port',
                                                          'key',
                                                          'secret',
                                                          'lazy',
                                                          ['host', 'port']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.coref': {   'req_args': ['properties'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.corefMention': {   'req_args': [   'properties'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.dcoref': {   'req_args': ['properties'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.dependencies': {   'req_args': [   'properties'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.gender': {   'req_args': [   'properties',
                                                                 'name'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.kbp': {   'req_args': ['properties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.link': {   'req_args': ['properties'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.ner': {   'req_args': ['properties'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.openie': {   'req_args': ['properties'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.parse': {   'req_args': ['properties'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.posTagger': {   'req_args': ['properties'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.relations': {   'req_args': ['properties'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.sentiment': {   'req_args': [   'properties',
                                                                    'name'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.tokensRegexNER': {   'req_args': [   'properties',
                                                                         'name'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'ServerAnnotatorImplementations.trueCase': {   'req_args': ['properties'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\ServerAnnotatorImplementations.java'},
    'SetRoots': {   'req_args': ['newRootNames'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SetRoots.java'},
    'SetRoots.evaluate': {   'req_args': ['sg', 'sm'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SetRoots.java'},
    'SetRoots.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SetRoots.java'},
    'SetRoots.toEditString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SetRoots.java'},
    'Sets': {   'req_args': [],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.assertEquals': {   'req_args': [   'first',
                                             'second',
                                             'firstName',
                                             'secondName',
                                             'outputShared',
                                             'errorMessage'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.cross': {   'req_args': ['s1', 's2'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.diff': {   'req_args': ['s1', 's2'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.intersection': {   'req_args': ['s1', 's2'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.intersects': {   'req_args': ['s1', 's2'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.main': {   'req_args': ['args'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.map': {   'req_args': ['oldSet', 'lambda'],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.powerSet': {   'req_args': ['s'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.symmetricDiff': {   'req_args': ['s1', 's2'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'Sets.union': {   'req_args': ['s1', 's2'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Sets.java'},
    'ShiftParamsLogisticClassifierFactory': {   'req_args': [   ['lambda'],
                                                                [   'prior',
                                                                    'lambda']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ShiftParamsLogisticClassifierFactory.java'},
    'ShiftParamsLogisticClassifierFactory.trainClassifier': {   'req_args': [   'dataset'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ShiftParamsLogisticClassifierFactory.java'},
    'ShiftParamsLogisticObjectiveFunction': {   'req_args': [   'data',
                                                                'dataValues',
                                                                'labels',
                                                                'numClasses',
                                                                'numFeatures',
                                                                'numL2Parameters',
                                                                'prior'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ShiftParamsLogisticObjectiveFunction.java'},
    'ShiftParamsLogisticObjectiveFunction.domainDimension': {   'req_args': [],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ShiftParamsLogisticObjectiveFunction.java'},
    'ShiftParamsLogisticObjectiveFunction.getRegularizerParamRange': {   'req_args': [   'x'],
                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\ShiftParamsLogisticObjectiveFunction.java'},
    'ShiftReduceDemo.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\demo\\ShiftReduceDemo.java'},
    'ShiftReduceOptions.newTestOptions': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceOptions.java'},
    'ShiftReduceOptions.newTrainOptions': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceOptions.java'},
    'ShiftReduceParser': {   'req_args': ['op', ['op', 'model']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.binarizeTreebank': {   'req_args': ['treebank', 'op'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.buildTrainingOptions': {   'req_args': [   'tlppClass',
                                                                  'args'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.checkLeafBranching': {   'req_args': ['tree'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.checkRootTransition': {   'req_args': ['tree'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.defaultCoreNLPFlags': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.filterTreebank': {   'req_args': ['treebank'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.findKnownStates': {   'req_args': [   'binarizedTrees',
                                                             [   'tree',
                                                                 'knownStates']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.getExtraEvals': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.getOp': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.getParserQueryEvals': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.getTLPParams': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.initialStateFromGoldTagTree': {   'req_args': ['tree'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.initialStateFromTaggedSentence': {   'req_args': [   'words'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.knownStates': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.loadModel': {   'req_args': ['path', 'extraFlags'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.parse': {   'req_args': ['sentence', ['sentence']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.parseTree': {   'req_args': ['sentence'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.parserQuery': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.readBinarizedTreebank': {   'req_args': [   'treebankPath',
                                                                   'treebankFilter'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.readTreebank': {   'req_args': [   'treebankPath',
                                                          'treebankFilter'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.redoTags': {   'req_args': [   'tree',
                                                      'tagger',
                                                      [   'trees',
                                                          'tagger',
                                                          'nThreads']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.requiresTags': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.saveModel': {   'req_args': ['path'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.setOptionFlags': {   'req_args': ['flags'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.tagSet': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParser.treebankLanguagePack': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParser.java'},
    'ShiftReduceParserQuery': {   'req_args': ['parser'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestBinarizedParse': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestDependencyParse': {   'req_args': [   'debinarize'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestFactoredParse': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestPCFGParse': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestPCFGParses': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestParse': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestScore': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getBestTransitionSequence': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getDependencyParser': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getFactoredParser': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getKBestPCFGParses': {   'req_args': ['kbestPCFG'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getKBestParses': {   'req_args': ['k'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getKGoodFactoredParses': {   'req_args': ['kbest'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getPCFGParser': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.getPCFGScore': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.hasFactoredParse': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.originalSentence': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parse': {   'req_args': ['sentence', ['tree']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseAndReport': {   'req_args': [   'sentence',
                                                                 'pwErr'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseFallback': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseNoMemory': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseSkipped': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseSucceeded': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.parseUnparsable': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.restoreOriginalWords': {   'req_args': ['tree'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.saidMemMessage': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceParserQuery.setConstraints': {   'req_args': ['constraints'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceParserQuery.java'},
    'ShiftReduceUtils': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftReduceUtils.java'},
    'ShiftTransition.apply': {   'req_args': ['state', ['state', 'scoreDelta']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftTransition.java'},
    'ShiftTransition.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftTransition.java'},
    'ShiftTransition.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftTransition.java'},
    'ShiftTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftTransition.java'},
    'ShiftTransition.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\ShiftTransition.java'},
    'Sieve': {   'req_args': [   ['props'],
                                 ['props', 'sievename'],
                                 [   'doc',
                                     'characterMap',
                                     'pronounCorefMap',
                                     'animacySet']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.doCoreference': {   'req_args': ['corefMapKey', 'quote'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.findClosestMentionInSpanBackward': {   'req_args': ['span'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.findClosestMentionInSpanForward': {   'req_args': ['span'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.findClosestMentionsInSpanBackward': {   'req_args': ['span'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.findClosestMentionsInSpanForward': {   'req_args': ['span'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.findCoreferentAntecedent': {   'req_args': [   'm',
                                                          'mIdx',
                                                          'document',
                                                          'dict',
                                                          'props',
                                                          'sbLog'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.getOrderedAntecedents': {   'req_args': [   'm',
                                                       'antecedentSentence',
                                                       'mPosition',
                                                       'orderedMentionsBySentence',
                                                       'dict'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.hasThat': {   'req_args': ['words'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.hasToVerb': {   'req_args': ['words'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.isReallyCoref': {   'req_args': ['document', 'mID', 'antID'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.loadSieve': {   'req_args': ['props', 'sievename'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.loadSieves': {   'req_args': ['props'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.merge': {   'req_args': ['document', 'mID', 'antID'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.oneSpeakerSentence': {   'req_args': ['doc'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.rangeContainsCharIndex': {   'req_args': ['tokenRange', 'charIndex'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.resolveMention': {   'req_args': ['document', 'dict', 'props'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\Sieve.java'},
    'Sieve.scanForAnimates': {   'req_args': ['span'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.scanForNames': {   'req_args': ['textRun'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.scanForNamesNew': {   'req_args': ['textRun'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.tokenRangeToString': {   'req_args': ['tokenRange', ['token_idx']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'Sieve.tokenToLocation': {   'req_args': ['token'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\Sieve.java'},
    'SieveCoreferenceSystem': {   'req_args': ['props'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.checkClusters': {   'req_args': [   'logger',
                                                                'tag',
                                                                'document'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.coref': {   'req_args': ['document'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.corefReturnHybridOutput': {   'req_args': [   'document'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.debugPrintMentions': {   'req_args': [   'out',
                                                                     'tag',
                                                                     'mentions'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.dictionaries': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.doScore': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.filterMentionsWithSingletonClusters': {   'req_args': [   'document',
                                                                                      'mentions'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.getConllEvalSummary': {   'req_args': [   'conllMentionEvalScript',
                                                                      'goldFile',
                                                                      'predictFile'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.getLinks': {   'req_args': ['result'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.getSingletonPredictorFromSerializedFile': {   'req_args': [   'serializedFile'],
                                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.initScorers': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.initializeAndRunCoref': {   'req_args': ['props'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.optimizeSieveOrdering': {   'req_args': [   'mentionExtractor',
                                                                        'props',
                                                                        'timestamp'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.printConllOutput': {   'req_args': [   'document',
                                                                   'writer',
                                                                   'gold',
                                                                   [   'document',
                                                                       'writer',
                                                                       'gold',
                                                                       'filterSingletons']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.printF1': {   'req_args': ['printF1First'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.printTopK': {   'req_args': [   'logger',
                                                            'document',
                                                            'semantics'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.runAndScoreCoref': {   'req_args': [   'corefSystem',
                                                                   'mentionExtractor',
                                                                   'props',
                                                                   'timeStamp'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.runAndScoreCorefDist': {   'req_args': [   'runDistCmd',
                                                                       'props',
                                                                       'propsFile'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.runConllEval': {   'req_args': [   'conllMentionEvalScript',
                                                               'goldFile',
                                                               'predictFile',
                                                               'evalFile',
                                                               'errFile'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.semantics': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveCoreferenceSystem.sieveClassName': {   'req_args': ['sieveIndex'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveCoreferenceSystem.java'},
    'SieveOptions': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveOptions.java'},
    'SieveOptions.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\dcoref\\SieveOptions.java'},
    'Sighan2005DocumentReaderAndWriter.getIterator': {   'req_args': ['r'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Sighan2005DocumentReaderAndWriter.java'},
    'Sighan2005DocumentReaderAndWriter.init': {   'req_args': ['flags'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Sighan2005DocumentReaderAndWriter.java'},
    'Sighan2005DocumentReaderAndWriter.printAnswers': {   'req_args': [   'doc',
                                                                          'pw'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Sighan2005DocumentReaderAndWriter.java'},
    'Sighan2005DocumentReaderAndWriter.printLattice': {   'req_args': [   'tagLattice',
                                                                          'doc',
                                                                          'out'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\Sighan2005DocumentReaderAndWriter.java'},
    'SimpleCharStream': {   'req_args': [   'dstream',
                                            'startline',
                                            'startcolumn',
                                            'buffersize',
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream', 'encoding'],
                                            ['dstream'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream', 'encoding'],
                                            ['dstream'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream', 'encoding'],
                                            ['dstream'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn',
                                                'buffersize'],
                                            [   'dstream',
                                                'encoding',
                                                'startline',
                                                'startcolumn'],
                                            [   'dstream',
                                                'startline',
                                                'startcolumn'],
                                            ['dstream', 'encoding'],
                                            ['dstream']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.BeginToken': {   'req_args': [[], [], []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.Done': {   'req_args': [[], [], []],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.GetImage': {   'req_args': [[], [], []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.GetSuffix': {   'req_args': [   'len',
                                                      ['len'],
                                                      ['len'],
                                                      ['len']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.ReInit': {   'req_args': [   'dstream',
                                                   'startline',
                                                   'startcolumn',
                                                   'buffersize',
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   ['dstream', 'encoding'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   ['dstream', 'encoding'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   ['dstream', 'encoding'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn',
                                                       'buffersize'],
                                                   ['dstream', 'encoding'],
                                                   ['dstream'],
                                                   [   'dstream',
                                                       'encoding',
                                                       'startline',
                                                       'startcolumn'],
                                                   [   'dstream',
                                                       'startline',
                                                       'startcolumn']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.adjustBeginLineColumn': {   'req_args': [   'newLine',
                                                                  'newCol',
                                                                  [   'newLine',
                                                                      'newCol'],
                                                                  [   'newLine',
                                                                      'newCol'],
                                                                  [   'newLine',
                                                                      'newCol']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.backup': {   'req_args': [   'amount',
                                                   ['amount'],
                                                   ['amount'],
                                                   ['amount']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getBeginColumn': {   'req_args': [[], [], []],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getBeginLine': {   'req_args': [[], [], []],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getColumn': {   'req_args': [[], [], []],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getEndColumn': {   'req_args': [[], [], []],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getEndLine': {   'req_args': [[], [], []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getLine': {   'req_args': [[], [], []],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.getTabSize': {   'req_args': [[], [], []],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.readChar': {   'req_args': [[], [], []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleCharStream.setTabSize': {   'req_args': ['i', ['i'], ['i'], ['i']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\SimpleCharStream.java'},
    'SimpleConstituent': {   'req_args': [['start', 'end']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.constituentFactory': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.end': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.factory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.labelFactory': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.setEnd': {   'req_args': ['end'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.setStart': {   'req_args': ['start'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituent.start': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituent.java'},
    'SimpleConstituentFactory.newConstituent': {   'req_args': [   'start',
                                                                   'end',
                                                                   [   'start',
                                                                       'end',
                                                                       'label',
                                                                       'score']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleConstituentFactory.java'},
    'SimpleGoodTuring': {   'req_args': ['r', 'n'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\SimpleGoodTuring.java'},
    'SimpleGoodTuring.getProbabilities': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\SimpleGoodTuring.java'},
    'SimpleGoodTuring.getProbabilityForUnseen': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\SimpleGoodTuring.java'},
    'SimpleGoodTuring.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\SimpleGoodTuring.java'},
    'SimpleLinearClassifier': {   'req_args': [   'loss',
                                                  'learningRateSchedule',
                                                  'regularizationStrength',
                                                  [   'loss',
                                                      'learningRateSchedule',
                                                      'regularizationStrength',
                                                      'modelFile']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.adaGrad': {   'req_args': ['eta', 'tau'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.constant': {   'req_args': ['eta'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.getWeightVector': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.hinge': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.invScaling': {   'req_args': ['eta', 'p'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.label': {   'req_args': ['features'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.learn': {   'req_args': [   'features',
                                                        'label',
                                                        'weight',
                                                        [   'features',
                                                            'label',
                                                            'weight',
                                                            'loss']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.log': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.maxMargin': {   'req_args': ['h'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.printWeightVector': {   'req_args': [['writer']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.quadraticallySmoothedSVM': {   'req_args': [   'gamma'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.risk': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.setWeight': {   'req_args': [   'featureName',
                                                            'weight'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.weightFeatureProduct': {   'req_args': ['features'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleLinearClassifier.writeWeights': {   'req_args': ['fname'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\SimpleLinearClassifier.java'},
    'SimpleNode': {   'req_args': ['i', ['p', 'i']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.dump': {   'req_args': ['prefix'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtAddChild': {   'req_args': ['n', 'i'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtClose': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtGetChild': {   'req_args': ['i'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtGetNumChildren': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtGetParent': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtOpen': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.jjtSetParent': {   'req_args': ['n'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimpleNode.toString': {   'req_args': [['prefix']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\SimpleNode.java'},
    'SimplePronounResolution': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SimplePronounResolution.java'},
    'SimplePronounResolution.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\scenegraph\\SimplePronounResolution.java'},
    'SimpleQuantifiableEntity': {   'req_args': [   'amount',
                                                    'unit',
                                                    ['amount', 'unit']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleQuantifiableEntity.getAmount': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleQuantifiableEntity.getUnit': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleQuantifiableEntity.setAmount': {   'req_args': ['amount'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleQuantifiableEntity.setUnit': {   'req_args': ['unit'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleQuantifiableEntity.toString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\SimpleQuantifiableEntity.java'},
    'SimpleSentiment': {   'req_args': ['impl'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SimpleSentiment.java'},
    'SimpleSentiment.classify': {   'req_args': ['sentence', ['text']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SimpleSentiment.java'},
    'SimpleSentiment.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SimpleSentiment.java'},
    'SimpleSentiment.train': {   'req_args': ['data', 'modelLocation'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sentiment\\SimpleSentiment.java'},
    'SimpleTensor': {   'req_args': [   'numRows',
                                        'numCols',
                                        'numSlices',
                                        ['slices'],
                                        ['other']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.bilinearProducts': {   'req_args': ['in'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.elementMult': {   'req_args': ['other'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.elementSum': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.getNumElements': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.getSlice': {   'req_args': ['slice'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.isZero': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.iteratorSimpleMatrix': {   'req_args': [['tensors']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.numCols': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.numRows': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.numSlices': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.plus': {   'req_args': ['other'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.random': {   'req_args': [   'numRows',
                                               'numCols',
                                               'numSlices',
                                               'minValue',
                                               'maxValue',
                                               'rand'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.scale': {   'req_args': ['scaling'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.set': {   'req_args': ['value'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.setSlice': {   'req_args': ['slice', 'matrix'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTensor.toString': {   'req_args': [['format']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\SimpleTensor.java'},
    'SimpleTokenize.main': {   'req_args': ['argv'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\SimpleTokenize.java'},
    'SimpleTokenize.quotify': {   'req_args': ['str'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\SimpleTokenize.java'},
    'SimpleTokenize.tokenize': {   'req_args': ['line', ['line', 'separators']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\SimpleTokenize.java'},
    'SimpleTokenize.tokenizeWithQuotes': {   'req_args': ['line'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\SimpleTokenize.java'},
    'SimpleTree': {   'req_args': [['label'], ['label', 'daughterTreesList']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTree.java'},
    'SimpleTree.children': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTree.java'},
    'SimpleTree.factory': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTree.java'},
    'SimpleTree.setChildren': {   'req_args': ['children'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTree.java'},
    'SimpleTree.treeFactory': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTree.java'},
    'SimpleTreeFactory': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTreeFactory.java'},
    'SimpleTreeFactory.newLeaf': {   'req_args': ['word', ['word']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTreeFactory.java'},
    'SimpleTreeFactory.newTreeNode': {   'req_args': [   'parent',
                                                         'children',
                                                         [   'parentLabel',
                                                             'children']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SimpleTreeFactory.java'},
    'SingletonPredictor': {   'req_args': [[]],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\SingletonPredictor.java'},
    'SingletonPredictor.main': {   'req_args': ['args', ['args']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\SingletonPredictor.java'},
    'SingletonPredictor.train': {   'req_args': ['pDataset', ['pDataset']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\misc\\SingletonPredictor.java'},
    'SisterAnnotationStats.kidLabels': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.leftSisterLabels': {   'req_args': ['t', 'p'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.printStats': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.recurse': {   'req_args': ['t', 'p'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.rightSisterLabels': {   'req_args': ['t', 'p'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SisterAnnotationStats.visitTree': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SisterAnnotationStats.java'},
    'SloppyMath': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.acos': {   'req_args': ['cosValue'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.chiSquare2by2': {   'req_args': ['k', 'n', 'r', 'm'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.exactBinomial': {   'req_args': ['k', 'n', 'p'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.factorial': {   'req_args': ['x'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.gamma': {   'req_args': ['n'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.hypergeometric': {   'req_args': ['k', 'n', 'r', 'm'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.intPow': {   'req_args': ['b', 'e', ['b', 'e'], ['b', 'e']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.isCloseTo': {   'req_args': ['a', 'b'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.isDangerous': {   'req_args': ['d'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.isVeryDangerous': {   'req_args': ['d'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.lgamma': {   'req_args': ['x'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.log': {   'req_args': ['num', 'base'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.logAdd': {   'req_args': ['lx', 'ly', ['lx', 'ly']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.max': {   'req_args': [   'a',
                                          'b',
                                          'c',
                                          ['vals'],
                                          ['a', 'b'],
                                          ['a', 'b']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.min': {   'req_args': ['a', 'b', 'c', ['a', 'b'], ['a', 'b']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.nChooseK': {   'req_args': ['n', 'k'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.oneTailedFishersExact': {   'req_args': ['k', 'n', 'r', 'm'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.parseDouble': {   'req_args': [   'negative',
                                                  'mantissa',
                                                  'exponent'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.parseInt': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.poisson': {   'req_args': ['x', 'lambda'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.pow': {   'req_args': ['a', 'b'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.pythonMod': {   'req_args': ['num', 'modulus'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.round': {   'req_args': ['x', ['x', 'precision']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.segmentDouble': {   'req_args': ['d'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'SloppyMath.sigmoid': {   'req_args': ['x'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\math\\SloppyMath.java'},
    'Span': {   'req_args': [['s', 'e'], ['spans'], [], ['start', 'end']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.constituentFactory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Span.java'},
    'Span.contains': {   'req_args': ['otherSpan', ['i']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.distance': {   'req_args': ['a', 'b'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.end': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.equals': {   'req_args': ['other', ['sp']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.expandToInclude': {   'req_args': ['otherSpan'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.factory': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Span.java'},
    'Span.fromPair': {   'req_args': ['span', ['span']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.fromPairOneIndexed': {   'req_args': ['span'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.fromValues': {   'req_args': ['val1', 'val2', ['values']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.isAfter': {   'req_args': ['otherSpan'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.isBefore': {   'req_args': ['otherSpan'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.iterator': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.overlap': {   'req_args': ['spanA', 'spanB'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.overlaps': {   'req_args': ['spanA', 'spanB', ['spanA', 'spanB']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.setEnd': {   'req_args': ['e'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.setStart': {   'req_args': ['s'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.size': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.start': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.toExclusive': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.toInclusive': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.toString': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.translate': {   'req_args': ['diff'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'Span.union': {   'req_args': ['a', 'b'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\structure\\Span.java'},
    'SpanishDocument': {   'req_args': [   'text',
                                           ['ann'],
                                           ['proto'],
                                           ['props', 'text']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SpanishDocument.java'},
    'SpanishDocument.coref': {   'req_args': ['props'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SpanishDocument.java'},
    'SpanishHeadFinder': {   'req_args': [['tlp']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishHeadFinder.java'},
    'SpanishHeadFinder.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishHeadFinder.java'},
    'SpanishLexer': {   'req_args': ['r', 'tf', 'props', ['in']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.next': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yyatEOF': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yybegin': {   'req_args': ['newState'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yycharat': {   'req_args': ['position'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yyclose': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yylength': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yypushback': {   'req_args': ['number'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yyreset': {   'req_args': ['reader'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yystate': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishLexer.yytext': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishLexer.java'},
    'SpanishSentence': {   'req_args': ['text', ['tokens'], ['proto']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\SpanishSentence.java'},
    'SpanishSplitTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                         'tf',
                                                                         'expandElisions',
                                                                         'expandConmigo'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishSplitTreeNormalizer.java'},
    'SpanishTokenizer': {   'req_args': [   'r',
                                            'tf',
                                            'lexerProperties',
                                            'splitCompounds',
                                            'splitVerbs',
                                            'splitContractions'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishTokenizer.java'},
    'SpanishTokenizer.ancoraFactory': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishTokenizer.java'},
    'SpanishTokenizer.coreLabelFactory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishTokenizer.java'},
    'SpanishTokenizer.factory': {   'req_args': [   'factory',
                                                    'options',
                                                    ['factory'],
                                                    []],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishTokenizer.java'},
    'SpanishTokenizer.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\process\\SpanishTokenizer.java'},
    'SpanishTreeNormalizer': {   'req_args': [   [   'simplifiedTagset',
                                                     'aggressiveNormalization',
                                                     'retainNER']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreeNormalizer.java'},
    'SpanishTreeNormalizer.normalizeTerminal': {   'req_args': ['word'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreeNormalizer.java'},
    'SpanishTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                    'tf',
                                                                    [   'tree',
                                                                        'tf',
                                                                        'expandElisions',
                                                                        'expandConmigo']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreeNormalizer.java'},
    'SpanishTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreeReaderFactory.java'},
    'SpanishTreebankLanguagePack.getTokenizerFactory': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.punctuationTags': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.punctuationWords': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.startSymbols': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.treebankFileExtension': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishTreebankLanguagePack.java'},
    'SpanishTreebankParserParams': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.collinizer': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.collinizerEvalb': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.defaultTestSentence': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.diskTreebank': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.display': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.headFinder': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.lex': {   'req_args': [   'op',
                                                           'wordIndex',
                                                           'tagIndex'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.memoryTreebank': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.setHeadFinder': {   'req_args': ['hf'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.sisterSplitters': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.treeReaderFactory': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishTreebankParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishTreebankParserParams.java'},
    'SpanishUnknownWordModel': {   'req_args': [   'op',
                                                   'lex',
                                                   'wordIndex',
                                                   'tagIndex',
                                                   'unSeenCounter',
                                                   [   'op',
                                                       'lex',
                                                       'wordIndex',
                                                       'tagIndex']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModel.java'},
    'SpanishUnknownWordModel.getSignature': {   'req_args': ['word', 'loc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModel.java'},
    'SpanishUnknownWordModel.getSignatureIndex': {   'req_args': [   'index',
                                                                     'sentencePosition',
                                                                     'word'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModel.java'},
    'SpanishUnknownWordModel.score': {   'req_args': [   'iTW',
                                                         'loc',
                                                         'c_Tseen',
                                                         'total',
                                                         'smooth',
                                                         'word'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModel.java'},
    'SpanishUnknownWordModelTrainer.finishTraining': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModelTrainer.java'},
    'SpanishUnknownWordModelTrainer.initializeTraining': {   'req_args': [   'op',
                                                                             'lex',
                                                                             'wordIndex',
                                                                             'tagIndex',
                                                                             'totalTrees'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModelTrainer.java'},
    'SpanishUnknownWordModelTrainer.train': {   'req_args': [   'tw',
                                                                'loc',
                                                                'weight'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SpanishUnknownWordModelTrainer.java'},
    'SpanishUnknownWordSignatures': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.adverbSuffix': {   'req_args': ['s'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.conditionalSuffix': {   'req_args': ['s'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasAdverbSuffix': {   'req_args': ['s'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasConditionalSuffix': {   'req_args': ['s'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasFeminineSuffix': {   'req_args': ['s'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasGerundSuffix': {   'req_args': ['s'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasImperfectErIrSuffix': {   'req_args': [   's'],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasImperfectSuffix': {   'req_args': ['s'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasInfinitiveSuffix': {   'req_args': ['s'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasMasculineSuffix': {   'req_args': ['s'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.hasVerbFirstPersonPluralSuffix': {   'req_args': [   's'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.imperfectSuffix': {   'req_args': ['s'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishUnknownWordSignatures.infinitiveSuffix': {   'req_args': ['s'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishUnknownWordSignatures.java'},
    'SpanishVerbStripper': {   'req_args': ['dictPath'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishVerbStripper.java'},
    'SpanishVerbStripper.getInstance': {   'req_args': [['dictPath']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishVerbStripper.java'},
    'SpanishVerbStripper.isStrippable': {   'req_args': ['word'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishVerbStripper.java'},
    'SpanishVerbStripper.separatePronouns': {   'req_args': ['verb'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishVerbStripper.java'},
    'SpanishVerbStripper.stripVerb': {   'req_args': ['verb'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\SpanishVerbStripper.java'},
    'SpanishXMLTreeReader': {   'req_args': [   'filename',
                                                'in',
                                                'simplifiedTagset',
                                                'aggressiveNormalization',
                                                'retainNER',
                                                'detailedAnnotations',
                                                'expandElisions',
                                                'expandConmigo'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReader.java'},
    'SpanishXMLTreeReader.close': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReader.java'},
    'SpanishXMLTreeReader.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReader.java'},
    'SpanishXMLTreeReader.process': {   'req_args': [   'file',
                                                        'tr',
                                                        'posPattern',
                                                        'wordPattern',
                                                        'plainPrint'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReader.java'},
    'SpanishXMLTreeReader.readTree': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReader.java'},
    'SpanishXMLTreeReaderFactory': {   'req_args': [   [   'simplifiedTagset',
                                                           'aggressiveNormalization',
                                                           'retainNER',
                                                           'detailedAnnotations',
                                                           'expandElisions',
                                                           'expandConmigo']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReaderFactory.java'},
    'SpanishXMLTreeReaderFactory.newTreeReader': {   'req_args': [   'in',
                                                                     [   'path',
                                                                         'in']],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\spanish\\SpanishXMLTreeReaderFactory.java'},
    'SparseAdaGradMinimizer': {   'req_args': [   'numPasses',
                                                  ['numPasses', 'eta'],
                                                  [   'numPasses',
                                                      'eta',
                                                      'batchSize',
                                                      'lambdaL1',
                                                      'lambdaL2']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SparseAdaGradMinimizer.java'},
    'SparseAdaGradMinimizer.minimize': {   'req_args': [   'function',
                                                           'initial',
                                                           [   'function',
                                                               'x',
                                                               'maxIterations']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\SparseAdaGradMinimizer.java'},
    'SpeakerInfo': {   'req_args': ['speakerName', ['speakerName']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.addMention': {   'req_args': ['m', ['m']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.containsMention': {   'req_args': ['m', ['m']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.getCorefClusterId': {   'req_args': [[]],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.getMentions': {   'req_args': [[]],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.getSpeakerDesc': {   'req_args': [[]],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.getSpeakerName': {   'req_args': [[]],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.getSpeakerNameStrings': {   'req_args': [[]],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.hasRealSpeakerName': {   'req_args': [[]],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerInfo.toString': {   'req_args': [[]],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\SpeakerInfo.java'},
    'SpeakerMatch': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\SpeakerMatch.java'},
    'SplitCanditoTrees': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\SplitCanditoTrees.java'},
    'SplitCanditoTrees.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\SplitCanditoTrees.java'},
    'SplitCanditoTrees.mungeLeaves': {   'req_args': [   'tree',
                                                         'lemmasAsLeaves',
                                                         'addMorphoToLeaves'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\SplitCanditoTrees.java'},
    'SplitCanditoTrees.outputSplits': {   'req_args': ['ids', 'treeMap'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\SplitCanditoTrees.java'},
    'SplitMaker.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\hebrew\\SplitMaker.java'},
    'SplitTrainingSet': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SplitTrainingSet.java'},
    'SplitTrainingSet.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SplitTrainingSet.java'},
    'SplittingGrammarExtractor': {   'req_args': ['op'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.buildGrammars': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.buildStateIndex': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.countMergeEffects': {   'req_args': [   'tree',
                                                                       'totalStateMass',
                                                                       'deltaAnnotations',
                                                                       [   'tree',
                                                                           'totalStateMass',
                                                                           'deltaAnnotations',
                                                                           'probIn',
                                                                           'probOut']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.countOriginalStates': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.extract': {   'req_args': [   'treeList',
                                                             [   'trees1',
                                                                 'weight1',
                                                                 'trees2',
                                                                 'weight2']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.getStateSplitCount': {   'req_args': [   'tree',
                                                                        [   'label']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.mergeStates': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.mergeTransitions': {   'req_args': [   'parent',
                                                                      'oldUnaryTransitions',
                                                                      'oldBinaryTransitions',
                                                                      'newUnaryTransitions',
                                                                      'newBinaryTransitions',
                                                                      'stateWeights',
                                                                      'mergeCorrespondence'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.outputBetas': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.outputTransitions': {   'req_args': [   'tree',
                                                                       'unaryTransitions',
                                                                       'binaryTransitions',
                                                                       [   'tree',
                                                                           'depth',
                                                                           'unaryTransitions',
                                                                           'binaryTransitions']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recalculateBetas': {   'req_args': [   'splitStates'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recalculateMergedBetas': {   'req_args': [   'mergeCorrespondence'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recalculateTemporaryBetas': {   'req_args': [   'splitStates',
                                                                               'totalStateMass',
                                                                               'tempUnaryBetas',
                                                                               'tempBinaryBetas',
                                                                               [   'tree',
                                                                                   'splitStates',
                                                                                   'totalStateMass',
                                                                                   'tempUnaryBetas',
                                                                                   'tempBinaryBetas'],
                                                                               [   'tree',
                                                                                   'stateWeights',
                                                                                   'position',
                                                                                   'unaryTransitions',
                                                                                   'binaryTransitions',
                                                                                   'totalStateMass',
                                                                                   'tempUnaryBetas',
                                                                                   'tempBinaryBetas']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recountInside': {   'req_args': [   'tree',
                                                                   'splitStates',
                                                                   'loc',
                                                                   'probIn'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recountOutside': {   'req_args': [   'tree',
                                                                    'probIn',
                                                                    'probOut',
                                                                    [   'child',
                                                                        'parent',
                                                                        'probIn',
                                                                        'probOut'],
                                                                    [   'left',
                                                                        'right',
                                                                        'parent',
                                                                        'probIn',
                                                                        'probOut']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recountTree': {   'req_args': [   'tree',
                                                                 'splitStates',
                                                                 'unaryTransitions',
                                                                 'binaryTransitions',
                                                                 [   'tree',
                                                                     'splitStates',
                                                                     'probIn',
                                                                     'probOut',
                                                                     'unaryTransitions',
                                                                     'binaryTransitions']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recountWeights': {   'req_args': [   'tree',
                                                                    'probIn',
                                                                    'probOut',
                                                                    'unaryTransitions',
                                                                    'binaryTransitions'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.recurseOutside': {   'req_args': [   'tree',
                                                                    'probIn',
                                                                    'probOut'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.rescaleTemporaryBetas': {   'req_args': [   'tempUnaryBetas',
                                                                           'tempBinaryBetas'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.saveTrees': {   'req_args': [   'trees1',
                                                               'weight1',
                                                               'trees2',
                                                               'weight2'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.splitBetas': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.state': {   'req_args': ['tag', 'i'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.testConvergence': {   'req_args': [   'tempUnaryBetas',
                                                                     'tempBinaryBetas'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SplittingGrammarExtractor.useNewBetas': {   'req_args': [   'testConverged',
                                                                 'tempUnaryBetas',
                                                                 'tempBinaryBetas'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\SplittingGrammarExtractor.java'},
    'SsurgAndPred.test': {   'req_args': ['matcher'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\pred\\SsurgAndPred.java'},
    'SsurgAndPred.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\pred\\SsurgAndPred.java'},
    'SsurgOrPred.test': {   'req_args': ['matcher'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\pred\\SsurgOrPred.java'},
    'SsurgOrPred.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\pred\\SsurgOrPred.java'},
    'Ssurgeon': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.assemblePredFromXML': {   'req_args': ['elt'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.exhaustFromPatterns': {   'req_args': ['patternList', 'sg'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.expandFromPatterns': {   'req_args': ['patternList', 'sg'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.getEltText': {   'req_args': ['element'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.getOperationFromFile': {   'req_args': ['path'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.getResource': {   'req_args': ['id'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.getResources': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.getTagText': {   'req_args': ['element', 'tag'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.initLog': {   'req_args': ['logFilePath'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.inst': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.parseEditLine': {   'req_args': ['editLine'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.readFromDirectory': {   'req_args': ['dir'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.readFromFile': {   'req_args': ['file'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.setLogPrefix': {   'req_args': ['logPrefix'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.ssurgeonPatternFromXML': {   'req_args': ['elt'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.testRead': {   'req_args': ['tgtDirPath'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.writeToFile': {   'req_args': ['tgtFile', 'patterns'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'Ssurgeon.writeToString': {   'req_args': ['pattern'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\Ssurgeon.java'},
    'SsurgeonEdit.addNamedNode': {   'req_args': ['newNode', 'name'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.equals': {   'req_args': ['tgt'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.evaluate': {   'req_args': ['sg', 'sm'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.getNamedNode': {   'req_args': ['nodeName', 'sm'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.getOwningPattern': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.setOwningPattern': {   'req_args': ['owningPattern'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.toEditString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonEdit.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonEdit.java'},
    'SsurgeonPattern': {   'req_args': [   'UID',
                                           'pattern',
                                           'editScript',
                                           ['UID', 'pattern'],
                                           ['UID', 'pattern', 'patternGraph'],
                                           ['pattern', 'editScript'],
                                           ['pattern'],
                                           ['pattern', 'patternGraph']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.addEdit': {   'req_args': ['newEdit'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.addNamedNode': {   'req_args': ['node', 'name'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.execute': {   'req_args': [   'sg',
                                                   ['sg', 'overridePattern']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getEditScript': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getNamedNode': {   'req_args': ['name'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getNotes': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getSemgrexGraph': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getSemgrexPattern': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.getUID': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.setNotes': {   'req_args': ['notes'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.setPredicate': {   'req_args': ['predicateTest'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.setUID': {   'req_args': ['uid'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonPattern.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonPattern.java'},
    'SsurgeonWordlist': {   'req_args': ['rootElt'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonWordlist.java'},
    'SsurgeonWordlist.contains': {   'req_args': ['testWord'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonWordlist.java'},
    'SsurgeonWordlist.getID': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonWordlist.java'},
    'SsurgeonWordlist.main': {   'req_args': ['args'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonWordlist.java'},
    'SsurgeonWordlist.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\ssurgeon\\SsurgeonWordlist.java'},
    'StanfordCoreNLP': {   'req_args': [   ['props'],
                                           ['props', 'enforceRequirements'],
                                           ['propsFileNamePrefix'],
                                           [   'propsFileNamePrefix',
                                               'enforceRequirements'],
                                           [   'props',
                                               'enforceRequirements',
                                               'annotatorPool']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.annotate': {   'req_args': [   'document',
                                                    ['annotation'],
                                                    ['annotation', 'callback']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.clearAnnotatorPool': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.conllPrint': {   'req_args': ['annotation', 'w'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.createOutputter': {   'req_args': [   'properties',
                                                           'options'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.ensurePrerequisiteAnnotators': {   'req_args': [   'annotators',
                                                                        'props'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.getDefaultAnnotatorPool': {   'req_args': [   'inputProps',
                                                                   'annotatorImplementation'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.getEncoding': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.getExistingAnnotator': {   'req_args': ['name'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.getProperties': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.jsonPrint': {   'req_args': ['annotation', 'w'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.prettyPrint': {   'req_args': [   'annotation',
                                                       'os',
                                                       ['annotation', 'os']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.process': {   'req_args': ['text'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.processFiles': {   'req_args': [   'base',
                                                        'files',
                                                        'numThreads',
                                                        'clearPool',
                                                        'tim',
                                                        [   'files',
                                                            'numThreads',
                                                            'clearPool',
                                                            'tim'],
                                                        [   'files',
                                                            'clearPool',
                                                            'tim']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.processToCoreDocument': {   'req_args': ['text'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.run': {   'req_args': [['clearPool']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.timingInformation': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.usesBinaryTrees': {   'req_args': ['props'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLP.xmlPrint': {   'req_args': [   'annotation',
                                                    'w',
                                                    ['annotation', 'os']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLP.java'},
    'StanfordCoreNLPClient': {   'req_args': [   'properties',
                                                 'backends',
                                                 'apiKey',
                                                 'apiSecret',
                                                 ['properties', 'backends'],
                                                 ['properties'],
                                                 ['properties', 'host', 'port'],
                                                 [   'properties',
                                                     'host',
                                                     'port',
                                                     'apiKey',
                                                     'apiSecret'],
                                                 [   'properties',
                                                     'host',
                                                     'apiKey',
                                                     'apiSecret'],
                                                 [   'properties',
                                                     'host',
                                                     'port',
                                                     'threads'],
                                                 [   'properties',
                                                     'host',
                                                     'port',
                                                     'threads',
                                                     'apiKey',
                                                     'apiSecret']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.annotate': {   'req_args': [   'annotation',
                                                          [   'annotations',
                                                              'numThreads',
                                                              'callback'],
                                                          [   'annotation',
                                                              'callback']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.checkStatus': {   'req_args': ['serverURL'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.process': {   'req_args': ['text'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.run': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.setTimeoutMilliseconds': {   'req_args': ['timeout'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPClient.shutdown': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPClient.java'},
    'StanfordCoreNLPServer': {   'req_args': [   'props',
                                                 'port',
                                                 'timeout',
                                                 'strict',
                                                 ['port', 'timeout', 'strict'],
                                                 [],
                                                 ['props']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPServer.java'},
    'StanfordCoreNLPServer.getServer': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPServer.java'},
    'StanfordCoreNLPServer.launchServer': {   'req_args': ['args'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPServer.java'},
    'StanfordCoreNLPServer.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPServer.java'},
    'StanfordCoreNLPServer.run': {   'req_args': [   [   'basicAuth',
                                                         'authenticator',
                                                         'callback',
                                                         'homepage',
                                                         'https',
                                                         'live']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StanfordCoreNLPServer.java'},
    'StanfordCoreNlpDemo': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\demo\\StanfordCoreNlpDemo.java'},
    'StanfordCoreNlpDemo.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\demo\\StanfordCoreNlpDemo.java'},
    'StanfordCoreNlpDemoChinese': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\demo\\StanfordCoreNlpDemoChinese.java'},
    'StanfordCoreNlpDemoChinese.main': {   'req_args': ['args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\demo\\StanfordCoreNlpDemoChinese.java'},
    'StanfordRedwoodConfiguration': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\StanfordRedwoodConfiguration.java'},
    'StanfordRedwoodConfiguration.apply': {   'req_args': ['props'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\StanfordRedwoodConfiguration.java'},
    'StanfordRedwoodConfiguration.minimalSetup': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\StanfordRedwoodConfiguration.java'},
    'StanfordRedwoodConfiguration.setup': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\StanfordRedwoodConfiguration.java'},
    'StartAndEndArabicSegmenterFeatureFactory.init': {   'req_args': ['flags'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\process\\StartAndEndArabicSegmenterFeatureFactory.java'},
    'StatTokSent': {   'req_args': [   'modelFile',
                                       'multiWordRulesFile',
                                       ['modelFile']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSent.java'},
    'StatTokSent.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSent.java'},
    'StatTokSent.tokenize': {   'req_args': ['text'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSent.java'},
    'StatTokSentAnnotator': {   'req_args': ['props', ['name', 'props']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StatTokSentAnnotator.java'},
    'StatTokSentAnnotator.annotate': {   'req_args': ['annotation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StatTokSentAnnotator.java'},
    'StatTokSentAnnotator.requirementsSatisfied': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StatTokSentAnnotator.java'},
    'StatTokSentAnnotator.requires': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\StatTokSentAnnotator.java'},
    'StatTokSentTrainer': {   'req_args': ['propertiesArguments'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.addFeatures': {   'req_args': [   'classCharsText',
                                                          'windowSize'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.fileToTrainSet': {   'req_args': [   'trainFile',
                                                             'multiWordRules'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.help': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.inferMultiWordRules': {   'req_args': ['trainFile'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.readMultiWordRules': {   'req_args': [   'multiWordRulesFile'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.serialize': {   'req_args': [   'serializeTo',
                                                        'cdc',
                                                        'windowSize'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'StatTokSentTrainer.writeMultiWordRules': {   'req_args': [   'multiWordRulesFile',
                                                                  'rules'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\stattok\\StatTokSentTrainer.java'},
    'State': {   'req_args': [   'sentence',
                                 [   'stack',
                                     'transitions',
                                     'separators',
                                     'sentence',
                                     'tokenPosition',
                                     'score',
                                     'finished']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'State.areTransitionsEqual': {   'req_args': ['other'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'State.endOfQueue': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'State.isFinished': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'State.score': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'State.toString': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\State.java'},
    'StatisticalCorefAlgorithm': {   'req_args': [   'props',
                                                     'dictionaries',
                                                     [   'props',
                                                         'dictionaries',
                                                         'wordCountsFile',
                                                         'modelFile',
                                                         'maxMentionDistance',
                                                         'maxMentionDistanceWithStringMatch',
                                                         'threshold'],
                                                     [   'props',
                                                         'dictionaries',
                                                         'wordCountsFile',
                                                         'modelPath',
                                                         'maxMentionDistance',
                                                         'maxMentionDistanceWithStringMatch',
                                                         'thresholds']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefAlgorithm.java'},
    'StatisticalCorefAlgorithm.runCoref': {   'req_args': ['document'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefAlgorithm.java'},
    'StatisticalCorefProperties.anaphoricityModelPath': {   'req_args': [   'props'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.classificationModelPath': {   'req_args': [   'props'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.clusteringModelPath': {   'req_args': ['props'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.maxTrainExamplesPerDocument': {   'req_args': [   'props'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.minClassImbalance': {   'req_args': ['props'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.pairwiseScoreThresholds': {   'req_args': [   'props'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.rankingModelPath': {   'req_args': ['props'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.trainingPath': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefProperties.wordCountsPath': {   'req_args': ['props'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefProperties.java'},
    'StatisticalCorefTrainer.doTraining': {   'req_args': ['props'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefTrainer.java'},
    'StatisticalCorefTrainer.fieldValues': {   'req_args': ['o'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefTrainer.java'},
    'StatisticalCorefTrainer.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefTrainer.java'},
    'StatisticalCorefTrainer.setDataPath': {   'req_args': ['name'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefTrainer.java'},
    'StatisticalCorefTrainer.setTrainingPath': {   'req_args': ['props'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\statistical\\StatisticalCorefTrainer.java'},
    'Stemmer': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Stemmer.java'},
    'Stemmer.apply': {   'req_args': ['word'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Stemmer.java'},
    'Stemmer.main': {   'req_args': ['args'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Stemmer.java'},
    'Stemmer.stem': {   'req_args': ['s', ['w']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Stemmer.java'},
    'Stemmer.toString': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\Stemmer.java'},
    'StochasticMinimizer.minimize': {   'req_args': [   'function',
                                                        'functionTolerance',
                                                        'initial',
                                                        [   'function',
                                                            'functionTolerance',
                                                            'initial',
                                                            'maxIterations']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.setEvaluators': {   'req_args': [   'iters',
                                                             'evaluators'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.shutUp': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.tune': {   'req_args': [   'function',
                                                    'initial',
                                                    'msPerTest',
                                                    [   'function',
                                                        'initial',
                                                        'msPerTest',
                                                        'batchSizes',
                                                        'gains']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.tuneBatch': {   'req_args': [   'function',
                                                         'initial',
                                                         'msPerTest',
                                                         'bStart'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.tuneDouble': {   'req_args': [   'function',
                                                          'initial',
                                                          'msPerTest',
                                                          'ps',
                                                          'lower',
                                                          'upper',
                                                          [   'function',
                                                              'initial',
                                                              'msPerTest',
                                                              'ps',
                                                              'lower',
                                                              'upper',
                                                              'TOL']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StochasticMinimizer.tuneGain': {   'req_args': [   'function',
                                                        'initial',
                                                        'msPerTest',
                                                        'lower',
                                                        'upper'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\optimization\\StochasticMinimizer.java'},
    'StopList': {   'req_args': [['list']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StopList.java'},
    'StopList.contains': {   'req_args': ['word', ['word']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StopList.java'},
    'StoplistFilter': {   'req_args': [['stoplistfile'], ['stoplist']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StoplistFilter.java'},
    'StoplistFilter.processDocument': {   'req_args': ['in'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StoplistFilter.java'},
    'StreamGobbler': {   'req_args': ['is', 'outputFileHandle'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StreamGobbler.java'},
    'StreamGobbler.kill': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StreamGobbler.java'},
    'StreamGobbler.run': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StreamGobbler.java'},
    'StrictHeadMatch1': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\StrictHeadMatch1.java'},
    'StrictHeadMatch2': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\StrictHeadMatch2.java'},
    'StrictHeadMatch3': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\StrictHeadMatch3.java'},
    'StrictHeadMatch4': {   'req_args': [[]],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\hybrid\\sieve\\StrictHeadMatch4.java'},
    'StringDictionary': {   'req_args': ['name'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.clear': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.get': {   'req_args': [   's',
                                                ['s', 'shouldThrow'],
                                                ['idx']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.getCount': {   'req_args': ['idx'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.getIndexAndCount': {   'req_args': ['s'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.keySet': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.keys': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.load': {   'req_args': ['path', 'prefix'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.save': {   'req_args': ['path', 'prefix', 'threshold'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.setMode': {   'req_args': ['mode'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringDictionary.size': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\machinereading\\common\\StringDictionary.java'},
    'StringLabel': {   'req_args': [   ['str'],
                                       ['str', 'beginPosition', 'endPosition'],
                                       ['label']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.beginPosition': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.endPosition': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.factory': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.labelFactory': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.setBeginPosition': {   'req_args': ['beginPosition'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.setEndPosition': {   'req_args': ['endPosition'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.setFromString': {   'req_args': ['str'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.setValue': {   'req_args': ['value'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.toString': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabel.value': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabel.java'},
    'StringLabelFactory.newLabel': {   'req_args': [   'labelStr',
                                                       ['labelStr', 'options'],
                                                       ['oldLabel']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabelFactory.java'},
    'StringLabelFactory.newLabelFromString': {   'req_args': ['labelStr'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\StringLabelFactory.java'},
    'StringLabeledScoredTreeReaderFactory.newTreeReader': {   'req_args': [   'in'],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\StringLabeledScoredTreeReaderFactory.java'},
    'StringOutputStream': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\StringOutputStream.java'},
    'StringOutputStream.clear': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\StringOutputStream.java'},
    'StringOutputStream.toString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\StringOutputStream.java'},
    'StringOutputStream.write': {   'req_args': ['i'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\StringOutputStream.java'},
    'StringParsingTask': {   'req_args': ['s'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringParsingTask.java'},
    'StringParsingTask.parse': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringParsingTask.java'},
    'StringUtils': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.argsToMap': {   'req_args': [   'args',
                                                 ['args', 'flagsToNumArgs']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.argsToProperties': {   'req_args': [   'args',
                                                        [   'args',
                                                            'flagsToNumArgs']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.argsToPropertiesWithResolve': {   'req_args': ['args'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.capitalize': {   'req_args': ['s'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.checkRequiredProperties': {   'req_args': [   'props',
                                                               'requiredProps'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.chomp': {   'req_args': ['s', ['o']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.columnStringToObject': {   'req_args': [   'objClass',
                                                            'str',
                                                            'delimiterRegex',
                                                            'fieldNames',
                                                            [   'objClass',
                                                                'str',
                                                                'delimiterPattern',
                                                                'fieldNames']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.containsIgnoreCase': {   'req_args': ['c', 's'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.decodeArray': {   'req_args': ['encoded'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.decodeMap': {   'req_args': ['encoded'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.editDistance': {   'req_args': ['s', 't'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.escapeJsonString': {   'req_args': ['str'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.escapeString': {   'req_args': [   's',
                                                    'charsToEscape',
                                                    'escapeChar'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.expandEnvironmentVariables': {   'req_args': [   'raw',
                                                                  'env',
                                                                  ['raw']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.fileNameClean': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.find': {   'req_args': ['str', 'regex'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getBaseName': {   'req_args': [   'fileName',
                                                   ['fileName', 'suffix'],
                                                   [   'fileName',
                                                       'suffix',
                                                       'sep']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getCharacterNgrams': {   'req_args': [   's',
                                                          'minSize',
                                                          'maxSize'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getNgrams': {   'req_args': ['words', 'minSize', 'maxSize'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getNgramsFromTokens': {   'req_args': [   'words',
                                                           'minSize',
                                                           'maxSize'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getNgramsString': {   'req_args': ['s', 'minSize', 'maxSize'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getNotNullString': {   'req_args': ['s'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.getShortClassName': {   'req_args': ['o'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.indexOfRegex': {   'req_args': [   'pattern',
                                                    's',
                                                    ['pattern', 's', 'index']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isAcronym': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isAllUpperCase': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isAlpha': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isAlphanumeric': {   'req_args': ['s'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isCapitalized': {   'req_args': ['s'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isNullOrEmpty': {   'req_args': ['str'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isNumeric': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isPunct': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.isTitleCase': {   'req_args': ['s'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.join': {   'req_args': [   'l',
                                            'glue',
                                            'toStringFunc',
                                            'start',
                                            'end',
                                            ['l', 'glue'],
                                            ['l', 'glue'],
                                            ['elements', 'glue'],
                                            [   'elements',
                                                'start',
                                                'end',
                                                'glue'],
                                            ['items', 'glue'],
                                            ['l'],
                                            ['elements']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.joinFields': {   'req_args': [   'l',
                                                  'field',
                                                  'defaultFieldValue',
                                                  'glue',
                                                  'start',
                                                  'end',
                                                  'toStringFunc',
                                                  [   'l',
                                                      'field',
                                                      'defaultFieldValue',
                                                      'glue',
                                                      'start',
                                                      'end'],
                                                  [   'l',
                                                      'field',
                                                      'toStringFunc'],
                                                  ['l', 'field']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.joinMultipleFields': {   'req_args': [   'l',
                                                          'fields',
                                                          'defaultFieldValue',
                                                          'fieldGlue',
                                                          'glue',
                                                          'start',
                                                          'end',
                                                          'toStringFunc',
                                                          [   'l',
                                                              'fields',
                                                              'toStringFunc'],
                                                          [   'l',
                                                              'fields',
                                                              'defaultFieldValue',
                                                              'fieldGlue',
                                                              'glue',
                                                              'start',
                                                              'end'],
                                                          ['l', 'fields']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.joinWithOriginalWhiteSpace': {   'req_args': ['tokens'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.joinWords': {   'req_args': [   'l',
                                                 'glue',
                                                 ['l', 'glue', 'start', 'end']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.levenshteinDistance': {   'req_args': [   's1',
                                                           's2',
                                                           ['s1', 's2']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.logInvocationString': {   'req_args': ['logger', 'args'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.longestCommonContiguousSubstring': {   'req_args': ['s', 't'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.longestCommonSubstring': {   'req_args': ['s', 't'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.lookingAt': {   'req_args': ['str', 'regex'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.makeHTMLTable': {   'req_args': [   'table',
                                                     'rowLabels',
                                                     'colLabels'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.makeTextTable': {   'req_args': [   'table',
                                                     'rowLabels',
                                                     'colLabels',
                                                     'padLeft',
                                                     'padRight',
                                                     'tsv'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.mapStringToArray': {   'req_args': ['map'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.mapStringToMap': {   'req_args': ['map'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.matches': {   'req_args': ['str', 'regex'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.normalize': {   'req_args': ['s'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.nthIndex': {   'req_args': ['s', 'ch', 'n'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.objectToColumnString': {   'req_args': [   'object',
                                                            'delimiter',
                                                            'fieldNames'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.pad': {   'req_args': [   'str',
                                           'totalChars',
                                           ['str', 'totalChars', 'pad'],
                                           ['obj', 'totalChars']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.padLeft': {   'req_args': [   'str',
                                               'totalChars',
                                               'ch',
                                               ['str', 'totalChars'],
                                               ['obj', 'totalChars'],
                                               ['i', 'totalChars'],
                                               ['d', 'totalChars']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.padLeftOrTrim': {   'req_args': ['str', 'num'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.padOrTrim': {   'req_args': [   'str',
                                                 'num',
                                                 ['obj', 'totalChars']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.parseCommandLineArguments': {   'req_args': [   'args',
                                                                 [   'args',
                                                                     'parseNumbers']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.pennPOSToWordnetPOS': {   'req_args': ['s'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.printStringOneCharPerLine': {   'req_args': ['s'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.printToFile': {   'req_args': [   'file',
                                                   'message',
                                                   'append',
                                                   'printLn',
                                                   'encoding',
                                                   [   'file',
                                                       'message',
                                                       'append'],
                                                   ['file', 'message'],
                                                   [   'filename',
                                                       'message',
                                                       'append'],
                                                   ['filename', 'message']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.printToFileLn': {   'req_args': [   'file',
                                                     'message',
                                                     'append',
                                                     [   'filename',
                                                         'message',
                                                         'append']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.propFileToLinkedHashMap': {   'req_args': [   'filename',
                                                               'existingArgs'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.propFileToProperties': {   'req_args': ['filename'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.regexGroups': {   'req_args': ['regex', 'str'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.regexesToPatterns': {   'req_args': ['regexes'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.repeat': {   'req_args': ['s', 'times', ['ch', 'times']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.resolveVars': {   'req_args': ['str', 'props'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.searchAndReplace': {   'req_args': ['text', 'from', 'to'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.split': {   'req_args': ['s', ['str', 'regex']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.splitFieldsFast': {   'req_args': ['str', 'delimiter'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.splitKeepDelimiter': {   'req_args': ['s', 'separator'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.splitLinesKeepNewlines': {   'req_args': ['s'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.splitOnChar': {   'req_args': [   'input',
                                                   'delimiter',
                                                   [   'out',
                                                       'input',
                                                       'delimiter']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.splitOnCharWithQuoting': {   'req_args': [   's',
                                                              'splitChar',
                                                              'quoteChar',
                                                              'escapeChar'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.stringToProperties': {   'req_args': ['str', ['str', 'props']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.stringToSet': {   'req_args': ['str', 'delimiter'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.stripNonAlphaNumerics': {   'req_args': ['orig'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.stripSGML': {   'req_args': ['orig'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.toAscii': {   'req_args': ['s'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.toCSVString': {   'req_args': ['fields'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.toString': {   'req_args': ['words', ['sentence']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.toTitleCase': {   'req_args': ['s'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.tr': {   'req_args': ['input', 'from', 'to'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.trim': {   'req_args': ['s', 'maxWidth', ['obj', 'maxWidth']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.trimWithEllipsis': {   'req_args': [   's',
                                                        'width',
                                                        ['o', 'width']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.truncate': {   'req_args': [   'n',
                                                'smallestDigit',
                                                'biggestDigit'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.unescapeHtml3': {   'req_args': ['input'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StringUtils.valueSplit': {   'req_args': [   'str',
                                                  'valueRegex',
                                                  'separatorRegex'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\StringUtils.java'},
    'StripTagsProcessor': {   'req_args': [['markLineBreaks']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StripTagsProcessor.java'},
    'StripTagsProcessor.getMarkLineBreaks': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StripTagsProcessor.java'},
    'StripTagsProcessor.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StripTagsProcessor.java'},
    'StripTagsProcessor.process': {   'req_args': ['in'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StripTagsProcessor.java'},
    'StripTagsProcessor.setMarkLineBreaks': {   'req_args': ['markLineBreaks'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\StripTagsProcessor.java'},
    'SunJurafskyChineseHeadFinder': {   'req_args': [['tlp']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\SunJurafskyChineseHeadFinder.java'},
    'SupervisedSieve': {   'req_args': [   'doc',
                                           'characterMap',
                                           'pronounCorefMap',
                                           'animacyList'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\SupervisedSieve.java'},
    'SupervisedSieve.doQuoteToMention': {   'req_args': ['doc'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\SupervisedSieve.java'},
    'SupervisedSieve.loadModel': {   'req_args': ['filename'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\SupervisedSieve.java'},
    'SupervisedSieveTraining.featurize': {   'req_args': [   'sd',
                                                             'goldList',
                                                             'isTraining'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\training\\SupervisedSieveTraining.java'},
    'SupervisedSieveTraining.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\training\\SupervisedSieveTraining.java'},
    'SupervisedSieveTraining.outputModel': {   'req_args': ['fileName', 'clf'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\training\\SupervisedSieveTraining.java'},
    'SupervisedSieveTraining.train': {   'req_args': ['data', 'props'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\training\\SupervisedSieveTraining.java'},
    'SurfacePattern': {   'req_args': [   'prevContext',
                                          'token',
                                          'nextContext',
                                          'genre'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.compareTo': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.copyNewToken': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.equalContext': {   'req_args': ['p', ['p']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.equals': {   'req_args': ['b'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getContextStr': {   'req_args': ['w'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getContextToken': {   'req_args': ['tokenj'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getGenre': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getNextContext': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getNextContextLen': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getNextContextStr': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getPrevContext': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getPrevContextStr': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getPreviousContextLen': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getRelevantWords': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getSimplerTokens': {   'req_args': ['p'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getSimplerTokensNext': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getSimplerTokensPrev': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.getToken': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.hashCode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.sameGenre': {   'req_args': ['p1', 'p2'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.sameLength': {   'req_args': ['p1', 'p2'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.sameRestrictions': {   'req_args': ['p1', 'p2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.setGenre': {   'req_args': ['genre'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.setNextContext': {   'req_args': ['nextContext'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.setNumWordsCompound': {   'req_args': ['numWordsCompound'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.setPrevContext': {   'req_args': ['prevContext'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.setToken': {   'req_args': ['token'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.subsumes': {   'req_args': ['p1', 'p2'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.subsumesArray': {   'req_args': ['array1', 'array2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.subsumesEitherWay': {   'req_args': ['p1', 'p2'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.toString': {   'req_args': [   'notAllowedClasses',
                                                   [   'morePreviousPattern',
                                                       'moreNextPattern',
                                                       'notAllowedClasses'],
                                                   []],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.toStringSimple': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePattern.toStringToWrite': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePattern.java'},
    'SurfacePatternFactory.getContext': {   'req_args': [   'sent',
                                                            'i',
                                                            'stopWords'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePatternFactory.java'},
    'SurfacePatternFactory.getPatternsAroundTokens': {   'req_args': [   'sent',
                                                                         'stopWords'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePatternFactory.java'},
    'SurfacePatternFactory.isASCII': {   'req_args': ['text'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePatternFactory.java'},
    'SurfacePatternFactory.setUp': {   'req_args': ['props'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\SurfacePatternFactory.java'},
    'SynchronizedInterner': {   'req_args': ['delegate', ['delegate', 'mutex']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.clear': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.getGlobal': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.globalIntern': {   'req_args': ['o'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.intern': {   'req_args': ['o'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.internAll': {   'req_args': ['s'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.setGlobal': {   'req_args': ['delegate'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedInterner.size': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\concurrent\\SynchronizedInterner.java'},
    'SynchronizedTreeTransformer': {   'req_args': ['threadUnsafe'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SynchronizedTreeTransformer.java'},
    'SynchronizedTreeTransformer.transformTree': {   'req_args': ['t'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\SynchronizedTreeTransformer.java'},
    'SystemUtils': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.getMemoryInUse': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.getPID': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.getPIDNoExceptions': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.getStackTraceString': {   'req_args': ['t'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.getTimestampString': {   'req_args': ['fmt', []],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.run': {   'req_args': [   'builder',
                                           ['builder', 'output', 'error']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'SystemUtils.runShellCommand': {   'req_args': [   'cmd',
                                                       'outputLines',
                                                       'errorLines',
                                                       [   'cmd',
                                                           'dir',
                                                           'outputLines',
                                                           'errorLines'],
                                                       [   'cmd',
                                                           'outputLines',
                                                           'errorLines'],
                                                       ['cmd', 'outputLines'],
                                                       ['cmd', 'outputLines'],
                                                       ['cmd'],
                                                       ['cmd']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\SystemUtils.java'},
    'TSVSentenceIterator': {   'req_args': ['recordSource', 'fields'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVSentenceIterator.java'},
    'TSVSentenceIterator.hasNext': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVSentenceIterator.java'},
    'TSVSentenceIterator.next': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVSentenceIterator.java'},
    'TSVSentenceIterator.toCoreMap': {   'req_args': ['fields', 'entries'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVSentenceIterator.java'},
    'TSVSentenceIterator.toSentence': {   'req_args': ['fields', 'entries'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVSentenceIterator.java'},
    'TSVTaggedFileReader': {   'req_args': ['record'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVTaggedFileReader.filename': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVTaggedFileReader.hasNext': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVTaggedFileReader.iterator': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVTaggedFileReader.next': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVTaggedFileReader.remove': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TSVTaggedFileReader.java'},
    'TSVUtils': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVUtils.java'},
    'TSVUtils.parseArray': {   'req_args': ['array'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVUtils.java'},
    'TSVUtils.parseJsonTree': {   'req_args': ['jsonString', 'tokens'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVUtils.java'},
    'TSVUtils.parseSentence': {   'req_args': [   'docid',
                                                  'sentenceIndex',
                                                  'gloss',
                                                  'dependencies',
                                                  'maltDependencies',
                                                  'words',
                                                  'lemmas',
                                                  'posTags',
                                                  'nerTags',
                                                  'sentenceid'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVUtils.java'},
    'TSVUtils.parseTree': {   'req_args': ['conll', 'tokens'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TSVUtils.java'},
    'TTags': {   'req_args': [['language']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.getOpenTags': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.getOpenTagsArray': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.getSize': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.getTag': {   'req_args': ['i'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.setClosedClassTags': {   'req_args': ['closedClassTags'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.setLearnClosedTags': {   'req_args': ['learn'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.setOpenClassTags': {   'req_args': ['openClassTags'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.tagSet': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TTags.toString': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TTags.java'},
    'TableFactor': {   'req_args': [   'weights',
                                       'factor',
                                       ['weights', 'factor', 'observations'],
                                       ['neighborIndices', 'dimensions']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.exp': {   'req_args': ['val'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.getAssignmentValue': {   'req_args': ['assignment'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.getMaxedMarginals': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.getSummedMarginals': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.maxOut': {   'req_args': ['variable'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.multiply': {   'req_args': ['other'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.observe': {   'req_args': ['variable', 'value'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.setAssignmentValue': {   'req_args': ['assignment', 'value'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.sumOut': {   'req_args': ['variable'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'TableFactor.valueSum': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\loglinear\\inference\\TableFactor.java'},
    'Tag': {   'req_args': [['tag'], ['lab']],
               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Tag.java'},
    'Tag.factory': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Tag.java'},
    'Tag.labelFactory': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Tag.java'},
    'Tag.setTag': {   'req_args': ['tag'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Tag.java'},
    'Tag.tag': {   'req_args': [],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Tag.java'},
    'TagAffixDetector': {   'req_args': ['flags'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\wordseg\\TagAffixDetector.java'},
    'TagCount': {   'req_args': [['tagCounts']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.getAmbClassId': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.getFirstTag': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.getTags': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.readTagCount': {   'req_args': ['rf', 'interner'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.setAmbClassId': {   'req_args': ['ambClassId'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TagCount.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TagCount.java'},
    'TaggedArabicDataset.build': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\TaggedArabicDataset.java'},
    'TaggedFileRecord': {   'req_args': [   'file',
                                            'format',
                                            'encoding',
                                            'tagSeparator',
                                            'treeTransformer',
                                            'treeNormalizer',
                                            'trf',
                                            'treeRange',
                                            'treeFilter',
                                            'wordColumn',
                                            'tagColumn',
                                            'usesComments'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.createRecord': {   'req_args': ['config', 'description'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.createRecords': {   'req_args': ['config', 'description'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.filename': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.getEncoding': {   'req_args': ['config'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.getTagSeparator': {   'req_args': ['config'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.reader': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedFileRecord.toString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TaggedFileRecord.java'},
    'TaggedTextOutputter': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TaggedTextOutputter.java'},
    'TaggedTextOutputter.prettyPrint': {   'req_args': [   'annotation',
                                                           'stream',
                                                           'pipeline',
                                                           [   'annotation',
                                                               'pw',
                                                               'pipeline']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TaggedTextOutputter.java'},
    'TaggedTextOutputter.print': {   'req_args': ['doc', 'target', 'options'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TaggedTextOutputter.java'},
    'TaggedWord': {   'req_args': [   ['word'],
                                      ['word', 'tag'],
                                      ['oldLabel'],
                                      ['word', 'tag']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.factory': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.labelFactory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.setFromString': {   'req_args': [   'taggedWord',
                                                    ['taggedWord', 'divider']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.setTag': {   'req_args': ['tag'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.tag': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWord.toString': {   'req_args': [['divider']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWord.java'},
    'TaggedWordFactory': {   'req_args': [['divider']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWordFactory.java'},
    'TaggedWordFactory.newLabel': {   'req_args': [   'labelStr',
                                                      ['labelStr', 'options'],
                                                      ['oldLabel']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWordFactory.java'},
    'TaggedWordFactory.newLabelFromString': {   'req_args': ['word'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\TaggedWordFactory.java'},
    'Tagger.apply': {   'req_args': ['in'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\common\\Tagger.java'},
    'Tagger.loadModel': {   'req_args': ['path'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\common\\Tagger.java'},
    'TaggerConfig': {   'req_args': [['old'], ['args'], ['props']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.dump': {   'req_args': [['stream']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getArch': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getClosedClassTags': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getClosedTagThreshold': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getCurWordMinFeatureThresh': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getDebug': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getDebugPrefix': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getDefaultScore': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getDefaultTagSeparator': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getEncoding': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getFile': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getIterations': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getLang': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getLearnClosedClassTags': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getMinFeatureThresh': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getMinWordsLockTags': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getMode': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getModel': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getNThreads': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOpenClassTags': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputFile': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputFormat': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputLemmas': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputOptions': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputOptionsContains': {   'req_args': ['sought'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getOutputVerbosity': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getRareWordMinFeatureThresh': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getRareWordThresh': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getRegL1': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getSGML': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getSearch': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getSentenceDelimiter': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getSigmaSquared': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTagInside': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTagSeparator': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTokenize': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTokenizerFactory': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTokenizerInvertible': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getTokenizerOptions': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getVerbose': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getVerboseResults': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getVeryCommonWordThresh': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getWordFunction': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.getXMLInput': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.keepEmptySentences': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.occurringTagsOnly': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.possibleTagsOnly': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.readConfig': {   'req_args': ['stream'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.saveConfig': {   'req_args': ['os'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.setProperties': {   'req_args': ['props'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerConfig.useStdin': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerConfig.java'},
    'TaggerDemo': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\TaggerDemo.java'},
    'TaggerDemo.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\TaggerDemo.java'},
    'TaggerDemo2': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\TaggerDemo2.java'},
    'TaggerDemo2.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\documentation\\TaggerDemo2.java'},
    'TaggerExperiments': {   'req_args': [   'maxentTagger',
                                             ['config', 'maxentTagger']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerExperiments.java'},
    'TaggerExperiments.getTaggerFeatures': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerExperiments.java'},
    'TaggerFeature': {   'req_args': ['start', 'end', 'key', 'yTag', 'domain'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.ftilde': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.getVal': {   'req_args': ['index', ['x', 'y']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.getX': {   'req_args': ['index'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.getY': {   'req_args': ['index'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.getYTag': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeature.len': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeature.java'},
    'TaggerFeatures': {   'req_args': ['domain'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TaggerFeatures.java'},
    'TaggerReranker': {   'req_args': ['tagger', 'op'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TaggerReranker.java'},
    'TaggerReranker.getEvals': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TaggerReranker.java'},
    'TaggerReranker.process': {   'req_args': ['sentence'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TaggerReranker.java'},
    'TaggingEval': {   'req_args': ['str', ['str', 'runningAverages', 'lex']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TaggingEval.java'},
    'TaggingEval.display': {   'req_args': ['verbose', 'pw'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TaggingEval.java'},
    'TaggingEval.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TaggingEval.java'},
    'TaggingEval.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TaggingEval.java'},
    'Tags': {   'req_args': ['tags'],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.addTag': {   'req_args': ['tag', 'v'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.equals': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.getTag': {   'req_args': ['tag'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.getTags': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.hasTag': {   'req_args': ['tag'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.removeTag': {   'req_args': ['tag'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tags.setTag': {   'req_args': ['tag', 'v'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\Tags.java'},
    'Tdiff': {   'req_args': [],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Tdiff.java'},
    'Tdiff.main': {   'req_args': ['args'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Tdiff.java'},
    'Tdiff.markDiff': {   'req_args': ['t1', 't2'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\Tdiff.java'},
    'TeXHyphenator.findBreakPoints': {   'req_args': ['lcphrase'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\TeXHyphenator.java'},
    'TeXHyphenator.load': {   'req_args': ['input'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\TeXHyphenator.java'},
    'TeXHyphenator.loadDefault': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\TeXHyphenator.java'},
    'TeXHyphenator.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\TeXHyphenator.java'},
    'TeXHyphenator.toString': {   'req_args': ['i'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\pascal\\TeXHyphenator.java'},
    'TeeStream': {   'req_args': ['s1', 's2'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\TeeStream.java'},
    'TeeStream.close': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\TeeStream.java'},
    'TeeStream.flush': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\TeeStream.java'},
    'TeeStream.write': {   'req_args': ['b', ['b', 'off', 'len'], ['b']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\io\\TeeStream.java'},
    'TemplateHash': {   'req_args': ['maxentTagger'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\maxent\\TemplateHash.java'},
    'TextAnnotationCreator.createFromText': {   'req_args': ['text'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TextAnnotationCreator.java'},
    'TextAnnotationPatterns': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.currentSummary': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.doNewAnnotations': {   'req_args': ['line'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.doNewPhrases': {   'req_args': ['line'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.doRemoveAnnotations': {   'req_args': ['line'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.doRemovePhrases': {   'req_args': ['line'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.getAllAnnotations': {   'req_args': [['input']],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.getMatchedTokensByAllPhrases': {   'req_args': [],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.getMatchedTokensByPhrase': {   'req_args': [   'input'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.processText': {   'req_args': ['writeOutputToFile'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.suggestPhrases': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatterns.suggestPhrasesTest': {   'req_args': [   'testProps',
                                                                     'modelPropertiesFile',
                                                                     'stopWordsFile'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatterns.java'},
    'TextAnnotationPatternsInterface': {   'req_args': ['portnum'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatternsInterface.java'},
    'TextAnnotationPatternsInterface.main': {   'req_args': ['args'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\TextAnnotationPatternsInterface.java'},
    'TextOutputter': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TextOutputter.java'},
    'TextOutputter.outputQuotes': {   'req_args': ['annotation', 'pw'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TextOutputter.java'},
    'TextOutputter.prettyPrint': {   'req_args': [   'annotation',
                                                     'stream',
                                                     'pipeline',
                                                     [   'annotation',
                                                         'pw',
                                                         'pipeline']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TextOutputter.java'},
    'TextOutputter.print': {   'req_args': ['annotation', 'stream', 'options'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TextOutputter.java'},
    'TextTaggedFileReader': {   'req_args': ['record'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'TextTaggedFileReader.filename': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'TextTaggedFileReader.hasNext': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'TextTaggedFileReader.iterator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'TextTaggedFileReader.next': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'TextTaggedFileReader.remove': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TextTaggedFileReader.java'},
    'ThreeDimensionalCollectionValuedMap.add': {   'req_args': [   'key1',
                                                                   'key2',
                                                                   'key3',
                                                                   'value'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.clear': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.containsKey': {   'req_args': ['key'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.get': {   'req_args': [   'key1',
                                                                   'key2',
                                                                   'key3'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.getTwoDimensionalCollectionValuedMap': {   'req_args': [   'key1'],
                                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.keySet': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalCollectionValuedMap.toString': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalCollectionValuedMap.java'},
    'ThreeDimensionalMap': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.contains': {   'req_args': ['key1', 'key2', 'key3'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.firstKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.get': {   'req_args': [   'key1',
                                                   'key2',
                                                   'key3',
                                                   ['key1', 'key2'],
                                                   ['key1']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.getTwoDimensionalMap': {   'req_args': ['key1'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.isEmpty': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.put': {   'req_args': [   'key1',
                                                   'key2',
                                                   'key3',
                                                   'value'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.remove': {   'req_args': ['key1', 'key2', 'key3'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.secondKeySet': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.size': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.thirdKeySet': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.toString': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'ThreeDimensionalMap.values': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ThreeDimensionalMap.java'},
    'TimeAnnotator': {   'req_args': [   ['quiet'],
                                         ['name', 'props'],
                                         ['name', 'props', 'quiet']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeAnnotator.java'},
    'TimeAnnotator.annotate': {   'req_args': ['annotation'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeAnnotator.java'},
    'TimeAnnotator.annotateSingleSentence': {   'req_args': [   'sentence',
                                                                'docDate',
                                                                'timeIndex'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeAnnotator.java'},
    'TimeAnnotator.requirementsSatisfied': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeAnnotator.java'},
    'TimeAnnotator.requires': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeAnnotator.java'},
    'TimeExpression': {   'req_args': [   'expr',
                                          [   'charOffsets',
                                              'tokenOffsets',
                                              'temporalFunc',
                                              'priority',
                                              'weight']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpression.java'},
    'TimeExpression.addMod': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpression.java'},
    'TimeExpression.extractAnnotation': {   'req_args': [   'env',
                                                            'sourceAnnotation',
                                                            ['env', 'source']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpression.java'},
    'TimeExpression.getTemporal': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpression.java'},
    'TimeExpression.setTemporal': {   'req_args': ['temporal'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpression.java'},
    'TimeExpressionExtractorFactory': {   'req_args': [['className']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorFactory.java'},
    'TimeExpressionExtractorFactory.create': {   'req_args': [   [   'name',
                                                                     'props'],
                                                                 ['className'],
                                                                 [   'className',
                                                                     'name',
                                                                     'props']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorFactory.java'},
    'TimeExpressionExtractorFactory.createExtractor': {   'req_args': [   [   'name',
                                                                              'props']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorFactory.java'},
    'TimeExpressionExtractorImpl': {   'req_args': [['name', 'props']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorImpl.java'},
    'TimeExpressionExtractorImpl.extractTimeExpressionCoreMaps': {   'req_args': [   'annotation',
                                                                                     'docAnnotation',
                                                                                     [   'annotation',
                                                                                         'docDate'],
                                                                                     [   'annotation',
                                                                                         'docDate',
                                                                                         'timeIndex']],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorImpl.java'},
    'TimeExpressionExtractorImpl.extractTimeExpressions': {   'req_args': [   'annotation',
                                                                              'refDateStr',
                                                                              'timeIndex',
                                                                              [   'annotation',
                                                                                  'refDate',
                                                                                  'timeIndex']],
                                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorImpl.java'},
    'TimeExpressionExtractorImpl.finalize': {   'req_args': ['docAnnotation'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorImpl.java'},
    'TimeExpressionExtractorImpl.init': {   'req_args': [   'name',
                                                            'props',
                                                            ['options']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeExpressionExtractorImpl.java'},
    'TimeFormatter': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimeFormatter.java'},
    'Timex': {   'req_args': [   ['element'],
                                 ['val'],
                                 ['type', 'val'],
                                 [   'type',
                                     'val',
                                     'altVal',
                                     'tid',
                                     'text',
                                     'beginPoint',
                                     'endPoint']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.altVal': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.beginPoint': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.endPoint': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.equals': {   'req_args': ['o'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.fromMap': {   'req_args': ['text', 'map'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.fromXml': {   'req_args': ['xml'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.getDate': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.getRange': {   'req_args': [['documentTime']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.hashCode': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.range': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.text': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.tid': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.timexType': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.toString': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.toXmlElement': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'Timex.value': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\Timex.java'},
    'TimexTreeAnnotator': {   'req_args': ['matchType'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimexTreeAnnotator.java'},
    'TimexTreeAnnotator.annotate': {   'req_args': ['document'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimexTreeAnnotator.java'},
    'TimexTreeAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimexTreeAnnotator.java'},
    'TimexTreeAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\TimexTreeAnnotator.java'},
    'Timing': {   'req_args': [],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.doing': {   'req_args': ['str'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.done': {   'req_args': [   ['msg'],
                                       ['msg'],
                                       ['logger', 'msg'],
                                       ['logger', 'msg']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.end': {   'req_args': ['msg'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.endDoing': {   'req_args': [['msg']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.endTime': {   'req_args': [['str', 'stream'], ['str']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.report': {   'req_args': [   ['str', 'stream'],
                                         ['str'],
                                         ['logger', 'str'],
                                         ['str', 'writer']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.reportNano': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.restart': {   'req_args': [   ['str', 'stream'],
                                          ['str'],
                                          ['str', 'writer']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.start': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.startDoing': {   'req_args': ['str'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.startTime': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.stop': {   'req_args': [   ['str', 'stream'],
                                       ['str'],
                                       ['str', 'writer']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.tick': {   'req_args': [['str', 'stream'], ['str']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.toMilliSecondsString': {   'req_args': ['elapsed'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.toSecondsString': {   'req_args': [['elapsed']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Timing.toString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Timing.java'},
    'Token': {   'req_args': [   ['kind'],
                                 ['kind', 'image'],
                                 ['type'],
                                 ['c', 's', 'type'],
                                 [],
                                 ['kind'],
                                 ['kind', 'image'],
                                 ['sentence', 'index'],
                                 [],
                                 ['kind'],
                                 ['kind', 'image'],
                                 [],
                                 ['kind'],
                                 ['kind', 'image']],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\Token.java'},
    'Token.addORRestriction': {   'req_args': ['classR', 'value'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.after': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.before': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.beginPosition': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.characterOffsetBegin': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.characterOffsetEnd': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.classORRestrictionsAsString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.docID': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.endPosition': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.equals': {   'req_args': ['o'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.getKeyForClass': {   'req_args': ['classR'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.getSimple': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.getValue': {   'req_args': [[], [], []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\Token.java'},
    'Token.governor': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.hashCode': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.incomingDependencyLabel': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.index': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.isEmpty': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.lemma': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.ner': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.nerTag': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.newToken': {   'req_args': [   'ofKind',
                                          'image',
                                          ['ofKind'],
                                          ['ofKind', 'image'],
                                          ['ofKind'],
                                          ['ofKind', 'image'],
                                          ['ofKind'],
                                          ['ofKind', 'image'],
                                          ['ofKind']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\Token.java'},
    'Token.next': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.originalText': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.posTag': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.previous': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.sentIndex': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setAfter': {   'req_args': ['after'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setBefore': {   'req_args': ['before'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setBeginPosition': {   'req_args': ['beginPos'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setClass2KeyMapping': {   'req_args': ['file'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.setDocID': {   'req_args': ['docID'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setEndPosition': {   'req_args': ['endPos'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setEnvBindRestriction': {   'req_args': ['envBind'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.setIndex': {   'req_args': ['index'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setLemma': {   'req_args': ['lemma'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setNER': {   'req_args': ['ner'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setNumOcc': {   'req_args': ['min', 'max'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.setOriginalText': {   'req_args': ['originalText'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setSentIndex': {   'req_args': ['sentIndex'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setTag': {   'req_args': ['tag'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.setWord': {   'req_args': ['word'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.tag': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'Token.toString': {   'req_args': [[], [], [], []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\Token.java'},
    'Token.toStringClass2KeyMapping': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\patterns\\surface\\Token.java'},
    'Token.word': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\simple\\Token.java'},
    'TokenMgrError': {   'req_args': [   ['message', 'reason'],
                                         [   'EOFSeen',
                                             'lexState',
                                             'errorLine',
                                             'errorColumn',
                                             'errorAfter',
                                             'curChar',
                                             'reason'],
                                         [],
                                         ['message', 'reason'],
                                         [   'EOFSeen',
                                             'lexState',
                                             'errorLine',
                                             'errorColumn',
                                             'errorAfter',
                                             'curChar',
                                             'reason'],
                                         [],
                                         ['message', 'reason'],
                                         [   'EOFSeen',
                                             'lexState',
                                             'errorLine',
                                             'errorColumn',
                                             'errorAfter',
                                             'curChar',
                                             'reason'],
                                         [],
                                         ['message', 'reason'],
                                         [   'EOFSeen',
                                             'lexState',
                                             'errorLine',
                                             'errorColumn',
                                             'errorAfter',
                                             'curChar',
                                             'reason']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenMgrError.java'},
    'TokenMgrError.getMessage': {   'req_args': [[], [], []],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenMgrError.java'},
    'TokenSequenceMatcher': {   'req_args': ['pattern', 'tokens'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequenceMatcher.java'},
    'TokenSequenceParseException': {   'req_args': [   ['msg'],
                                                       [   'message',
                                                           'throwable']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParseException.java'},
    'TokenSequenceParser': {   'req_args': [   ['stream'],
                                               ['stream', 'encoding'],
                                               ['stream'],
                                               ['tm']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.Action': {   'req_args': ['env'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AnnotateAction': {   'req_args': ['env'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AssignableExpression': {   'req_args': ['env'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AssignableNestedVarExpression': {   'req_args': [   'env'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AssignableVar': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AssignmentRule': {   'req_args': ['env'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.AttrValue': {   'req_args': ['env', 'attributes'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.BasicCondExpression': {   'req_args': ['env'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.BasicValue': {   'req_args': ['env'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.BracketedNode': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CaseExpression': {   'req_args': ['env'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CmpToken': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CompositeFieldValue': {   'req_args': ['env'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CondExpression': {   'req_args': ['env'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CondGroup': {   'req_args': ['env'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CoreMapExprNodePattern': {   'req_args': ['env'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CoreMapNode': {   'req_args': ['env'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CoreMapVarNodePattern': {   'req_args': ['env'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CoreMapVarValue': {   'req_args': ['env'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.CoreMapWordPattern': {   'req_args': ['env'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.Expression': {   'req_args': ['env'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.ExpressionExtractorRule': {   'req_args': ['env'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.FieldValue': {   'req_args': ['env', 'attributes'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.FunctionCallExpression': {   'req_args': ['env'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.Index': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.IntegerToken': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.ListExpression': {   'req_args': ['env'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.ListExpression2': {   'req_args': ['env'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.MethodCallExpression': {   'req_args': [   'env',
                                                                    'parent'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.MultiNodePattern': {   'req_args': ['env'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NestedFunctionCallExpression': {   'req_args': ['env'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NestedVarExpression': {   'req_args': ['env'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.Node': {   'req_args': ['env'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NodeBasic': {   'req_args': ['env'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NodeConj': {   'req_args': ['env'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NodeDisj': {   'req_args': ['env'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NodeDisjConj': {   'req_args': ['env'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NodeGroup': {   'req_args': ['env'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.NumberToken': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.ReInit': {   'req_args': [   'stream',
                                                      ['stream', 'encoding'],
                                                      ['stream'],
                                                      ['tm']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.RelaxedString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.RelaxedStringNoIdentifier': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.RelaxedStringToken': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.Rule': {   'req_args': ['env'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.RuleList': {   'req_args': ['env'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqBackRef': {   'req_args': ['env'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegex': {   'req_args': ['env'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexBasic': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexDisj': {   'req_args': ['env'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexDisjConj': {   'req_args': ['env'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexGroup': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexRepeatTimes': {   'req_args': ['env', 'expr'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqRegexWithAction': {   'req_args': ['env'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SeqVar': {   'req_args': ['env'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SetAttrValue': {   'req_args': ['env', 'attributes'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.SetAttrValues': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.StringNumberValue': {   'req_args': ['env'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.StringRegex': {   'req_args': ['env'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.ValueExpression': {   'req_args': ['env'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.VarOrRegexVar': {   'req_args': ['env'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.disable_tracing': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.enable_tracing': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.generateParseException': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.getExpressionExtractor': {   'req_args': ['env', 'r'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.getNextToken': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.getToken': {   'req_args': ['index'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.parseNode': {   'req_args': ['env', 's'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.parseSequence': {   'req_args': ['env', 's'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.parseSequenceWithAction': {   'req_args': ['env', 's'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.trace_enabled': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParser.updateExpressionExtractor': {   'req_args': [   'extractor',
                                                                         'r'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParser.java'},
    'TokenSequenceParserTokenManager': {   'req_args': [   'stream',
                                                           [   'stream',
                                                               'lexState']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParserTokenManager.java'},
    'TokenSequenceParserTokenManager.ReInit': {   'req_args': [   'stream',
                                                                  [   'stream',
                                                                      'lexState']],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParserTokenManager.java'},
    'TokenSequenceParserTokenManager.SwitchTo': {   'req_args': ['lexState'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParserTokenManager.java'},
    'TokenSequenceParserTokenManager.getNextToken': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParserTokenManager.java'},
    'TokenSequenceParserTokenManager.setDebugStream': {   'req_args': ['ds'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\parser\\TokenSequenceParserTokenManager.java'},
    'TokenSequencePattern': {   'req_args': [   'patternStr',
                                                'nodeSequencePattern',
                                                [   'patternStr',
                                                    'nodeSequencePattern',
                                                    'action']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.compile': {   'req_args': [   'string',
                                                        ['env', 'string'],
                                                        ['strings'],
                                                        ['env', 'strings'],
                                                        [   'nodeSequencePattern']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.getMatcher': {   'req_args': ['tokens'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.getMultiPatternMatcher': {   'req_args': [   'patterns',
                                                                       [   'patterns'],
                                                                       [   'patterns']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.getNewEnv': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.matcher': {   'req_args': ['tokens'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenSequencePattern.toString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\TokenSequencePattern.java'},
    'TokenizerAdapter': {   'req_args': ['st'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TokenizerAdapter.java'},
    'TokenizerAdapter.getNext': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TokenizerAdapter.java'},
    'TokenizerAdapter.isEol': {   'req_args': ['str'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TokenizerAdapter.java'},
    'TokenizerAdapter.setEolString': {   'req_args': ['eolString'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TokenizerAdapter.java'},
    'TokenizerAnnotator': {   'req_args': [   ['properties'],
                                              ['verbose'],
                                              ['lang'],
                                              ['verbose', 'lang'],
                                              ['verbose', 'lang'],
                                              ['verbose', 'lang', 'options'],
                                              ['verbose', 'props'],
                                              ['verbose', 'props', 'options']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokenizerAnnotator.adjustFinalToken': {   'req_args': ['tokens'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokenizerAnnotator.annotate': {   'req_args': ['annotation'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokenizerAnnotator.getTokenizer': {   'req_args': ['r'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokenizerAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokenizerAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokenizerAnnotator.java'},
    'TokensRegexAnnotator': {   'req_args': [   'files',
                                                ['name', 'props'],
                                                ['props']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexAnnotator.java'},
    'TokensRegexAnnotator.annotate': {   'req_args': ['annotation'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexAnnotator.java'},
    'TokensRegexAnnotator.requirementsSatisfied': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexAnnotator.java'},
    'TokensRegexAnnotator.requires': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexAnnotator.java'},
    'TokensRegexAnnotatorDemo': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexAnnotatorDemo.java'},
    'TokensRegexAnnotatorDemo.main': {   'req_args': ['args'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexAnnotatorDemo.java'},
    'TokensRegexDemo': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexDemo.java'},
    'TokensRegexDemo.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexDemo.java'},
    'TokensRegexExample.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\examples\\TokensRegexExample.java'},
    'TokensRegexMatcher': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexMatcher.java'},
    'TokensRegexMatcher.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexMatcher.java'},
    'TokensRegexMatcherDemo': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexMatcherDemo.java'},
    'TokensRegexMatcherDemo.main': {   'req_args': ['args'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexMatcherDemo.java'},
    'TokensRegexNERAnnotator': {   'req_args': [   'mapping',
                                                   ['mapping', 'ignoreCase'],
                                                   [   'mapping',
                                                       'ignoreCase',
                                                       'validPosRegex'],
                                                   ['name', 'properties']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexNERAnnotator.java'},
    'TokensRegexNERAnnotator.annotate': {   'req_args': ['annotation'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexNERAnnotator.java'},
    'TokensRegexNERAnnotator.requirementsSatisfied': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexNERAnnotator.java'},
    'TokensRegexNERAnnotator.requires': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TokensRegexNERAnnotator.java'},
    'TokensRegexRetokenizeDemo.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\demo\\TokensRegexRetokenizeDemo.java'},
    'TooltipJList': {   'req_args': [['model'], ['model', 'lineWrapLength']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\TooltipJList.java'},
    'TooltipJList.getToolTipText': {   'req_args': ['evt'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\swing\\TooltipJList.java'},
    'TopMatchEval': {   'req_args': ['name', 'runningAverages'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TopMatchEval.java'},
    'TopNGramRecord': {   'req_args': [   'numClasses',
                                          'ngramCount',
                                          'maximumLength'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\TopNGramRecord.java'},
    'TopNGramRecord.countTree': {   'req_args': ['tree'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\TopNGramRecord.java'},
    'TopNGramRecord.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\rnn\\TopNGramRecord.java'},
    'TraditionalSimplifiedCharacterMap': {   'req_args': [['path']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\TraditionalSimplifiedCharacterMap.java'},
    'TraditionalSimplifiedCharacterMap.apply': {   'req_args': ['input'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\TraditionalSimplifiedCharacterMap.java'},
    'TraditionalSimplifiedCharacterMap.main': {   'req_args': ['args'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\TraditionalSimplifiedCharacterMap.java'},
    'TraditionalSimplifiedCharacterMap.translateFile': {   'req_args': [   'input',
                                                                           'output'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\TraditionalSimplifiedCharacterMap.java'},
    'TraditionalSimplifiedCharacterMap.translateLines': {   'req_args': [   'br',
                                                                            'bw'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\TraditionalSimplifiedCharacterMap.java'},
    'TrainOptions': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainOptions.compactGrammar': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainOptions.display': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainOptions.outsideFactor': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainOptions.printTrainTree': {   'req_args': ['pw', 'message', 't'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainOptions.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TrainOptions.java'},
    'TrainingExample': {   'req_args': [   'binarizedTree',
                                           'transitions',
                                           'numSkips'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TrainingExample.java'},
    'TrainingExample.initialStateFromGoldTagTree': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TrainingExample.java'},
    'TrainingExample.trainTransitions': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TrainingExample.java'},
    'TrainingResult': {   'req_args': [   'updates',
                                          'numCorrect',
                                          'numWrong',
                                          'firstErrors',
                                          'correctTransitions',
                                          'wrongTransitions',
                                          'reorderSuccess',
                                          'reorderFail',
                                          [   'updates',
                                              'numCorrect',
                                              'numWrong',
                                              'firstError',
                                              'correctTransitions',
                                              'wrongTransitions',
                                              'reorderSuccess',
                                              'reorderFail'],
                                          ['results']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TrainingResult.java'},
    'TrainingUpdate': {   'req_args': [   'features',
                                          'goldTransition',
                                          'predictedTransition',
                                          'delta'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TrainingUpdate.java'},
    'TransducerGraph': {   'req_args': [   ['other'],
                                           ['other', 'arcProcessor'],
                                           ['other', 'nodeProcessor'],
                                           [   'newArcs',
                                               'startNode',
                                               'endNodes',
                                               'arcProcessor',
                                               'nodeProcessor'],
                                           ['newArcs']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.addArc': {   'req_args': [   'source',
                                                  'target',
                                                  'input',
                                                  'output'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.addOnePathToGraph': {   'req_args': [   'path',
                                                             'count',
                                                             'markovOrder',
                                                             'graph'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.asDOTString': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.canAddArc': {   'req_args': [   'source',
                                                     'target',
                                                     'input',
                                                     'output'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.clone': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.createGraphFromPaths': {   'req_args': [   'paths',
                                                                'markovOrder',
                                                                [   'pathCounter',
                                                                    'markovOrder']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.createRandomGraph': {   'req_args': [   'numPaths',
                                                             'pathLengthMean',
                                                             'pathLengthVariance',
                                                             'numInputs',
                                                             'pathList'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.createRandomPaths': {   'req_args': [   'numPaths',
                                                             'pathLengthMean',
                                                             'pathLengthVariance',
                                                             'numInputs'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.depthFirstSearch': {   'req_args': ['forward', 'b'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArc': {   'req_args': ['source', 'target'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcBySourceAndInput': {   'req_args': ['node', 'input'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcs': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcsByInput': {   'req_args': ['node'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcsBySource': {   'req_args': ['node'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcsByTarget': {   'req_args': ['node'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getArcsByTargetAndInput': {   'req_args': [   'node',
                                                                   'input'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getEndNodes': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getInputs': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getNodes': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getOutputOfPathInGraph': {   'req_args': ['path'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getPathOutputs': {   'req_args': ['pathList'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.getStartNode': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.inFlow': {   'req_args': ['node'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.main': {   'req_args': ['args'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.outFlow': {   'req_args': ['node'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.removeArc': {   'req_args': ['a'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.sampleUniformPathFromGraph': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.setDeterminism': {   'req_args': ['checkDeterminism'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.setEndNode': {   'req_args': ['o'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.setStartNode': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.testGraphPaths': {   'req_args': [   'sourceGraph',
                                                          'testGraph',
                                                          'numPaths'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransducerGraph.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\fsm\\TransducerGraph.java'},
    'TransformXML': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TransformXML.java'},
    'TransformXML.buildSaxInterface': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TransformXML.java'},
    'TransformXML.transformXML': {   'req_args': [   'tags',
                                                     'fn',
                                                     'in',
                                                     [   'tags',
                                                         'fn',
                                                         'in',
                                                         'out'],
                                                     ['tags', 'fn', 'in'],
                                                     [   'tags',
                                                         'fn',
                                                         'in',
                                                         'out'],
                                                     ['tags', 'fn', 'in', 'w'],
                                                     [   'tags',
                                                         'fn',
                                                         'in',
                                                         'w',
                                                         'handler'],
                                                     [   'tags',
                                                         'fn',
                                                         'in',
                                                         'w',
                                                         'handler'],
                                                     [   'tags',
                                                         'fn',
                                                         'in',
                                                         'w',
                                                         'saxInterface']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\TransformXML.java'},
    'TransformingTreebank': {   'req_args': [['trf'], ['tb', 'transformer']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransformingTreebank.apply': {   'req_args': ['tv'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransformingTreebank.clear': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransformingTreebank.iterator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransformingTreebank.loadPath': {   'req_args': ['path', 'filt'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransformingTreebank.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TransformingTreebank.java'},
    'TransitionTypeEval.display': {   'req_args': ['verbose', 'pw'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TransitionTypeEval.java'},
    'TransitionTypeEval.evaluate': {   'req_args': ['query', 'gold', 'pw'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TransitionTypeEval.java'},
    'Tree': {   'req_args': [],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.addChild': {   'req_args': ['i', 't', ['t']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.ancestor': {   'req_args': ['height', 'root'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.cCommands': {   'req_args': ['t1', 't2'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.children': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.constituents': {   'req_args': [   ['cf'],
                                             ['cf', 'maxDepth'],
                                             ['cf', 'charLevel'],
                                             ['cf', 'charLevel', 'filter']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.deepCopy': {   'req_args': [['tf'], ['tf', 'lf']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.dependencies': {   'req_args': [   ['f'],
                                             [   'f',
                                                 'isConcrete',
                                                 'copyLabel',
                                                 'copyPosTag']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.depth': {   'req_args': [['node']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.dominates': {   'req_args': ['t'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.dominationPath': {   'req_args': ['t'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.equals': {   'req_args': ['o'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.firstChild': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.flatten': {   'req_args': [['tf']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.getChild': {   'req_args': ['i'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.getChildrenAsList': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.getLeaves': {   'req_args': [['list']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.getNodeNumber': {   'req_args': ['i'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.getSpan': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.hashCode': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.headPreTerminal': {   'req_args': ['hf'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.headTerminal': {   'req_args': ['hf', 'parent', ['hf']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.indentedListPrint': {   'req_args': [['pw', 'printScores']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.indentedXMLPrint': {   'req_args': [['pw', 'printScores']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.indexLeaves': {   'req_args': [   ['overWrite'],
                                            ['startIndex', 'overWrite']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.indexSpans': {   'req_args': [['startIndex'], ['startIndex']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.insertDtr': {   'req_args': ['dtr', 'position'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isBinarized': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isBinary': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isLeaf': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isPhrasal': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isPrePreTerminal': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isPreTerminal': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.isUnaryRewrite': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.iterator': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.joinNode': {   'req_args': ['t1', 't2'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.label': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.labelFactory': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.labeledYield': {   'req_args': [['ty']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.labels': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.lastChild': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.leftCharEdge': {   'req_args': ['node'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.localTree': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.localTrees': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.mapDependencies': {   'req_args': [   'f',
                                                'hf',
                                                ['f', 'hf', 'rootName']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.nodeNumber': {   'req_args': ['root'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.nodeString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.numChildren': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.objectIndexOf': {   'req_args': ['tree'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.parent': {   'req_args': [['root']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.pathNodeToNode': {   'req_args': ['t1', 't2'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.pennPrint': {   'req_args': [   'pw',
                                          ['pw', 'labelFormatter'],
                                          ['ps'],
                                          ['ps', 'labelFormatter'],
                                          []],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.pennString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.percolateHeadAnnotations': {   'req_args': ['hf'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.percolateHeadIndices': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.percolateHeads': {   'req_args': ['hf'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.postOrderNodeList': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.preOrderNodeList': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.preTerminalYield': {   'req_args': [['y']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.printLocalTree': {   'req_args': [['pw']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.prune': {   'req_args': ['filter', ['filter', 'tf']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.removeChild': {   'req_args': ['i'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.rightCharEdge': {   'req_args': ['node'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.score': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setChild': {   'req_args': ['i', 't'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setChildren': {   'req_args': ['children', ['childTreesList']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setFromString': {   'req_args': ['labelStr'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setLabel': {   'req_args': ['label'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setLabels': {   'req_args': ['c'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setScore': {   'req_args': ['score'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setSpans': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.setValue': {   'req_args': ['value'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.siblings': {   'req_args': ['root'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.size': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.skipRoot': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.spanString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.spliceOut': {   'req_args': ['nodeFilter', ['nodeFilter', 'tf']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.subTreeList': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.subTrees': {   'req_args': [['n']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.taggedLabeledYield': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.taggedYield': {   'req_args': [['ty']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.toString': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.toStringBuilder': {   'req_args': ['sb', ['sb', 'labelFormatter']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.transform': {   'req_args': ['transformer', ['transformer', 'tf']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.treeFactory': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.treeSkeletonConstituentCopy': {   'req_args': [['tf', 'lf']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.treeSkeletonCopy': {   'req_args': [['tf']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.updateBrackets': {   'req_args': ['text'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.upperMostUnary': {   'req_args': ['root'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.value': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.valueOf': {   'req_args': ['str', ['str', 'trf']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.yield': {   'req_args': [['y'], ['y']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.yieldHasWord': {   'req_args': [['y']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'Tree.yieldWords': {   'req_args': [['y']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Tree.java'},
    'TreeAnnotator': {   'req_args': ['hf', 'tlpp', 'op'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotator.java'},
    'TreeAnnotator.transformTree': {   'req_args': ['t'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotator.java'},
    'TreeAnnotatorAndBinarizer': {   'req_args': [   'tlpParams',
                                                     'forceCNF',
                                                     'insideFactor',
                                                     'doSubcategorization',
                                                     'op',
                                                     [   'annotationHF',
                                                         'binarizationHF',
                                                         'tlpParams',
                                                         'forceCNF',
                                                         'insideFactor',
                                                         'doSubcategorization',
                                                         'op']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.addRoot': {   'req_args': ['t'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.dumpStats': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.getAnnotatedBinaryTreebankFromTreebank': {   'req_args': [   'trainTreebank',
                                                                                            'secondaryTreebank',
                                                                                            'tuneTreebank',
                                                                                            'op'],
                                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.printRuleCounts': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.printStateCounts': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.setDoSelectiveSplit': {   'req_args': [   'doSelectiveSplit'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeAnnotatorAndBinarizer.transformTree': {   'req_args': ['t'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeAnnotatorAndBinarizer.java'},
    'TreeBinarizer': {   'req_args': [   'hf',
                                         'tlp',
                                         'insideFactor',
                                         'markovFactor',
                                         'markovOrder',
                                         'useWrappingLabels',
                                         'unaryAtTop',
                                         'selectiveSplitThreshold',
                                         'markFinalStates',
                                         'simpleLabels',
                                         'noRebinarization'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeBinarizer.java'},
    'TreeBinarizer.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeBinarizer.java'},
    'TreeBinarizer.setDoSelectiveSplit': {   'req_args': ['doSelectiveSplit'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeBinarizer.java'},
    'TreeBinarizer.simpleTreeBinarizer': {   'req_args': ['hf', 'tlp'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeBinarizer.java'},
    'TreeBinarizer.transformTree': {   'req_args': ['t'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeBinarizer.java'},
    'TreeCollinizer': {   'req_args': [   'tlp',
                                          [   'tlp',
                                              'deletePunct',
                                              'fixCollinsBaseNP'],
                                          [   'tlp',
                                              'deletePunct',
                                              'fixCollinsBaseNP',
                                              'whOption']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeCollinizer.java'},
    'TreeCollinizer.toString': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeCollinizer.java'},
    'TreeCollinizer.transformTree': {   'req_args': ['tree'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreeCollinizer.java'},
    'TreeCoreAnnotations': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeCoreAnnotations.java'},
    'TreeFilters': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFilters.java'},
    'TreeFromFile': {   'req_args': ['t', ['t', 'filename']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getDiffConstituents': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getDiffDecoratedTree': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getFilename': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getLabel': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getSentenceId': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.getTree': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.setDiffConstituents': {   'req_args': ['lessConstituents'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.setDiffDecoratedTree': {   'req_args': ['decoratedTree'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.setFilename': {   'req_args': ['filename'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFromFile.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TreeFromFile.java'},
    'TreeFunctions': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFunctions.java'},
    'TreeFunctions.getLabeledToDescriptiveCoreLabelTreeFunction': {   'req_args': [   ],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFunctions.java'},
    'TreeFunctions.getLabeledTreeToCategoryWordTagTreeFunction': {   'req_args': [   ],
                                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFunctions.java'},
    'TreeFunctions.getLabeledTreeToStringLabeledTreeFunction': {   'req_args': [   ],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFunctions.java'},
    'TreeFunctions.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeFunctions.java'},
    'TreeGraphNode': {   'req_args': [   'label',
                                         ['label', 'children'],
                                         ['t', 'parent']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.addChild': {   'req_args': ['i', 't'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.children': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.factory': {   'req_args': [['lf']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.headWordNode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.highestNodeWithSameHead': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.index': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.label': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.parent': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.percolateHeads': {   'req_args': ['hf'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.removeChild': {   'req_args': ['i'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.setChild': {   'req_args': ['i', 't'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.setChildren': {   'req_args': [   'children',
                                                     ['childTreesList']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.setLabel': {   'req_args': ['label', ['label']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.setParent': {   'req_args': ['parent'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.toOneLineString': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.toPrettyString': {   'req_args': ['indentLevel'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.toString': {   'req_args': [['format']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNode.treeFactory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNode.java'},
    'TreeGraphNodeFactory': {   'req_args': [['mlf']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNodeFactory.java'},
    'TreeGraphNodeFactory.newLeaf': {   'req_args': ['word', ['label']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNodeFactory.java'},
    'TreeGraphNodeFactory.newTreeNode': {   'req_args': [   'parent',
                                                            'children',
                                                            [   'parentLabel',
                                                                'children']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeGraphNodeFactory.java'},
    'TreeJPanel': {   'req_args': [['hAlign', 'vAlign']],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.getTree': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.getTreeDimension': {   'req_args': ['tree', 'font'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.paintComponent': {   'req_args': ['g'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.pickFont': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.setMaxFontSize': {   'req_args': ['size'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.setMinFontSize': {   'req_args': ['size'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeJPanel.setTree': {   'req_args': ['tree'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\ui\\TreeJPanel.java'},
    'TreeLeafLabelTransformer': {   'req_args': ['transform'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeLeafLabelTransformer.java'},
    'TreeLeafLabelTransformer.transformTree': {   'req_args': ['tree'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeLeafLabelTransformer.java'},
    'TreeLemmatizer.transformTree': {   'req_args': ['t'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeLemmatizer.java'},
    'TreeLengthComparator': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeLengthComparator.java'},
    'TreeLengthComparator.compare': {   'req_args': ['t1', 't2'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeLengthComparator.java'},
    'TreeLocation': {   'req_args': ['relation', 'p'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TreeLocation.java'},
    'TreeLocation.matcher': {   'req_args': ['newNodeNames', 'coindexer'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TreeLocation.java'},
    'TreeLocation.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TreeLocation.java'},
    'TreeNormalizer': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeNormalizer.java'},
    'TreeNormalizer.normalizeNonterminal': {   'req_args': ['category'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeNormalizer.java'},
    'TreeNormalizer.normalizeTerminal': {   'req_args': ['leaf'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeNormalizer.java'},
    'TreeNormalizer.normalizeWholeTree': {   'req_args': ['tree', 'tf'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeNormalizer.java'},
    'TreePrint': {   'req_args': [   'formats',
                                     ['formats', 'tlp'],
                                     ['formats', 'options', 'tlp'],
                                     [   'formatString',
                                         'optionsString',
                                         'tlp',
                                         'hf',
                                         'typedDependencyHF']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.markHeadNodes': {   'req_args': ['t'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.print': {   'req_args': [   'dependencies',
                                           'includeTags',
                                           'pw',
                                           [   'dependencies',
                                               'format',
                                               'includeTags',
                                               'pw']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.printFooter': {   'req_args': ['pw'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.printHeader': {   'req_args': ['pw', 'charset'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.printTree': {   'req_args': [   't',
                                               ['t', 'pw'],
                                               ['t', 'id', 'pw']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreePrint.printTrees': {   'req_args': ['trees', 'id', 'pw'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreePrint.java'},
    'TreeRecorder': {   'req_args': ['mode', 'filename'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TreeRecorder.java'},
    'TreeRecorder.display': {   'req_args': ['verbose', 'pw'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TreeRecorder.java'},
    'TreeRecorder.evaluate': {   'req_args': ['query', 'gold', 'pw'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\TreeRecorder.java'},
    'TreeShapedStack': {   'req_args': [['previous', 'data', 'size']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.asList': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.peek': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.pop': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.push': {   'req_args': ['data'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.size': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeShapedStack.toString': {   'req_args': [['delimiter']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TreeShapedStack.java'},
    'TreeSpanScoring': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TreeSpanScoring.java'},
    'TreeSpanScoring.countSpanErrors': {   'req_args': [   'tlp',
                                                           'goldTree',
                                                           'guessTree'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TreeSpanScoring.java'},
    'TreeSpanScoring.simplifyConstituents': {   'req_args': [   'tlp',
                                                                'constituents'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TreeSpanScoring.java'},
    'TreeTaggedFileReader': {   'req_args': ['record'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeTaggedFileReader.filename': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeTaggedFileReader.hasNext': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeTaggedFileReader.iterator': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeTaggedFileReader.next': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeTaggedFileReader.remove': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\tagger\\io\\TreeTaggedFileReader.java'},
    'TreeToBracketProcessor': {   'req_args': ['evalTypes'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeToBracketProcessor.java'},
    'TreeToBracketProcessor.allBrackets': {   'req_args': ['root'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeToBracketProcessor.java'},
    'TreeToBracketProcessor.commonWordTagTypeBrackets': {   'req_args': [   'root1',
                                                                            'root2'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeToBracketProcessor.java'},
    'TreeToMorfette.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\french\\scripts\\TreeToMorfette.java'},
    'TreeToTSV.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\spanish\\scripts\\TreeToTSV.java'},
    'TreeTokenizerFactory': {   'req_args': ['trf'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeTokenizerFactory.java'},
    'TreeTokenizerFactory.getIterator': {   'req_args': ['r'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeTokenizerFactory.java'},
    'TreeTokenizerFactory.getTokenizer': {   'req_args': [   'r',
                                                             [   'r',
                                                                 'extraOptions']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeTokenizerFactory.java'},
    'TreeTokenizerFactory.setOptions': {   'req_args': ['options'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreeTokenizerFactory.java'},
    'Treebank': {   'req_args': [   ['trf'],
                                    ['trf', 'encoding'],
                                    ['initialCapacity'],
                                    ['initialCapacity', 'trf']],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.apply': {   'req_args': ['tp'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.clear': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.decimate': {   'req_args': ['trainW', 'devW', 'testW'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.encoding': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.loadPath': {   'req_args': [   'pathName',
                                             ['path'],
                                             [   'pathName',
                                                 'suffix',
                                                 'recursively'],
                                             ['path', 'suffix', 'recursively'],
                                             ['pathName', 'filt'],
                                             ['path', 'filt']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.remove': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.size': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.textualSummary': {   'req_args': [['tlp']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.toString': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.transform': {   'req_args': ['treeTrans'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'Treebank.treeReaderFactory': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebank.java'},
    'TreebankAnnotator': {   'req_args': ['op', 'treebankRoot'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.annotateTrees': {   'req_args': ['trees'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.collinize': {   'req_args': ['tree'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.deannotateTrees': {   'req_args': ['trees'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.getTrees': {   'req_args': [   'path',
                                                      'low',
                                                      'high',
                                                      'minLength',
                                                      'maxLength'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankAnnotator.removeDependencyRoots': {   'req_args': ['trees'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TreebankAnnotator.java'},
    'TreebankFactoredLexiconStats.main': {   'req_args': ['args'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\TreebankFactoredLexiconStats.java'},
    'TreebankPreprocessor': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\TreebankPreprocessor.java'},
    'TreebankPreprocessor.main': {   'req_args': ['args'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\TreebankPreprocessor.java'},
    'TreebankStats': {   'req_args': ['langName', 'paths', 'tlpp'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\TreebankStats.java'},
    'TreebankStats.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\TreebankStats.java'},
    'TreebankStats.run': {   'req_args': [   'pathsAreFiles',
                                             'displayWords',
                                             'displayOOV'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\TreebankStats.java'},
    'TreebankStats.useSplit': {   'req_args': ['prefix'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\TreebankStats.java'},
    'TreebankTagUpdater': {   'req_args': ['taggerPath'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreebankTagUpdater.java'},
    'TreebankTagUpdater.getTaggedLeaves': {   'req_args': ['tree'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreebankTagUpdater.java'},
    'TreebankTagUpdater.main': {   'req_args': ['args'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreebankTagUpdater.java'},
    'TreebankTagUpdater.tagTree': {   'req_args': ['tree'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TreebankTagUpdater.java'},
    'Treebanks': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebanks.java'},
    'Treebanks.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Treebanks.java'},
    'Trees': {   'req_args': [],
                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.applyToProjections': {   'req_args': ['v', 'head', 'root', 'hf'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.convertToCoreLabels': {   'req_args': ['tree'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.getLeaf': {   'req_args': ['tree', 'i'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.getLowestCommonAncestor': {   'req_args': [   'nodes',
                                                         'root',
                                                         ['t1', 't2', 'root']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.getPreTerminal': {   'req_args': ['tree', 'n'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.getTerminal': {   'req_args': ['tree', 'n'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.height': {   'req_args': ['t'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.leafLabels': {   'req_args': ['t'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.leaves': {   'req_args': ['t'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.leftEdge': {   'req_args': ['t', 'root'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.leftEdgeUnsafe': {   'req_args': ['t', 'root'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.lexicalize': {   'req_args': ['t', 'hf'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.localTreeAsCatList': {   'req_args': ['t'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.main': {   'req_args': ['args'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.maximalProjection': {   'req_args': ['head', 'root', 'hf'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.normalizeTree': {   'req_args': ['tree', 'tn', 'tf'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.objectEqualityIndexOf': {   'req_args': ['parent', 'daughter'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.outputTreeLabels': {   'req_args': ['tree'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.pathFromRoot': {   'req_args': ['t', 'root'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.pathNodeToNode': {   'req_args': ['from', 'to', 'root'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.preTerminals': {   'req_args': ['t'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.readTree': {   'req_args': ['ptbTreeString', 'treeFactory', ['str']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.replaceNode': {   'req_args': ['node', 'node1', 't'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.rightEdge': {   'req_args': ['t', 'root'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.rightEdgeUnsafe': {   'req_args': ['t', 'root'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.setLeafLabels': {   'req_args': ['tree', 'labels'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.setLeafTagsIfUnset': {   'req_args': ['tree'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.setSentIndex': {   'req_args': ['tree', 'sentIndex'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.taggedLeafLabels': {   'req_args': ['t'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.toFlatTree': {   'req_args': ['s', ['s', 'lf']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.toStructureDebugString': {   'req_args': ['t'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.treeToLatex': {   'req_args': ['t'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'Trees.treeToLatexEven': {   'req_args': ['t'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\Trees.java'},
    'TregexGUI': {   'req_args': ['props', 'initialFiles'],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.about': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.actionPerformed': {   'req_args': ['e'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.doClearFileList': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.doQuit': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.getInstance': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.isMacOSX': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.isTdiffEnabled': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.main': {   'req_args': ['args'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.matchesChanged': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.setSaveEnabled': {   'req_args': ['enabled'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.setSaveHistoryEnabled': {   'req_args': ['enabled'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexGUI.setTsurgeonEnabled': {   'req_args': ['enabled'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\gui\\TregexGUI.java'},
    'TregexMatcher': {   'req_args': [   'root',
                                         'tree',
                                         'nodesToParents',
                                         'namesToNodes',
                                         'variableStrings',
                                         'headFinder'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.find': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.findAt': {   'req_args': ['node'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.findNextMatchingNode': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.getHeadFinder': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.getMatch': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.getNode': {   'req_args': ['name'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.getNodeNames': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.getVariableString': {   'req_args': ['var'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.matches': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.matchesAt': {   'req_args': ['node'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexMatcher.reset': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexMatcher.java'},
    'TregexParseException': {   'req_args': ['message', 'cause'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParseException.java'},
    'TregexParser': {   'req_args': [   'stream',
                                        'basicCatFunction',
                                        'headFinder',
                                        ['stream'],
                                        ['stream', 'encoding'],
                                        ['stream'],
                                        ['tm']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.Child': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.ChildrenConj': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.ChildrenDisj': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.Description': {   'req_args': ['r', 'negateDesc', 'cat'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.ModChild': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.ModDescription': {   'req_args': ['r'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.Node': {   'req_args': ['r'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.ReInit': {   'req_args': [   'stream',
                                               ['stream', 'encoding'],
                                               ['stream'],
                                               ['tm']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.Relation': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.Root': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.SubNode': {   'req_args': ['r'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.disable_tracing': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.enable_tracing': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.generateParseException': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.getNextToken': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.getToken': {   'req_args': ['index'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParser.trace_enabled': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParser.java'},
    'TregexParserTokenManager': {   'req_args': [   'stream',
                                                    ['stream', 'lexState']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParserTokenManager.java'},
    'TregexParserTokenManager.ReInit': {   'req_args': [   'stream',
                                                           [   'stream',
                                                               'lexState']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParserTokenManager.java'},
    'TregexParserTokenManager.SwitchTo': {   'req_args': ['lexState'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParserTokenManager.java'},
    'TregexParserTokenManager.getNextToken': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParserTokenManager.java'},
    'TregexParserTokenManager.setDebugStream': {   'req_args': ['ds'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexParserTokenManager.java'},
    'TregexPattern': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.compile': {   'req_args': ['tregex'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.main': {   'req_args': ['args'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.matcher': {   'req_args': ['t', ['t', 'headFinder']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.pattern': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.prettyPrint': {   'req_args': ['pw', ['ps'], []],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.safeCompile': {   'req_args': ['tregex', 'verbose'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPattern.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPattern.java'},
    'TregexPatternCompiler': {   'req_args': [   ['basicCatFunction'],
                                                 ['headFinder'],
                                                 [   'headFinder',
                                                     'basicCatFunction']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPatternCompiler.java'},
    'TregexPatternCompiler.addMacro': {   'req_args': [   'original',
                                                          'replacement'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPatternCompiler.java'},
    'TregexPatternCompiler.compile': {   'req_args': ['tregex'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\TregexPatternCompiler.java'},
    'TregexPoweredTreebankParserParams': {   'req_args': ['tlp'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TregexPoweredTreebankParserParams.java'},
    'TregexPoweredTreebankParserParams.display': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TregexPoweredTreebankParserParams.java'},
    'TregexPoweredTreebankParserParams.transformTree': {   'req_args': [   't',
                                                                           'root'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TregexPoweredTreebankParserParams.java'},
    'TrieMap': {   'req_args': [['initialCapacity']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.clear': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.containsKey': {   'req_args': ['key'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.containsValue': {   'req_args': ['value'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.entrySet': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.get': {   'req_args': ['key', ['key'], ['key']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.getChildTrie': {   'req_args': ['key', ['key']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.getChildren': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.getValue': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.isEmpty': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.isLeaf': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.keySet': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.put': {   'req_args': ['key', 'value', ['key', 'value']],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.putAll': {   'req_args': ['m'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.putChildTrie': {   'req_args': ['key', 'child'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.remove': {   'req_args': ['key', ['key'], ['key']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.size': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.toFormattedString': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMap.values': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMap.java'},
    'TrieMapMatcher': {   'req_args': ['root', ['root', 'multimatchDelimiter']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.defaultCost': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.findAllMatches': {   'req_args': [   'list',
                                                         ['list'],
                                                         [   'list',
                                                             'start',
                                                             'end']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.findClosestMatches': {   'req_args': [   'target',
                                                             'n',
                                                             [   'target',
                                                                 'n',
                                                                 'multimatch',
                                                                 'keepAlignments'],
                                                             [   'target',
                                                                 'costFunction',
                                                                 'maxCost',
                                                                 'n',
                                                                 'multimatch',
                                                                 'keepAlignments'],
                                                             ['target', 'n'],
                                                             [   'target',
                                                                 'n',
                                                                 'multimatch',
                                                                 'keepAlignments'],
                                                             [   'target',
                                                                 'costFunction',
                                                                 'maxCost',
                                                                 'n',
                                                                 'multimatch',
                                                                 'keepAlignments']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.findNonOverlapping': {   'req_args': [   'list',
                                                             ['list'],
                                                             [   'list',
                                                                 'start',
                                                                 'end'],
                                                             [   'list',
                                                                 'start',
                                                                 'end',
                                                                 'compareFunc'],
                                                             [   'list',
                                                                 'start',
                                                                 'end',
                                                                 'scoreFunc']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.getNonOverlapping': {   'req_args': [   'allMatches',
                                                            [   'allMatches',
                                                                'compareFunc'],
                                                            [   'allMatches',
                                                                'scoreFunc']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.partialMatchComparator': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapMatcher.segment': {   'req_args': [   'list',
                                                  ['list'],
                                                  ['list', 'start', 'end'],
                                                  [   'list',
                                                      'start',
                                                      'end',
                                                      'compareFunc'],
                                                  [   'list',
                                                      'start',
                                                      'end',
                                                      'scoreFunc'],
                                                  ['list', 'scoreFunc']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapMatcher.java'},
    'TrieMapUtils.collectionValuedTrieMap': {   'req_args': [   [   'collectionFactory']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapUtils.java'},
    'TrieMapUtils.trieMapCounter': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapUtils.java'},
    'TrieMapUtils.trieMapFactory': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\matcher\\TrieMapUtils.java'},
    'TrigramSieve': {   'req_args': [   'doc',
                                        'characterMap',
                                        'pronounCorefMap',
                                        'animacySet'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\TrigramSieve.java'},
    'TrigramSieve.doQuoteToMention': {   'req_args': ['doc'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\TrigramSieve.java'},
    'TrigramSieve.trigramPatterns': {   'req_args': ['doc'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\TrigramSieve.java'},
    'Trilean': {   'req_args': ['isTrue', 'isFalse', ['other']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.and': {   'req_args': ['other'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.equals': {   'req_args': ['other'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.from': {   'req_args': ['bool'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.fromString': {   'req_args': ['value'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.hashCode': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.isFalse': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.isKnown': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.isTrue': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.isUnknown': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.not': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.or': {   'req_args': ['other'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.toBoolean': {   'req_args': ['valueForUnknown'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.toBooleanOrNull': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Trilean.toString': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Trilean.java'},
    'Triple': {   'req_args': ['first', 'second', 'third'],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.asList': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.compareTo': {   'req_args': ['another'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.equals': {   'req_args': ['o'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.first': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.hashCode': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.makeTriple': {   'req_args': ['x', 'y', 'z'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.prettyLog': {   'req_args': ['channels', 'description'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.second': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.setFirst': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.setSecond': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.setThird': {   'req_args': ['o'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.third': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'Triple.toString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\Triple.java'},
    'TrueCaseAnnotator': {   'req_args': [   ['verbose'],
                                             ['properties'],
                                             [   'modelLoc',
                                                 'classBias',
                                                 'mixedCaseFileName',
                                                 'overwriteText',
                                                 'verbose']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TrueCaseAnnotator.java'},
    'TrueCaseAnnotator.annotate': {   'req_args': ['annotation'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TrueCaseAnnotator.java'},
    'TrueCaseAnnotator.requirementsSatisfied': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TrueCaseAnnotator.java'},
    'TrueCaseAnnotator.requires': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\TrueCaseAnnotator.java'},
    'TrueCasingForNISTDocumentReaderAndWriter.getIterator': {   'req_args': [   'r'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\TrueCasingForNISTDocumentReaderAndWriter.java'},
    'TrueCasingForNISTDocumentReaderAndWriter.init': {   'req_args': ['flags'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\TrueCasingForNISTDocumentReaderAndWriter.java'},
    'TrueCasingForNISTDocumentReaderAndWriter.known': {   'req_args': ['s'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\TrueCasingForNISTDocumentReaderAndWriter.java'},
    'TrueCasingForNISTDocumentReaderAndWriter.main': {   'req_args': ['args'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\TrueCasingForNISTDocumentReaderAndWriter.java'},
    'TrueCasingForNISTDocumentReaderAndWriter.printAnswers': {   'req_args': [   'doc',
                                                                                 'out'],
                                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\TrueCasingForNISTDocumentReaderAndWriter.java'},
    'TsarfatyEval': {   'req_args': ['str', 'tags'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TsarfatyEval.java'},
    'TsarfatyEval.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\TsarfatyEval.java'},
    'Tsurgeon': {   'req_args': [],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.collectOperations': {   'req_args': ['patterns'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getOperationFromReader': {   'req_args': ['reader', 'compiler'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getOperationsFromFile': {   'req_args': [   'filename',
                                                          'encoding',
                                                          'compiler'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getOperationsFromReader': {   'req_args': ['reader', 'compiler'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getTregexPatternFromReader': {   'req_args': ['reader'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getTsurgeonOperationsFromReader': {   'req_args': ['reader'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.getTsurgeonTextFromReader': {   'req_args': ['reader'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.parseOperation': {   'req_args': ['operationString'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.processPattern': {   'req_args': ['matchPattern', 'p', 't'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.processPatternOnTrees': {   'req_args': [   'matchPattern',
                                                          'p',
                                                          'inputTrees'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'Tsurgeon.processPatternsOnTree': {   'req_args': ['ops', 't'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\Tsurgeon.java'},
    'TsurgeonMatcher': {   'req_args': ['pattern', 'newNodeNames', 'coindexer'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonMatcher.java'},
    'TsurgeonMatcher.evaluate': {   'req_args': ['tree', 'tregex'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonMatcher.java'},
    'TsurgeonParseException': {   'req_args': ['message', ['message', 'cause']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParseException.java'},
    'TsurgeonParser': {   'req_args': [   'stream',
                                          ['stream', 'encoding'],
                                          ['stream'],
                                          ['tm']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.Location': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.NodeName': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.NodeSelection': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.NodeSelectionList': {   'req_args': ['l'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.Operation': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.ReInit': {   'req_args': [   'stream',
                                                 ['stream', 'encoding'],
                                                 ['stream'],
                                                 ['tm']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.Root': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.TreeDtrs': {   'req_args': ['dtrs'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.TreeList': {   'req_args': ['requiresFoot'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.TreeNode': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.TreeRoot': {   'req_args': ['requiresFoot'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.disable_tracing': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.enable_tracing': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.generateParseException': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.getNextToken': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.getToken': {   'req_args': ['index'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParser.trace_enabled': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParser.java'},
    'TsurgeonParserTokenManager': {   'req_args': [   'stream',
                                                      ['stream', 'lexState']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParserTokenManager.java'},
    'TsurgeonParserTokenManager.ReInit': {   'req_args': [   'stream',
                                                             [   'stream',
                                                                 'lexState']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParserTokenManager.java'},
    'TsurgeonParserTokenManager.SwitchTo': {   'req_args': ['lexState'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParserTokenManager.java'},
    'TsurgeonParserTokenManager.getNextToken': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParserTokenManager.java'},
    'TsurgeonParserTokenManager.setDebugStream': {   'req_args': ['ds'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonParserTokenManager.java'},
    'TsurgeonPattern': {   'req_args': ['label', 'children'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonPattern.java'},
    'TsurgeonPattern.matcher': {   'req_args': [['newNodeNames', 'coindexer']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonPattern.java'},
    'TsurgeonPattern.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonPattern.java'},
    'TsurgeonPatternRoot': {   'req_args': ['child', ['children']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonPatternRoot.java'},
    'TsurgeonPatternRoot.matcher': {   'req_args': [   [   'newNodeNames',
                                                           'coindexer']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonPatternRoot.java'},
    'TsurgeonRuntimeException': {   'req_args': ['message'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\tsurgeon\\TsurgeonRuntimeException.java'},
    'TueBaDZHeadFinder': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZHeadFinder.java'},
    'TueBaDZHeadFinder.basicCategory': {   'req_args': ['category'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZHeadFinder.java'},
    'TueBaDZHeadFinder.isLabelAnnotationIntroducingCharacter': {   'req_args': [   'ch'],
                                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZHeadFinder.java'},
    'TueBaDZLanguagePack': {   'req_args': [   ['leaveGF'],
                                               ['leaveGF', 'gfChar'],
                                               [   'useLimitedGF',
                                                   'leaveGF',
                                                   'gfChar']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.basicCategory': {   'req_args': ['category'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.getEncoding': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.headFinder': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.isLeaveGF': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.isLimitedGF': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.labelAnnotationIntroducingCharacters': {   'req_args': [   ],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.punctuationTags': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.punctuationWords': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.sentenceFinalPunctuationTags': {   'req_args': [],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.sentenceFinalPunctuationWords': {   'req_args': [],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.setLeaveGF': {   'req_args': ['leaveGF'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.setLimitedGF': {   'req_args': ['limitedGF'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.startSymbols': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.stripGF': {   'req_args': ['category'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.treeReaderFactory': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.treebankFileExtension': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZLanguagePack.typedDependencyHeadFinder': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZLanguagePack.java'},
    'TueBaDZParserParams': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.collinizer': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.collinizerEvalb': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.defaultTestSentence': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.diskTreebank': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.display': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.headFinder': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.lex': {   'req_args': ['op', 'wordIndex', 'tagIndex'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.memoryTreebank': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.setOptionFlag': {   'req_args': ['args', 'i'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.sisterSplitters': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.transformTree': {   'req_args': ['t', 'root'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.treeReaderFactory': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZParserParams.typedDependencyHeadFinder': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TueBaDZParserParams.java'},
    'TueBaDZPennTreeNormalizer': {   'req_args': [   'tlp',
                                                     'nodeCleanup',
                                                     [   'tlp',
                                                         'nodeCleanup',
                                                         'tns']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZPennTreeNormalizer.java'},
    'TueBaDZPennTreeNormalizer.normalizeNonterminal': {   'req_args': [   'category'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZPennTreeNormalizer.java'},
    'TueBaDZPennTreeNormalizer.normalizeTerminal': {   'req_args': ['leaf'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZPennTreeNormalizer.java'},
    'TueBaDZPennTreeNormalizer.normalizeWholeTree': {   'req_args': [   'tree',
                                                                        'tf'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZPennTreeNormalizer.java'},
    'TueBaDZPennTreeNormalizer.rootSymbol': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZPennTreeNormalizer.java'},
    'TueBaDZTreeReaderFactory': {   'req_args': ['tlp', ['tlp', 'nodeCleanup']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZTreeReaderFactory.java'},
    'TueBaDZTreeReaderFactory.newTreeReader': {   'req_args': ['in'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\tuebadz\\TueBaDZTreeReaderFactory.java'},
    'TwinScorer': {   'req_args': ['scorer1', 'scorer2'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwinScorer.iPossible': {   'req_args': ['hook'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwinScorer.iScore': {   'req_args': ['edge'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwinScorer.oPossible': {   'req_args': ['hook'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwinScorer.oScore': {   'req_args': ['edge'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwinScorer.parse': {   'req_args': ['words'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\TwinScorer.java'},
    'TwoDimensionalCollectionValuedMap': {   'req_args': [   [   'treatCollectionsAsImmutable'],
                                                             ['cf'],
                                                             ['mf', 'cf'],
                                                             [   'mf',
                                                                 'cf',
                                                                 'treatCollectionsAsImmutable']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.add': {   'req_args': [   'key1',
                                                                 'key2',
                                                                 'value',
                                                                 [   'key1',
                                                                     'key2',
                                                                     'value']],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.addKey': {   'req_args': ['key1'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.clear': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.containsKey': {   'req_args': ['key'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.entrySet': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.firstKeySet': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.get': {   'req_args': ['key1', 'key2'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.getCollectionValuedMap': {   'req_args': [   'key1'],
                                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.keySet': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.putAll': {   'req_args': ['toAdd'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.retainAll': {   'req_args': ['keys'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.secondKeySet': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.toString': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCollectionValuedMap.values': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalCollectionValuedMap.java'},
    'TwoDimensionalCounter': {   'req_args': [['outerFactory', 'innerFactory']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.addAll': {   'req_args': ['c', ['key', 'c']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.clean': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.clear': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.containsFirstKey': {   'req_args': ['o1'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.containsKey': {   'req_args': ['o1', 'o2'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.decrementCount': {   'req_args': [   'o1',
                                                                'o2',
                                                                [   'o1',
                                                                    'o2',
                                                                    'count']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.defaultReturnValue': {   'req_args': ['rv', []],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.entrySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.equals': {   'req_args': ['o'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.firstKeySet': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.flatten': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.getCount': {   'req_args': ['o1', 'o2'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.getCounter': {   'req_args': ['o'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.getInnerMapFactory': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.getOuterMapFactory': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.hashCode': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.identityHashMapCounter': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.incrementCount': {   'req_args': [   'o1',
                                                                'o2',
                                                                [   'o1',
                                                                    'o2',
                                                                    'count']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.isEmpty': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.main': {   'req_args': ['args'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.recomputeTotal': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.remove': {   'req_args': ['o1', 'o2', ['key']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.removeZeroCounts': {   'req_args': [],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.reverseIndexOrder': {   'req_args': ['cc'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.secondKeySet': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.setCount': {   'req_args': ['o1', 'o2', 'count'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.setCounter': {   'req_args': ['o', 'c'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.size': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.sizeOuterMap': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.subtractAll': {   'req_args': [   'key',
                                                             'c',
                                                             [   'c',
                                                                 'removeKeys']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.sumInnerCounter': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.toCSVString': {   'req_args': ['nf'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.toMatrix': {   'req_args': [   'firstKeys',
                                                          'secondKeys'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.toMatrixString': {   'req_args': [   'cellSize',
                                                                [   'cellSize',
                                                                    'nf']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.toString': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalCounter.totalCount': {   'req_args': [['k1']],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalCounter.java'},
    'TwoDimensionalIntCounter': {   'req_args': [   ['initialCapacity'],
                                                    [   'outerFactory',
                                                        'innerFactory'],
                                                    [   'outerFactory',
                                                        'innerFactory',
                                                        'initialCapacity']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.addAll': {   'req_args': ['c', ['key', 'c']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.clean': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.containsKey': {   'req_args': ['o1', 'o2'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.decrementCount': {   'req_args': [   'o1',
                                                                   'o2',
                                                                   [   'o1',
                                                                       'o2',
                                                                       'count'],
                                                                   [   'o1',
                                                                       'o2',
                                                                       'count']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.defaultReturnValue': {   'req_args': [   'rv',
                                                                       ['rv'],
                                                                       []],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.entrySet': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.equals': {   'req_args': ['o'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.firstKeySet': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.flatten': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.getCount': {   'req_args': ['o1', 'o2'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.getCounter': {   'req_args': ['o'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.getInnerMapFactory': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.getOuterMapFactory': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.hashCode': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.incrementCount': {   'req_args': [   'o1',
                                                                   'o2',
                                                                   [   'o1',
                                                                       'o2',
                                                                       'count'],
                                                                   [   'o1',
                                                                       'o2',
                                                                       'count']],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.isEmpty': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.remove': {   'req_args': ['o1', 'o2', ['key']],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.removeZeroCounts': {   'req_args': [],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.reverseIndexOrder': {   'req_args': ['cc'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.secondKeySet': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.setCount': {   'req_args': [   'o1',
                                                             'o2',
                                                             'count',
                                                             [   'o1',
                                                                 'o2',
                                                                 'count']],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.setCounter': {   'req_args': ['o', 'c'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.size': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.subtractAll': {   'req_args': [   'key',
                                                                'c',
                                                                [   'c',
                                                                    'removeKeys']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.toCSVString': {   'req_args': [   'nf',
                                                                [   'counter',
                                                                    'nf',
                                                                    'key1Comparator',
                                                                    'key2Comparator']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.toMatrix': {   'req_args': [   'firstKeys',
                                                             'secondKeys'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.toMatrixString': {   'req_args': ['cellSize'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.toString': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.totalCount': {   'req_args': [['k1']],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalIntCounter.totalCounts': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\stats\\TwoDimensionalIntCounter.java'},
    'TwoDimensionalMap': {   'req_args': [['tdm'], ['mf1', 'mf2']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.addAll': {   'req_args': ['other', 'function'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.clear': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.contains': {   'req_args': ['key1', 'key2'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.containsKey': {   'req_args': ['key1'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.equals': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.firstKeySet': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.get': {   'req_args': ['key1', 'key2', ['key1']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.getMap': {   'req_args': ['key1'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.hashMap': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.identityHashMap': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.isEmpty': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.iterator': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.put': {   'req_args': [   'key1',
                                                 'key2',
                                                 'value',
                                                 ['key1']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.remove': {   'req_args': ['key1', 'key2', ['key1']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.replaceAll': {   'req_args': ['f'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.secondKeySet': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.size': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.toString': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.transform': {   'req_args': ['function'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.treeMap': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.valueIterator': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalMap.values': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalMap.java'},
    'TwoDimensionalSet': {   'req_args': [['backingMap']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.add': {   'req_args': ['k1', 'k2'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.addAll': {   'req_args': ['set'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.addAllKeys': {   'req_args': ['map'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.clear': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.contains': {   'req_args': ['k1', 'k2'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.containsAll': {   'req_args': ['set'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.equals': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.firstKeySet': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.hashSet': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.isEmpty': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.iterator': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.remove': {   'req_args': ['k1', 'k2'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.removeAll': {   'req_args': ['set'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.secondKeySet': {   'req_args': ['k1'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.size': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TwoDimensionalSet.treeSet': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\TwoDimensionalSet.java'},
    'TypedDependency': {   'req_args': ['reln', 'gov', 'dep', ['other']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.compareTo': {   'req_args': ['tdArg'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.dep': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.extra': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.gov': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.reln': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.setDep': {   'req_args': ['dep'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.setExtra': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.setGov': {   'req_args': ['gov'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.setReln': {   'req_args': ['reln'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'TypedDependency.toString': {   'req_args': [['format']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\TypedDependency.java'},
    'UDFeatureAnnotator': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\UDFeatureAnnotator.java'},
    'UDFeatureAnnotator.requirementsSatisfied': {   'req_args': [],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\UDFeatureAnnotator.java'},
    'UDFeatureAnnotator.requires': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\UDFeatureAnnotator.java'},
    'UNKPrinter.main': {   'req_args': ['args'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\eval\\UNKPrinter.java'},
    'UTF8EquivalenceFunction.apply': {   'req_args': ['input'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UTF8EquivalenceFunction.java'},
    'UTF8EquivalenceFunction.replaceAscii': {   'req_args': ['w'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UTF8EquivalenceFunction.java'},
    'UnaryGrammar': {   'req_args': ['stateIndex'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.addRule': {   'req_args': ['ur'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.closedRuleIterator': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.closedRuleIteratorByChild': {   'req_args': ['state'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.closedRuleIteratorByParent': {   'req_args': ['state'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.closedRulesByChild': {   'req_args': ['state'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.closedRulesByParent': {   'req_args': ['state'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.getRule': {   'req_args': ['ur'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.iterator': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.numClosedRules': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.numRules': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.purgeRules': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.readData': {   'req_args': ['in'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.ruleIterator': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.ruleIteratorByChild': {   'req_args': ['state'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.ruleIteratorByParent': {   'req_args': ['state'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.rules': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.rulesByChild': {   'req_args': ['state'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.rulesByParent': {   'req_args': ['state'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.rulesWithParent': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.scoreRule': {   'req_args': ['ur'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.toString': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.writeAllData': {   'req_args': ['w'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryGrammar.writeData': {   'req_args': ['w'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryGrammar.java'},
    'UnaryRule': {   'req_args': [   'parent',
                                     'child',
                                     ['parent', 'child', 'score'],
                                     ['s', 'index']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.compareTo': {   'req_args': ['ur'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.equals': {   'req_args': ['o'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.parent': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.score': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.toString': {   'req_args': [['index']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryRule.toStringNoScore': {   'req_args': ['index'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnaryRule.java'},
    'UnaryTransition': {   'req_args': ['label', 'isRoot'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UnaryTransition.apply': {   'req_args': ['state', ['state', 'scoreDelta']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UnaryTransition.equals': {   'req_args': ['o'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UnaryTransition.hashCode': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UnaryTransition.isLegal': {   'req_args': ['state', 'constraints'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UnaryTransition.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\UnaryTransition.java'},
    'UniformPrior': {   'req_args': ['backgroundSymbol', 'classIndex', 'doc'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.getPossibleValues': {   'req_args': ['position'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.leftWindow': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.length': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.rightWindow': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.scoreOf': {   'req_args': [   'sequence',
                                                ['sequence', 'position']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.scoresOf': {   'req_args': ['sequence', 'position'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.setInitialSequence': {   'req_args': ['sequence'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPrior.updateSequenceElement': {   'req_args': [   'sequence',
                                                              'pos',
                                                              'oldVal'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPrior.java'},
    'UniformPriorFactory.getInstance': {   'req_args': [   'backgroundSymbol',
                                                           'classIndex',
                                                           'tagIndex',
                                                           'document',
                                                           'entityMatrices',
                                                           'flags'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\UniformPriorFactory.java'},
    'Unit': {   'req_args': [   'name',
                                'symbol',
                                'type',
                                [   'name',
                                    'symbol',
                                    'type',
                                    'defaultUnit',
                                    'defaultUnitScale']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.format': {   'req_args': ['amount'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.formatInDefaultUnit': {   'req_args': ['amount'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.getDefaultUnit': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.getDefaultUnitScale': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.getName': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.getSymbol': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.getType': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.setDefaultUnit': {   'req_args': ['defaultUnit'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.setDefaultUnitScale': {   'req_args': ['defaultUnitScale'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.setName': {   'req_args': ['name'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.setSymbol': {   'req_args': ['symbol'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'Unit.setType': {   'req_args': ['type'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Unit.java'},
    'UnitPrefix': {   'req_args': ['name', 'symbol', 'scale', 'system'],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.getName': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.getScale': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.getSymbol': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.loadPrefixes': {   'req_args': ['filename'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.registerPrefix': {   'req_args': ['env', 'prefix'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.registerPrefixes': {   'req_args': [   'env',
                                                       'filename',
                                                       ['env', 'prefixes']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.setName': {   'req_args': ['name'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.setScale': {   'req_args': ['scale', ['scale']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'UnitPrefix.setSymbol': {   'req_args': ['symbol'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\UnitPrefix.java'},
    'Units.loadUnits': {   'req_args': ['filename'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Units.java'},
    'Units.registerDerivedUnit': {   'req_args': [   'env',
                                                     'clazz',
                                                     'derivedType',
                                                     'suffix',
                                                     'symbolSuffix',
                                                     [   'env',
                                                         'unit',
                                                         'derivedType',
                                                         'suffix',
                                                         'symbolSuffix']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Units.java'},
    'Units.registerUnit': {   'req_args': ['env', 'clazz', ['env', 'unit']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Units.java'},
    'Units.registerUnits': {   'req_args': [   'env',
                                               'filename',
                                               ['env', 'units']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ie\\qe\\Units.java'},
    'UniversalChineseGrammaticalRelations': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalRelations.java'},
    'UniversalChineseGrammaticalRelations.main': {   'req_args': ['args'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalRelations.java'},
    'UniversalChineseGrammaticalRelations.valueOf': {   'req_args': ['s'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalRelations.java'},
    'UniversalChineseGrammaticalRelations.values': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalRelations.java'},
    'UniversalChineseGrammaticalRelations.valuesLock': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalRelations.java'},
    'UniversalChineseGrammaticalStructure': {   'req_args': [   't',
                                                                [   't',
                                                                    'puncFilter'],
                                                                ['t', 'hf'],
                                                                [   't',
                                                                    'puncFilter',
                                                                    'hf'],
                                                                [   'projectiveDependencies',
                                                                    'root']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructure.java'},
    'UniversalChineseGrammaticalStructure.buildCoNLLXGrammaticalStructure': {   'req_args': [   'tokenFields'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructure.java'},
    'UniversalChineseGrammaticalStructure.main': {   'req_args': ['args'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructure.java'},
    'UniversalChineseGrammaticalStructure.readCoNLLXGrammaticalStructureCollection': {   'req_args': [   'fileName'],
                                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructure.java'},
    'UniversalChineseGrammaticalStructureFactory': {   'req_args': [   [   'puncFilter'],
                                                                       [   'puncFilter',
                                                                           'hf']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructureFactory.java'},
    'UniversalChineseGrammaticalStructureFactory.newGrammaticalStructure': {   'req_args': [   't'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseGrammaticalStructureFactory.java'},
    'UniversalChineseSemanticHeadFinder': {   'req_args': [['tlp']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\international\\pennchinese\\UniversalChineseSemanticHeadFinder.java'},
    'UniversalDependenciesConverter': {   'req_args': [],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesConverter.java'},
    'UniversalDependenciesConverter.main': {   'req_args': ['args'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesConverter.java'},
    'UniversalDependenciesFeatureAnnotator': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesFeatureAnnotator.java'},
    'UniversalDependenciesFeatureAnnotator.addFeatures': {   'req_args': [   'sg',
                                                                             'tree',
                                                                             'addLemma',
                                                                             'addUPOS'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesFeatureAnnotator.java'},
    'UniversalDependenciesFeatureAnnotator.help': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesFeatureAnnotator.java'},
    'UniversalDependenciesFeatureAnnotator.main': {   'req_args': ['args'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalDependenciesFeatureAnnotator.java'},
    'UniversalEnglishGrammaticalRelations': {   'req_args': [],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getAcl': {   'req_args': [   'aclString'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getAcls': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getAdvcl': {   'req_args': [   'advclString'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getAdvcls': {   'req_args': [],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getConj': {   'req_args': [   'conjunctionString'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getConjs': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getNmod': {   'req_args': [   'prepositionString'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getNmods': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getObl': {   'req_args': [   'prepositionString'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.getObls': {   'req_args': [],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.main': {   'req_args': ['args'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.threadSafeAddRelation': {   'req_args': [   'relation'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.valueOf': {   'req_args': [   's',
                                                                        ['o']],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.values': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalRelations.valuesLock': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalRelations.java'},
    'UniversalEnglishGrammaticalStructure': {   'req_args': [   't',
                                                                [   't',
                                                                    'tagFilter'],
                                                                [   't',
                                                                    'tagFilter',
                                                                    'hf'],
                                                                [   'projectiveDependencies',
                                                                    'root']],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructure.java'},
    'UniversalEnglishGrammaticalStructure.addEnhancements': {   'req_args': [   'sg',
                                                                                'options'],
                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructure.java'},
    'UniversalEnglishGrammaticalStructure.buildCoNLLXGrammaticalStructure': {   'req_args': [   'tokenFields'],
                                                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructure.java'},
    'UniversalEnglishGrammaticalStructure.readCoNLLXGrammaticalStructureCollection': {   'req_args': [   'fileName'],
                                                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructure.java'},
    'UniversalEnglishGrammaticalStructureFactory': {   'req_args': [   [   'puncFilter'],
                                                                       [   'puncFilter',
                                                                           'hf']],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructureFactory.java'},
    'UniversalEnglishGrammaticalStructureFactory.newGrammaticalStructure': {   'req_args': [   't'],
                                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalEnglishGrammaticalStructureFactory.java'},
    'UniversalEnhancer.copyEmptyNodes': {   'req_args': ['source', 'target'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalEnhancer.java'},
    'UniversalEnhancer.enhanceGraph': {   'req_args': [   'basic',
                                                          'originalEnhanced',
                                                          'keepEmptyNodes',
                                                          'embeddings',
                                                          'relativePronounsPattern'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalEnhancer.java'},
    'UniversalEnhancer.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalEnhancer.java'},
    'UniversalGappingEnhancer.addEnhancements': {   'req_args': [   'sg',
                                                                    'embeddingMatrix'],
                                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGappingEnhancer.java'},
    'UniversalGrammaticalRelations': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalRelations.getAcl': {   'req_args': ['subtype'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalRelations.getAdvcl': {   'req_args': ['subtype'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalRelations.getConj': {   'req_args': ['subtype'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalRelations.getNmod': {   'req_args': ['subtype'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalRelations.getObl': {   'req_args': ['subtype'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalRelations.java'},
    'UniversalGrammaticalStructure': {   'req_args': [   'projectiveDependencies',
                                                         'root'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.addCaseMarkerForConjunctions': {   'req_args': [   'sg'],
                                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.addCaseMarkerInformation': {   'req_args': [   'sg'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.addConjInformation': {   'req_args': ['sg'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.addExtraNSubj': {   'req_args': ['sg'],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.addRef': {   'req_args': [   'sg',
                                                                'relativizingWordPattern'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.collapseReferent': {   'req_args': ['sg'],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalGrammaticalStructure.propagateConjuncts': {   'req_args': ['sg'],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\ud\\UniversalGrammaticalStructure.java'},
    'UniversalPOSMapper': {   'req_args': [[]],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\UniversalPOSMapper.java'},
    'UniversalPOSMapper.load': {   'req_args': [['filename']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalPOSMapper.java'},
    'UniversalPOSMapper.map': {   'req_args': ['posTag', 'terminal'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\UniversalPOSMapper.java'},
    'UniversalPOSMapper.mapTree': {   'req_args': ['t'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalPOSMapper.java'},
    'UniversalPOSMapper.setup': {   'req_args': ['path', 'options'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\UniversalPOSMapper.java'},
    'UniversalSemanticHeadFinder': {   'req_args': [   ['noCopulaHead'],
                                                       ['tlp', 'noCopulaHead']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalSemanticHeadFinder.java'},
    'UniversalSemanticHeadFinder.isVerbalAuxiliary': {   'req_args': ['t'],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalSemanticHeadFinder.java'},
    'UniversalSemanticHeadFinder.makesCopulaHead': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UniversalSemanticHeadFinder.java'},
    'UnknownGTTrainer.finishTraining': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnknownGTTrainer.java'},
    'UnknownGTTrainer.train': {   'req_args': [   'trees',
                                                  ['trees', 'weight'],
                                                  ['tree', 'weight'],
                                                  ['tw', 'weight']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\lexparser\\UnknownGTTrainer.java'},
    'UnknownVertexException': {   'req_args': ['vertex', 'graph'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\UnknownVertexException.java'},
    'UnknownVertexException.toString': {   'req_args': [],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\UnknownVertexException.java'},
    'UnknownWordPrinter': {   'req_args': ['model'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\UnknownWordPrinter.java'},
    'UnknownWordPrinter.display': {   'req_args': [   'verbose',
                                                      ['verbose', 'pw']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\UnknownWordPrinter.java'},
    'UnknownWordPrinter.evaluate': {   'req_args': [   'guess',
                                                       'gold',
                                                       ['guess', 'gold', 'pw'],
                                                       [   'guess',
                                                           'gold',
                                                           'pw',
                                                           'weight']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\dvparser\\UnknownWordPrinter.java'},
    'UnlabeledAttachmentEval': {   'req_args': [   'str',
                                                   'runningAverages',
                                                   'headFinder',
                                                   [   'str',
                                                       'runningAverages',
                                                       'headFinder',
                                                       'punctRejectFilter']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\UnlabeledAttachmentEval.java'},
    'UnlabeledAttachmentEval.evaluate': {   'req_args': ['guess', 'gold', 'pw'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\UnlabeledAttachmentEval.java'},
    'UnlabeledAttachmentEval.main': {   'req_args': ['args'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\metrics\\UnlabeledAttachmentEval.java'},
    'UnnamedConcreteDependency': {   'req_args': [   'regent',
                                                     'regentIndex',
                                                     'dependent',
                                                     'dependentIndex',
                                                     [   'regent',
                                                         'regentIndex',
                                                         'dependent',
                                                         'dependentIndex'],
                                                     ['regent', 'dependent']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.dependencyFactory': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.equals': {   'req_args': ['o'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.factory': {   'req_args': [],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.getDependentIndex': {   'req_args': [],
                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.getGovernorIndex': {   'req_args': [],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.hashCode': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedConcreteDependency.toString': {   'req_args': [['format']],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedConcreteDependency.java'},
    'UnnamedDependency': {   'req_args': [   'regent',
                                             'dependent',
                                             ['regent', 'dependent']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.dependencyFactory': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.dependent': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.equals': {   'req_args': ['o'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.equalsIgnoreName': {   'req_args': ['o'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.factory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.governor': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.hashCode': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.name': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnnamedDependency.toString': {   'req_args': [['format']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\UnnamedDependency.java'},
    'UnorderedPair': {   'req_args': [['first', 'second']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UnorderedPair.java'},
    'UnorderedPair.compareTo': {   'req_args': ['o'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UnorderedPair.java'},
    'UnorderedPair.equals': {   'req_args': ['o'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UnorderedPair.java'},
    'UnorderedPair.hashCode': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UnorderedPair.java'},
    'UnorderedPair.toString': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\UnorderedPair.java'},
    'UnvocLexicalMapper.map': {   'req_args': ['parent', 'element'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\international\\arabic\\pipeline\\UnvocLexicalMapper.java'},
    'UpdateParserOptions.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\UpdateParserOptions.java'},
    'UselessTreeFilter.test': {   'req_args': ['tree'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\treebank\\UselessTreeFilter.java'},
    'Util': {   'req_args': [],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.annotate': {   'req_args': ['sentence', 'pipeline'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.cleanTree': {   'req_args': ['tree', 'originalTree'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.dumpAccuracy': {   'req_args': ['classifier', 'dataset'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.extractNER': {   'req_args': ['tokens', 'seed'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.generateDict': {   'req_args': ['str', 'cutOff', ['str']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.getRandomSubList': {   'req_args': ['input', 'subsetSize'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.guessNER': {   'req_args': ['tokens', 'span', ['tokens']],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.isCyclic': {   'req_args': ['tree'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.isTree': {   'req_args': ['tree'],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.loadConllFile': {   'req_args': [   'inFile',
                                              'sents',
                                              'trees',
                                              'unlabeled',
                                              'cPOS',
                                              ['inFile', 'sents', 'trees']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.nerOverlap': {   'req_args': [   'tokens',
                                           'a',
                                           'b',
                                           'parse',
                                           ['tokens', 'a', 'b']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.printTreeStats': {   'req_args': ['str', 'trees', ['trees']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.scaling': {   'req_args': ['A', 'rMean', 'rStd', ['A']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'Util.stripPrepCases': {   'req_args': ['tree', 'originalTree'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.tokensToSpan': {   'req_args': ['tokens'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.verifyRemoval': {   'req_args': [   'tree',
                                              'removeEdges',
                                              'toKeep',
                                              'dependent'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\naturalli\\Util.java'},
    'Util.writeConllFile': {   'req_args': ['outFile', 'sentences', 'trees'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\nndep\\Util.java'},
    'ValueFunctions': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\ValueFunctions.java'},
    'ValueFunctions.isInteger': {   'req_args': ['n'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\ValueFunctions.java'},
    'ValueFunctions.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\tokensregex\\types\\ValueFunctions.java'},
    'ValueLabel': {   'req_args': [],
                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.compareTo': {   'req_args': ['valueLabel'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.equals': {   'req_args': ['obj'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.hashCode': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.labelFactory': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.setFromString': {   'req_args': ['labelStr'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.setValue': {   'req_args': ['value'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.toString': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValueLabel.value': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\ValueLabel.java'},
    'ValuedInterval': {   'req_args': ['value', 'interval'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ValuedInterval.java'},
    'ValuedInterval.getInterval': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ValuedInterval.java'},
    'ValuedInterval.getValue': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\ValuedInterval.java'},
    'VariableStrings': {   'req_args': [[]],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\VariableStrings.java'},
    'VariableStrings.getString': {   'req_args': ['var', ['var']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\VariableStrings.java'},
    'VariableStrings.isSet': {   'req_args': ['o', ['o']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\VariableStrings.java'},
    'VariableStrings.reset': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\VariableStrings.java'},
    'VariableStrings.setVar': {   'req_args': [   'var',
                                                  'string',
                                                  ['var', 'string']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\VariableStrings.java'},
    'VariableStrings.toString': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\tregex\\VariableStrings.java'},
    'VariableStrings.unsetVar': {   'req_args': ['var', ['var']],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\semgraph\\semgrex\\VariableStrings.java'},
    'VectorMap': {   'req_args': [['vectors']],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.deserialize': {   'req_args': ['file', ['in']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.equals': {   'req_args': ['other'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.hashCode': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.readWord2Vec': {   'req_args': ['file'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.serialize': {   'req_args': ['file', ['out']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VectorMap.toString': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\neural\\VectorMap.java'},
    'VisibilityHandler': {   'req_args': [['channels']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.alsoHide': {   'req_args': ['filter'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.alsoShow': {   'req_args': ['filter'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.handle': {   'req_args': ['record'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.hideAll': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.showAll': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.signalEndTrack': {   'req_args': [   'newDepth',
                                                            'timeOfEnd'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'VisibilityHandler.signalStartTrack': {   'req_args': ['signal'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\logging\\VisibilityHandler.java'},
    'ViterbiSearchGraphBuilder.getGraph': {   'req_args': ['ts', 'classIndex'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\sequences\\ViterbiSearchGraphBuilder.java'},
    'VocabFrequency.main': {   'req_args': ['args'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\tools\\VocabFrequency.java'},
    'VocativeSieve': {   'req_args': [   'doc',
                                         'characterMap',
                                         'pronounCorefMap',
                                         'animacySet'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\VocativeSieve.java'},
    'VocativeSieve.doQuoteToMention': {   'req_args': ['doc'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\VocativeSieve.java'},
    'VocativeSieve.vocativeQuoteToMention': {   'req_args': ['doc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\Sieves\\QMSieves\\VocativeSieve.java'},
    'WebServiceAnnotator.annotate': {   'req_args': ['annotation'],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WebServiceAnnotator.java'},
    'WebServiceAnnotator.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WebServiceAnnotator.java'},
    'WebServiceAnnotator.unmount': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WebServiceAnnotator.java'},
    'Weight': {   'req_args': [['other']],
                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.addScaled': {   'req_args': ['other', 'scale'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.getScore': {   'req_args': ['index'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.score': {   'req_args': ['scores'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.size': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.toString': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'Weight.updateWeight': {   'req_args': ['index', 'increment'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\Weight.java'},
    'WeightMap.containsKey': {   'req_args': ['key'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightMap.entrySet': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightMap.get': {   'req_args': ['key'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightMap.keySet': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightMap.put': {   'req_args': ['key', 'weight'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightMap.size': {   'req_args': [],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\parser\\shiftreduce\\WeightMap.java'},
    'WeightedDataset': {   'req_args': [   'labelIndex',
                                           'labels',
                                           'featureIndex',
                                           'data',
                                           'size',
                                           'weights',
                                           [],
                                           ['initSize']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.add': {   'req_args': [   'd',
                                               ['features', 'label'],
                                               ['d', 'weight'],
                                               ['features', 'label', 'weight']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.getFeatureCounts': {   'req_args': [],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.getWeights': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.randomize': {   'req_args': ['randomSeed'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.setWeight': {   'req_args': ['i', 'weight'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedDataset.shuffleWithSideInformation': {   'req_args': [   'randomSeed',
                                                                      'sideInformation'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedDataset.java'},
    'WeightedRVFDataset': {   'req_args': [   [   'labelIndex',
                                                  'trainLabels',
                                                  'featureIndex',
                                                  'trainData',
                                                  'trainValues',
                                                  'trainWeights']],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedRVFDataset.java'},
    'WeightedRVFDataset.add': {   'req_args': [   'd',
                                                  'weight',
                                                  ['d'],
                                                  ['d', 'src', 'id']],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedRVFDataset.java'},
    'WeightedRVFDataset.getWeights': {   'req_args': [],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\classify\\WeightedRVFDataset.java'},
    'WhitespaceLexer': {   'req_args': ['r', 'tf', ['in']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.next': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yyatEOF': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yybegin': {   'req_args': ['newState'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yycharat': {   'req_args': ['position'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yyclose': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yylength': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yypushback': {   'req_args': ['number'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yyreset': {   'req_args': ['reader'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yystate': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceLexer.yytext': {   'req_args': [],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceLexer.java'},
    'WhitespaceTokenizer': {   'req_args': ['factory', 'r', 'eolIsSignificant'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WhitespaceTokenizer.factory': {   'req_args': [['eolIsSignificant']],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WhitespaceTokenizer.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WhitespaceTokenizer.newCoreLabelTokenizerFactory': {   'req_args': [   'options',
                                                                            []],
                                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WhitespaceTokenizer.newCoreLabelWhitespaceTokenizer': {   'req_args': [   'r',
                                                                               [   'r',
                                                                                   'tokenizeNLs']],
                                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WhitespaceTokenizer.newWordWhitespaceTokenizer': {   'req_args': [   'r',
                                                                          [   'r',
                                                                              'eolIsSignificant']],
                                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WhitespaceTokenizer.java'},
    'WikidictAnnotator': {   'req_args': ['name', 'properties', ['properties']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'WikidictAnnotator.link': {   'req_args': ['mention'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'WikidictAnnotator.main': {   'req_args': ['args'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'WikidictAnnotator.normalizeTimex': {   'req_args': ['timex'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'WikidictAnnotator.requirementsSatisfied': {   'req_args': [],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'WikidictAnnotator.requires': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WikidictAnnotator.java'},
    'Word': {   'req_args': [   ['word'],
                                ['word', 'beginPosition', 'endPosition'],
                                ['lab']],
                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Word.java'},
    'Word.factory': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Word.java'},
    'Word.labelFactory': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Word.java'},
    'Word.setWord': {   'req_args': ['word'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Word.java'},
    'Word.word': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\Word.java'},
    'WordCatConstituent': {   'req_args': ['subTree', 'root', 'type'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordCatConstituent.java'},
    'WordCatEqualityChecker.areEqual': {   'req_args': ['o', 'o2'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordCatEqualityChecker.java'},
    'WordCatEquivalenceClasser.equivalenceClass': {   'req_args': ['o'],
                                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordCatEquivalenceClasser.java'},
    'WordFactory': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordFactory.java'},
    'WordFactory.newLabel': {   'req_args': [   'word',
                                                ['word', 'options'],
                                                ['oldLabel']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordFactory.java'},
    'WordFactory.newLabelFromString': {   'req_args': ['word'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordFactory.java'},
    'WordLemmaTag': {   'req_args': [   'word',
                                        ['word'],
                                        [],
                                        ['word', 'tag'],
                                        ['word', 'lemma', 'tag'],
                                        ['word', 'tag']],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.compareTo': {   'req_args': ['wordLemmaTag'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.equals': {   'req_args': ['o'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.hashCode': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.labelFactory': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.lemma': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.main': {   'req_args': ['args'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.setFromString': {   'req_args': [   'labelStr',
                                                      ['labelStr', 'divider']],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.setLemma': {   'req_args': ['lemma'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.setTag': {   'req_args': ['tag'],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.setValue': {   'req_args': ['value'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.setWord': {   'req_args': ['word'],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.tag': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.toString': {   'req_args': [['divider']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.value': {   'req_args': [],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTag.word': {   'req_args': [],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTag.java'},
    'WordLemmaTagFactory': {   'req_args': [['divider']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTagFactory.java'},
    'WordLemmaTagFactory.newLabel': {   'req_args': [   'labelStr',
                                                        ['labelStr', 'options'],
                                                        ['oldLabel']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTagFactory.java'},
    'WordLemmaTagFactory.newLabelFromString': {   'req_args': ['labelStr'],
                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordLemmaTagFactory.java'},
    'WordLists': {   'req_args': [],
                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\WordLists.java'},
    'WordLists.isKbpPronominalMention': {   'req_args': ['word'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\coref\\data\\WordLists.java'},
    'WordSegmentingTokenizer': {   'req_args': [   'segmenter',
                                                   'r',
                                                   ['segmenter', 'tokenizer']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordSegmentingTokenizer.java'},
    'WordSegmentingTokenizer.factory': {   'req_args': ['wordSegmenter'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordSegmentingTokenizer.java'},
    'WordShapeClassifier': {   'req_args': [],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordShapeClassifier.java'},
    'WordShapeClassifier.lookupShaper': {   'req_args': ['name'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordShapeClassifier.java'},
    'WordShapeClassifier.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordShapeClassifier.java'},
    'WordShapeClassifier.wordShape': {   'req_args': [   'inStr',
                                                         'wordShaper',
                                                         [   'inStr',
                                                             'wordShaper',
                                                             'knownLCWords']],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordShapeClassifier.java'},
    'WordShapeClassifier.wordShapeChris4': {   'req_args': ['s'],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordShapeClassifier.java'},
    'WordStemmer': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordStemmer.java'},
    'WordStemmer.main': {   'req_args': ['args'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordStemmer.java'},
    'WordStemmer.visitTree': {   'req_args': ['t'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\WordStemmer.java'},
    'WordTag': {   'req_args': [   'word',
                                   'tag',
                                   ['word'],
                                   ['word'],
                                   [],
                                   ['word', 'tag']],
                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.compareTo': {   'req_args': ['wordTag'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.equals': {   'req_args': ['o'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.factory': {   'req_args': [],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.hashCode': {   'req_args': [],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.labelFactory': {   'req_args': [],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.read': {   'req_args': ['in'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.save': {   'req_args': ['out'],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.setFromString': {   'req_args': [   'wordTagString',
                                                 ['wordTagString', 'divider']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.setTag': {   'req_args': ['tag'],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.setValue': {   'req_args': ['value'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.setWord': {   'req_args': ['word'],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.tag': {   'req_args': [],
                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.toString': {   'req_args': [['divider']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.value': {   'req_args': [],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.valueOf': {   'req_args': ['s', ['s', 'tagDivider']],
                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTag.word': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTag.java'},
    'WordTagFactory': {   'req_args': [['divider']],
                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTagFactory.java'},
    'WordTagFactory.newLabel': {   'req_args': [   'labelStr',
                                                   ['labelStr', 'options'],
                                                   ['oldLabel']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTagFactory.java'},
    'WordTagFactory.newLabelFromString': {   'req_args': ['word'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\ling\\WordTagFactory.java'},
    'WordToSentenceProcessor': {   'req_args': [   ['newlineIsSentenceBreak'],
                                                   ['isOneSentence'],
                                                   ['boundaryToDiscard'],
                                                   [   'boundaryTokenRegex',
                                                       'newlineIsSentenceBreak',
                                                       'isOneSentence'],
                                                   [   'boundaryTokenRegex',
                                                       'boundaryFollowersRegex',
                                                       'boundaryToDiscard',
                                                       'xmlBreakElementsToDiscard',
                                                       'newlineIsSentenceBreak',
                                                       'sentenceBoundaryMultiTokenPattern',
                                                       'tokenRegexesToDiscard'],
                                                   [   'boundaryTokenRegex',
                                                       'boundaryFollowersRegex',
                                                       'boundariesToDiscard',
                                                       'xmlBreakElementsToDiscard',
                                                       'regionElementRegex',
                                                       'newlineIsSentenceBreak',
                                                       'sentenceBoundaryMultiTokenPattern',
                                                       'tokenRegexesToDiscard',
                                                       'isOneSentence',
                                                       'allowEmptySentences']],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToSentenceProcessor.java'},
    'WordToSentenceProcessor.process': {   'req_args': ['words'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToSentenceProcessor.java'},
    'WordToSentenceProcessor.processDocument': {   'req_args': ['in'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToSentenceProcessor.java'},
    'WordToSentenceProcessor.stringToNewlineIsSentenceBreak': {   'req_args': [   'name'],
                                                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToSentenceProcessor.java'},
    'WordToTaggedWordProcessor': {   'req_args': [['splitChar']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToTaggedWordProcessor.java'},
    'WordToTaggedWordProcessor.main': {   'req_args': ['args'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToTaggedWordProcessor.java'},
    'WordToTaggedWordProcessor.process': {   'req_args': ['words'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordToTaggedWordProcessor.java'},
    'WordTokenFactory.makeToken': {   'req_args': ['str', 'begin', 'length'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\process\\WordTokenFactory.java'},
    'WordsToSentencesAnnotator': {   'req_args': [   ['properties'],
                                                     ['verbose'],
                                                     [   'verbose',
                                                         'boundaryTokenRegex',
                                                         'boundaryToDiscard',
                                                         'htmlElementsToDiscard',
                                                         'newlineIsSentenceBreak',
                                                         'boundaryMultiTokenRegex',
                                                         'tokenRegexesToDiscard'],
                                                     [   'verbose',
                                                         'countLineNumbers',
                                                         'wts']],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'WordsToSentencesAnnotator.annotate': {   'req_args': ['annotation'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'WordsToSentencesAnnotator.newlineSplitter': {   'req_args': ['nlToken'],
                                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'WordsToSentencesAnnotator.nonSplitter': {   'req_args': [],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'WordsToSentencesAnnotator.requirementsSatisfied': {   'req_args': [],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'WordsToSentencesAnnotator.requires': {   'req_args': [],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\WordsToSentencesAnnotator.java'},
    'XMLBeginEndIterator': {   'req_args': [   'in',
                                               'tagNameRegexp',
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'keepInternalTags'],
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'op',
                                                   'keepInternalTags'],
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'keepInternalTags',
                                                   'keepDelimitingTags'],
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'keepInternalTags',
                                                   'keepDelimitingTags',
                                                   'countDepth'],
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'op',
                                                   'keepInternalTags',
                                                   'keepDelimitingTags'],
                                               [   'in',
                                                   'tagNameRegexp',
                                                   'op',
                                                   'keepInternalTags',
                                                   'keepDelimitingTags',
                                                   'countDepth']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\XMLBeginEndIterator.java'},
    'XMLBeginEndIterator.getFactory': {   'req_args': [   'tag',
                                                          [   'tag',
                                                              'keepInternalTags',
                                                              'keepDelimitingTags'],
                                                          ['tag', 'op'],
                                                          [   'tag',
                                                              'op',
                                                              'keepInternalTags',
                                                              'keepDelimitingTags']],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\XMLBeginEndIterator.java'},
    'XMLBeginEndIterator.hasNext': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\XMLBeginEndIterator.java'},
    'XMLBeginEndIterator.main': {   'req_args': ['args'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\XMLBeginEndIterator.java'},
    'XMLBeginEndIterator.next': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\objectbank\\XMLBeginEndIterator.java'},
    'XMLOutputter': {   'req_args': [],
                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\XMLOutputter.java'},
    'XMLOutputter.annotationToDoc': {   'req_args': [   'annotation',
                                                        'pipeline',
                                                        [   'annotation',
                                                            'options']],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\XMLOutputter.java'},
    'XMLOutputter.print': {   'req_args': ['annotation', 'os', 'options'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\XMLOutputter.java'},
    'XMLOutputter.xmlPrint': {   'req_args': [   'annotation',
                                                 'os',
                                                 [   'annotation',
                                                     'os',
                                                     'pipeline'],
                                                 [   'annotation',
                                                     'os',
                                                     'options']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\pipeline\\XMLOutputter.java'},
    'XMLToAnnotation.getAnnotatedFile': {   'req_args': [   'text',
                                                            'baseFileName',
                                                            'props'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.getEndIndex': {   'req_args': [   'startIndex',
                                                       'tokens',
                                                       'text'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.getJustText': {   'req_args': ['text'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.getProcessedCoreNLPProperties': {   'req_args': [],
                                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.processCoreNLPIfDoesNotExist': {   'req_args': [   'processedFile',
                                                                        'coreNLPProps',
                                                                        'text'],
                                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.readConnection': {   'req_args': ['connection'],
                                          'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.readXMLCharacterList': {   'req_args': ['doc'],
                                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.readXMLFormat': {   'req_args': ['fileName'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLToAnnotation.writeCharacterList': {   'req_args': [   'fileName',
                                                              'personList'],
                                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\quoteattribution\\XMLToAnnotation.java'},
    'XMLUtils': {   'req_args': [[]],
                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.createDocument': {   'req_args': [],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.createElement': {   'req_args': ['tag'],
                                  'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.createTextNode': {   'req_args': ['text'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.documentToString': {   'req_args': ['document'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.escapeAttributeXML': {   'req_args': ['in'],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.escapeElementXML': {   'req_args': ['in'],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.escapeTextAroundXMLTags': {   'req_args': ['s'],
                                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.escapeXML': {   'req_args': ['in'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.findSpace': {   'req_args': ['haystack', 'begin'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getAttribute': {   'req_args': [   'element',
                                                 'name',
                                                 ['node', 'name']],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getAttributeValue': {   'req_args': ['node', 'name'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getNode': {   'req_args': [   'node',
                                            'nodePath',
                                            ['node', 'nodePath']],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getNodeText': {   'req_args': [   'node',
                                                'nodePath',
                                                ['node', 'nodePath']],
                                'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getNodeTexts': {   'req_args': ['node', 'nodePath'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getNodes': {   'req_args': [   'node',
                                             'nodePath',
                                             ['node', 'nodePath']],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.getTagElementTriplesFromFile': {   'req_args': ['f', 'tag'],
                                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getTagElementTriplesFromFileNumBounded': {   'req_args': [   'f',
                                                                           'tag',
                                                                           'num'],
                                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getTagElementTriplesFromFileNumBoundedSAXException': {   'req_args': [   'f',
                                                                                       'tag',
                                                                                       'numIncludedSiblings'],
                                                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getTagElementTriplesFromFileSAXException': {   'req_args': [   'f',
                                                                             'tag'],
                                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getTagElementsFromFile': {   'req_args': ['f', 'tag'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getTextContentFromTagsFromFile': {   'req_args': ['f', 'tag'],
                                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getValidatingXmlParser': {   'req_args': ['schemaFile'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.getXmlParser': {   'req_args': [],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.isBreaking': {   'req_args': ['tag', ['tag']],
                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.main': {   'req_args': ['args'],
                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.nodeToString': {   'req_args': ['node', 'prettyPrint'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.parseElement': {   'req_args': ['xml'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.parseTag': {   'req_args': ['tagString'],
                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.printNode': {   'req_args': [   'out',
                                              'node',
                                              'prettyPrint',
                                              'includeXmlDeclaration'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.readAndParseTag': {   'req_args': ['r'],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.readDocumentFromFile': {   'req_args': ['filename'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.readDocumentFromString': {   'req_args': ['s'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.readTag': {   'req_args': ['r'],
                            'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.readUntilTag': {   'req_args': ['r'],
                                 'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.removeChildren': {   'req_args': ['e'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\time\\XMLUtils.java'},
    'XMLUtils.safeDocumentBuilderFactory': {   'req_args': [],
                                               'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.stripTags': {   'req_args': ['r', 'mapBack', 'markLineBreaks'],
                              'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'XMLUtils.unescapeStringForXML': {   'req_args': ['s'],
                                         'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\util\\XMLUtils.java'},
    'fakeShortNameToGRel.clear': {   'req_args': [],
                                     'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.containsKey': {   'req_args': ['o'],
                                           'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.containsValue': {   'req_args': ['o'],
                                             'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.entrySet': {   'req_args': [],
                                        'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.get': {   'req_args': ['key'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.isEmpty': {   'req_args': [],
                                       'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.keySet': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.put': {   'req_args': ['key', 'value'],
                                   'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.putAll': {   'req_args': ['m'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.remove': {   'req_args': ['key'],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.size': {   'req_args': [],
                                    'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'},
    'fakeShortNameToGRel.values': {   'req_args': [],
                                      'source_file': 'CoreNLP\\src\\edu\\stanford\\nlp\\trees\\DependencyScoring.java'}}
