{   'ARFF_Formatter.__init__': {   'opt_args': [],
                                   'req_args': ['features', 'labels'],
                                   'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.data_section': {   'opt_args': ['labeled'],
                                       'req_args': ['tokens'],
                                       'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.format': {   'opt_args': [],
                                 'req_args': ['tokens'],
                                 'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.from_train': {   'opt_args': [],
                                     'req_args': ['tokens'],
                                     'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.header_section': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.labels': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARFF_Formatter.write': {   'opt_args': [],
                                'req_args': ['tokens', 'outfile'],
                                'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'ARLSTem.__init__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.fem2masc': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.norm': {   'opt_args': [],
                        'req_args': ['token'],
                        'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.plur2sing': {   'opt_args': [],
                             'req_args': ['token'],
                             'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.pref': {   'opt_args': [],
                        'req_args': ['token'],
                        'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.stem': {   'opt_args': [],
                        'req_args': ['token'],
                        'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.suff': {   'opt_args': [],
                        'req_args': ['token'],
                        'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb': {   'opt_args': [],
                        'req_args': ['token'],
                        'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t1': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t2': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t3': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t4': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t5': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem.verb_t6': {   'opt_args': [],
                           'req_args': ['token'],
                           'source_file': 'nltk\\nltk\\stem\\arlstem.py'},
    'ARLSTem2.__init__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.adjective': {   'opt_args': [],
                              'req_args': ['token'],
                              'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.fem2masc': {   'opt_args': [],
                             'req_args': ['token'],
                             'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.norm': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.plur2sing': {   'opt_args': [],
                              'req_args': ['token'],
                              'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.pref': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.stem': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.stem1': {   'opt_args': [],
                          'req_args': ['token'],
                          'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.suff': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t1': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t2': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t3': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t4': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t5': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'ARLSTem2.verb_t6': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\arlstem2.py'},
    'AbsoluteDiscounting.__init__': {   'opt_args': ['discount', 'kwargs'],
                                        'req_args': ['counter', 'vocabulary'],
                                        'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'AbsoluteDiscounting.alpha_gamma': {   'opt_args': [],
                                           'req_args': ['context', 'word'],
                                           'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'AbsoluteDiscounting.unigram_score': {   'opt_args': [],
                                             'req_args': ['word'],
                                             'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'AbsoluteDiscountingInterpolated.__init__': {   'opt_args': [   'discount',
                                                                    'kwargs'],
                                                    'req_args': ['order'],
                                                    'source_file': 'nltk\\nltk\\lm\\models.py'},
    'AbstractBoxerDrs.__hash__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractBoxerDrs.atoms': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractBoxerDrs.clean': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractBoxerDrs.renumber_sentences': {   'opt_args': [],
                                               'req_args': ['f'],
                                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractBoxerDrs.variable_types': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractBoxerDrs.variables': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'AbstractCCGCategory.__eq__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.__hash__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.__lt__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.__ne__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.__str__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.can_unify': {   'opt_args': [],
                                         'req_args': ['other'],
                                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.is_function': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.is_primitive': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.is_var': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractCCGCategory.substitute': {   'opt_args': [],
                                          'req_args': ['substitutions'],
                                          'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'AbstractChartRule.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'AbstractChartRule.apply': {   'opt_args': [],
                                   'req_args': ['grammar', 'chart'],
                                   'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'AbstractChartRule.apply_everywhere': {   'opt_args': [],
                                              'req_args': ['grammar', 'chart'],
                                              'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'AbstractCollocationFinder.__init__': {   'opt_args': [],
                                              'req_args': [   'ngram_fd',
                                                              'word_fd'],
                                              'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.above_score': {   'opt_args': [],
                                                 'req_args': [   'min_score',
                                                                 'score_fn'],
                                                 'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.apply_freq_filter': {   'opt_args': [],
                                                       'req_args': ['min_freq'],
                                                       'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.apply_ngram_filter': {   'opt_args': [],
                                                        'req_args': ['fn'],
                                                        'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.apply_word_filter': {   'opt_args': [],
                                                       'req_args': ['fn'],
                                                       'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.from_documents': {   'opt_args': [],
                                                    'req_args': [   'documents',
                                                                    'cls'],
                                                    'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.nbest': {   'opt_args': [],
                                           'req_args': ['n', 'score_fn'],
                                           'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractCollocationFinder.score_ngrams': {   'opt_args': [],
                                                  'req_args': ['score_fn'],
                                                  'source_file': 'nltk\\nltk\\collocations.py'},
    'AbstractContainerWidget.__init__': {   'opt_args': ['attribs'],
                                            'req_args': ['child', 'canvas'],
                                            'source_file': 'nltk\\nltk\\draw\\util.py'},
    'AbstractContainerWidget.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\draw\\util.py'},
    'AbstractContainerWidget.child': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\draw\\util.py'},
    'AbstractContainerWidget.set_child': {   'opt_args': [],
                                             'req_args': ['child'],
                                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'AbstractLazySequence.__add__': {   'opt_args': [],
                                        'req_args': ['other'],
                                        'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__contains__': {   'opt_args': [],
                                             'req_args': ['value'],
                                             'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__eq__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__getitem__': {   'opt_args': [],
                                            'req_args': ['i'],
                                            'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__hash__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__iter__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__len__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__lt__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__mul__': {   'opt_args': [],
                                        'req_args': ['count'],
                                        'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__ne__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__radd__': {   'opt_args': [],
                                         'req_args': ['other'],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__repr__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.__rmul__': {   'opt_args': [],
                                         'req_args': ['count'],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.count': {   'opt_args': [],
                                      'req_args': ['value'],
                                      'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.index': {   'opt_args': ['stop', 'start'],
                                      'req_args': ['value'],
                                      'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractLazySequence.iterate_from': {   'opt_args': [],
                                             'req_args': ['start'],
                                             'source_file': 'nltk\\nltk\\collections.py'},
    'AbstractParentedTree.__delitem__': {   'opt_args': [],
                                            'req_args': ['index'],
                                            'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.__getnewargs__': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.__init__': {   'opt_args': ['children'],
                                         'req_args': ['node'],
                                         'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.__setitem__': {   'opt_args': [],
                                            'req_args': ['value', 'index'],
                                            'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.append': {   'opt_args': [],
                                       'req_args': ['child'],
                                       'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.extend': {   'opt_args': [],
                                       'req_args': ['children'],
                                       'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.insert': {   'opt_args': [],
                                       'req_args': ['child', 'index'],
                                       'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.pop': {   'opt_args': ['index'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractParentedTree.remove': {   'opt_args': [],
                                       'req_args': ['child'],
                                       'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'AbstractVariableExpression.__eq__': {   'opt_args': [],
                                             'req_args': ['other'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.__init__': {   'opt_args': [],
                                               'req_args': ['variable'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.__lt__': {   'opt_args': [],
                                             'req_args': ['other'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.__ne__': {   'opt_args': [],
                                             'req_args': ['other'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.__str__': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.findtype': {   'opt_args': [],
                                               'req_args': ['variable'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.predicates': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.replace': {   'opt_args': [   'alpha_convert',
                                                              'replace_bound'],
                                              'req_args': [   'expression',
                                                              'variable'],
                                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AbstractVariableExpression.simplify': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AffixTagger.__init__': {   'opt_args': [   'verbose',
                                                'cutoff',
                                                'backoff',
                                                'min_stem_length',
                                                'affix_length',
                                                'model',
                                                'train'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'AffixTagger.context': {   'opt_args': [],
                               'req_args': ['history', 'index', 'tokens'],
                               'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'AffixTagger.decode_json_obj': {   'opt_args': [],
                                       'req_args': ['obj', 'cls'],
                                       'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'AffixTagger.encode_json_obj': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'Agenda.__getitem__': {   'opt_args': [],
                              'req_args': ['index'],
                              'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.__init__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.clone': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.mark_alls_fresh': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.mark_neqs_fresh': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.pop_first': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.put': {   'opt_args': ['context'],
                      'req_args': ['expression'],
                      'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.put_all': {   'opt_args': [],
                          'req_args': ['expressions'],
                          'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.put_atoms': {   'opt_args': [],
                            'req_args': ['atoms'],
                            'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Agenda.replace_all': {   'opt_args': [],
                              'req_args': ['new', 'old'],
                              'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'AlignedCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                        'alignedsent_block_reader',
                                                        'sent_tokenizer',
                                                        'word_tokenizer',
                                                        'sep'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'AlignedCorpusReader.aligned_sents': {   'opt_args': ['fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'AlignedCorpusReader.sents': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'AlignedCorpusReader.words': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'AlignedSent.__init__': {   'opt_args': ['alignment'],
                                'req_args': ['mots', 'words'],
                                'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSent.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSent.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSent.invert': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSent.mots': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSent.words': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignedSentCorpusView.__init__': {   'opt_args': [],
                                          'req_args': [   'alignedsent_block_reader',
                                                          'sent_tokenizer',
                                                          'word_tokenizer',
                                                          'group_by_sent',
                                                          'aligned',
                                                          'encoding',
                                                          'corpus_file'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'AlignedSentCorpusView.read_block': {   'opt_args': [],
                                            'req_args': ['stream'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\aligned.py'},
    'Alignment.__getitem__': {   'opt_args': [],
                                 'req_args': ['key'],
                                 'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.__new__': {   'opt_args': [],
                             'req_args': ['pairs', 'cls'],
                             'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.fromstring': {   'opt_args': [],
                                'req_args': ['s', 'cls'],
                                'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.invert': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\translate\\api.py'},
    'Alignment.range': {   'opt_args': ['positions'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\translate\\api.py'},
    'AlignmentInfo.__eq__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.__hash__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.__init__': {   'opt_args': [],
                                  'req_args': [   'cepts',
                                                  'trg_sentence',
                                                  'src_sentence',
                                                  'alignment'],
                                  'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.__ne__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.center_of_cept': {   'opt_args': [],
                                        'req_args': ['i'],
                                        'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.fertility_of_i': {   'opt_args': [],
                                        'req_args': ['i'],
                                        'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.is_head_word': {   'opt_args': [],
                                      'req_args': ['j'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.previous_cept': {   'opt_args': [],
                                       'req_args': ['j'],
                                       'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.previous_in_tablet': {   'opt_args': [],
                                            'req_args': ['j'],
                                            'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AlignmentInfo.zero_indexed_alignment': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'AllExpression.getQuantifier': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AlpinoCorpusReader.__init__': {   'opt_args': ['tagset', 'encoding'],
                                       'req_args': ['root'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'AndExpression.getOp': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnnotationTask.Ae_kappa': {   'opt_args': [],
                                   'req_args': ['cB', 'cA'],
                                   'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Ao': {   'opt_args': [],
                             'req_args': ['cB', 'cA'],
                             'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Disagreement': {   'opt_args': [],
                                       'req_args': ['label_freqs'],
                                       'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Do_Kw': {   'opt_args': ['max_distance'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Do_Kw_pairwise': {   'opt_args': ['max_distance'],
                                         'req_args': ['cB', 'cA'],
                                         'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.N': {   'opt_args': ['c', 'i', 'k'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Nck': {   'opt_args': [],
                              'req_args': ['k', 'c'],
                              'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Nik': {   'opt_args': [],
                              'req_args': ['k', 'i'],
                              'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.Nk': {   'opt_args': [],
                             'req_args': ['k'],
                             'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.S': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.__init__': {   'opt_args': ['distance', 'data'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.__str__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.agr': {   'opt_args': ['data'],
                              'req_args': ['i', 'cB', 'cA'],
                              'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.alpha': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.avg_Ao': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.kappa': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.kappa_pairwise': {   'opt_args': [],
                                         'req_args': ['cB', 'cA'],
                                         'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.load_array': {   'opt_args': [],
                                     'req_args': ['array'],
                                     'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.multi_kappa': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.pi': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.weighted_kappa': {   'opt_args': ['max_distance'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnnotationTask.weighted_kappa_pairwise': {   'opt_args': ['max_distance'],
                                                  'req_args': ['cB', 'cA'],
                                                  'source_file': 'nltk\\nltk\\metrics\\agreement.py'},
    'AnyType.__eq__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.__init__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.__ne__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.__str__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.first': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.matches': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.resolve': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.second': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'AnyType.str': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.__eq__': {   'opt_args': [],
                                        'req_args': ['other'],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.__hash__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ApplicationExpression.__init__': {   'opt_args': [],
                                          'req_args': ['argument', 'function'],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.__ne__': {   'opt_args': [],
                                        'req_args': ['other'],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.__str__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.args': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.constants': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.findtype': {   'opt_args': [],
                                          'req_args': ['variable'],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.is_atom': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.pred': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.predicates': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.simplify': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.type': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.uncurry': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ApplicationExpression.visit': {   'opt_args': [],
                                       'req_args': ['combinator', 'function'],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ArabicStemmer.__Prefix_Step1': {   'opt_args': [],
                                        'req_args': ['token'],
                                        'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step2a': {   'opt_args': [],
                                         'req_args': ['token'],
                                         'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step2b': {   'opt_args': [],
                                         'req_args': ['token'],
                                         'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step3_Verb': {   'opt_args': [],
                                             'req_args': ['token'],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step3a_Noun': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step3b_Noun': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Prefix_Step4_Verb': {   'opt_args': [],
                                             'req_args': ['token'],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_All_alef_maqsura': {   'opt_args': [],
                                                   'req_args': ['token'],
                                                   'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step1a': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step1b': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step2a': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step2b': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step2c1': {   'opt_args': [],
                                               'req_args': ['token'],
                                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step2c2': {   'opt_args': [],
                                               'req_args': ['token'],
                                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Noun_Step3': {   'opt_args': [],
                                             'req_args': ['token'],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Verb_Step1': {   'opt_args': [],
                                             'req_args': ['token'],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Verb_Step2a': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Verb_Step2b': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__Suffix_Verb_Step2c': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__checks_1': {   'opt_args': [],
                                    'req_args': ['token'],
                                    'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__checks_2': {   'opt_args': [],
                                    'req_args': ['token'],
                                    'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__normalize_post': {   'opt_args': [],
                                          'req_args': ['token'],
                                          'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.__normalize_pre': {   'opt_args': [],
                                         'req_args': ['token'],
                                         'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ArabicStemmer.stem': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'Assignment.__getitem__': {   'opt_args': [],
                                  'req_args': ['key'],
                                  'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Assignment.__init__': {   'opt_args': ['assign'],
                               'req_args': ['domain'],
                               'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Assignment.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Assignment.add': {   'opt_args': [],
                          'req_args': ['val', 'var'],
                          'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Assignment.copy': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Assignment.purge': {   'opt_args': ['var'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'AtomicExpression.__eq__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.__hash__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.__init__': {   'opt_args': ['dependencies'],
                                     'req_args': ['name'],
                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.__ne__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.__str__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.compile_neg': {   'opt_args': [],
                                        'req_args': [   'glueFormulaFactory',
                                                        'index_counter'],
                                        'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.compile_pos': {   'opt_args': [],
                                        'req_args': [   'glueFormulaFactory',
                                                        'index_counter'],
                                        'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.initialize_labels': {   'opt_args': [],
                                              'req_args': ['fstruct'],
                                              'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AtomicExpression.simplify': {   'opt_args': ['bindings'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'AttrDict.__getattr__': {   'opt_args': [],
                                'req_args': ['name'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'AttrDict.__getitem__': {   'opt_args': [],
                                'req_args': ['name'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'AttrDict.__init__': {   'opt_args': ['kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'AttrDict.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'AttrDict.__setattr__': {   'opt_args': [],
                                'req_args': ['value', 'name'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'AttrDict.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Authenticate.__init__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\twitter\\util.py'},
    'Authenticate.load_creds': {   'opt_args': [   'verbose',
                                                   'subdir',
                                                   'creds_file'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\twitter\\util.py'},
    'AveragedPerceptron.__init__': {   'opt_args': ['weights'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.average_weights': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.decode_json_obj': {   'opt_args': [],
                                              'req_args': ['obj', 'cls'],
                                              'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.encode_json_obj': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.load': {   'opt_args': [],
                                   'req_args': ['path'],
                                   'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.predict': {   'opt_args': ['return_conf'],
                                      'req_args': ['features'],
                                      'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.save': {   'opt_args': [],
                                   'req_args': ['path'],
                                   'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'AveragedPerceptron.update': {   'opt_args': [],
                                     'req_args': ['features', 'guess', 'truth'],
                                     'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'BNCCorpusReader.__init__': {   'opt_args': ['lazy'],
                                    'req_args': ['fileids', 'root'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCCorpusReader.sents': {   'opt_args': ['stem', 'strip_space', 'fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCCorpusReader.tagged_sents': {   'opt_args': [   'stem',
                                                        'strip_space',
                                                        'c5',
                                                        'fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCCorpusReader.tagged_words': {   'opt_args': [   'stem',
                                                        'strip_space',
                                                        'c5',
                                                        'fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCCorpusReader.words': {   'opt_args': ['stem', 'strip_space', 'fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCSentence.__init__': {   'opt_args': [],
                                'req_args': ['items', 'num'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCWordView.__init__': {   'opt_args': [],
                                'req_args': [   'stem',
                                                'strip_space',
                                                'tag',
                                                'sent',
                                                'fileid'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCWordView.handle_elt': {   'opt_args': [],
                                  'req_args': ['context', 'elt'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCWordView.handle_header': {   'opt_args': [],
                                     'req_args': ['context', 'elt'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCWordView.handle_sent': {   'opt_args': [],
                                   'req_args': ['elt'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BNCWordView.handle_word': {   'opt_args': [],
                                   'req_args': ['elt'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\bnc.py'},
    'BackwardCombinator.__init__': {   'opt_args': ['suffix'],
                                       'req_args': ['predicate', 'combinator'],
                                       'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'BackwardCombinator.__str__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'BackwardCombinator.can_combine': {   'opt_args': [],
                                          'req_args': ['right', 'left'],
                                          'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'BackwardCombinator.combine': {   'opt_args': [],
                                      'req_args': ['right', 'left'],
                                      'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'BackwardTypeRaiseRule.__init__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BackwardTypeRaiseRule.__str__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BackwardTypeRaiseRule.apply': {   'opt_args': [],
                                       'req_args': [   'right_edge',
                                                       'left_edge',
                                                       'grammar',
                                                       'chart'],
                                       'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BaseModelBuilderCommand.__init__': {   'opt_args': ['assumptions', 'goal'],
                                            'req_args': ['modelbuilder'],
                                            'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseModelBuilderCommand.build_model': {   'opt_args': ['verbose'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseModelBuilderCommand.get_model_builder': {   'opt_args': [],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseModelBuilderCommand.model': {   'opt_args': ['format'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseProverCommand.__init__': {   'opt_args': ['assumptions', 'goal'],
                                      'req_args': ['prover'],
                                      'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseProverCommand.decorate_proof': {   'opt_args': ['simplify'],
                                            'req_args': ['proof_string'],
                                            'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseProverCommand.get_prover': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseProverCommand.proof': {   'opt_args': ['simplify'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseProverCommand.prove': {   'opt_args': ['verbose'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.__init__': {   'opt_args': ['assumptions', 'goal'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.add_assumptions': {   'opt_args': [],
                                                  'req_args': [   'new_assumptions'],
                                                  'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.assumptions': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.goal': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.print_assumptions': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BaseTheoremToolCommand.retract_assumptions': {   'opt_args': ['debug'],
                                                      'req_args': ['retracted'],
                                                      'source_file': 'nltk\\nltk\\inference\\api.py'},
    'BasicTweetHandler.__init__': {   'opt_args': ['limit'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'BasicTweetHandler.do_continue': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'BasicType.__eq__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BasicType.__ne__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BasicType.matches': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BasicType.resolve': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BigramAssocMeasures.chi_sq': {   'opt_args': [],
                                      'req_args': [   'n_xx',
                                                      'n_ix_xi_tuple',
                                                      'n_ii',
                                                      'cls'],
                                      'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'BigramAssocMeasures.dice': {   'opt_args': [],
                                    'req_args': [   'n_xx',
                                                    'n_ix_xi_tuple',
                                                    'n_ii'],
                                    'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'BigramAssocMeasures.fisher': {   'opt_args': [],
                                      'req_args': ['cls'],
                                      'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'BigramAssocMeasures.phi_sq': {   'opt_args': [],
                                      'req_args': ['cls'],
                                      'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'BigramCollocationFinder.__init__': {   'opt_args': ['window_size'],
                                            'req_args': [   'bigram_fd',
                                                            'word_fd'],
                                            'source_file': 'nltk\\nltk\\collocations.py'},
    'BigramCollocationFinder.from_words': {   'opt_args': ['window_size'],
                                              'req_args': ['words', 'cls'],
                                              'source_file': 'nltk\\nltk\\collocations.py'},
    'BigramCollocationFinder.score_ngram': {   'opt_args': [],
                                               'req_args': [   'w2',
                                                               'w1',
                                                               'score_fn'],
                                               'source_file': 'nltk\\nltk\\collocations.py'},
    'BigramTagger.__init__': {   'opt_args': [   'verbose',
                                                 'cutoff',
                                                 'backoff',
                                                 'model',
                                                 'train'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'BinaryCombinatorRule.__init__': {   'opt_args': [],
                                         'req_args': ['combinator'],
                                         'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BinaryCombinatorRule.__str__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BinaryCombinatorRule.apply': {   'opt_args': [],
                                      'req_args': [   'right_edge',
                                                      'left_edge',
                                                      'grammar',
                                                      'chart'],
                                      'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'BinaryExpression.__eq__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.__init__': {   'opt_args': [],
                                     'req_args': ['second', 'first'],
                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.__ne__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.__str__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.findtype': {   'opt_args': [],
                                     'req_args': ['variable'],
                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.type': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryExpression.visit': {   'opt_args': [],
                                  'req_args': ['combinator', 'function'],
                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'BinaryMaxentFeatureEncoding.__init__': {   'opt_args': [   'alwayson_features',
                                                                'unseen_features'],
                                                'req_args': [   'mapping',
                                                                'labels'],
                                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BinaryMaxentFeatureEncoding.describe': {   'opt_args': [],
                                                'req_args': ['f_id'],
                                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BinaryMaxentFeatureEncoding.encode': {   'opt_args': [],
                                              'req_args': [   'label',
                                                              'featureset'],
                                              'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BinaryMaxentFeatureEncoding.labels': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BinaryMaxentFeatureEncoding.length': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BinaryMaxentFeatureEncoding.train': {   'opt_args': [   'labels',
                                                             'count_cutoff',
                                                             'options'],
                                             'req_args': ['train_toks', 'cls'],
                                             'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'BindingDict.__add__': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__contains__': {   'opt_args': [],
                                    'req_args': ['item'],
                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__eq__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__getitem__': {   'opt_args': [],
                                   'req_args': ['variable'],
                                   'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__init__': {   'opt_args': ['bindings'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__len__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'BindingDict.__ne__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__setitem__': {   'opt_args': [],
                                   'req_args': ['binding', 'variable'],
                                   'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingDict.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'BindingException.__init__': {   'opt_args': [],
                                     'req_args': ['arg'],
                                     'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'BlanklineTokenizer.__init__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'BllipParser.__init__': {   'opt_args': [   'reranker_options',
                                                'parser_options',
                                                'reranker_weights',
                                                'reranker_features',
                                                'parser_model'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\bllip.py'},
    'BllipParser.from_unified_model_dir': {   'opt_args': [   'reranker_options',
                                                              'parser_options'],
                                              'req_args': ['model_dir', 'cls'],
                                              'source_file': 'nltk\\nltk\\parse\\bllip.py'},
    'BllipParser.parse': {   'opt_args': [],
                             'req_args': ['sentence'],
                             'source_file': 'nltk\\nltk\\parse\\bllip.py'},
    'BllipParser.tagged_parse': {   'opt_args': [],
                                    'req_args': ['word_and_tag_pairs'],
                                    'source_file': 'nltk\\nltk\\parse\\bllip.py'},
    'BottomUpChartParser.__init__': {   'opt_args': ['parser_args'],
                                        'req_args': ['grammar'],
                                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'BottomUpLeftCornerChartParser.__init__': {   'opt_args': ['parser_args'],
                                                  'req_args': ['grammar'],
                                                  'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'BottomUpPredictCombineRule.apply': {   'opt_args': [],
                                            'req_args': [   'edge',
                                                            'grammar',
                                                            'chart'],
                                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'BottomUpPredictRule.apply': {   'opt_args': [],
                                     'req_args': ['edge', 'grammar', 'chart'],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'BottomUpProbabilisticChartParser.__init__': {   'opt_args': [   'trace',
                                                                     'beam_size'],
                                                     'req_args': ['grammar'],
                                                     'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'BottomUpProbabilisticChartParser.grammar': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'BottomUpProbabilisticChartParser.parse': {   'opt_args': [],
                                                  'req_args': ['tokens'],
                                                  'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'BottomUpProbabilisticChartParser.sort_queue': {   'opt_args': [],
                                                       'req_args': [   'chart',
                                                                       'queue'],
                                                       'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'BottomUpProbabilisticChartParser.trace': {   'opt_args': ['trace'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'BoxWidget.__getitem__': {   'opt_args': [],
                                 'req_args': ['attr'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'BoxWidget.__init__': {   'opt_args': ['attribs'],
                              'req_args': ['child', 'canvas'],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'BoxWidget.__setitem__': {   'opt_args': [],
                                 'req_args': ['value', 'attr'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'Boxer.__init__': {   'opt_args': [   'resolve',
                                          'verbose',
                                          'bin_dir',
                                          'elimeq',
                                          'boxer_drs_interpreter'],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'Boxer.interpret': {   'opt_args': ['verbose', 'question', 'discourse_id'],
                           'req_args': ['input'],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'Boxer.interpret_multi': {   'opt_args': [   'verbose',
                                                 'question',
                                                 'discourse_id'],
                                 'req_args': ['input'],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'Boxer.interpret_multi_sents': {   'opt_args': [   'verbose',
                                                       'question',
                                                       'discourse_ids'],
                                       'req_args': ['inputs'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'Boxer.interpret_sents': {   'opt_args': [   'verbose',
                                                 'question',
                                                 'discourse_ids'],
                                 'req_args': ['inputs'],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'Boxer.set_bin_dir': {   'opt_args': ['verbose'],
                             'req_args': ['bin_dir'],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerCard.__init__': {   'opt_args': [],
                              'req_args': [   'type',
                                              'value',
                                              'var',
                                              'word_indices',
                                              'sent_index',
                                              'discourse_id'],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerCard.__iter__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerCard.renumber_sentences': {   'opt_args': [],
                                        'req_args': ['f'],
                                        'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.__eq__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.__init__': {   'opt_args': ['consequent'],
                             'req_args': ['conds', 'refs'],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.__ne__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.atoms': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.clean': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrs.renumber_sentences': {   'opt_args': [],
                                       'req_args': ['f'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.__init__': {   'opt_args': ['discourse_id'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.attempt_adjuncts': {   'opt_args': [],
                                           'req_args': [   'context',
                                                           'expression'],
                                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.get_all_symbols': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.get_next_token_variable': {   'opt_args': [],
                                                  'req_args': ['description'],
                                                  'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.handle': {   'opt_args': [],
                                 'req_args': ['context', 'tok'],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerDrsParser.nullableIntToken': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerEq.__init__': {   'opt_args': [],
                            'req_args': [   'var2',
                                            'var1',
                                            'word_indices',
                                            'sent_index',
                                            'discourse_id'],
                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerEq.__iter__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerEq.atoms': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerEq.renumber_sentences': {   'opt_args': [],
                                      'req_args': ['f'],
                                      'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerIndexed.__eq__': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerIndexed.__init__': {   'opt_args': [],
                                 'req_args': [   'word_indices',
                                                 'sent_index',
                                                 'discourse_id'],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerIndexed.__ne__': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerIndexed.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerIndexed.atoms': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNamed.__init__': {   'opt_args': [],
                               'req_args': [   'sense',
                                               'type',
                                               'name',
                                               'var',
                                               'word_indices',
                                               'sent_index',
                                               'discourse_id'],
                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNamed.__iter__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNamed.change_var': {   'opt_args': [],
                                 'req_args': ['var'],
                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNamed.clean': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNamed.renumber_sentences': {   'opt_args': [],
                                         'req_args': ['f'],
                                         'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.__eq__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.__init__': {   'opt_args': [],
                             'req_args': ['drs'],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.__ne__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.atoms': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.clean': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerNot.renumber_sentences': {   'opt_args': [],
                                       'req_args': ['f'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOr.__init__': {   'opt_args': [],
                            'req_args': [   'drs2',
                                            'drs1',
                                            'word_indices',
                                            'sent_index',
                                            'discourse_id'],
                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOr.__iter__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOr.atoms': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOr.clean': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOr.renumber_sentences': {   'opt_args': [],
                                      'req_args': ['f'],
                                      'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.__init__': {   'opt_args': ['discourse_id'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.attempt_adjuncts': {   'opt_args': [],
                                                 'req_args': [   'context',
                                                                 'expression'],
                                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.get_all_symbols': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.handle': {   'opt_args': [],
                                       'req_args': ['context', 'tok'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.handle_condition': {   'opt_args': [],
                                                 'req_args': ['indices', 'tok'],
                                                 'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.handle_drs': {   'opt_args': [],
                                           'req_args': ['tok'],
                                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.parse': {   'opt_args': ['signature'],
                                      'req_args': ['data'],
                                      'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.parse_condition': {   'opt_args': [],
                                                'req_args': ['indices'],
                                                'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.parse_drs': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.parse_index': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerOutputDrsParser.parse_variable': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerPred.__init__': {   'opt_args': [],
                              'req_args': [   'sense',
                                              'pos',
                                              'name',
                                              'var',
                                              'word_indices',
                                              'sent_index',
                                              'discourse_id'],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerPred.__iter__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerPred.change_var': {   'opt_args': [],
                                'req_args': ['var'],
                                'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerPred.clean': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerPred.renumber_sentences': {   'opt_args': [],
                                        'req_args': ['f'],
                                        'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.__init__': {   'opt_args': [],
                              'req_args': [   'drs',
                                              'var',
                                              'word_indices',
                                              'sent_index',
                                              'discourse_id'],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.__iter__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.atoms': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.clean': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.referenced_labels': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerProp.renumber_sentences': {   'opt_args': [],
                                        'req_args': ['f'],
                                        'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerRel.__init__': {   'opt_args': [],
                             'req_args': [   'sense',
                                             'rel',
                                             'var2',
                                             'var1',
                                             'word_indices',
                                             'sent_index',
                                             'discourse_id'],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerRel.__iter__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerRel.clean': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerRel.renumber_sentences': {   'opt_args': [],
                                       'req_args': ['f'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerWhq.__init__': {   'opt_args': [],
                             'req_args': [   'drs2',
                                             'variable',
                                             'drs1',
                                             'ans_types',
                                             'word_indices',
                                             'sent_index',
                                             'discourse_id'],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerWhq.__iter__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerWhq.atoms': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerWhq.clean': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BoxerWhq.renumber_sentences': {   'opt_args': [],
                                       'req_args': ['f'],
                                       'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'BracketParseCorpusReader.__init__': {   'opt_args': [   'tagset',
                                                             'encoding',
                                                             'detect_blocks',
                                                             'comment_char'],
                                             'req_args': ['fileids', 'root'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'BracketWidget.__getitem__': {   'opt_args': [],
                                     'req_args': ['attr'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'BracketWidget.__init__': {   'opt_args': ['attribs'],
                                  'req_args': ['child', 'canvas'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'BracketWidget.__setitem__': {   'opt_args': [],
                                     'req_args': ['value', 'attr'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'BrillTagger.__init__': {   'opt_args': ['training_stats'],
                                'req_args': ['rules', 'initial_tagger'],
                                'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.batch_tag_incremental': {   'opt_args': [],
                                             'req_args': ['gold', 'sequences'],
                                             'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.decode_json_obj': {   'opt_args': [],
                                       'req_args': ['obj', 'cls'],
                                       'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.encode_json_obj': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.print_template_statistics': {   'opt_args': [   'printunused',
                                                                 'test_stats'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.rules': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.tag': {   'opt_args': [],
                           'req_args': ['tokens'],
                           'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTagger.train_stats': {   'opt_args': ['statistic'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'BrillTaggerTrainer.__init__': {   'opt_args': [   'ruleformat',
                                                       'deterministic',
                                                       'trace'],
                                       'req_args': [   'templates',
                                                       'initial_tagger'],
                                       'source_file': 'nltk\\nltk\\tag\\brill_trainer.py'},
    'BrillTaggerTrainer.train': {   'opt_args': [   'min_acc',
                                                    'min_score',
                                                    'max_rules'],
                                    'req_args': ['train_sents'],
                                    'source_file': 'nltk\\nltk\\tag\\brill_trainer.py'},
    'BrillTemplateI.applicable_rules': {   'opt_args': [],
                                           'req_args': [   'correctTag',
                                                           'i',
                                                           'tokens'],
                                           'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'BrillTemplateI.get_neighborhood': {   'opt_args': [],
                                           'req_args': ['index', 'token'],
                                           'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'BufferedGzipFile.__init__': {   'opt_args': [   'fileobj',
                                                     'compresslevel',
                                                     'mode',
                                                     'filename',
                                                     'kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\data.py'},
    'BufferedGzipFile.write': {   'opt_args': [],
                                  'req_args': ['data'],
                                  'source_file': 'nltk\\nltk\\data.py'},
    'CCGChart.__init__': {   'opt_args': [],
                             'req_args': ['tokens'],
                             'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGChartParser.__init__': {   'opt_args': ['trace'],
                                   'req_args': ['rules', 'lexicon'],
                                   'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGChartParser.lexicon': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGChartParser.parse': {   'opt_args': [],
                                'req_args': ['tokens'],
                                'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.__init__': {   'opt_args': [],
                            'req_args': ['rule', 'categ', 'span'],
                            'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.categ': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.dot': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.end': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.is_complete': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.is_incomplete': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.length': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.lhs': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.nextsym': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.rhs': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.rule': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.span': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGEdge.start': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.__init__': {   'opt_args': [],
                                'req_args': ['leaf', 'token', 'pos'],
                                'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.categ': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.dot': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.end': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.is_complete': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.is_incomplete': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.leaf': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.length': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.lhs': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.nextsym': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.rhs': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.span': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.start': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLeafEdge.token': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'CCGLexicon.__init__': {   'opt_args': [],
                               'req_args': [   'entries',
                                               'families',
                                               'primitives',
                                               'start'],
                               'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'CCGLexicon.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'CCGLexicon.categories': {   'opt_args': [],
                                 'req_args': ['word'],
                                 'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'CCGLexicon.start': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'CCGVar.__init__': {   'opt_args': ['prim_only'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.__str__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.can_unify': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.id': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.is_function': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.is_primitive': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.is_var': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.new_id': {   'opt_args': [],
                         'req_args': ['cls'],
                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.reset_id': {   'opt_args': [],
                           'req_args': ['cls'],
                           'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CCGVar.substitute': {   'opt_args': [],
                             'req_args': ['substitutions'],
                             'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'CFG.__init__': {   'opt_args': ['calculate_leftcorners'],
                        'req_args': ['productions', 'start'],
                        'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.__repr__': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.__str__': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.binarize': {   'opt_args': ['padding'],
                        'req_args': ['grammar', 'cls'],
                        'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.check_coverage': {   'opt_args': [],
                              'req_args': ['tokens'],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.chomsky_normal_form': {   'opt_args': [   'flexible',
                                                   'new_token_padding'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.eliminate_start': {   'opt_args': [],
                               'req_args': ['grammar', 'cls'],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.fromstring': {   'opt_args': ['encoding'],
                          'req_args': ['input', 'cls'],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_binarised': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_chomsky_normal_form': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_flexible_chomsky_normal_form': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_leftcorner': {   'opt_args': [],
                             'req_args': ['left', 'cat'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_lexical': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_nonempty': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.is_nonlexical': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.leftcorner_parents': {   'opt_args': [],
                                  'req_args': ['cat'],
                                  'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.leftcorners': {   'opt_args': [],
                           'req_args': ['cat'],
                           'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.max_len': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.min_len': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.productions': {   'opt_args': ['empty', 'rhs', 'lhs'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.remove_unitary_rules': {   'opt_args': [],
                                    'req_args': ['grammar', 'cls'],
                                    'source_file': 'nltk\\nltk\\grammar.py'},
    'CFG.start': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\grammar.py'},
    'CFGDemo.__init__': {   'opt_args': [],
                            'req_args': ['text', 'grammar'],
                            'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CFGDemo.destroy': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CFGDemo.mainloop': {   'opt_args': ['kwargs'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CFGDemo.reset_workspace': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CFGDemo.workspace_markprod': {   'opt_args': [],
                                      'req_args': ['production'],
                                      'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CFGEditor.__init__': {   'opt_args': ['set_cfg_callback', 'cfg'],
                              'req_args': ['parent'],
                              'source_file': 'nltk\\nltk\\draw\\cfg.py'},
    'CHILDESCorpusReader.MLU': {   'opt_args': ['speaker', 'fileids'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.__init__': {   'opt_args': ['lazy'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.age': {   'opt_args': ['month', 'speaker', 'fileids'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.convert_age': {   'opt_args': [],
                                           'req_args': ['age_year'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.corpus': {   'opt_args': ['fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.participants': {   'opt_args': ['fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.sents': {   'opt_args': [   'replace',
                                                     'strip_space',
                                                     'relation',
                                                     'stem',
                                                     'speaker',
                                                     'fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.tagged_sents': {   'opt_args': [   'replace',
                                                            'strip_space',
                                                            'relation',
                                                            'stem',
                                                            'speaker',
                                                            'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.tagged_words': {   'opt_args': [   'replace',
                                                            'strip_space',
                                                            'relation',
                                                            'stem',
                                                            'speaker',
                                                            'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.webview_file': {   'opt_args': ['urlbase'],
                                            'req_args': ['fileid'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CHILDESCorpusReader.words': {   'opt_args': [   'replace',
                                                     'strip_space',
                                                     'relation',
                                                     'stem',
                                                     'speaker',
                                                     'fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\childes.py'},
    'CMUDictCorpusReader.dict': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\cmudict.py'},
    'CMUDictCorpusReader.entries': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\cmudict.py'},
    'CMUDictCorpusReader.words': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\cmudict.py'},
    'CRFTagger.__init__': {   'opt_args': [   'training_opt',
                                              'verbose',
                                              'feature_func'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tag\\crf.py'},
    'CRFTagger.set_model_file': {   'opt_args': [],
                                    'req_args': ['model_file'],
                                    'source_file': 'nltk\\nltk\\tag\\crf.py'},
    'CRFTagger.tag': {   'opt_args': [],
                         'req_args': ['tokens'],
                         'source_file': 'nltk\\nltk\\tag\\crf.py'},
    'CRFTagger.tag_sents': {   'opt_args': [],
                               'req_args': ['sents'],
                               'source_file': 'nltk\\nltk\\tag\\crf.py'},
    'CRFTagger.train': {   'opt_args': [],
                           'req_args': ['model_file', 'train_data'],
                           'source_file': 'nltk\\nltk\\tag\\crf.py'},
    'CachedTopDownPredictRule.__init__': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'CachedTopDownPredictRule.apply': {   'opt_args': [],
                                          'req_args': [   'edge',
                                                          'grammar',
                                                          'chart'],
                                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'CanvasFrame.__init__': {   'opt_args': ['parent', 'kw'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.add_widget': {   'opt_args': ['y', 'x'],
                                  'req_args': ['canvaswidget'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.canvas': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.destroy': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.destroy_widget': {   'opt_args': [],
                                      'req_args': ['canvaswidget'],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.mainloop': {   'opt_args': ['kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.pack': {   'opt_args': ['cnf', 'kw'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.print_to_file': {   'opt_args': ['filename'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.remove_widget': {   'opt_args': [],
                                     'req_args': ['canvaswidget'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasFrame.scrollregion': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__click': {   'opt_args': [],
                                'req_args': ['button'],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__drag': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__getitem__': {   'opt_args': [],
                                    'req_args': ['attr'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__init__': {   'opt_args': ['parent', 'attribs'],
                                 'req_args': ['canvas'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__motion_cb': {   'opt_args': [],
                                    'req_args': ['event'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__press_cb': {   'opt_args': [],
                                   'req_args': ['event'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__release_cb': {   'opt_args': [],
                                     'req_args': ['event'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__setitem__': {   'opt_args': [],
                                    'req_args': ['value', 'attr'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.__start_drag': {   'opt_args': [],
                                     'req_args': ['event'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.bbox': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.bind_click': {   'opt_args': ['button'],
                                   'req_args': ['callback'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.bind_drag': {   'opt_args': [],
                                  'req_args': ['callback'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.canvas': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.child_widgets': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.destroy': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.height': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.hidden': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.hide': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.manage': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.move': {   'opt_args': [],
                             'req_args': ['dy', 'dx'],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.moveto': {   'opt_args': ['anchor'],
                               'req_args': ['y', 'x'],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.parent': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.show': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.tags': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.unbind_click': {   'opt_args': ['button'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.unbind_drag': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.update': {   'opt_args': [],
                               'req_args': ['child'],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CanvasWidget.width': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'CategorizedBracketParseCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                                        'req_args': [],
                                                        'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.parsed_paras': {   'opt_args': [   'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.parsed_sents': {   'opt_args': [   'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.parsed_words': {   'opt_args': [   'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.tagged_paras': {   'opt_args': [   'tagset',
                                                                            'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.tagged_sents': {   'opt_args': [   'tagset',
                                                                            'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedBracketParseCorpusReader.tagged_words': {   'opt_args': [   'tagset',
                                                                            'categories',
                                                                            'fileids'],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\bracket_parse.py'},
    'CategorizedCorpusReader.__init__': {   'opt_args': [],
                                            'req_args': ['kwargs'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.categories': {   'opt_args': ['fileids'],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.fileids': {   'opt_args': ['categories'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.paras': {   'opt_args': ['categories', 'fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.raw': {   'opt_args': ['categories', 'fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.sents': {   'opt_args': ['categories', 'fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedCorpusReader.words': {   'opt_args': ['categories', 'fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CategorizedPlaintextCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'CategorizedSentencesCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                                     'sent_tokenizer',
                                                                     'word_tokenizer',
                                                                     'kwargs'],
                                                     'req_args': [   'fileids',
                                                                     'root'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\categorized_sents.py'},
    'CategorizedSentencesCorpusReader.sents': {   'opt_args': [   'categories',
                                                                  'fileids'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\categorized_sents.py'},
    'CategorizedSentencesCorpusReader.words': {   'opt_args': [   'categories',
                                                                  'fileids'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\categorized_sents.py'},
    'CategorizedTaggedCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'CategorizedTaggedCorpusReader.tagged_paras': {   'opt_args': [   'tagset',
                                                                      'categories',
                                                                      'fileids'],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'CategorizedTaggedCorpusReader.tagged_sents': {   'opt_args': [   'tagset',
                                                                      'categories',
                                                                      'fileids'],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'CategorizedTaggedCorpusReader.tagged_words': {   'opt_args': [   'tagset',
                                                                      'categories',
                                                                      'fileids'],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'CfgReadingCommand.__init__': {   'opt_args': ['gramfile'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'CfgReadingCommand.combine_readings': {   'opt_args': [],
                                              'req_args': ['readings'],
                                              'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'CfgReadingCommand.parse_to_readings': {   'opt_args': [],
                                               'req_args': ['sentence'],
                                               'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'CfgReadingCommand.to_fol': {   'opt_args': [],
                                    'req_args': ['expression'],
                                    'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'CharTokenizer.span_tokenize': {   'opt_args': [],
                                       'req_args': ['s'],
                                       'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'CharTokenizer.tokenize': {   'opt_args': [],
                                  'req_args': ['s'],
                                  'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'Chart.__init__': {   'opt_args': [],
                          'req_args': ['tokens'],
                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.child_pointer_lists': {   'opt_args': [],
                                     'req_args': ['edge'],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.dot_digraph': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.edges': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.initialize': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.insert': {   'opt_args': [],
                        'req_args': ['edge'],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.insert_with_backpointer': {   'opt_args': [],
                                         'req_args': [   'child_edge',
                                                         'previous_edge',
                                                         'new_edge'],
                                         'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.iteredges': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.leaf': {   'opt_args': [],
                      'req_args': ['index'],
                      'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.leaves': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.num_edges': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.num_leaves': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.parses': {   'opt_args': ['tree_class'],
                        'req_args': ['root'],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.pretty_format': {   'opt_args': ['width'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.pretty_format_edge': {   'opt_args': ['width'],
                                    'req_args': ['edge'],
                                    'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.pretty_format_leaves': {   'opt_args': ['width'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.select': {   'opt_args': ['restrictions'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Chart.trees': {   'opt_args': ['complete', 'tree_class'],
                       'req_args': ['edge'],
                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartCell.__init__': {   'opt_args': [],
                              'req_args': ['y', 'x'],
                              'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ChartCell.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ChartCell.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ChartCell.add': {   'opt_args': [],
                         'req_args': ['span'],
                         'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ChartComparer.__init__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.destroy': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.load_chart': {   'opt_args': [],
                                    'req_args': ['filename'],
                                    'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.load_chart_dialog': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.mainloop': {   'opt_args': ['kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.save_chart_dialog': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.select_cell': {   'opt_args': [],
                                     'req_args': ['j', 'i'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartComparer.select_edge': {   'opt_args': [],
                                     'req_args': ['edge'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.__init__': {   'opt_args': [   'show_numedges',
                                                    'title',
                                                    'toplevel'],
                                    'req_args': ['chart', 'parent'],
                                    'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.activate': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.add_callback': {   'opt_args': [],
                                        'req_args': ['func', 'event'],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.deselect_cell': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.destroy': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.draw': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.inactivate': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.mark_edge': {   'opt_args': [],
                                     'req_args': ['edge'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.markonly_edge': {   'opt_args': [],
                                         'req_args': ['edge'],
                                         'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.pack': {   'opt_args': ['kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.remove_callback': {   'opt_args': ['func'],
                                           'req_args': ['event'],
                                           'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.select_cell': {   'opt_args': [],
                                       'req_args': ['j', 'i'],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.set_chart': {   'opt_args': [],
                                     'req_args': ['chart'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.unmark_edge': {   'opt_args': ['edge'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.update': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartMatrixView.view_edge': {   'opt_args': [],
                                     'req_args': ['edge'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParser.__init__': {   'opt_args': [   'chart_class',
                                                'use_agenda',
                                                'trace_chart_width',
                                                'trace',
                                                'strategy'],
                                'req_args': ['grammar'],
                                'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartParser.chart_parse': {   'opt_args': ['trace'],
                                   'req_args': ['tokens'],
                                   'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartParser.grammar': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartParser.parse': {   'opt_args': ['tree_class'],
                             'req_args': ['tokens'],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartParserApp.__init__': {   'opt_args': ['title'],
                                   'req_args': ['tokens', 'grammar'],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.about': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.apply_strategy': {   'opt_args': ['edge_strategy'],
                                         'req_args': ['strategy'],
                                         'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.bottom_up': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.bottom_up_leftcorner': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.bottom_up_leftcorner_strategy': {   'opt_args': [],
                                                        'req_args': [],
                                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.bottom_up_strategy': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.destroy': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.edit_grammar': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.edit_sentence': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.fundamental': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.get_font_size': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.help': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.load_chart': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.load_grammar': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.mainloop': {   'opt_args': ['kwargs'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.reset': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.resize': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.save_chart': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.save_grammar': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.set_font_size': {   'opt_args': [],
                                        'req_args': ['size'],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.set_grammar': {   'opt_args': [],
                                      'req_args': ['grammar'],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.set_sentence': {   'opt_args': [],
                                       'req_args': ['sentence'],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.top_down_init': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.top_down_predict': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.top_down_strategy': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.view_matrix': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartParserApp.view_results': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.__init__': {   'opt_args': ['toplevel'],
                                     'req_args': ['grammar', 'chart', 'parent'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.clear': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.destroy': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.pack': {   'opt_args': ['kwargs'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.print_all': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.print_selection': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.set_chart': {   'opt_args': [],
                                      'req_args': ['chart'],
                                      'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.set_grammar': {   'opt_args': [],
                                        'req_args': ['grammar'],
                                        'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartResultsView.update': {   'opt_args': ['edge'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartRuleI.apply': {   'opt_args': [],
                            'req_args': ['grammar', 'chart'],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartRuleI.apply_everywhere': {   'opt_args': [],
                                       'req_args': ['grammar', 'chart'],
                                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'ChartView.__init__': {   'opt_args': ['root', 'kw'],
                              'req_args': ['chart'],
                              'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.add_callback': {   'opt_args': [],
                                  'req_args': ['func', 'event'],
                                  'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.cycle_tree': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.draw': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.draw_tree': {   'opt_args': ['edge'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.erase_tree': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.get_font_size': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.mark_edge': {   'opt_args': ['mark'],
                               'req_args': ['edge'],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.markonly_edge': {   'opt_args': ['mark'],
                                   'req_args': ['edge'],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.page_down': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.page_up': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.remove_callback': {   'opt_args': ['func'],
                                     'req_args': ['event'],
                                     'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.scroll_down': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.scroll_up': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.set_font_size': {   'opt_args': [],
                                   'req_args': ['size'],
                                   'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.unmark_edge': {   'opt_args': ['edge'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.update': {   'opt_args': ['chart'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChartView.view_edge': {   'opt_args': [],
                               'req_args': ['edge'],
                               'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ChasenCorpusReader.__init__': {   'opt_args': [   'sent_splitter',
                                                       'encoding'],
                                       'req_args': ['fileids', 'root'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.paras': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.sents': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.tagged_paras': {   'opt_args': ['fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.tagged_sents': {   'opt_args': ['fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.tagged_words': {   'opt_args': ['fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusReader.words': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusView.__init__': {   'opt_args': ['sent_splitter'],
                                     'req_args': [   'group_by_para',
                                                     'group_by_sent',
                                                     'tagged',
                                                     'encoding',
                                                     'corpus_file'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'ChasenCorpusView.read_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\chasen.py'},
    'Chat.__init__': {   'opt_args': ['reflections'],
                         'req_args': ['pairs'],
                         'source_file': 'nltk\\nltk\\chat\\util.py'},
    'Chat.converse': {   'opt_args': ['quit'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\chat\\util.py'},
    'Chat.respond': {   'opt_args': [],
                        'req_args': ['str'],
                        'source_file': 'nltk\\nltk\\chat\\util.py'},
    'ChunkParserI.accuracy': {   'opt_args': [],
                                 'req_args': ['gold'],
                                 'source_file': 'nltk\\nltk\\chunk\\api.py'},
    'ChunkParserI.evaluate': {   'opt_args': [],
                                 'req_args': ['gold'],
                                 'source_file': 'nltk\\nltk\\chunk\\api.py'},
    'ChunkParserI.parse': {   'opt_args': [],
                              'req_args': ['tokens'],
                              'source_file': 'nltk\\nltk\\chunk\\api.py'},
    'ChunkRule.__init__': {   'opt_args': [],
                              'req_args': ['descr', 'tag_pattern'],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkRule.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkRuleWithContext.__init__': {   'opt_args': [],
                                         'req_args': [   'descr',
                                                         'right_context_tag_pattern',
                                                         'chunk_tag_pattern',
                                                         'left_context_tag_pattern'],
                                         'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkRuleWithContext.__repr__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkScore.__init__': {   'opt_args': ['kwargs'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.__len__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.accuracy': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.correct': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.f_measure': {   'opt_args': ['alpha'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.guessed': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.incorrect': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.missed': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.precision': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.recall': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkScore.score': {   'opt_args': [],
                            'req_args': ['guessed', 'correct'],
                            'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'ChunkString.__init__': {   'opt_args': ['debug_level'],
                                'req_args': ['chunk_struct'],
                                'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkString.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkString.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkString.to_chunkstruct': {   'opt_args': ['chunk_label'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkString.xform': {   'opt_args': [],
                             'req_args': ['repl', 'regexp'],
                             'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ChunkedCorpusReader.__init__': {   'opt_args': [   'tagset',
                                                        'encoding',
                                                        'para_block_reader',
                                                        'sent_tokenizer',
                                                        'str2chunktree',
                                                        'extension'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.chunked_paras': {   'opt_args': ['tagset', 'fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.chunked_sents': {   'opt_args': ['tagset', 'fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.chunked_words': {   'opt_args': ['tagset', 'fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.paras': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.sents': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.tagged_paras': {   'opt_args': ['tagset', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.tagged_sents': {   'opt_args': ['tagset', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusReader.words': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusView.__init__': {   'opt_args': [   'target_tagset',
                                                      'source_tagset'],
                                      'req_args': [   'para_block_reader',
                                                      'sent_tokenizer',
                                                      'str2chunktree',
                                                      'chunked',
                                                      'group_by_para',
                                                      'group_by_sent',
                                                      'tagged',
                                                      'encoding',
                                                      'fileid'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'ChunkedCorpusView.read_block': {   'opt_args': [],
                                        'req_args': ['stream'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\chunked.py'},
    'Cistem.__init__': {   'opt_args': ['case_insensitive'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\stem\\cistem.py'},
    'Cistem.replace_back': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\cistem.py'},
    'Cistem.replace_to': {   'opt_args': [],
                             'req_args': ['word'],
                             'source_file': 'nltk\\nltk\\stem\\cistem.py'},
    'Cistem.segment': {   'opt_args': [],
                          'req_args': ['word'],
                          'source_file': 'nltk\\nltk\\stem\\cistem.py'},
    'Cistem.stem': {   'opt_args': [],
                       'req_args': ['word'],
                       'source_file': 'nltk\\nltk\\stem\\cistem.py'},
    'ClassifierBasedPOSTagger.feature_detector': {   'opt_args': [],
                                                     'req_args': [   'history',
                                                                     'index',
                                                                     'tokens'],
                                                     'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierBasedTagger.__init__': {   'opt_args': [   'verbose',
                                                          'cutoff_prob',
                                                          'backoff',
                                                          'classifier',
                                                          'classifier_builder',
                                                          'train',
                                                          'feature_detector'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierBasedTagger.__repr__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierBasedTagger.choose_tag': {   'opt_args': [],
                                            'req_args': [   'history',
                                                            'index',
                                                            'tokens'],
                                            'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierBasedTagger.classifier': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierBasedTagger.feature_detector': {   'opt_args': [],
                                                  'req_args': [   'history',
                                                                  'index',
                                                                  'tokens'],
                                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ClassifierI.classify': {   'opt_args': [],
                                'req_args': ['featureset'],
                                'source_file': 'nltk\\nltk\\classify\\api.py'},
    'ClassifierI.classify_many': {   'opt_args': [],
                                     'req_args': ['featuresets'],
                                     'source_file': 'nltk\\nltk\\classify\\api.py'},
    'ClassifierI.labels': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\classify\\api.py'},
    'ClassifierI.prob_classify': {   'opt_args': [],
                                     'req_args': ['featureset'],
                                     'source_file': 'nltk\\nltk\\classify\\api.py'},
    'ClassifierI.prob_classify_many': {   'opt_args': [],
                                          'req_args': ['featuresets'],
                                          'source_file': 'nltk\\nltk\\classify\\api.py'},
    'Clause.__add__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.__getslice__': {   'opt_args': [],
                               'req_args': ['end', 'start'],
                               'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.__init__': {   'opt_args': [],
                           'req_args': ['data'],
                           'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.__repr__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.__str__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.__sub__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.free': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.isSubsetOf': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.is_tautology': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.replace': {   'opt_args': [],
                          'req_args': ['expression', 'variable'],
                          'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.substitute_bindings': {   'opt_args': [],
                                      'req_args': ['bindings'],
                                      'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.subsumes': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Clause.unify': {   'opt_args': ['debug', 'skipped', 'used', 'bindings'],
                        'req_args': ['other'],
                        'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'ClosedDomainProver.assumptions': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'ClosedDomainProver.goal': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'ClosedDomainProver.replace_quants': {   'opt_args': [],
                                             'req_args': ['domain', 'ex'],
                                             'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'ClosedWorldProver.assumptions': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'ClusterI.classification_probdist': {   'opt_args': [],
                                            'req_args': ['vector'],
                                            'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.classify': {   'opt_args': [],
                             'req_args': ['token'],
                             'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.cluster': {   'opt_args': ['assign_clusters'],
                            'req_args': ['vectors'],
                            'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.cluster_name': {   'opt_args': [],
                                 'req_args': ['index'],
                                 'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.cluster_names': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.likelihood': {   'opt_args': [],
                               'req_args': ['label', 'vector'],
                               'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'ClusterI.num_clusters': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\cluster\\api.py'},
    'Collection.__init__': {   'opt_args': ['name', 'kw'],
                               'req_args': ['children', 'id'],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Collection.__lt__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\downloader.py'},
    'Collection.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Collection.fromxml': {   'opt_args': [],
                              'req_args': ['xml'],
                              'source_file': 'nltk\\nltk\\downloader.py'},
    'CollocationsModel.__init__': {   'opt_args': [],
                                      'req_args': ['queue'],
                                      'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.is_last_page': {   'opt_args': [],
                                          'req_args': ['number'],
                                          'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.load_corpus': {   'opt_args': [],
                                         'req_args': ['name'],
                                         'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.next': {   'opt_args': [],
                                  'req_args': ['page'],
                                  'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.non_default_corpora': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.prev': {   'opt_args': [],
                                  'req_args': ['page'],
                                  'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsModel.reset_results': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.__init__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.__next__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.clear_results_box': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.corpus_selected': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.destroy': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.fire_event': {   'opt_args': [],
                                       'req_args': ['event'],
                                       'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.freeze_editable': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.handle_corpus_loaded': {   'opt_args': [],
                                                 'req_args': ['event'],
                                                 'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.handle_error_loading_corpus': {   'opt_args': [],
                                                        'req_args': ['event'],
                                                        'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.load_corpus': {   'opt_args': [],
                                        'req_args': ['selection'],
                                        'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.mainloop': {   'opt_args': ['kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.previous': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.reset_current_page': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.set_paging_button_states': {   'opt_args': [],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.set_result_size': {   'opt_args': ['kwargs'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.unfreeze_editable': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'CollocationsView.write_results': {   'opt_args': [],
                                          'req_args': ['results'],
                                          'source_file': 'nltk\\nltk\\app\\collocations_app.py'},
    'ColorizedList.__init__': {   'opt_args': ['items', 'options'],
                                  'req_args': ['parent'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.add_callback': {   'opt_args': [],
                                      'req_args': ['func', 'event'],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.focus': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.get': {   'opt_args': ['index'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.grid': {   'opt_args': ['cnf', 'kw'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.mark': {   'opt_args': [],
                              'req_args': ['item'],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.markonly': {   'opt_args': [],
                                  'req_args': ['item'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.pack': {   'opt_args': ['cnf', 'kw'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.remove_callback': {   'opt_args': ['func'],
                                         'req_args': ['event'],
                                         'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.set': {   'opt_args': [],
                             'req_args': ['items'],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.unmark': {   'opt_args': ['item'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ColorizedList.view': {   'opt_args': [],
                              'req_args': ['item'],
                              'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ComparativeSentencesCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                                     'sent_tokenizer',
                                                                     'word_tokenizer'],
                                                     'req_args': [   'fileids',
                                                                     'root'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'ComparativeSentencesCorpusReader.comparisons': {   'opt_args': ['fileids'],
                                                        'req_args': [],
                                                        'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'ComparativeSentencesCorpusReader.keywords': {   'opt_args': ['fileids'],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'ComparativeSentencesCorpusReader.keywords_readme': {   'opt_args': [],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'ComparativeSentencesCorpusReader.sents': {   'opt_args': ['fileids'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'ComparativeSentencesCorpusReader.words': {   'opt_args': ['fileids'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'Comparison.__init__': {   'opt_args': [   'keyword',
                                               'feature',
                                               'entity_2',
                                               'entity_1',
                                               'comp_type',
                                               'text'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'Comparison.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\comparative_sents.py'},
    'CompleterRule.apply': {   'opt_args': [],
                               'req_args': ['edge', 'grammar', 'chart'],
                               'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'ComplexType.__eq__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.__init__': {   'opt_args': [],
                                'req_args': ['second', 'first'],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.__ne__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.matches': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.resolve': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ComplexType.str': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ConcatenatedCorpusView.__init__': {   'opt_args': [],
                                           'req_args': ['corpus_views'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'ConcatenatedCorpusView.__len__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'ConcatenatedCorpusView.close': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'ConcatenatedCorpusView.iterate_from': {   'opt_args': [],
                                               'req_args': ['start_tok'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'Concept.__init__': {   'opt_args': ['extension', 'closures', 'altLabels'],
                            'req_args': ['arity', 'prefLabel'],
                            'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'Concept.__repr__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'Concept.__str__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'Concept.augment': {   'opt_args': [],
                           'req_args': ['data'],
                           'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'Concept.close': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'ConcordanceIndex.__init__': {   'opt_args': ['key'],
                                     'req_args': ['tokens'],
                                     'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceIndex.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceIndex.find_concordance': {   'opt_args': ['width'],
                                             'req_args': ['word'],
                                             'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceIndex.offsets': {   'opt_args': [],
                                    'req_args': ['word'],
                                    'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceIndex.print_concordance': {   'opt_args': ['lines', 'width'],
                                              'req_args': ['word'],
                                              'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceIndex.tokens': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\text.py'},
    'ConcordanceSearchModel.__init__': {   'opt_args': [],
                                           'req_args': ['queue'],
                                           'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.get_results': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.has_more_pages': {   'opt_args': [],
                                                 'req_args': ['page'],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.load_corpus': {   'opt_args': [],
                                              'req_args': ['name'],
                                              'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.next': {   'opt_args': [],
                                       'req_args': ['page'],
                                       'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.non_default_corpora': {   'opt_args': [],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.prev': {   'opt_args': [],
                                       'req_args': ['page'],
                                       'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.reset_query': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.reset_results': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.search': {   'opt_args': [],
                                         'req_args': ['page', 'query'],
                                         'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchModel.set_results': {   'opt_args': [],
                                              'req_args': ['resultset', 'page'],
                                              'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.__init__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.__next__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.about': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.clear_all': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.clear_results_box': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.corpus_selected': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.destroy': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.fire_event': {   'opt_args': [],
                                            'req_args': ['event'],
                                            'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.freeze_editable': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.handle_corpus_loaded': {   'opt_args': [],
                                                      'req_args': ['event'],
                                                      'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.handle_error_loading_corpus': {   'opt_args': [],
                                                             'req_args': [   'event'],
                                                             'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.handle_search_error': {   'opt_args': [],
                                                     'req_args': ['event'],
                                                     'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.handle_search_terminated': {   'opt_args': [],
                                                          'req_args': ['event'],
                                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.load_corpus': {   'opt_args': [],
                                             'req_args': ['selection'],
                                             'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.mainloop': {   'opt_args': ['kwargs'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.pad': {   'opt_args': [],
                                     'req_args': ['hend', 'hstart', 'sent'],
                                     'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.previous': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.search': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.search_enter_keypress_handler': {   'opt_args': [],
                                                               'req_args': [],
                                                               'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.set_cntx_af_len': {   'opt_args': ['kwargs'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.set_cntx_bf_len': {   'opt_args': ['kwargs'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.set_paging_button_states': {   'opt_args': [],
                                                          'req_args': [],
                                                          'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.set_result_size': {   'opt_args': ['kwargs'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.unfreeze_editable': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.words_and_labels': {   'opt_args': [],
                                                  'req_args': [   'pos2',
                                                                  'pos1',
                                                                  'sentence'],
                                                  'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConcordanceSearchView.write_results': {   'opt_args': [],
                                               'req_args': ['results'],
                                               'source_file': 'nltk\\nltk\\app\\concordance_app.py'},
    'ConditionalFreqDist.N': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__add__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__and__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__ge__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__gt__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__init__': {   'opt_args': ['cond_samples'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__le__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__lt__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__or__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__reduce__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__repr__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.__sub__': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.conditions': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.deepcopy': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.plot': {   'opt_args': ['kwargs'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalFreqDist.tabulate': {   'opt_args': ['kwargs'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalProbDist.__init__': {   'opt_args': ['factory_kw_args'],
                                        'req_args': [   'probdist_factory',
                                                        'cfdist'],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalProbDist.__missing__': {   'opt_args': [],
                                           'req_args': ['key'],
                                           'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalProbDistI.__init__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalProbDistI.__repr__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\probability.py'},
    'ConditionalProbDistI.conditions': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\probability.py'},
    'Configuration.__init__': {   'opt_args': [],
                                  'req_args': ['dep_graph'],
                                  'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Configuration.__str__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Configuration.extract_features': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'ConfusionMatrix.__getitem__': {   'opt_args': [],
                                       'req_args': ['li_lj_tuple'],
                                       'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.__init__': {   'opt_args': ['sort_by_count'],
                                    'req_args': ['test', 'reference'],
                                    'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.__str__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.evaluate': {   'opt_args': [   'sort_by_count',
                                                    'truncate',
                                                    'alpha'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.f_measure': {   'opt_args': ['alpha'],
                                     'req_args': ['value'],
                                     'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.key': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.precision': {   'opt_args': [],
                                     'req_args': ['value'],
                                     'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.pretty_format': {   'opt_args': [   'sort_by_count',
                                                         'truncate',
                                                         'values_in_chart',
                                                         'show_percents'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConfusionMatrix.recall': {   'opt_args': [],
                                  'req_args': ['value'],
                                  'source_file': 'nltk\\nltk\\metrics\\confusionmatrix.py'},
    'ConllChunkCorpusReader.__init__': {   'opt_args': [   'separator',
                                                           'tagset',
                                                           'encoding'],
                                           'req_args': [   'chunk_types',
                                                           'fileids',
                                                           'root'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.__init__': {   'opt_args': [   'separator',
                                                      'tagset',
                                                      'tree_class',
                                                      'encoding',
                                                      'srl_includes_roleset',
                                                      'pos_in_tree',
                                                      'root_label',
                                                      'chunk_types'],
                                      'req_args': [   'columntypes',
                                                      'fileids',
                                                      'root'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.chunked_sents': {   'opt_args': [   'tagset',
                                                           'chunk_types',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.chunked_words': {   'opt_args': [   'tagset',
                                                           'chunk_types',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.iob_sents': {   'opt_args': ['tagset', 'fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.iob_words': {   'opt_args': ['tagset', 'fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.parsed_sents': {   'opt_args': [   'tagset',
                                                          'pos_in_tree',
                                                          'fileids'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.sents': {   'opt_args': ['fileids'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.srl_instances': {   'opt_args': [   'flatten',
                                                           'pos_in_tree',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.srl_spans': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.tagged_sents': {   'opt_args': ['tagset', 'fileids'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllCorpusReader.words': {   'opt_args': ['fileids'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstance.__init__': {   'opt_args': [],
                                     'req_args': [   'tagged_spans',
                                                     'roleset',
                                                     'verb_stem',
                                                     'verb_head',
                                                     'tree'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstance.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstance.pprint': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstanceList.__init__': {   'opt_args': ['instances'],
                                         'req_args': ['tree'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstanceList.__str__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConllSRLInstanceList.pprint': {   'opt_args': ['include_tree'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\conll.py'},
    'ConstantExpression.constants': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ConstantExpression.free': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ConstantExpression.unify': {   'opt_args': [],
                                    'req_args': ['bindings', 'other'],
                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'Constraint.__eq__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'Constraint.__hash__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'Constraint.__init__': {   'opt_args': [],
                               'req_args': ['rhs', 'lhs'],
                               'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'Constraint.__ne__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'Constraint.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'ContextIndex.__init__': {   'opt_args': ['key', 'filter', 'context_func'],
                                 'req_args': ['tokens'],
                                 'source_file': 'nltk\\nltk\\text.py'},
    'ContextIndex.common_contexts': {   'opt_args': ['fail_on_unknown'],
                                        'req_args': ['words'],
                                        'source_file': 'nltk\\nltk\\text.py'},
    'ContextIndex.similar_words': {   'opt_args': ['n'],
                                      'req_args': ['word'],
                                      'source_file': 'nltk\\nltk\\text.py'},
    'ContextIndex.tokens': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\text.py'},
    'ContextIndex.word_similarity_dict': {   'opt_args': [],
                                             'req_args': ['word'],
                                             'source_file': 'nltk\\nltk\\text.py'},
    'ContextTagger.__init__': {   'opt_args': ['backoff'],
                                  'req_args': ['context_to_tag'],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ContextTagger.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ContextTagger.choose_tag': {   'opt_args': [],
                                    'req_args': ['history', 'index', 'tokens'],
                                    'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ContextTagger.context': {   'opt_args': [],
                                 'req_args': ['history', 'index', 'tokens'],
                                 'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ContextTagger.size': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'ContingencyMeasures.__init__': {   'opt_args': [],
                                        'req_args': ['measures'],
                                        'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'CooperStore.__init__': {   'opt_args': [],
                                'req_args': ['featstruct'],
                                'source_file': 'nltk\\nltk\\sem\\cooper_storage.py'},
    'CooperStore.s_retrieve': {   'opt_args': ['trace'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\cooper_storage.py'},
    'CoreNLPDependencyParser.make_tree': {   'opt_args': [],
                                             'req_args': ['result'],
                                             'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPParser.make_tree': {   'opt_args': [],
                                   'req_args': ['result'],
                                   'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPServer.__enter__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPServer.__exit__': {   'opt_args': [],
                                  'req_args': ['exc_tb', 'exc_val', 'exc_type'],
                                  'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPServer.__init__': {   'opt_args': [   'strict_json',
                                                  'port',
                                                  'corenlp_options',
                                                  'java_options',
                                                  'verbose',
                                                  'path_to_models_jar',
                                                  'path_to_jar'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPServer.start': {   'opt_args': ['stderr', 'stdout'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CoreNLPServer.stop': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'CorpusReader.__init__': {   'opt_args': ['tagset', 'encoding'],
                                 'req_args': ['fileids', 'root'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.abspath': {   'opt_args': [],
                                'req_args': ['fileid'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.abspaths': {   'opt_args': [   'include_fileid',
                                                 'include_encoding',
                                                 'fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.citation': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.encoding': {   'opt_args': [],
                                 'req_args': ['file'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.ensure_loaded': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.fileids': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.license': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.open': {   'opt_args': [],
                             'req_args': ['file'],
                             'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.raw': {   'opt_args': ['fileids'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'CorpusReader.readme': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'Counter.__init__': {   'opt_args': ['initial_value'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\internals.py'},
    'Counter.get': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\internals.py'},
    'Counts.__init__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'Counts.update_fertility': {   'opt_args': [],
                                   'req_args': ['alignment_info', 'count'],
                                   'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'Counts.update_lexical_translation': {   'opt_args': [],
                                             'req_args': [   'j',
                                                             'alignment_info',
                                                             'count'],
                                             'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'Counts.update_null_generation': {   'opt_args': [],
                                         'req_args': [   'alignment_info',
                                                         'count'],
                                         'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'CrossValidationProbDist.__init__': {   'opt_args': [],
                                            'req_args': ['bins', 'freqdists'],
                                            'source_file': 'nltk\\nltk\\probability.py'},
    'CrossValidationProbDist.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\probability.py'},
    'CrossValidationProbDist.discount': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\probability.py'},
    'CrossValidationProbDist.freqdists': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\probability.py'},
    'CrossValidationProbDist.prob': {   'opt_args': [],
                                        'req_args': ['sample'],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'CrossValidationProbDist.samples': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\probability.py'},
    'CrubadanCorpusReader.__init__': {   'opt_args': ['tagset', 'encoding'],
                                         'req_args': ['fileids', 'root'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\crubadan.py'},
    'CrubadanCorpusReader.crubadan_to_iso': {   'opt_args': [],
                                                'req_args': ['lang'],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\crubadan.py'},
    'CrubadanCorpusReader.iso_to_crubadan': {   'opt_args': [],
                                                'req_args': ['lang'],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\crubadan.py'},
    'CrubadanCorpusReader.lang_freq': {   'opt_args': [],
                                          'req_args': ['lang'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\crubadan.py'},
    'CrubadanCorpusReader.langs': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\crubadan.py'},
    'CustomFeatureValue.__eq__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'CustomFeatureValue.__hash__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'CustomFeatureValue.__lt__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'CustomFeatureValue.__ne__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'CustomFeatureValue.unify': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\featstruct.py'},
    'CutoffChecker.__init__': {   'opt_args': [],
                                  'req_args': ['cutoffs'],
                                  'source_file': 'nltk\\nltk\\classify\\util.py'},
    'CutoffChecker.check': {   'opt_args': [],
                               'req_args': ['train_toks', 'classifier'],
                               'source_file': 'nltk\\nltk\\classify\\util.py'},
    'DRS.__eq__': {   'opt_args': [],
                      'req_args': ['other'],
                      'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.__init__': {   'opt_args': ['consequent'],
                        'req_args': ['conds', 'refs'],
                        'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.__ne__': {   'opt_args': [],
                      'req_args': ['other'],
                      'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.__str__': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.eliminate_equality': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.fol': {   'opt_args': [],
                   'req_args': [],
                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.free': {   'opt_args': [],
                    'req_args': [],
                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.get_refs': {   'opt_args': ['recursive'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.replace': {   'opt_args': ['alpha_convert', 'replace_bound'],
                       'req_args': ['expression', 'variable'],
                       'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.visit': {   'opt_args': [],
                     'req_args': ['combinator', 'function'],
                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DRS.visit_structured': {   'opt_args': [],
                                'req_args': ['combinator', 'function'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DanishStemmer.stem': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'Debug.__add__': {   'opt_args': [],
                         'req_args': ['increment'],
                         'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Debug.__init__': {   'opt_args': ['lines', 'indent'],
                          'req_args': ['verbose'],
                          'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'Debug.line': {   'opt_args': ['indent'],
                      'req_args': ['data'],
                      'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'DebugObject.__add__': {   'opt_args': [],
                               'req_args': ['i'],
                               'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'DebugObject.__init__': {   'opt_args': ['indent', 'enabled'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'DebugObject.line': {   'opt_args': [],
                            'req_args': ['line'],
                            'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'DecisionTreeClassifier.__init__': {   'opt_args': [   'default',
                                                           'decisions',
                                                           'feature_name'],
                                           'req_args': ['label'],
                                           'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.__str__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.best_binary_stump': {   'opt_args': ['verbose'],
                                                    'req_args': [   'feature_values',
                                                                    'labeled_featuresets',
                                                                    'feature_names'],
                                                    'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.best_stump': {   'opt_args': ['verbose'],
                                             'req_args': [   'labeled_featuresets',
                                                             'feature_names'],
                                             'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.binary_stump': {   'opt_args': [],
                                               'req_args': [   'labeled_featuresets',
                                                               'feature_value',
                                                               'feature_name'],
                                               'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.classify': {   'opt_args': [],
                                           'req_args': ['featureset'],
                                           'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.error': {   'opt_args': [],
                                        'req_args': ['labeled_featuresets'],
                                        'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.labels': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.leaf': {   'opt_args': [],
                                       'req_args': ['labeled_featuresets'],
                                       'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.pretty_format': {   'opt_args': [   'depth',
                                                                'prefix',
                                                                'width'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.pseudocode': {   'opt_args': ['depth', 'prefix'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.refine': {   'opt_args': [   'verbose',
                                                         'feature_values',
                                                         'binary'],
                                         'req_args': [   'support_cutoff',
                                                         'depth_cutoff',
                                                         'entropy_cutoff',
                                                         'labeled_featuresets'],
                                         'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.stump': {   'opt_args': [],
                                        'req_args': [   'labeled_featuresets',
                                                        'feature_name'],
                                        'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DecisionTreeClassifier.train': {   'opt_args': [   'verbose',
                                                        'feature_values',
                                                        'binary',
                                                        'support_cutoff',
                                                        'depth_cutoff',
                                                        'entropy_cutoff'],
                                        'req_args': ['labeled_featuresets'],
                                        'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'DefaultTagger.__init__': {   'opt_args': [],
                                  'req_args': ['tag'],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'DefaultTagger.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'DefaultTagger.choose_tag': {   'opt_args': [],
                                    'req_args': ['history', 'index', 'tokens'],
                                    'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'DefaultTagger.decode_json_obj': {   'opt_args': [],
                                         'req_args': ['obj', 'cls'],
                                         'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'DefaultTagger.encode_json_obj': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'DemoScorer.score': {   'opt_args': [],
                            'req_args': ['graph'],
                            'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'DemoScorer.train': {   'opt_args': [],
                            'req_args': ['graphs'],
                            'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'Dendrogram.__init__': {   'opt_args': ['items'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'Dendrogram.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'Dendrogram.groups': {   'opt_args': [],
                             'req_args': ['n'],
                             'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'Dendrogram.merge': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'Dendrogram.show': {   'opt_args': ['leaf_labels'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'DependencyCorpusReader.__init__': {   'opt_args': [   'para_block_reader',
                                                           'sent_tokenizer',
                                                           'word_tokenizer',
                                                           'encoding'],
                                           'req_args': ['fileids', 'root'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusReader.parsed_sents': {   'opt_args': ['fileids'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusReader.sents': {   'opt_args': ['fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusReader.tagged_sents': {   'opt_args': ['fileids'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusReader.tagged_words': {   'opt_args': ['fileids'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusReader.words': {   'opt_args': ['fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusView.__init__': {   'opt_args': [   'encoding',
                                                         'chunk_types'],
                                         'req_args': [   'dependencies',
                                                         'group_by_sent',
                                                         'tagged',
                                                         'corpus_file'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyCorpusView.read_block': {   'opt_args': [],
                                           'req_args': ['stream'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\dependency.py'},
    'DependencyEvaluator.__init__': {   'opt_args': [],
                                        'req_args': [   'gold_sents',
                                                        'parsed_sents'],
                                        'source_file': 'nltk\\nltk\\parse\\evaluate.py'},
    'DependencyEvaluator.eval': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\evaluate.py'},
    'DependencyGrammar.__contains__': {   'opt_args': [],
                                          'req_args': ['head_mod'],
                                          'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGrammar.__init__': {   'opt_args': [],
                                      'req_args': ['productions'],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGrammar.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGrammar.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGrammar.contains': {   'opt_args': [],
                                      'req_args': ['mod', 'head'],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGrammar.fromstring': {   'opt_args': [],
                                        'req_args': ['input', 'cls'],
                                        'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyGraph.__init__': {   'opt_args': [   'top_relation_label',
                                                    'cell_separator',
                                                    'zero_based',
                                                    'cell_extractor',
                                                    'tree_str'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.__str__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.add_arc': {   'opt_args': [],
                                   'req_args': ['mod_address', 'head_address'],
                                   'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.add_node': {   'opt_args': [],
                                    'req_args': ['node'],
                                    'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.connect_graph': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.contains_address': {   'opt_args': [],
                                            'req_args': ['node_address'],
                                            'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.contains_cycle': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.get_by_address': {   'opt_args': [],
                                          'req_args': ['node_address'],
                                          'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.get_cycle_path': {   'opt_args': [],
                                          'req_args': [   'goal_node_index',
                                                          'curr_node'],
                                          'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.left_children': {   'opt_args': [],
                                         'req_args': ['node_index'],
                                         'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.load': {   'opt_args': [   'top_relation_label',
                                                'cell_separator',
                                                'zero_based'],
                                'req_args': ['filename'],
                                'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.nx_graph': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.redirect_arcs': {   'opt_args': [],
                                         'req_args': ['redirect', 'originals'],
                                         'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.remove_by_address': {   'opt_args': [],
                                             'req_args': ['address'],
                                             'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.right_children': {   'opt_args': [],
                                          'req_args': ['node_index'],
                                          'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.to_conll': {   'opt_args': [],
                                    'req_args': ['style'],
                                    'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.to_dot': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.tree': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyGraph.triples': {   'opt_args': ['node'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'DependencyProduction.__str__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\grammar.py'},
    'DependencyScorerI.__init__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'DependencyScorerI.score': {   'opt_args': [],
                                   'req_args': ['graph'],
                                   'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'DependencyScorerI.train': {   'opt_args': [],
                                   'req_args': ['graphs'],
                                   'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'DependencySpan.__eq__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__hash__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__init__': {   'opt_args': [],
                                   'req_args': [   'tags',
                                                   'arcs',
                                                   'head_index',
                                                   'end_index',
                                                   'start_index'],
                                   'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__lt__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__ne__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__repr__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.__str__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'DependencySpan.head_index': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'Deprecated.__new__': {   'opt_args': ['kwargs'],
                              'req_args': ['cls'],
                              'source_file': 'nltk\\nltk\\internals.py'},
    'DictionaryConditionalProbDist.__init__': {   'opt_args': [],
                                                  'req_args': ['probdist_dict'],
                                                  'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryConditionalProbDist.__missing__': {   'opt_args': [],
                                                     'req_args': ['key'],
                                                     'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.__init__': {   'opt_args': [   'normalize',
                                                       'log',
                                                       'prob_dict'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.logprob': {   'opt_args': [],
                                      'req_args': ['sample'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.max': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.prob': {   'opt_args': [],
                                   'req_args': ['sample'],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'DictionaryProbDist.samples': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'DirectedBinaryCombinator.can_combine': {   'opt_args': [],
                                                'req_args': ['right', 'left'],
                                                'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'DirectedBinaryCombinator.combine': {   'opt_args': [],
                                            'req_args': ['right', 'left'],
                                            'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'Direction.__eq__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__hash__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__init__': {   'opt_args': [],
                              'req_args': ['restrictions', 'dir'],
                              'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__lt__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__ne__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__neg__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.can_compose': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.can_cross': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.can_unify': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.dir': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.is_backward': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.is_forward': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.is_variable': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.restrs': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'Direction.substitute': {   'opt_args': [],
                                'req_args': ['subs'],
                                'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'DiscourseTester.__init__': {   'opt_args': [   'background',
                                                    'reading_command'],
                                    'req_args': ['input'],
                                    'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.add_background': {   'opt_args': ['verbose'],
                                          'req_args': ['background'],
                                          'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.add_sentence': {   'opt_args': ['consistchk', 'informchk'],
                                        'req_args': ['sentence'],
                                        'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.background': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.expand_threads': {   'opt_args': ['threads'],
                                          'req_args': ['thread_id'],
                                          'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.grammar': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.models': {   'opt_args': ['verbose', 'show', 'thread_id'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.multiply': {   'opt_args': [],
                                    'req_args': ['readings', 'discourse'],
                                    'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.readings': {   'opt_args': [   'show_thread_readings',
                                                    'filter',
                                                    'verbose',
                                                    'threaded',
                                                    'sentence'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.retract_sentence': {   'opt_args': ['verbose'],
                                            'req_args': ['sentence'],
                                            'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DiscourseTester.sentences': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'Downloader.__init__': {   'opt_args': ['download_dir', 'server_index_url'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.clear_status_cache': {   'opt_args': ['id'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.collections': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.corpora': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.default_download_dir': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.download': {   'opt_args': [   'print_error_to',
                                               'raise_on_error',
                                               'halt_on_error',
                                               'prefix',
                                               'force',
                                               'quiet',
                                               'download_dir',
                                               'info_or_id'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.incr_download': {   'opt_args': ['force', 'download_dir'],
                                    'req_args': ['info_or_id'],
                                    'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.index': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.info': {   'opt_args': [],
                           'req_args': ['id'],
                           'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.is_installed': {   'opt_args': ['download_dir'],
                                   'req_args': ['info_or_id'],
                                   'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.is_stale': {   'opt_args': ['download_dir'],
                               'req_args': ['info_or_id'],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.list': {   'opt_args': [   'skip_installed',
                                           'more_prompt',
                                           'header',
                                           'show_collections',
                                           'show_packages',
                                           'download_dir'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.models': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.packages': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.status': {   'opt_args': ['download_dir'],
                             'req_args': ['info_or_id'],
                             'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.update': {   'opt_args': ['prefix', 'quiet'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\downloader.py'},
    'Downloader.xmlinfo': {   'opt_args': [],
                              'req_args': ['id'],
                              'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderGUI.__init__': {   'opt_args': ['use_threads'],
                                  'req_args': ['dataserver'],
                                  'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderGUI.about': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderGUI.destroy': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderGUI.help': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderGUI.mainloop': {   'opt_args': ['kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderShell.__init__': {   'opt_args': [],
                                    'req_args': ['dataserver'],
                                    'source_file': 'nltk\\nltk\\downloader.py'},
    'DownloaderShell.run': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'DrsDrawer.__init__': {   'opt_args': ['canvas', 'size_canvas'],
                              'req_args': ['drs'],
                              'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrsDrawer.draw': {   'opt_args': ['y', 'x'],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrsWidget.__init__': {   'opt_args': ['attribs'],
                              'req_args': ['drs', 'canvas'],
                              'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrsWidget.clear': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrsWidget.draw': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtAbstractVariableExpression.eliminate_equality': {   'opt_args': [],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtAbstractVariableExpression.fol': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtAbstractVariableExpression.get_refs': {   'opt_args': ['recursive'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtApplicationExpression.fol': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtApplicationExpression.get_refs': {   'opt_args': ['recursive'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtBinaryExpression.get_refs': {   'opt_args': ['recursive'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.__eq__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.__init__': {   'opt_args': ['consequent'],
                                     'req_args': ['second', 'first'],
                                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.__ne__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.__str__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.eliminate_equality': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.fol': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.getOp': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.get_refs': {   'opt_args': ['recursive'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.replace': {   'opt_args': [   'alpha_convert',
                                                    'replace_bound'],
                                    'req_args': ['expression', 'variable'],
                                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.simplify': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtConcatenation.visit': {   'opt_args': [],
                                  'req_args': ['combinator', 'function'],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtEqualityExpression.fol': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.__add__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.__and__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.__gt__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.__neg__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.__or__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.applyto': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.draw': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.eliminate_equality': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.equiv': {   'opt_args': ['prover'],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.fromstring': {   'opt_args': [],
                                    'req_args': ['s', 'cls'],
                                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.get_refs': {   'opt_args': ['recursive'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.is_pronoun_function': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.make_EqualityExpression': {   'opt_args': [],
                                                 'req_args': [   'second',
                                                                 'first'],
                                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.make_VariableExpression': {   'opt_args': [],
                                                 'req_args': ['variable'],
                                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.pretty_format': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.pretty_print': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.resolve_anaphora': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.type': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtExpression.typecheck': {   'opt_args': ['signature'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtGlue.__init__': {   'opt_args': [   'verbose',
                                            'depparser',
                                            'remove_duplicates',
                                            'semtype_file'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlue.get_glue_dict': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlueDemo.__init__': {   'opt_args': [],
                                'req_args': ['examples'],
                                'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.about': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.destroy': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.mainloop': {   'opt_args': ['kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.next': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.postscript': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.prev': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDemo.resize': {   'opt_args': ['size'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\drt_glue_demo.py'},
    'DrtGlueDict.get_GlueFormula_factory': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlueFormula.__init__': {   'opt_args': ['indices'],
                                   'req_args': ['glue', 'meaning'],
                                   'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlueFormula.make_LambdaExpression': {   'opt_args': [],
                                                'req_args': [   'term',
                                                                'variable'],
                                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlueFormula.make_VariableExpression': {   'opt_args': [],
                                                  'req_args': ['name'],
                                                  'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'DrtGlueReadingCommand.__init__': {   'opt_args': [   'depparser',
                                                          'remove_duplicates',
                                                          'semtype_file'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DrtGlueReadingCommand.combine_readings': {   'opt_args': [],
                                                  'req_args': ['readings'],
                                                  'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DrtGlueReadingCommand.parse_to_readings': {   'opt_args': [],
                                                   'req_args': ['sentence'],
                                                   'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DrtGlueReadingCommand.process_thread': {   'opt_args': [],
                                                'req_args': [   'sentence_readings'],
                                                'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DrtGlueReadingCommand.to_fol': {   'opt_args': [],
                                        'req_args': ['expression'],
                                        'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'DrtLambdaExpression.alpha_convert': {   'opt_args': [],
                                             'req_args': ['newvar'],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtLambdaExpression.fol': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtLambdaExpression.get_refs': {   'opt_args': ['recursive'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtNegatedExpression.fol': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtNegatedExpression.get_refs': {   'opt_args': ['recursive'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtOrExpression.fol': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.__init__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.get_BooleanExpression_factory': {   'opt_args': [],
                                                   'req_args': ['tok'],
                                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.get_all_symbols': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.handle': {   'opt_args': [],
                            'req_args': ['context', 'tok'],
                            'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.handle_DRS': {   'opt_args': [],
                                'req_args': ['context', 'tok'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.handle_conds': {   'opt_args': [],
                                  'req_args': ['context'],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.handle_prop': {   'opt_args': [],
                                 'req_args': ['context', 'tok'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.handle_refs': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.isvariable': {   'opt_args': [],
                                'req_args': ['tok'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_ApplicationExpression': {   'opt_args': [],
                                                'req_args': [   'argument',
                                                                'function'],
                                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_BooleanExpression': {   'opt_args': [],
                                            'req_args': [   'second',
                                                            'first',
                                                            'factory'],
                                            'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_EqualityExpression': {   'opt_args': [],
                                             'req_args': ['second', 'first'],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_LambdaExpression': {   'opt_args': [],
                                           'req_args': ['term', 'variables'],
                                           'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_NegatedExpression': {   'opt_args': [],
                                            'req_args': ['expression'],
                                            'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtParser.make_VariableExpression': {   'opt_args': [],
                                             'req_args': ['name'],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.__eq__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.__init__': {   'opt_args': [],
                                   'req_args': ['drs', 'variable'],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.__ne__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.__str__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.eliminate_equality': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.fol': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.get_refs': {   'opt_args': ['recursive'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.replace': {   'opt_args': [   'alpha_convert',
                                                  'replace_bound'],
                                  'req_args': ['expression', 'variable'],
                                  'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.visit': {   'opt_args': [],
                                'req_args': ['combinator', 'function'],
                                'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DrtProposition.visit_structured': {   'opt_args': [],
                                           'req_args': [   'combinator',
                                                           'function'],
                                           'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'DutchStemmer.stem': {   'opt_args': [],
                             'req_args': ['word'],
                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ELEProbDist.__init__': {   'opt_args': ['bins'],
                                'req_args': ['freqdist'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'ELEProbDist.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'EMClusterer.__init__': {   'opt_args': [   'svd_dimensions',
                                                'normalise',
                                                'bias',
                                                'conv_threshold',
                                                'covariance_matrices',
                                                'priors'],
                                'req_args': ['initial_means'],
                                'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EMClusterer.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EMClusterer.classify_vectorspace': {   'opt_args': [],
                                            'req_args': ['vector'],
                                            'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EMClusterer.cluster_vectorspace': {   'opt_args': ['trace'],
                                           'req_args': ['vectors'],
                                           'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EMClusterer.likelihood_vectorspace': {   'opt_args': [],
                                              'req_args': ['cluster', 'vector'],
                                              'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EMClusterer.num_clusters': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\cluster\\em.py'},
    'EarleyChartParser.__init__': {   'opt_args': ['parser_args'],
                                      'req_args': ['grammar'],
                                      'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'EdgeI.__eq__': {   'opt_args': [],
                        'req_args': ['other'],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.__hash__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.__init__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.__lt__': {   'opt_args': [],
                        'req_args': ['other'],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.__ne__': {   'opt_args': [],
                        'req_args': ['other'],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.dot': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.end': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.is_complete': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.is_incomplete': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.length': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.lhs': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.nextsym': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.rhs': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.span': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeI.start': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EdgeRule.__init__': {   'opt_args': [],
                             'req_args': ['edge'],
                             'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'EdgeRule.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'EdgeRule.apply': {   'opt_args': [],
                          'req_args': ['grammar', 'chart'],
                          'source_file': 'nltk\\nltk\\app\\chartparser_app.py'},
    'ElementWrapper.__delattr__': {   'opt_args': [],
                                      'req_args': ['attr'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__delitem__': {   'opt_args': [],
                                      'req_args': ['index'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__delslice__': {   'opt_args': [],
                                       'req_args': ['stop', 'start'],
                                       'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__getattr__': {   'opt_args': [],
                                      'req_args': ['attrib'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__getitem__': {   'opt_args': [],
                                      'req_args': ['index'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__getslice__': {   'opt_args': [],
                                       'req_args': ['stop', 'start'],
                                       'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__init__': {   'opt_args': [],
                                   'req_args': ['etree'],
                                   'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__len__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__new__': {   'opt_args': [],
                                  'req_args': ['etree', 'cls'],
                                  'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__repr__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__setattr__': {   'opt_args': [],
                                      'req_args': ['value', 'attr'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__setitem__': {   'opt_args': [],
                                      'req_args': ['element', 'index'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__setslice__': {   'opt_args': [],
                                       'req_args': [   'elements',
                                                       'stop',
                                                       'start'],
                                       'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.__str__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.find': {   'opt_args': [],
                               'req_args': ['path'],
                               'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.findall': {   'opt_args': [],
                                  'req_args': ['path'],
                                  'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.getchildren': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.getiterator': {   'opt_args': ['tag'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.makeelement': {   'opt_args': [],
                                      'req_args': ['attrib', 'tag'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'ElementWrapper.unwrap': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\internals.py'},
    'EmptyPredictRule.apply': {   'opt_args': [],
                                  'req_args': ['grammar', 'chart'],
                                  'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'EnglishStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'EntityType.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'EntityType.str': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'EntryDialog.__init__': {   'opt_args': [   'title',
                                                'set_callback',
                                                'instructions',
                                                'original_text'],
                                'req_args': ['parent'],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'EqualityExpression.getOp': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ErrorMessage.__init__': {   'opt_args': [],
                                 'req_args': ['message', 'package'],
                                 'source_file': 'nltk\\nltk\\downloader.py'},
    'EuroparlCorpusReader.chapters': {   'opt_args': ['fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'EuroparlCorpusReader.paras': {   'opt_args': ['fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'EventType.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'EventType.str': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ExistsExpression.getQuantifier': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ExpandLeftRule.__init__': {   'opt_args': [],
                                   'req_args': [   'descr',
                                                   'right_tag_pattern',
                                                   'left_tag_pattern'],
                                   'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ExpandLeftRule.__repr__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ExpandRightRule.__init__': {   'opt_args': [],
                                    'req_args': [   'descr',
                                                    'right_tag_pattern',
                                                    'left_tag_pattern'],
                                    'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ExpandRightRule.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'ExpectedMoreTokensException.__init__': {   'opt_args': ['message'],
                                                'req_args': ['index'],
                                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__and__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__call__': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__eq__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__gt__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__hash__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__lt__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__ne__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__neg__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__or__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.applyto': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.constants': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.equiv': {   'opt_args': ['prover'],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.findtype': {   'opt_args': [],
                               'req_args': ['variable'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.free': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.fromstring': {   'opt_args': ['signature', 'type_check'],
                                 'req_args': ['s', 'cls'],
                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.make_VariableExpression': {   'opt_args': [],
                                              'req_args': ['variable'],
                                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.negate': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.normalize': {   'opt_args': ['newvars'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.predicates': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.replace': {   'opt_args': ['alpha_convert', 'replace_bound'],
                              'req_args': ['expression', 'variable'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.simplify': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.substitute_bindings': {   'opt_args': [],
                                          'req_args': ['bindings'],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.typecheck': {   'opt_args': ['signature'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.variables': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.visit': {   'opt_args': [],
                            'req_args': ['combinator', 'function'],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Expression.visit_structured': {   'opt_args': [],
                                       'req_args': ['combinator', 'function'],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'FStructure.__contains__': {   'opt_args': [],
                                   'req_args': ['key'],
                                   'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.__getitem__': {   'opt_args': [],
                                  'req_args': ['key'],
                                  'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.__setitem__': {   'opt_args': [],
                                  'req_args': ['value', 'key'],
                                  'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.pretty_format': {   'opt_args': ['indent'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.read_depgraph': {   'opt_args': [],
                                    'req_args': ['depgraph'],
                                    'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.safeappend': {   'opt_args': [],
                                 'req_args': ['item', 'key'],
                                 'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.to_depgraph': {   'opt_args': ['rel'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FStructure.to_glueformula_list': {   'opt_args': [],
                                          'req_args': ['glue_dict'],
                                          'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'FeatDict.__contains__': {   'opt_args': [],
                                 'req_args': ['name_or_path'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__deepcopy__': {   'opt_args': [],
                                 'req_args': ['memo'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__delitem__': {   'opt_args': [],
                                'req_args': ['name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__getitem__': {   'opt_args': [],
                                'req_args': ['name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__init__': {   'opt_args': ['features', 'morefeatures'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__setitem__': {   'opt_args': [],
                                'req_args': ['value', 'name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.get': {   'opt_args': ['default'],
                        'req_args': ['name_or_path'],
                        'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.has_key': {   'opt_args': [],
                            'req_args': ['name_or_path'],
                            'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatDict.update': {   'opt_args': ['features', 'morefeatures'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatList.__deepcopy__': {   'opt_args': [],
                                 'req_args': ['memo'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatList.__delitem__': {   'opt_args': [],
                                'req_args': ['name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatList.__getitem__': {   'opt_args': [],
                                'req_args': ['name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatList.__init__': {   'opt_args': ['features'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatList.__setitem__': {   'opt_args': [],
                                'req_args': ['value', 'name_or_path'],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__deepcopy__': {   'opt_args': [],
                                   'req_args': ['memo'],
                                   'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__eq__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__hash__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__lt__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__ne__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__new__': {   'opt_args': ['features', 'morefeatures'],
                              'req_args': ['cls'],
                              'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.copy': {   'opt_args': ['deep'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.cyclic': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.equal_values': {   'opt_args': ['check_reentrance'],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.freeze': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.frozen': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.remove_variables': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.rename_variables': {   'opt_args': [   'new_vars',
                                                       'used_vars',
                                                       'vars'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.retract_bindings': {   'opt_args': [],
                                       'req_args': ['bindings'],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.substitute_bindings': {   'opt_args': [],
                                          'req_args': ['bindings'],
                                          'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.subsumes': {   'opt_args': [],
                               'req_args': ['other'],
                               'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.unify': {   'opt_args': [   'rename_vars',
                                            'fail',
                                            'trace',
                                            'bindings'],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.variables': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStruct.walk': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructNonterminal.__hash__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatStructNonterminal.symbol': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatStructReader.__init__': {   'opt_args': [   'logic_parser',
                                                     'flist_class',
                                                     'fdict_class',
                                                     'features'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.fromstring': {   'opt_args': ['fstruct'],
                                       'req_args': ['s'],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_app_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_fstruct_value': {   'opt_args': [],
                                               'req_args': [   'match',
                                                               'reentrances',
                                                               'position',
                                                               's'],
                                               'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_int_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_logic_value': {   'opt_args': [],
                                             'req_args': [   'match',
                                                             'reentrances',
                                                             'position',
                                                             's'],
                                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_partial': {   'opt_args': [   'fstruct',
                                                         'reentrances',
                                                         'position'],
                                         'req_args': ['s'],
                                         'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_set_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_str_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_sym_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_tuple_value': {   'opt_args': [],
                                             'req_args': [   'match',
                                                             'reentrances',
                                                             'position',
                                                             's'],
                                             'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_value': {   'opt_args': [],
                                       'req_args': [   'reentrances',
                                                       'position',
                                                       's'],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatStructReader.read_var_value': {   'opt_args': [],
                                           'req_args': [   'match',
                                                           'reentrances',
                                                           'position',
                                                           's'],
                                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.__eq__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__ge__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__gt__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__hash__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.__init__': {   'opt_args': ['end'],
                            'req_args': ['positions'],
                            'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__le__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__lt__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__ne__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.__repr__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.decode_json_obj': {   'opt_args': [],
                                   'req_args': ['obj', 'cls'],
                                   'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.default': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.display': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.encode_json_obj': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.expand': {   'opt_args': ['excludezero'],
                          'req_args': ['winlens', 'starts', 'cls'],
                          'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.extract_property': {   'opt_args': [],
                                    'req_args': ['index', 'tokens'],
                                    'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.intersects': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.issuperset': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\tbl\\feature.py'},
    'Feature.name': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.read_value': {   'opt_args': [],
                              'req_args': [   'parser',
                                              'reentrances',
                                              'position',
                                              's'],
                              'source_file': 'nltk\\nltk\\featstruct.py'},
    'Feature.unify_base_values': {   'opt_args': [],
                                     'req_args': ['bindings', 'fval2', 'fval1'],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureBottomUpChartParser.__init__': {   'opt_args': ['parser_args'],
                                               'req_args': ['grammar'],
                                               'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureBottomUpLeftCornerChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                         'req_args': [   'grammar'],
                                                         'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureBottomUpPredictCombineRule.apply': {   'opt_args': [],
                                                   'req_args': [   'edge',
                                                                   'grammar',
                                                                   'chart'],
                                                   'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureBottomUpPredictRule.apply': {   'opt_args': [],
                                            'req_args': [   'edge',
                                                            'grammar',
                                                            'chart'],
                                            'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureChart.parses': {   'opt_args': ['tree_class'],
                               'req_args': ['start'],
                               'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureChart.select': {   'opt_args': ['restrictions'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureChartParser.__init__': {   'opt_args': [   'chart_class',
                                                       'trace_chart_width',
                                                       'strategy',
                                                       'parser_args'],
                                       'req_args': ['grammar'],
                                       'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureEarleyChartParser.__init__': {   'opt_args': ['parser_args'],
                                             'req_args': ['grammar'],
                                             'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureEmptyPredictRule.apply': {   'opt_args': [],
                                         'req_args': ['grammar', 'chart'],
                                         'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureFundamentalRule.apply': {   'opt_args': [],
                                        'req_args': [   'right_edge',
                                                        'left_edge',
                                                        'grammar',
                                                        'chart'],
                                        'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureGrammar.__init__': {   'opt_args': [],
                                   'req_args': ['productions', 'start'],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureGrammar.fromstring': {   'opt_args': [   'encoding',
                                                     'fstruct_reader',
                                                     'logic_parser',
                                                     'features'],
                                     'req_args': ['input', 'cls'],
                                     'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureGrammar.leftcorner_parents': {   'opt_args': [],
                                             'req_args': ['cat'],
                                             'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureGrammar.leftcorners': {   'opt_args': [],
                                      'req_args': ['cat'],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureGrammar.productions': {   'opt_args': ['empty', 'rhs', 'lhs'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureIncrementalBottomUpChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                          'req_args': [   'grammar'],
                                                          'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureIncrementalBottomUpLeftCornerChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                                    'req_args': [   'grammar'],
                                                                    'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureIncrementalChart.select': {   'opt_args': ['restrictions'],
                                          'req_args': ['end'],
                                          'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureIncrementalChartParser.__init__': {   'opt_args': [   'chart_class',
                                                                  'trace_chart_width',
                                                                  'strategy',
                                                                  'parser_args'],
                                                  'req_args': ['grammar'],
                                                  'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureIncrementalTopDownChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                         'req_args': [   'grammar'],
                                                         'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FeatureTopDownChartParser.__init__': {   'opt_args': ['parser_args'],
                                              'req_args': ['grammar'],
                                              'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTopDownInitRule.apply': {   'opt_args': [],
                                        'req_args': ['grammar', 'chart'],
                                        'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTopDownPredictRule.apply': {   'opt_args': [],
                                           'req_args': [   'edge',
                                                           'grammar',
                                                           'chart'],
                                           'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.__init__': {   'opt_args': ['bindings', 'dot'],
                                    'req_args': ['rhs', 'lhs', 'span'],
                                    'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.__str__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.bindings': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.from_production': {   'opt_args': [],
                                           'req_args': ['index', 'production'],
                                           'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.move_dot_forward': {   'opt_args': ['bindings'],
                                            'req_args': ['new_end'],
                                            'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.next_with_bindings': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureTreeEdge.variables': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'FeatureValueConcat.__new__': {   'opt_args': [],
                                      'req_args': ['values', 'cls'],
                                      'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureValueConcat.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureValueSet.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureValueTuple.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureValueType.__eq__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueType.__hash__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueType.__init__': {   'opt_args': [],
                                     'req_args': ['value'],
                                     'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueType.__lt__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueType.__ne__': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueType.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\grammar.py'},
    'FeatureValueUnion.__new__': {   'opt_args': [],
                                     'req_args': ['values', 'cls'],
                                     'source_file': 'nltk\\nltk\\featstruct.py'},
    'FeatureValueUnion.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\featstruct.py'},
    'FileSystemPathPointer.__init__': {   'opt_args': [],
                                          'req_args': ['_path'],
                                          'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.__repr__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.__str__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.file_size': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.join': {   'opt_args': [],
                                      'req_args': ['fileid'],
                                      'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.open': {   'opt_args': ['encoding'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\data.py'},
    'FileSystemPathPointer.path': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\data.py'},
    'FilteredBottomUpPredictCombineRule.apply': {   'opt_args': [],
                                                    'req_args': [   'edge',
                                                                    'grammar',
                                                                    'chart'],
                                                    'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'FilteredCompleteFundamentalRule.apply': {   'opt_args': [],
                                                 'req_args': [   'edge',
                                                                 'grammar',
                                                                 'chart'],
                                                 'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'FindZone.addTags': {   'opt_args': [],
                            'req_args': ['m'],
                            'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'FindZone.substitute': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'FinishCollectionMessage.__init__': {   'opt_args': [],
                                            'req_args': ['collection'],
                                            'source_file': 'nltk\\nltk\\downloader.py'},
    'FinishDownloadMessage.__init__': {   'opt_args': [],
                                          'req_args': ['package'],
                                          'source_file': 'nltk\\nltk\\downloader.py'},
    'FinishPackageMessage.__init__': {   'opt_args': [],
                                         'req_args': ['package'],
                                         'source_file': 'nltk\\nltk\\downloader.py'},
    'FinishUnzipMessage.__init__': {   'opt_args': [],
                                       'req_args': ['package'],
                                       'source_file': 'nltk\\nltk\\downloader.py'},
    'FinnishStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'ForwardCombinator.__init__': {   'opt_args': ['suffix'],
                                      'req_args': ['predicate', 'combinator'],
                                      'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'ForwardCombinator.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'ForwardCombinator.can_combine': {   'opt_args': [],
                                         'req_args': ['right', 'left'],
                                         'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'ForwardCombinator.combine': {   'opt_args': [],
                                     'req_args': ['right', 'left'],
                                     'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'ForwardTypeRaiseRule.__init__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'ForwardTypeRaiseRule.__str__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'ForwardTypeRaiseRule.apply': {   'opt_args': [],
                                      'req_args': [   'right_edge',
                                                      'left_edge',
                                                      'grammar',
                                                      'chart'],
                                      'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'FramenetCorpusReader.__init__': {   'opt_args': [],
                                         'req_args': ['fileids', 'root'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.annotations': {   'opt_args': [   'full_text',
                                                            'exemplars',
                                                            'luNamePattern'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.buildindexes': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.doc': {   'opt_args': [],
                                    'req_args': ['fn_docid'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.docs': {   'opt_args': ['name'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.docs_metadata': {   'opt_args': ['name'],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.exemplars': {   'opt_args': [   'fe2',
                                                          'fe',
                                                          'frame',
                                                          'luNamePattern'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.fe_relations': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.fes': {   'opt_args': ['frame', 'name'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame': {   'opt_args': ['ignorekeys'],
                                      'req_args': ['fn_fid_or_fname'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame_by_id': {   'opt_args': ['ignorekeys'],
                                            'req_args': ['fn_fid'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame_by_name': {   'opt_args': [   'check_cache',
                                                              'ignorekeys'],
                                              'req_args': ['fn_fname'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame_ids_and_names': {   'opt_args': ['name'],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame_relation_types': {   'opt_args': [],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frame_relations': {   'opt_args': [   'type',
                                                                'frame2',
                                                                'frame'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frames': {   'opt_args': ['name'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.frames_by_lemma': {   'opt_args': [],
                                                'req_args': ['pat'],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.ft_sents': {   'opt_args': ['docNamePattern'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.help': {   'opt_args': ['attrname'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.lu': {   'opt_args': [   'frameName',
                                                   'frameID',
                                                   'luName',
                                                   'ignorekeys'],
                                   'req_args': ['fn_luid'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.lu_basic': {   'opt_args': [],
                                         'req_args': ['fn_luid'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.lu_ids_and_names': {   'opt_args': ['name'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.lus': {   'opt_args': ['frame', 'name'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.propagate_semtypes': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.semtype': {   'opt_args': [],
                                        'req_args': ['key'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.semtype_inherits': {   'opt_args': [],
                                                 'req_args': ['superST', 'st'],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.semtypes': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.sents': {   'opt_args': ['full_text', 'exemplars'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FramenetCorpusReader.warnings': {   'opt_args': [],
                                         'req_args': ['v'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'FrenchStemmer.__rv_french': {   'opt_args': [],
                                     'req_args': ['vowels', 'word'],
                                     'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'FrenchStemmer.stem': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'FreqDist.B': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.N': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.Nr': {   'opt_args': ['bins'],
                       'req_args': ['r'],
                       'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__add__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__and__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__delitem__': {   'opt_args': [],
                                'req_args': ['key'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__ge__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__init__': {   'opt_args': ['samples'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__iter__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__le__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__or__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__setitem__': {   'opt_args': [],
                                'req_args': ['val', 'key'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.__sub__': {   'opt_args': [],
                            'req_args': ['other'],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.copy': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.freq': {   'opt_args': [],
                         'req_args': ['sample'],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.hapaxes': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.max': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.pformat': {   'opt_args': ['maxlen'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.plot': {   'opt_args': ['kwargs'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.pprint': {   'opt_args': ['stream', 'maxlen'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.r_Nr': {   'opt_args': ['bins'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.setdefault': {   'opt_args': [],
                               'req_args': ['val', 'key'],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.tabulate': {   'opt_args': ['kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'FreqDist.update': {   'opt_args': ['kwargs'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'FunctionBackedMaxentFeatureEncoding.__init__': {   'opt_args': [],
                                                        'req_args': [   'labels',
                                                                        'length',
                                                                        'func'],
                                                        'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'FunctionBackedMaxentFeatureEncoding.describe': {   'opt_args': [],
                                                        'req_args': ['fid'],
                                                        'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'FunctionBackedMaxentFeatureEncoding.encode': {   'opt_args': [],
                                                      'req_args': [   'label',
                                                                      'featureset'],
                                                      'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'FunctionBackedMaxentFeatureEncoding.labels': {   'opt_args': [],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'FunctionBackedMaxentFeatureEncoding.length': {   'opt_args': [],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'FunctionVariableExpression.constants': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'FunctionVariableExpression.free': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'FunctionalCategory.__init__': {   'opt_args': [],
                                       'req_args': ['dir', 'arg', 'res'],
                                       'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.__str__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.arg': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.can_unify': {   'opt_args': [],
                                        'req_args': ['other'],
                                        'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.dir': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.is_function': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.is_primitive': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.is_var': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.res': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FunctionalCategory.substitute': {   'opt_args': [],
                                         'req_args': ['subs'],
                                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'FundamentalRule.apply': {   'opt_args': [],
                                 'req_args': [   'right_edge',
                                                 'left_edge',
                                                 'grammar',
                                                 'chart'],
                                 'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Future.__getattr__': {   'opt_args': [],
                              'req_args': ['key'],
                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__getitem__': {   'opt_args': [],
                              'req_args': ['key'],
                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__init__': {   'opt_args': ['kwargs'],
                           'req_args': ['loader'],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__len__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__nonzero__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__repr__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__setitem__': {   'opt_args': [],
                              'req_args': ['value', 'key'],
                              'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'Future.__str__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'GAAClusterer.__init__': {   'opt_args': [   'svd_dimensions',
                                                 'normalise',
                                                 'num_clusters'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.classify_vectorspace': {   'opt_args': [],
                                             'req_args': ['vector'],
                                             'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.cluster': {   'opt_args': ['trace', 'assign_clusters'],
                                'req_args': ['vectors'],
                                'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.cluster_vectorspace': {   'opt_args': ['trace'],
                                            'req_args': ['vectors'],
                                            'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.dendrogram': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.num_clusters': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GAAClusterer.update_clusters': {   'opt_args': [],
                                        'req_args': ['num_clusters'],
                                        'source_file': 'nltk\\nltk\\cluster\\gaac.py'},
    'GISEncoding.C': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'GISEncoding.__init__': {   'opt_args': [   'C',
                                                'alwayson_features',
                                                'unseen_features'],
                                'req_args': ['mapping', 'labels'],
                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'GISEncoding.describe': {   'opt_args': [],
                                'req_args': ['f_id'],
                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'GISEncoding.encode': {   'opt_args': [],
                              'req_args': ['label', 'featureset'],
                              'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'GISEncoding.length': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'GenericCoreNLPParser.__init__': {   'opt_args': [   'tagtype',
                                                         'encoding',
                                                         'url'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.api_call': {   'opt_args': ['timeout', 'properties'],
                                         'req_args': ['data'],
                                         'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.parse_sents': {   'opt_args': ['kwargs'],
                                            'req_args': ['sentences'],
                                            'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.parse_text': {   'opt_args': ['kwargs'],
                                           'req_args': ['text'],
                                           'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.raw_parse': {   'opt_args': ['properties', 'kwargs'],
                                          'req_args': ['sentence'],
                                          'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.raw_parse_sents': {   'opt_args': [   'properties',
                                                                'verbose',
                                                                'kwargs'],
                                                'req_args': ['sentences'],
                                                'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.raw_tag_sents': {   'opt_args': [],
                                              'req_args': ['sentences'],
                                              'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.tag': {   'opt_args': [],
                                    'req_args': ['sentence'],
                                    'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.tag_sents': {   'opt_args': [],
                                          'req_args': ['sentences'],
                                          'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericCoreNLPParser.tokenize': {   'opt_args': ['properties'],
                                         'req_args': ['text'],
                                         'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'GenericStanfordParser.__init__': {   'opt_args': [   'corenlp_options',
                                                          'java_options',
                                                          'verbose',
                                                          'encoding',
                                                          'model_path',
                                                          'path_to_models_jar',
                                                          'path_to_jar'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GenericStanfordParser.parse_sents': {   'opt_args': ['verbose'],
                                             'req_args': ['sentences'],
                                             'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GenericStanfordParser.raw_parse': {   'opt_args': ['verbose'],
                                           'req_args': ['sentence'],
                                           'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GenericStanfordParser.raw_parse_sents': {   'opt_args': ['verbose'],
                                                 'req_args': ['sentences'],
                                                 'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GenericStanfordParser.tagged_parse': {   'opt_args': ['verbose'],
                                              'req_args': ['sentence'],
                                              'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GenericStanfordParser.tagged_parse_sents': {   'opt_args': ['verbose'],
                                                    'req_args': ['sentences'],
                                                    'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'GermanStemmer.stem': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'Glue.__init__': {   'opt_args': [   'verbose',
                                         'depparser',
                                         'remove_duplicates',
                                         'semtype_file'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.dep_parse': {   'opt_args': [],
                          'req_args': ['sentence'],
                          'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.depgraph_to_glue': {   'opt_args': [],
                                 'req_args': ['depgraph'],
                                 'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.get_glue_dict': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.get_pos_tagger': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.get_readings': {   'opt_args': [],
                             'req_args': ['agenda'],
                             'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.gfl_to_compiled': {   'opt_args': [],
                                'req_args': ['gfl'],
                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.parse_to_compiled': {   'opt_args': [],
                                  'req_args': ['sentence'],
                                  'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.parse_to_meaning': {   'opt_args': [],
                                 'req_args': ['sentence'],
                                 'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'Glue.train_depparser': {   'opt_args': ['depgraphs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.__init__': {   'opt_args': ['encoding'],
                             'req_args': ['filename'],
                             'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.add_missing_dependencies': {   'opt_args': [],
                                             'req_args': ['depgraph', 'node'],
                                             'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.find_label_name': {   'opt_args': [],
                                    'req_args': [   'unique_index',
                                                    'depgraph',
                                                    'node',
                                                    'name'],
                                    'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.get_GlueFormula_factory': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.get_glueformulas_from_semtype_entry': {   'opt_args': [],
                                                        'req_args': [   'counter',
                                                                        'depgraph',
                                                                        'node',
                                                                        'word',
                                                                        'lookup'],
                                                        'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.get_label': {   'opt_args': [],
                              'req_args': ['node'],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.get_meaning_formula': {   'opt_args': [],
                                        'req_args': ['word', 'generic'],
                                        'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.get_semtypes': {   'opt_args': [],
                                 'req_args': ['node'],
                                 'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.initialize_labels': {   'opt_args': [],
                                      'req_args': [   'unique_index',
                                                      'depgraph',
                                                      'node',
                                                      'expr'],
                                      'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.lookup': {   'opt_args': [],
                           'req_args': ['counter', 'depgraph', 'node'],
                           'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.lookup_unique': {   'opt_args': [],
                                  'req_args': ['depgraph', 'node', 'rel'],
                                  'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.read_file': {   'opt_args': ['empty_first'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueDict.to_glueformula_list': {   'opt_args': [   'verbose',
                                                        'counter',
                                                        'node'],
                                        'req_args': ['depgraph'],
                                        'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__eq__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__init__': {   'opt_args': ['indices'],
                                'req_args': ['glue', 'meaning'],
                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__lt__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__ne__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.applyto': {   'opt_args': [],
                               'req_args': ['arg'],
                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.compile': {   'opt_args': ['counter'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.lambda_abstract': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.make_LambdaExpression': {   'opt_args': [],
                                             'req_args': ['term', 'variable'],
                                             'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.make_VariableExpression': {   'opt_args': [],
                                               'req_args': ['name'],
                                               'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GlueFormula.simplify': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\glue.py'},
    'GzipFileSystemPathPointer.open': {   'opt_args': ['encoding'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\data.py'},
    'HeldoutProbDist.__init__': {   'opt_args': ['bins'],
                                    'req_args': ['heldout_fdist', 'base_fdist'],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.base_fdist': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.discount': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.heldout_fdist': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.max': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.prob': {   'opt_args': [],
                                'req_args': ['sample'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'HeldoutProbDist.samples': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'HiddenMarkovModelTagger.__init__': {   'opt_args': ['transform'],
                                            'req_args': [   'priors',
                                                            'outputs',
                                                            'transitions',
                                                            'states',
                                                            'symbols'],
                                            'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.best_path': {   'opt_args': [],
                                             'req_args': ['unlabeled_sequence'],
                                             'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.best_path_simple': {   'opt_args': [],
                                                    'req_args': [   'unlabeled_sequence'],
                                                    'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.entropy': {   'opt_args': [],
                                           'req_args': ['unlabeled_sequence'],
                                           'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.log_probability': {   'opt_args': [],
                                                   'req_args': ['sequence'],
                                                   'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.point_entropy': {   'opt_args': [],
                                                 'req_args': [   'unlabeled_sequence'],
                                                 'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.probability': {   'opt_args': [],
                                               'req_args': ['sequence'],
                                               'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.random_sample': {   'opt_args': [],
                                                 'req_args': ['length', 'rng'],
                                                 'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.reset_cache': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.tag': {   'opt_args': [],
                                       'req_args': ['unlabeled_sequence'],
                                       'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.test': {   'opt_args': ['verbose', 'kwargs'],
                                        'req_args': ['test_sequence'],
                                        'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTagger.train': {   'opt_args': [   'unlabeled_sequence',
                                                         'test_sequence',
                                                         'kwargs'],
                                         'req_args': [   'labeled_sequence',
                                                         'cls'],
                                         'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTrainer.__init__': {   'opt_args': ['symbols', 'states'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTrainer.train': {   'opt_args': [   'unlabeled_sequences',
                                                          'labeled_sequences',
                                                          'kwargs'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTrainer.train_supervised': {   'opt_args': ['estimator'],
                                                     'req_args': [   'labelled_sequences'],
                                                     'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HiddenMarkovModelTrainer.train_unsupervised': {   'opt_args': [   'update_outputs',
                                                                       'kwargs'],
                                                       'req_args': [   'unlabeled_sequences'],
                                                       'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'HoleSemantics.__init__': {   'opt_args': [],
                                  'req_args': ['usr'],
                                  'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'HoleSemantics.formula_tree': {   'opt_args': [],
                                      'req_args': ['plugging'],
                                      'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'HoleSemantics.is_node': {   'opt_args': [],
                                 'req_args': ['x'],
                                 'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'HoleSemantics.pluggings': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'HungarianStemmer.__r1_hungarian': {   'opt_args': [],
                                           'req_args': [   'digraphs',
                                                           'vowels',
                                                           'word'],
                                           'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'HungarianStemmer.stem': {   'opt_args': [],
                                 'req_args': ['word'],
                                 'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'HunposTagger.__del__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'HunposTagger.__enter__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'HunposTagger.__exit__': {   'opt_args': [],
                                 'req_args': [   'traceback',
                                                 'exc_value',
                                                 'exc_type'],
                                 'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'HunposTagger.__init__': {   'opt_args': [   'verbose',
                                                 'encoding',
                                                 'path_to_bin'],
                                 'req_args': ['path_to_model'],
                                 'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'HunposTagger.close': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'HunposTagger.tag': {   'opt_args': [],
                            'req_args': ['tokens'],
                            'source_file': 'nltk\\nltk\\tag\\hunpos.py'},
    'IBMModel.__init__': {   'opt_args': [],
                             'req_args': ['sentence_aligned_corpus'],
                             'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.best_model2_alignment': {   'opt_args': ['i_pegged', 'j_pegged'],
                                          'req_args': ['sentence_pair'],
                                          'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.hillclimb': {   'opt_args': ['j_pegged'],
                              'req_args': ['alignment_info'],
                              'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.init_vocab': {   'opt_args': [],
                               'req_args': ['sentence_aligned_corpus'],
                               'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.maximize_fertility_probabilities': {   'opt_args': [],
                                                     'req_args': ['counts'],
                                                     'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.maximize_lexical_translation_probabilities': {   'opt_args': [],
                                                               'req_args': [   'counts'],
                                                               'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.maximize_null_generation_probabilities': {   'opt_args': [],
                                                           'req_args': [   'counts'],
                                                           'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.neighboring': {   'opt_args': ['j_pegged'],
                                'req_args': ['alignment_info'],
                                'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.prob_of_alignments': {   'opt_args': [],
                                       'req_args': ['alignments'],
                                       'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.prob_t_a_given_s': {   'opt_args': [],
                                     'req_args': ['alignment_info'],
                                     'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.reset_probabilities': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.sample': {   'opt_args': [],
                           'req_args': ['sentence_pair'],
                           'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel.set_uniform_probabilities': {   'opt_args': [],
                                              'req_args': [   'sentence_aligned_corpus'],
                                              'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'IBMModel1.__init__': {   'opt_args': ['probability_tables'],
                              'req_args': [   'iterations',
                                              'sentence_aligned_corpus'],
                              'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.align': {   'opt_args': [],
                           'req_args': ['sentence_pair'],
                           'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.align_all': {   'opt_args': [],
                               'req_args': ['parallel_corpus'],
                               'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.prob_alignment_point': {   'opt_args': [],
                                          'req_args': ['t', 's'],
                                          'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.prob_all_alignments': {   'opt_args': [],
                                         'req_args': [   'trg_sentence',
                                                         'src_sentence'],
                                         'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.prob_t_a_given_s': {   'opt_args': [],
                                      'req_args': ['alignment_info'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.set_uniform_probabilities': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel1.train': {   'opt_args': [],
                           'req_args': ['parallel_corpus'],
                           'source_file': 'nltk\\nltk\\translate\\ibm1.py'},
    'IBMModel2.__init__': {   'opt_args': ['probability_tables'],
                              'req_args': [   'iterations',
                                              'sentence_aligned_corpus'],
                              'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.align': {   'opt_args': [],
                           'req_args': ['sentence_pair'],
                           'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.align_all': {   'opt_args': [],
                               'req_args': ['parallel_corpus'],
                               'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.maximize_alignment_probabilities': {   'opt_args': [],
                                                      'req_args': ['counts'],
                                                      'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.prob_alignment_point': {   'opt_args': [],
                                          'req_args': [   'trg_sentence',
                                                          'src_sentence',
                                                          'j',
                                                          'i'],
                                          'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.prob_all_alignments': {   'opt_args': [],
                                         'req_args': [   'trg_sentence',
                                                         'src_sentence'],
                                         'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.prob_t_a_given_s': {   'opt_args': [],
                                      'req_args': ['alignment_info'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.set_uniform_probabilities': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel2.train': {   'opt_args': [],
                           'req_args': ['parallel_corpus'],
                           'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'IBMModel3.__init__': {   'opt_args': ['probability_tables'],
                              'req_args': [   'iterations',
                                              'sentence_aligned_corpus'],
                              'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel3.maximize_distortion_probabilities': {   'opt_args': [],
                                                       'req_args': ['counts'],
                                                       'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel3.prob_t_a_given_s': {   'opt_args': [],
                                      'req_args': ['alignment_info'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel3.reset_probabilities': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel3.set_uniform_probabilities': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel3.train': {   'opt_args': [],
                           'req_args': ['parallel_corpus'],
                           'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'IBMModel4.__init__': {   'opt_args': ['probability_tables'],
                              'req_args': [   'target_word_classes',
                                              'source_word_classes',
                                              'iterations',
                                              'sentence_aligned_corpus'],
                              'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.maximize_distortion_probabilities': {   'opt_args': [],
                                                       'req_args': ['counts'],
                                                       'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.model4_prob_t_a_given_s': {   'opt_args': [],
                                             'req_args': [   'ibm_model',
                                                             'alignment_info'],
                                             'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.prob_t_a_given_s': {   'opt_args': [],
                                      'req_args': ['alignment_info'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.reset_probabilities': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.set_uniform_probabilities': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel4.train': {   'opt_args': [],
                           'req_args': ['parallel_corpus'],
                           'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'IBMModel5.__init__': {   'opt_args': ['probability_tables'],
                              'req_args': [   'target_word_classes',
                                              'source_word_classes',
                                              'iterations',
                                              'sentence_aligned_corpus'],
                              'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.hillclimb': {   'opt_args': ['j_pegged'],
                               'req_args': ['alignment_info'],
                               'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.maximize_vacancy_probabilities': {   'opt_args': [],
                                                    'req_args': ['counts'],
                                                    'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.prob_t_a_given_s': {   'opt_args': [],
                                      'req_args': ['alignment_info'],
                                      'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.prune': {   'opt_args': [],
                           'req_args': ['alignment_infos'],
                           'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.reset_probabilities': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.sample': {   'opt_args': [],
                            'req_args': ['sentence_pair'],
                            'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.set_uniform_probabilities': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IBMModel5.train': {   'opt_args': [],
                           'req_args': ['parallel_corpus'],
                           'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'IEERCorpusReader.docs': {   'opt_args': ['fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\ieer.py'},
    'IEERCorpusReader.parsed_docs': {   'opt_args': ['fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\ieer.py'},
    'IEERDocument.__init__': {   'opt_args': [   'headline',
                                                 'date_time',
                                                 'doctype',
                                                 'docno'],
                                 'req_args': ['text'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\ieer.py'},
    'IEERDocument.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\ieer.py'},
    'IPIPANCorpusReader.__init__': {   'opt_args': [],
                                       'req_args': ['fileids', 'root'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.categories': {   'opt_args': ['fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.channels': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.domains': {   'opt_args': ['fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.fileids': {   'opt_args': [   'categories',
                                                      'domains',
                                                      'channels'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.paras': {   'opt_args': ['fileids', 'kwargs'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.sents': {   'opt_args': ['fileids', 'kwargs'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.tagged_paras': {   'opt_args': ['fileids', 'kwargs'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.tagged_sents': {   'opt_args': ['fileids', 'kwargs'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.tagged_words': {   'opt_args': ['fileids', 'kwargs'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusReader.words': {   'opt_args': ['fileids', 'kwargs'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusView.__init__': {   'opt_args': ['startpos', 'kwargs'],
                                     'req_args': ['filename'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'IPIPANCorpusView.read_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\ipipan.py'},
    'ISRIStemmer.__init__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.end_w5': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.end_w6': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.norm': {   'opt_args': ['num'],
                            'req_args': ['word'],
                            'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pre1': {   'opt_args': [],
                            'req_args': ['word'],
                            'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pre32': {   'opt_args': [],
                             'req_args': ['word'],
                             'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pro_w4': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pro_w53': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pro_w54': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pro_w6': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.pro_w64': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.stem': {   'opt_args': [],
                            'req_args': ['token'],
                            'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.suf1': {   'opt_args': [],
                            'req_args': ['word'],
                            'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.suf32': {   'opt_args': [],
                             'req_args': ['word'],
                             'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'ISRIStemmer.waw': {   'opt_args': [],
                           'req_args': ['word'],
                           'source_file': 'nltk\\nltk\\stem\\isri.py'},
    'IffExpression.getOp': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'IgnoreReadmeCorpusView.__init__': {   'opt_args': ['kwargs'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\opinion_lexicon.py'},
    'IllegalTypeException.__init__': {   'opt_args': [],
                                         'req_args': [   'allowed_type',
                                                         'other_type',
                                                         'expression'],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ImmutableProbabilisticMixIn.set_logprob': {   'opt_args': [],
                                                   'req_args': ['prob'],
                                                   'source_file': 'nltk\\nltk\\probability.py'},
    'ImmutableProbabilisticMixIn.set_prob': {   'opt_args': [],
                                                'req_args': ['prob'],
                                                'source_file': 'nltk\\nltk\\probability.py'},
    'ImmutableProbabilisticTree.__init__': {   'opt_args': [   'children',
                                                               'prob_kwargs'],
                                               'req_args': ['node'],
                                               'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableProbabilisticTree.__repr__': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableProbabilisticTree.__str__': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableProbabilisticTree.convert': {   'opt_args': [],
                                              'req_args': ['val', 'cls'],
                                              'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableProbabilisticTree.copy': {   'opt_args': ['deep'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__delitem__': {   'opt_args': [],
                                     'req_args': ['index'],
                                     'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__delslice__': {   'opt_args': [],
                                      'req_args': ['j', 'i'],
                                      'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__hash__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__iadd__': {   'opt_args': [],
                                  'req_args': ['other'],
                                  'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__imul__': {   'opt_args': [],
                                  'req_args': ['other'],
                                  'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__init__': {   'opt_args': ['children'],
                                  'req_args': ['node'],
                                  'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__setitem__': {   'opt_args': [],
                                     'req_args': ['value', 'index'],
                                     'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.__setslice__': {   'opt_args': [],
                                      'req_args': ['value', 'j', 'i'],
                                      'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.append': {   'opt_args': [],
                                'req_args': ['v'],
                                'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.extend': {   'opt_args': [],
                                'req_args': ['v'],
                                'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.pop': {   'opt_args': ['v'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.remove': {   'opt_args': [],
                                'req_args': ['v'],
                                'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.reverse': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.set_label': {   'opt_args': [],
                                   'req_args': ['value'],
                                   'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImmutableTree.sort': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tree\\immutable.py'},
    'ImpExpression.__eq__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.__hash__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.__init__': {   'opt_args': [],
                                  'req_args': ['consequent', 'antecedent'],
                                  'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.__ne__': {   'opt_args': [],
                                'req_args': ['other'],
                                'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.__str__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.compile_neg': {   'opt_args': [],
                                     'req_args': [   'glueFormulaFactory',
                                                     'index_counter'],
                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.compile_pos': {   'opt_args': [],
                                     'req_args': [   'glueFormulaFactory',
                                                     'index_counter'],
                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.getOp': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ImpExpression.initialize_labels': {   'opt_args': [],
                                           'req_args': ['fstruct'],
                                           'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.simplify': {   'opt_args': ['bindings'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'ImpExpression.unify': {   'opt_args': [],
                               'req_args': ['bindings', 'other'],
                               'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'InconsistentTypeHierarchyException.__init__': {   'opt_args': [   'expression'],
                                                       'req_args': ['variable'],
                                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'IncrementalBottomUpChartParser.__init__': {   'opt_args': ['parser_args'],
                                                   'req_args': ['grammar'],
                                                   'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalBottomUpLeftCornerChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                             'req_args': [   'grammar'],
                                                             'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChart.edges': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChart.initialize': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChart.iteredges': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChart.select': {   'opt_args': ['restrictions'],
                                   'req_args': ['end'],
                                   'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChartParser.__init__': {   'opt_args': [   'chart_class',
                                                           'trace_chart_width',
                                                           'trace',
                                                           'strategy'],
                                           'req_args': ['grammar'],
                                           'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalChartParser.chart_parse': {   'opt_args': ['trace'],
                                              'req_args': ['tokens'],
                                              'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalLeftCornerChartParser.__init__': {   'opt_args': [   'parser_args'],
                                                     'req_args': ['grammar'],
                                                     'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'IncrementalTopDownChartParser.__init__': {   'opt_args': ['parser_args'],
                                                  'req_args': ['grammar'],
                                                  'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'Index.__init__': {   'opt_args': [],
                          'req_args': ['pairs'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'IndianCorpusReader.sents': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndianCorpusReader.tagged_sents': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndianCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndianCorpusReader.words': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndianCorpusView.__init__': {   'opt_args': ['tag_mapping_function'],
                                     'req_args': [   'group_by_sent',
                                                     'tagged',
                                                     'encoding',
                                                     'corpus_file'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndianCorpusView.read_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\indian.py'},
    'IndividualVariableExpression.constants': {   'opt_args': [],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'IndividualVariableExpression.free': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'InsideChartParser.sort_queue': {   'opt_args': [],
                                        'req_args': ['chart', 'queue'],
                                        'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'InstantiateVarsChart.__init__': {   'opt_args': [],
                                         'req_args': ['tokens'],
                                         'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'InstantiateVarsChart.initialize': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'InstantiateVarsChart.insert': {   'opt_args': [],
                                       'req_args': [   'child_pointer_list',
                                                       'edge'],
                                       'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'InstantiateVarsChart.inst_vars': {   'opt_args': [],
                                          'req_args': ['edge'],
                                          'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'InstantiateVarsChart.instantiate_edge': {   'opt_args': [],
                                                 'req_args': ['edge'],
                                                 'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'InterpolatedLanguageModel.__init__': {   'opt_args': ['kwargs'],
                                              'req_args': [   'order',
                                                              'smoothing_cls'],
                                              'source_file': 'nltk\\nltk\\lm\\models.py'},
    'InterpolatedLanguageModel.unmasked_score': {   'opt_args': ['context'],
                                                    'req_args': ['word'],
                                                    'source_file': 'nltk\\nltk\\lm\\models.py'},
    'IotaExpression.getQuantifier': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'ItalianStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'JSONTaggedDecoder.decode': {   'opt_args': [],
                                    'req_args': ['s'],
                                    'source_file': 'nltk\\nltk\\jsontags.py'},
    'JSONTaggedDecoder.decode_obj': {   'opt_args': [],
                                        'req_args': ['obj', 'cls'],
                                        'source_file': 'nltk\\nltk\\jsontags.py'},
    'JSONTaggedEncoder.default': {   'opt_args': [],
                                     'req_args': ['obj'],
                                     'source_file': 'nltk\\nltk\\jsontags.py'},
    'KMeansClusterer.__init__': {   'opt_args': [   'avoid_empty_clusters',
                                                    'rng',
                                                    'svd_dimensions',
                                                    'normalise',
                                                    'initial_means',
                                                    'conv_test',
                                                    'repeats'],
                                    'req_args': ['distance', 'num_means'],
                                    'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KMeansClusterer.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KMeansClusterer.classify_vectorspace': {   'opt_args': [],
                                                'req_args': ['vector'],
                                                'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KMeansClusterer.cluster_vectorspace': {   'opt_args': ['trace'],
                                               'req_args': ['vectors'],
                                               'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KMeansClusterer.means': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KMeansClusterer.num_clusters': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\cluster\\kmeans.py'},
    'KNBCorpusReader.__init__': {   'opt_args': ['morphs2str', 'encoding'],
                                    'req_args': ['fileids', 'root'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\knbc.py'},
    'KneserNey.__init__': {   'opt_args': ['discount', 'kwargs'],
                              'req_args': ['order', 'counter', 'vocabulary'],
                              'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'KneserNey.alpha_gamma': {   'opt_args': [],
                                 'req_args': ['context', 'word'],
                                 'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'KneserNey.unigram_score': {   'opt_args': [],
                                   'req_args': ['word'],
                                   'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'KneserNeyInterpolated.__init__': {   'opt_args': ['discount', 'kwargs'],
                                          'req_args': ['order'],
                                          'source_file': 'nltk\\nltk\\lm\\models.py'},
    'KneserNeyProbDist.__init__': {   'opt_args': ['discount', 'bins'],
                                      'req_args': ['freqdist'],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.discount': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.max': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.prob': {   'opt_args': [],
                                  'req_args': ['trigram'],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.samples': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\probability.py'},
    'KneserNeyProbDist.set_discount': {   'opt_args': [],
                                          'req_args': ['discount'],
                                          'source_file': 'nltk\\nltk\\probability.py'},
    'LambdaExpression.__str__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LambdaExpression.type': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LancasterStemmer.__applyRule': {   'opt_args': [],
                                        'req_args': [   'append_string',
                                                        'remove_total',
                                                        'word'],
                                        'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__doStemming': {   'opt_args': [],
                                         'req_args': ['intact_word', 'word'],
                                         'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__getLastLetter': {   'opt_args': [],
                                            'req_args': ['word'],
                                            'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__init__': {   'opt_args': [   'strip_prefix_flag',
                                                     'rule_tuple'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__isAcceptable': {   'opt_args': [],
                                           'req_args': ['remove_total', 'word'],
                                           'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.__stripPrefix': {   'opt_args': [],
                                          'req_args': ['word'],
                                          'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.parseRules': {   'opt_args': ['rule_tuple'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LancasterStemmer.stem': {   'opt_args': [],
                                 'req_args': ['word'],
                                 'source_file': 'nltk\\nltk\\stem\\lancaster.py'},
    'LanguageModel.__init__': {   'opt_args': ['counter', 'vocabulary'],
                                  'req_args': ['order'],
                                  'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.context_counts': {   'opt_args': [],
                                        'req_args': ['context'],
                                        'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.entropy': {   'opt_args': [],
                                 'req_args': ['text_ngrams'],
                                 'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.fit': {   'opt_args': ['vocabulary_text'],
                             'req_args': ['text'],
                             'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.generate': {   'opt_args': [   'random_seed',
                                                  'text_seed',
                                                  'num_words'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.logscore': {   'opt_args': ['context'],
                                  'req_args': ['word'],
                                  'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.perplexity': {   'opt_args': [],
                                    'req_args': ['text_ngrams'],
                                    'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.score': {   'opt_args': ['context'],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\lm\\api.py'},
    'LanguageModel.unmasked_score': {   'opt_args': ['context'],
                                        'req_args': ['word'],
                                        'source_file': 'nltk\\nltk\\lm\\api.py'},
    'Laplace.__init__': {   'opt_args': ['kwargs'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\lm\\models.py'},
    'LaplaceProbDist.__init__': {   'opt_args': ['bins'],
                                    'req_args': ['freqdist'],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'LaplaceProbDist.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'LazyConcatenation.__init__': {   'opt_args': [],
                                      'req_args': ['list_of_lists'],
                                      'source_file': 'nltk\\nltk\\collections.py'},
    'LazyConcatenation.__len__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\collections.py'},
    'LazyConcatenation.iterate_from': {   'opt_args': [],
                                          'req_args': ['start_index'],
                                          'source_file': 'nltk\\nltk\\collections.py'},
    'LazyCorpusLoader.__getattr__': {   'opt_args': [],
                                        'req_args': ['attr'],
                                        'source_file': 'nltk\\nltk\\corpus\\util.py'},
    'LazyCorpusLoader.__init__': {   'opt_args': ['kwargs'],
                                     'req_args': ['reader_cls', 'name'],
                                     'source_file': 'nltk\\nltk\\corpus\\util.py'},
    'LazyCorpusLoader.__load': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\util.py'},
    'LazyCorpusLoader.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\util.py'},
    'LazyEnumerate.__init__': {   'opt_args': [],
                                  'req_args': ['lst'],
                                  'source_file': 'nltk\\nltk\\collections.py'},
    'LazyIteratorList.__add__': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\collections.py'},
    'LazyIteratorList.__init__': {   'opt_args': ['known_len'],
                                     'req_args': ['it'],
                                     'source_file': 'nltk\\nltk\\collections.py'},
    'LazyIteratorList.__len__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\collections.py'},
    'LazyIteratorList.__radd__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\collections.py'},
    'LazyIteratorList.iterate_from': {   'opt_args': [],
                                         'req_args': ['start'],
                                         'source_file': 'nltk\\nltk\\collections.py'},
    'LazyLoader.__getattr__': {   'opt_args': [],
                                  'req_args': ['attr'],
                                  'source_file': 'nltk\\nltk\\data.py'},
    'LazyLoader.__init__': {   'opt_args': [],
                               'req_args': ['_path'],
                               'source_file': 'nltk\\nltk\\data.py'},
    'LazyLoader.__load': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\data.py'},
    'LazyLoader.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\data.py'},
    'LazyMap.__getitem__': {   'opt_args': [],
                               'req_args': ['index'],
                               'source_file': 'nltk\\nltk\\collections.py'},
    'LazyMap.__init__': {   'opt_args': ['config'],
                            'req_args': ['function'],
                            'source_file': 'nltk\\nltk\\collections.py'},
    'LazyMap.__len__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\collections.py'},
    'LazyMap.iterate_from': {   'opt_args': [],
                                'req_args': ['index'],
                                'source_file': 'nltk\\nltk\\collections.py'},
    'LazyModule.__getattr__': {   'opt_args': [],
                                  'req_args': ['name'],
                                  'source_file': 'nltk\\nltk\\lazyimport.py'},
    'LazyModule.__init__': {   'opt_args': ['globals'],
                               'req_args': ['locals', 'name'],
                               'source_file': 'nltk\\nltk\\lazyimport.py'},
    'LazyModule.__lazymodule_import': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\lazyimport.py'},
    'LazyModule.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\lazyimport.py'},
    'LazyModule.__setattr__': {   'opt_args': [],
                                  'req_args': ['value', 'name'],
                                  'source_file': 'nltk\\nltk\\lazyimport.py'},
    'LazySubsequence.__init__': {   'opt_args': [],
                                    'req_args': ['stop', 'start', 'source'],
                                    'source_file': 'nltk\\nltk\\collections.py'},
    'LazySubsequence.__len__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'LazySubsequence.__new__': {   'opt_args': [],
                                   'req_args': [   'stop',
                                                   'start',
                                                   'source',
                                                   'cls'],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'LazySubsequence.iterate_from': {   'opt_args': [],
                                        'req_args': ['start'],
                                        'source_file': 'nltk\\nltk\\collections.py'},
    'LazyZip.__init__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\collections.py'},
    'LazyZip.__len__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\collections.py'},
    'LazyZip.iterate_from': {   'opt_args': [],
                                'req_args': ['index'],
                                'source_file': 'nltk\\nltk\\collections.py'},
    'LeafEdge.__init__': {   'opt_args': [],
                             'req_args': ['index', 'leaf'],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.dot': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.end': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.is_complete': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.is_incomplete': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.length': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.lhs': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.nextsym': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.rhs': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.span': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafEdge.start': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeafInitRule.apply': {   'opt_args': [],
                              'req_args': ['grammar', 'chart'],
                              'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LeftCornerChartParser.__init__': {   'opt_args': ['parser_args'],
                                          'req_args': ['grammar'],
                                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'LegalitySyllableTokenizer.__init__': {   'opt_args': [   'legal_frequency_threshold',
                                                              'vowels'],
                                              'req_args': [   'tokenized_source_text'],
                                              'source_file': 'nltk\\nltk\\tokenize\\legality_principle.py'},
    'LegalitySyllableTokenizer.find_legal_onsets': {   'opt_args': [],
                                                       'req_args': ['words'],
                                                       'source_file': 'nltk\\nltk\\tokenize\\legality_principle.py'},
    'LegalitySyllableTokenizer.onset': {   'opt_args': [],
                                           'req_args': ['word'],
                                           'source_file': 'nltk\\nltk\\tokenize\\legality_principle.py'},
    'LegalitySyllableTokenizer.tokenize': {   'opt_args': [],
                                              'req_args': ['token'],
                                              'source_file': 'nltk\\nltk\\tokenize\\legality_principle.py'},
    'Lemma.__init__': {   'opt_args': [],
                          'req_args': [   'syntactic_marker',
                                          'lex_id',
                                          'lexname_index',
                                          'name',
                                          'synset',
                                          'wordnet_corpus_reader'],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.__repr__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.antonyms': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.count': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.derivationally_related_forms': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.frame_ids': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.frame_strings': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.key': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.lang': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.name': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.pertainyms': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.synset': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lemma.syntactic_marker': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Lidstone.__init__': {   'opt_args': ['kwargs'],
                             'req_args': ['gamma'],
                             'source_file': 'nltk\\nltk\\lm\\models.py'},
    'Lidstone.unmasked_score': {   'opt_args': ['context'],
                                   'req_args': ['word'],
                                   'source_file': 'nltk\\nltk\\lm\\models.py'},
    'LidstoneProbDist.__init__': {   'opt_args': ['bins'],
                                     'req_args': ['gamma', 'freqdist'],
                                     'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.discount': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.freqdist': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.max': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.prob': {   'opt_args': [],
                                 'req_args': ['sample'],
                                 'source_file': 'nltk\\nltk\\probability.py'},
    'LidstoneProbDist.samples': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'LinThesaurusCorpusReader.__contains__': {   'opt_args': [],
                                                 'req_args': ['ngram'],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LinThesaurusCorpusReader.__defaultdict_factory': {   'opt_args': [],
                                                          'req_args': [],
                                                          'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LinThesaurusCorpusReader.__init__': {   'opt_args': ['badscore'],
                                             'req_args': ['root'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LinThesaurusCorpusReader.scored_synonyms': {   'opt_args': ['fileid'],
                                                    'req_args': ['ngram'],
                                                    'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LinThesaurusCorpusReader.similarity': {   'opt_args': ['fileid'],
                                               'req_args': ['ngram2', 'ngram1'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LinThesaurusCorpusReader.synonyms': {   'opt_args': ['fileid'],
                                             'req_args': ['ngram'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\lin.py'},
    'LineTokenizer.__init__': {   'opt_args': ['blanklines'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'LineTokenizer.span_tokenize': {   'opt_args': [],
                                       'req_args': ['s'],
                                       'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'LineTokenizer.tokenize': {   'opt_args': [],
                                  'req_args': ['s'],
                                  'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'LinearLogicParser.__init__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.attempt_ApplicationExpression': {   'opt_args': [],
                                                           'req_args': [   'context',
                                                                           'expression'],
                                                           'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.get_BooleanExpression_factory': {   'opt_args': [],
                                                           'req_args': ['tok'],
                                                           'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.get_all_symbols': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.handle': {   'opt_args': [],
                                    'req_args': ['context', 'tok'],
                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.make_BooleanExpression': {   'opt_args': [],
                                                    'req_args': [   'second',
                                                                    'first',
                                                                    'factory'],
                                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LinearLogicParser.make_VariableExpression': {   'opt_args': [],
                                                     'req_args': ['name'],
                                                     'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'LocalTimezoneOffsetWithUTC.utcoffset': {   'opt_args': [],
                                                'req_args': ['dt'],
                                                'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'LogicParser.__init__': {   'opt_args': ['type_check'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.assertNextToken': {   'opt_args': [],
                                       'req_args': ['expected'],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.assertToken': {   'opt_args': [],
                                   'req_args': ['expected', 'tok'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.attempt_ApplicationExpression': {   'opt_args': [],
                                                     'req_args': [   'context',
                                                                     'expression'],
                                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.attempt_BooleanExpression': {   'opt_args': [],
                                                 'req_args': [   'context',
                                                                 'expression'],
                                                 'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.attempt_EqualityExpression': {   'opt_args': [],
                                                  'req_args': [   'context',
                                                                  'expression'],
                                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.attempt_adjuncts': {   'opt_args': [],
                                        'req_args': ['context', 'expression'],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.get_BooleanExpression_factory': {   'opt_args': [],
                                                     'req_args': ['tok'],
                                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.get_QuantifiedExpression_factory': {   'opt_args': [],
                                                        'req_args': ['tok'],
                                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.get_all_symbols': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.get_next_token_variable': {   'opt_args': [],
                                               'req_args': ['description'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle': {   'opt_args': [],
                              'req_args': ['context', 'tok'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle_lambda': {   'opt_args': [],
                                     'req_args': ['context', 'tok'],
                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle_negation': {   'opt_args': [],
                                       'req_args': ['context', 'tok'],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle_open': {   'opt_args': [],
                                   'req_args': ['context', 'tok'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle_quant': {   'opt_args': [],
                                    'req_args': ['context', 'tok'],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.handle_variable': {   'opt_args': [],
                                       'req_args': ['context', 'tok'],
                                       'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.has_priority': {   'opt_args': [],
                                    'req_args': ['context', 'operation'],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.inRange': {   'opt_args': [],
                               'req_args': ['location'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.isvariable': {   'opt_args': [],
                                  'req_args': ['tok'],
                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_ApplicationExpression': {   'opt_args': [],
                                                  'req_args': [   'argument',
                                                                  'function'],
                                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_BooleanExpression': {   'opt_args': [],
                                              'req_args': [   'second',
                                                              'first',
                                                              'factory'],
                                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_EqualityExpression': {   'opt_args': [],
                                               'req_args': ['second', 'first'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_LambdaExpression': {   'opt_args': [],
                                             'req_args': ['term', 'variable'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_NegatedExpression': {   'opt_args': [],
                                              'req_args': ['expression'],
                                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_QuanifiedExpression': {   'opt_args': [],
                                                'req_args': [   'term',
                                                                'variable',
                                                                'factory'],
                                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.make_VariableExpression': {   'opt_args': [],
                                               'req_args': ['name'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.parse': {   'opt_args': ['signature'],
                             'req_args': ['data'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.process': {   'opt_args': [],
                               'req_args': ['data'],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.process_next_expression': {   'opt_args': [],
                                               'req_args': ['context'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.process_quoted_token': {   'opt_args': [],
                                            'req_args': ['data', 'data_idx'],
                                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicParser.token': {   'opt_args': ['location'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LogicalExpressionException.__init__': {   'opt_args': [],
                                               'req_args': ['message', 'index'],
                                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'LongestChartParser.sort_queue': {   'opt_args': [],
                                         'req_args': ['chart', 'queue'],
                                         'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'MLE.unmasked_score': {   'opt_args': ['context'],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\lm\\models.py'},
    'MLEProbDist.__init__': {   'opt_args': ['bins'],
                                'req_args': ['freqdist'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'MLEProbDist.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'MLEProbDist.freqdist': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'MLEProbDist.max': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\probability.py'},
    'MLEProbDist.prob': {   'opt_args': [],
                            'req_args': ['sample'],
                            'source_file': 'nltk\\nltk\\probability.py'},
    'MLEProbDist.samples': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'MTECorpusReader.__fileids': {   'opt_args': [],
                                     'req_args': ['fileids'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.__init__': {   'opt_args': ['encoding', 'fileids', 'root'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.lemma_paras': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.lemma_sents': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.lemma_words': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.paras': {   'opt_args': ['fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.sents': {   'opt_args': ['fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.tagged_paras': {   'opt_args': [   'tags',
                                                        'tagset',
                                                        'fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.tagged_sents': {   'opt_args': [   'tags',
                                                        'tagset',
                                                        'fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.tagged_words': {   'opt_args': [   'tags',
                                                        'tagset',
                                                        'fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusReader.words': {   'opt_args': ['fileids'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusView.__init__': {   'opt_args': ['elt_handler'],
                                  'req_args': ['tagspec', 'fileid'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTECorpusView.read_block': {   'opt_args': ['elt_handler', 'tagspec'],
                                    'req_args': ['stream'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.__init__': {   'opt_args': [],
                                  'req_args': ['file_path'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.lemma_paras': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.lemma_sents': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.lemma_words': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.paras': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.sents': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.tagged_paras': {   'opt_args': [],
                                      'req_args': ['tags', 'tagset'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.tagged_sents': {   'opt_args': [],
                                      'req_args': ['tags', 'tagset'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.tagged_words': {   'opt_args': [],
                                      'req_args': ['tags', 'tagset'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTEFileReader.words': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MTETagConverter.msd_to_universal': {   'opt_args': [],
                                            'req_args': ['tag'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'MWAPPDBCorpusReader.entries': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordlist.py'},
    'MWETokenizer.__init__': {   'opt_args': ['separator', 'mwes'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tokenize\\mwe.py'},
    'MWETokenizer.add_mwe': {   'opt_args': [],
                                'req_args': ['mwe'],
                                'source_file': 'nltk\\nltk\\tokenize\\mwe.py'},
    'MWETokenizer.tokenize': {   'opt_args': [],
                                 'req_args': ['text'],
                                 'source_file': 'nltk\\nltk\\tokenize\\mwe.py'},
    'MacMorphoCorpusReader.__init__': {   'opt_args': ['tagset', 'encoding'],
                                          'req_args': ['fileids', 'root'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'Mace.__init__': {   'opt_args': ['end_size'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'MaceCommand.__init__': {   'opt_args': [   'model_builder',
                                                'max_models',
                                                'assumptions',
                                                'goal'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'MaceCommand.valuation': {   'opt_args': [],
                                 'req_args': ['mbc'],
                                 'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'MaltParser.__init__': {   'opt_args': [   'additional_java_args',
                                               'tagger',
                                               'model_filename',
                                               'parser_dirname'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaltParser.generate_malt_command': {   'opt_args': [   'mode',
                                                            'outputfilename'],
                                            'req_args': ['inputfilename'],
                                            'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaltParser.parse_sents': {   'opt_args': ['top_relation_label', 'verbose'],
                                  'req_args': ['sentences'],
                                  'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaltParser.parse_tagged_sents': {   'opt_args': [   'top_relation_label',
                                                         'verbose'],
                                         'req_args': ['sentences'],
                                         'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaltParser.train': {   'opt_args': ['verbose'],
                            'req_args': ['depgraphs'],
                            'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaltParser.train_from_file': {   'opt_args': ['verbose'],
                                      'req_args': ['conll_file'],
                                      'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'MaxentClassifier.__init__': {   'opt_args': ['logarithmic'],
                                     'req_args': ['weights', 'encoding'],
                                     'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.classify': {   'opt_args': [],
                                     'req_args': ['featureset'],
                                     'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.explain': {   'opt_args': ['columns'],
                                    'req_args': ['featureset'],
                                    'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.labels': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.most_informative_features': {   'opt_args': ['n'],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.prob_classify': {   'opt_args': [],
                                          'req_args': ['featureset'],
                                          'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.set_weights': {   'opt_args': [],
                                        'req_args': ['new_weights'],
                                        'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.show_most_informative_features': {   'opt_args': [   'show',
                                                                           'n'],
                                                           'req_args': [],
                                                           'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.train': {   'opt_args': [   'gaussian_prior_sigma',
                                                  'labels',
                                                  'encoding',
                                                  'trace',
                                                  'algorithm',
                                                  'cutoffs'],
                                  'req_args': ['train_toks', 'cls'],
                                  'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentClassifier.weights': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentFeatureEncodingI.describe': {   'opt_args': [],
                                           'req_args': ['fid'],
                                           'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentFeatureEncodingI.encode': {   'opt_args': [],
                                         'req_args': ['label', 'featureset'],
                                         'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentFeatureEncodingI.labels': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentFeatureEncodingI.length': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'MaxentFeatureEncodingI.train': {   'opt_args': [],
                                        'req_args': ['train_toks', 'cls'],
                                        'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'Meaning.__init__': {   'opt_args': [],
                            'req_args': ['attr', 'mn'],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'Meaning.expressions': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'Meaning.id': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'Meaning.quality': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'Meaning.source': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'Meaning.source_group': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'MergeRule.__init__': {   'opt_args': [],
                              'req_args': [   'descr',
                                              'right_tag_pattern',
                                              'left_tag_pattern'],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'MergeRule.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'MinimalSet.__init__': {   'opt_args': ['parameters'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'MinimalSet.add': {   'opt_args': [],
                          'req_args': ['display', 'target', 'context'],
                          'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'MinimalSet.contexts': {   'opt_args': ['minimum'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'MinimalSet.display': {   'opt_args': ['default'],
                              'req_args': ['target', 'context'],
                              'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'MinimalSet.display_all': {   'opt_args': [],
                                  'req_args': ['context'],
                                  'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'MinimalSet.targets': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\misc\\minimalset.py'},
    'Model.__init__': {   'opt_args': [],
                          'req_args': ['valuation', 'domain'],
                          'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.__repr__': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.__str__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.evaluate': {   'opt_args': ['trace'],
                          'req_args': ['g', 'expr'],
                          'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.i': {   'opt_args': ['trace'],
                   'req_args': ['g', 'parsed'],
                   'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.satisfiers': {   'opt_args': ['nesting', 'trace'],
                            'req_args': ['g', 'varex', 'parsed'],
                            'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model.satisfy': {   'opt_args': ['trace'],
                         'req_args': ['g', 'parsed'],
                         'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Model2Counts.__init__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'Model2Counts.update_alignment': {   'opt_args': [],
                                         'req_args': [   'm',
                                                         'l',
                                                         'j',
                                                         'i',
                                                         'count'],
                                         'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'Model2Counts.update_lexical_translation': {   'opt_args': [],
                                                   'req_args': [   't',
                                                                   's',
                                                                   'count'],
                                                   'source_file': 'nltk\\nltk\\translate\\ibm2.py'},
    'Model3Counts.__init__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'Model3Counts.update_distortion': {   'opt_args': [],
                                          'req_args': [   'm',
                                                          'l',
                                                          'j',
                                                          'alignment_info',
                                                          'count'],
                                          'source_file': 'nltk\\nltk\\translate\\ibm3.py'},
    'Model4Counts.__init__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'Model4Counts.update_distortion': {   'opt_args': [],
                                          'req_args': [   'trg_classes',
                                                          'src_classes',
                                                          'j',
                                                          'alignment_info',
                                                          'count'],
                                          'source_file': 'nltk\\nltk\\translate\\ibm4.py'},
    'Model5Counts.__init__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'Model5Counts.update_vacancy': {   'opt_args': [],
                                       'req_args': [   'slots',
                                                       'trg_classes',
                                                       'i',
                                                       'alignment_info',
                                                       'count'],
                                       'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'ModelBuilder.build_model': {   'opt_args': [   'verbose',
                                                    'assumptions',
                                                    'goal'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommand.build_model': {   'opt_args': ['verbose'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommand.get_model_builder': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommand.model': {   'opt_args': ['format'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommandDecorator.__init__': {   'opt_args': [],
                                                 'req_args': [   'modelBuilderCommand'],
                                                 'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommandDecorator.build_model': {   'opt_args': ['verbose'],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommandDecorator.get_model_builder': {   'opt_args': [],
                                                          'req_args': [],
                                                          'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ModelBuilderCommandDecorator.model': {   'opt_args': ['format'],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\inference\\api.py'},
    'MultiClassifierI.classify': {   'opt_args': [],
                                     'req_args': ['featureset'],
                                     'source_file': 'nltk\\nltk\\classify\\api.py'},
    'MultiClassifierI.classify_many': {   'opt_args': [],
                                          'req_args': ['featuresets'],
                                          'source_file': 'nltk\\nltk\\classify\\api.py'},
    'MultiClassifierI.labels': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\classify\\api.py'},
    'MultiClassifierI.prob_classify': {   'opt_args': [],
                                          'req_args': ['featureset'],
                                          'source_file': 'nltk\\nltk\\classify\\api.py'},
    'MultiClassifierI.prob_classify_many': {   'opt_args': [],
                                               'req_args': ['featuresets'],
                                               'source_file': 'nltk\\nltk\\classify\\api.py'},
    'MultiListbox.__init__': {   'opt_args': ['cnf', 'column_weights', 'kw'],
                                 'req_args': ['columns', 'master'],
                                 'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.__setitem__': {   'opt_args': [],
                                    'req_args': ['val', 'key'],
                                    'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.activate': {   'opt_args': ['kwargs'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.bbox': {   'opt_args': [],
                             'req_args': ['col', 'row'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.bind_to_columns': {   'opt_args': ['add', 'func', 'sequence'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.bind_to_labels': {   'opt_args': ['add', 'func', 'sequence'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.bind_to_listboxes': {   'opt_args': [   'add',
                                                          'func',
                                                          'sequence'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.column_labels': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.column_names': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.columnconfigure': {   'opt_args': ['cnf', 'kw'],
                                        'req_args': ['col_index'],
                                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.configure': {   'opt_args': ['cnf', 'kw'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.curselection': {   'opt_args': ['kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.delete': {   'opt_args': ['kwargs'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.get': {   'opt_args': ['last'],
                            'req_args': ['first'],
                            'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.hide_column': {   'opt_args': [],
                                    'req_args': ['col_index'],
                                    'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.index': {   'opt_args': ['kwargs'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.insert': {   'opt_args': [],
                               'req_args': ['index'],
                               'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.itemcget': {   'opt_args': ['kwargs'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.itemconfigure': {   'opt_args': ['cnf', 'kw'],
                                      'req_args': ['col_index', 'row_index'],
                                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.listboxes': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.nearest': {   'opt_args': ['kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.rowconfigure': {   'opt_args': ['cnf', 'kw'],
                                     'req_args': ['row_index'],
                                     'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.scan_dragto': {   'opt_args': ['kwargs'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.scan_mark': {   'opt_args': ['kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.see': {   'opt_args': ['kwargs'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.select': {   'opt_args': ['see', 'delta', 'index'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.selection_anchor': {   'opt_args': ['kwargs'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.selection_clear': {   'opt_args': ['kwargs'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.selection_includes': {   'opt_args': ['kwargs'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.selection_set': {   'opt_args': ['kwargs'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.show_column': {   'opt_args': [],
                                    'req_args': ['col_index'],
                                    'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.size': {   'opt_args': ['kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.yview': {   'opt_args': ['kwargs'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.yview_moveto': {   'opt_args': ['kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiListbox.yview_scroll': {   'opt_args': ['kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\table.py'},
    'MultiParentedTree.__init__': {   'opt_args': ['children'],
                                      'req_args': ['node'],
                                      'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.left_siblings': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.parent_indices': {   'opt_args': [],
                                            'req_args': ['parent'],
                                            'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.parents': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.right_siblings': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.roots': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MultiParentedTree.treepositions': {   'opt_args': [],
                                           'req_args': ['root'],
                                           'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'MutableOptionMenu.__getitem__': {   'opt_args': [],
                                         'req_args': ['name'],
                                         'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableOptionMenu.__init__': {   'opt_args': ['options'],
                                      'req_args': ['values', 'master'],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableOptionMenu.add': {   'opt_args': [],
                                 'req_args': ['value'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableOptionMenu.destroy': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableOptionMenu.remove': {   'opt_args': [],
                                    'req_args': ['value'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableOptionMenu.set': {   'opt_args': [],
                                 'req_args': ['value'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'MutableProbDist.__init__': {   'opt_args': ['store_logs'],
                                    'req_args': ['samples', 'prob_dist'],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'MutableProbDist.logprob': {   'opt_args': [],
                                   'req_args': ['sample'],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'MutableProbDist.max': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'MutableProbDist.prob': {   'opt_args': [],
                                'req_args': ['sample'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'MutableProbDist.samples': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'MutableProbDist.update': {   'opt_args': ['log'],
                                  'req_args': ['prob', 'sample'],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'MyServerHandler.do_GET': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'MyServerHandler.do_HEAD': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'MyServerHandler.log_message': {   'opt_args': [],
                                       'req_args': ['format'],
                                       'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'MyServerHandler.send_head': {   'opt_args': ['type'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'NEChunkParser.__init__': {   'opt_args': [],
                                  'req_args': ['train'],
                                  'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'NEChunkParser.parse': {   'opt_args': [],
                               'req_args': ['tokens'],
                               'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'NEChunkParserTagger.__init__': {   'opt_args': [],
                                        'req_args': ['train'],
                                        'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'NISTTokenizer.international_tokenize': {   'opt_args': [   'return_str',
                                                                'split_non_ascii',
                                                                'lowercase'],
                                                'req_args': ['text'],
                                                'source_file': 'nltk\\nltk\\tokenize\\nist.py'},
    'NISTTokenizer.lang_independent_sub': {   'opt_args': [],
                                              'req_args': ['text'],
                                              'source_file': 'nltk\\nltk\\tokenize\\nist.py'},
    'NISTTokenizer.tokenize': {   'opt_args': [   'return_str',
                                                  'western_lang',
                                                  'lowercase'],
                                  'req_args': ['text'],
                                  'source_file': 'nltk\\nltk\\tokenize\\nist.py'},
    'NKJPCorpusReader.__init__': {   'opt_args': ['fileids'],
                                     'req_args': ['root'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.add_root': {   'opt_args': [],
                                     'req_args': ['fileid'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.fileids': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.get_paths': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.header': {   'opt_args': ['fileids', 'kwargs'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.raw': {   'opt_args': ['fileids', 'kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.sents': {   'opt_args': ['fileids', 'kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.tagged_words': {   'opt_args': ['fileids', 'kwargs'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpusReader.words': {   'opt_args': ['fileids', 'kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Header_View.__init__': {   'opt_args': ['kwargs'],
                                           'req_args': ['filename'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Header_View.handle_elt': {   'opt_args': [],
                                             'req_args': ['context', 'elt'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Header_View.handle_query': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Morph_View.__init__': {   'opt_args': ['kwargs'],
                                          'req_args': ['filename'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Morph_View.handle_elt': {   'opt_args': [],
                                            'req_args': ['context', 'elt'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Morph_View.handle_query': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.__init__': {   'opt_args': ['kwargs'],
                                                 'req_args': ['filename'],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.get_segm_id': {   'opt_args': [],
                                                    'req_args': [   'example_word'],
                                                    'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.get_sent_beg': {   'opt_args': [],
                                                     'req_args': ['beg_word'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.get_sent_end': {   'opt_args': [],
                                                     'req_args': ['end_word'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.get_sentences': {   'opt_args': [],
                                                      'req_args': ['sent_segm'],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.handle_elt': {   'opt_args': [],
                                                   'req_args': [   'context',
                                                                   'elt'],
                                                   'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.handle_query': {   'opt_args': [],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Segmentation_View.remove_choice': {   'opt_args': [],
                                                      'req_args': ['segm'],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Text_View.__init__': {   'opt_args': ['kwargs'],
                                         'req_args': ['filename'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Text_View.get_segm_id': {   'opt_args': [],
                                            'req_args': ['elt'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Text_View.handle_elt': {   'opt_args': [],
                                           'req_args': ['context', 'elt'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Text_View.handle_query': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NKJPCorpus_Text_View.read_block': {   'opt_args': [   'elt_handler',
                                                           'tagspec'],
                                           'req_args': ['stream'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'NLTKWordTokenizer.span_tokenize': {   'opt_args': [],
                                           'req_args': ['text'],
                                           'source_file': 'nltk\\nltk\\tokenize\\destructive.py'},
    'NLTKWordTokenizer.tokenize': {   'opt_args': [   'return_str',
                                                      'convert_parentheses'],
                                      'req_args': ['text'],
                                      'source_file': 'nltk\\nltk\\tokenize\\destructive.py'},
    'NPSChatCorpusReader.__init__': {   'opt_args': ['tagset', 'wrap_etree'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NPSChatCorpusReader.posts': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NPSChatCorpusReader.tagged_posts': {   'opt_args': ['tagset', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NPSChatCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NPSChatCorpusReader.words': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NPSChatCorpusReader.xml_posts': {   'opt_args': ['fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\nps_chat.py'},
    'NaiveBayesClassifier.__init__': {   'opt_args': [],
                                         'req_args': [   'feature_probdist',
                                                         'label_probdist'],
                                         'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.classify': {   'opt_args': [],
                                         'req_args': ['featureset'],
                                         'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.labels': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.most_informative_features': {   'opt_args': ['n'],
                                                          'req_args': [],
                                                          'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.prob_classify': {   'opt_args': [],
                                              'req_args': ['featureset'],
                                              'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.show_most_informative_features': {   'opt_args': [   'n'],
                                                               'req_args': [],
                                                               'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesClassifier.train': {   'opt_args': ['estimator'],
                                      'req_args': [   'labeled_featuresets',
                                                      'cls'],
                                      'source_file': 'nltk\\nltk\\classify\\naivebayes.py'},
    'NaiveBayesDependencyScorer.__init__': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'NaiveBayesDependencyScorer.score': {   'opt_args': [],
                                            'req_args': ['graph'],
                                            'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'NaiveBayesDependencyScorer.train': {   'opt_args': [],
                                            'req_args': ['graphs'],
                                            'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'NegatedExpression.__eq__': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.__init__': {   'opt_args': [],
                                      'req_args': ['term'],
                                      'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.__ne__': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.findtype': {   'opt_args': [],
                                      'req_args': ['variable'],
                                      'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.negate': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.type': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NegatedExpression.visit': {   'opt_args': [],
                                   'req_args': ['combinator', 'function'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'NgramAssocMeasures.chi_sq': {   'opt_args': [],
                                     'req_args': ['cls'],
                                     'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.jaccard': {   'opt_args': [],
                                      'req_args': ['cls'],
                                      'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.likelihood_ratio': {   'opt_args': [],
                                               'req_args': ['cls'],
                                               'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.mi_like': {   'opt_args': ['kwargs'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.pmi': {   'opt_args': [],
                                  'req_args': ['cls'],
                                  'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.poisson_stirling': {   'opt_args': [],
                                               'req_args': ['cls'],
                                               'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.raw_freq': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramAssocMeasures.student_t': {   'opt_args': [],
                                        'req_args': ['cls'],
                                        'source_file': 'nltk\\nltk\\metrics\\association.py'},
    'NgramCounter.N': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.__contains__': {   'opt_args': [],
                                     'req_args': ['item'],
                                     'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.__getitem__': {   'opt_args': [],
                                    'req_args': ['item'],
                                    'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.__init__': {   'opt_args': ['ngram_text'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.__len__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.__str__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramCounter.update': {   'opt_args': [],
                               'req_args': ['ngram_text'],
                               'source_file': 'nltk\\nltk\\lm\\counter.py'},
    'NgramTagger.__init__': {   'opt_args': [   'verbose',
                                                'cutoff',
                                                'backoff',
                                                'model',
                                                'train'],
                                'req_args': ['n'],
                                'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'NgramTagger.context': {   'opt_args': [],
                               'req_args': ['history', 'index', 'tokens'],
                               'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'NgramTagger.decode_json_obj': {   'opt_args': [],
                                       'req_args': ['obj', 'cls'],
                                       'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'NgramTagger.encode_json_obj': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'NltkDrtBoxerDrsInterpreter.__init__': {   'opt_args': ['occur_index'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'NltkDrtBoxerDrsInterpreter.interpret': {   'opt_args': [],
                                                'req_args': ['ex'],
                                                'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'NombankChainTreePointer.__init__': {   'opt_args': [],
                                            'req_args': ['pieces'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankChainTreePointer.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankChainTreePointer.__str__': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankChainTreePointer.select': {   'opt_args': [],
                                          'req_args': ['tree'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                        'parse_corpus',
                                                        'parse_fileid_xform',
                                                        'nounsfile',
                                                        'framefiles'],
                                        'req_args': ['nomfile', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.instances': {   'opt_args': ['baseform'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.lines': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.nouns': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.roleset': {   'opt_args': [],
                                       'req_args': ['roleset_id'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankCorpusReader.rolesets': {   'opt_args': ['baseform'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankInstance.__init__': {   'opt_args': ['parse_corpus'],
                                    'req_args': [   'arguments',
                                                    'predid',
                                                    'predicate',
                                                    'sensenumber',
                                                    'baseform',
                                                    'wordnum',
                                                    'sentnum',
                                                    'fileid'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankInstance.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankInstance.__str__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankInstance.parse': {   'opt_args': [   'parse_corpus',
                                                 'parse_fileid_xform'],
                                 'req_args': ['s'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankInstance.roleset': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankPointer.__init__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankSplitTreePointer.__init__': {   'opt_args': [],
                                            'req_args': ['pieces'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankSplitTreePointer.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankSplitTreePointer.__str__': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankSplitTreePointer.select': {   'opt_args': [],
                                          'req_args': ['tree'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__eq__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__init__': {   'opt_args': [],
                                       'req_args': ['height', 'wordnum'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__lt__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__ne__': {   'opt_args': [],
                                     'req_args': ['other'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.__str__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.parse': {   'opt_args': [],
                                    'req_args': ['s'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.select': {   'opt_args': [],
                                     'req_args': ['tree'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NombankTreePointer.treepos': {   'opt_args': [],
                                      'req_args': ['tree'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\nombank.py'},
    'NonbreakingPrefixesCorpusReader.words': {   'opt_args': [   'ignore_lines_startswith',
                                                                 'fileids',
                                                                 'lang'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordlist.py'},
    'NonprojectiveDependencyParser.__init__': {   'opt_args': [],
                                                  'req_args': [   'dependency_grammar'],
                                                  'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'NonprojectiveDependencyParser.parse': {   'opt_args': [],
                                               'req_args': ['tokens'],
                                               'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'Nonterminal.__div__': {   'opt_args': [],
                               'req_args': ['rhs'],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__eq__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__hash__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__init__': {   'opt_args': [],
                                'req_args': ['symbol'],
                                'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__lt__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__ne__': {   'opt_args': [],
                              'req_args': ['other'],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.__truediv__': {   'opt_args': [],
                                   'req_args': ['rhs'],
                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'Nonterminal.symbol': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'NorwegianStemmer.stem': {   'opt_args': [],
                                 'req_args': ['word'],
                                 'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'OpenOnDemandZipFile.__init__': {   'opt_args': [],
                                        'req_args': ['filename'],
                                        'source_file': 'nltk\\nltk\\data.py'},
    'OpenOnDemandZipFile.__repr__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\data.py'},
    'OpenOnDemandZipFile.read': {   'opt_args': [],
                                    'req_args': ['name'],
                                    'source_file': 'nltk\\nltk\\data.py'},
    'OpenOnDemandZipFile.write': {   'opt_args': ['kwargs'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\data.py'},
    'OpenOnDemandZipFile.writestr': {   'opt_args': ['kwargs'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\data.py'},
    'OpinionLexiconCorpusReader.negative': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\opinion_lexicon.py'},
    'OpinionLexiconCorpusReader.positive': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\opinion_lexicon.py'},
    'OpinionLexiconCorpusReader.words': {   'opt_args': ['fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\opinion_lexicon.py'},
    'OrExpression.getOp': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'OrderedDict.__delitem__': {   'opt_args': [],
                                   'req_args': ['key'],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.__getitem__': {   'opt_args': [],
                                   'req_args': ['key'],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.__init__': {   'opt_args': ['data', 'kwargs'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.__iter__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.__missing__': {   'opt_args': [],
                                   'req_args': ['key'],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.__setitem__': {   'opt_args': [],
                                   'req_args': ['item', 'key'],
                                   'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.clear': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.copy': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.items': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.keys': {   'opt_args': ['keys', 'data'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.popitem': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.setdefault': {   'opt_args': ['failobj'],
                                  'req_args': ['key'],
                                  'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.update': {   'opt_args': [],
                              'req_args': ['data'],
                              'source_file': 'nltk\\nltk\\collections.py'},
    'OrderedDict.values': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\collections.py'},
    'OvalWidget.__getitem__': {   'opt_args': [],
                                  'req_args': ['attr'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'OvalWidget.__init__': {   'opt_args': ['attribs'],
                               'req_args': ['child', 'canvas'],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'OvalWidget.__setitem__': {   'opt_args': [],
                                  'req_args': ['value', 'attr'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'PCFG.__init__': {   'opt_args': ['calculate_leftcorners'],
                         'req_args': ['productions', 'start'],
                         'source_file': 'nltk\\nltk\\grammar.py'},
    'PCFG.fromstring': {   'opt_args': ['encoding'],
                           'req_args': ['input', 'cls'],
                           'source_file': 'nltk\\nltk\\grammar.py'},
    'PPAttachment.__init__': {   'opt_args': [],
                                 'req_args': [   'attachment',
                                                 'noun2',
                                                 'prep',
                                                 'noun1',
                                                 'verb',
                                                 'sent'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\ppattach.py'},
    'PPAttachment.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\ppattach.py'},
    'PPAttachmentCorpusReader.attachments': {   'opt_args': [],
                                                'req_args': ['fileids'],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\ppattach.py'},
    'PPAttachmentCorpusReader.tuples': {   'opt_args': [],
                                           'req_args': ['fileids'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\ppattach.py'},
    'Package.__init__': {   'opt_args': [   'unzip',
                                            'author',
                                            'license',
                                            'contact',
                                            'copyright',
                                            'svn_revision',
                                            'checksum',
                                            'unzipped_size',
                                            'size',
                                            'subdir',
                                            'name',
                                            'kw'],
                            'req_args': ['url', 'id'],
                            'source_file': 'nltk\\nltk\\downloader.py'},
    'Package.__lt__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\downloader.py'},
    'Package.__repr__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\downloader.py'},
    'Package.fromxml': {   'opt_args': [],
                           'req_args': ['xml'],
                           'source_file': 'nltk\\nltk\\downloader.py'},
    'Paice.__init__': {   'opt_args': [],
                          'req_args': ['stems', 'lemmas'],
                          'source_file': 'nltk\\nltk\\metrics\\paice.py'},
    'Paice.__str__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\metrics\\paice.py'},
    'Paice.update': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\metrics\\paice.py'},
    'PanLexLiteCorpusReader.__init__': {   'opt_args': [],
                                           'req_args': ['root'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'PanLexLiteCorpusReader.language_varieties': {   'opt_args': ['lc'],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'PanLexLiteCorpusReader.meanings': {   'opt_args': [],
                                           'req_args': ['expr_tt', 'expr_uid'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'PanLexLiteCorpusReader.translations': {   'opt_args': [],
                                               'req_args': [   'to_uid',
                                                               'from_tt',
                                                               'from_uid'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_lite.py'},
    'PanlexSwadeshCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.entries': {   'opt_args': ['fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.get_languages': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.get_macrolanguages': {   'opt_args': [],
                                                        'req_args': [],
                                                        'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.language_codes': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.license': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.words_by_iso639': {   'opt_args': [],
                                                     'req_args': ['iso63_code'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'PanlexSwadeshCorpusReader.words_by_lang': {   'opt_args': [],
                                                   'req_args': ['lang_code'],
                                                   'source_file': 'nltk\\nltk\\corpus\\reader\\panlex_swadesh.py'},
    'ParallelProverBuilder.__init__': {   'opt_args': [],
                                          'req_args': [   'modelbuilder',
                                                          'prover'],
                                          'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ParallelProverBuilderCommand.__init__': {   'opt_args': [   'assumptions',
                                                                 'goal'],
                                                 'req_args': [   'modelbuilder',
                                                                 'prover'],
                                                 'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ParallelProverBuilderCommand.build_model': {   'opt_args': ['verbose'],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ParallelProverBuilderCommand.prove': {   'opt_args': ['verbose'],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ParenWidget.__getitem__': {   'opt_args': [],
                                   'req_args': ['attr'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ParenWidget.__init__': {   'opt_args': ['attribs'],
                                'req_args': ['child', 'canvas'],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ParenWidget.__setitem__': {   'opt_args': [],
                                   'req_args': ['value', 'attr'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ParentedTree.__init__': {   'opt_args': ['children'],
                                 'req_args': ['node'],
                                 'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.copy': {   'opt_args': ['deep'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.left_sibling': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.parent': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.parent_index': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.right_sibling': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.root': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParentedTree.treeposition': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\parented.py'},
    'ParserI.grammar': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\api.py'},
    'ParserI.parse': {   'opt_args': ['kwargs'],
                         'req_args': ['sent'],
                         'source_file': 'nltk\\nltk\\parse\\api.py'},
    'ParserI.parse_all': {   'opt_args': ['kwargs'],
                             'req_args': ['sent'],
                             'source_file': 'nltk\\nltk\\parse\\api.py'},
    'ParserI.parse_one': {   'opt_args': ['kwargs'],
                             'req_args': ['sent'],
                             'source_file': 'nltk\\nltk\\parse\\api.py'},
    'ParserI.parse_sents': {   'opt_args': ['kwargs'],
                               'req_args': ['sents'],
                               'source_file': 'nltk\\nltk\\parse\\api.py'},
    'PassthroughBoxerDrsInterpreter.interpret': {   'opt_args': [],
                                                    'req_args': ['ex'],
                                                    'source_file': 'nltk\\nltk\\sem\\boxer.py'},
    'PathPointer.file_size': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\data.py'},
    'PathPointer.join': {   'opt_args': [],
                            'req_args': ['fileid'],
                            'source_file': 'nltk\\nltk\\data.py'},
    'PathPointer.open': {   'opt_args': ['encoding'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\data.py'},
    'PerceptronTagger.__init__': {   'opt_args': ['load'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.decode_json_obj': {   'opt_args': [],
                                            'req_args': ['obj', 'cls'],
                                            'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.encode_json_obj': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.load': {   'opt_args': [],
                                 'req_args': ['loc'],
                                 'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.normalize': {   'opt_args': [],
                                      'req_args': ['word'],
                                      'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.tag': {   'opt_args': ['use_tagdict', 'return_conf'],
                                'req_args': ['tokens'],
                                'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PerceptronTagger.train': {   'opt_args': ['nr_iter', 'save_loc'],
                                  'req_args': ['sentences'],
                                  'source_file': 'nltk\\nltk\\tag\\perceptron.py'},
    'PhraseTable.__contains__': {   'opt_args': [],
                                    'req_args': ['src_phrase'],
                                    'source_file': 'nltk\\nltk\\translate\\api.py'},
    'PhraseTable.__init__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\translate\\api.py'},
    'PhraseTable.add': {   'opt_args': [],
                           'req_args': ['log_prob', 'trg_phrase', 'src_phrase'],
                           'source_file': 'nltk\\nltk\\translate\\api.py'},
    'PhraseTable.translations_for': {   'opt_args': [],
                                        'req_args': ['src_phrase'],
                                        'source_file': 'nltk\\nltk\\translate\\api.py'},
    'PickleCorpusView.__del__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'PickleCorpusView.__init__': {   'opt_args': ['delete_on_gc'],
                                     'req_args': ['fileid'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'PickleCorpusView.cache_to_tempfile': {   'opt_args': ['delete_on_gc'],
                                              'req_args': ['sequence', 'cls'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'PickleCorpusView.read_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'PickleCorpusView.write': {   'opt_args': [],
                                  'req_args': [   'output_file',
                                                  'sequence',
                                                  'cls'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'Pl196xCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.decode_tag': {   'opt_args': [],
                                         'req_args': ['tag'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.paras': {   'opt_args': [   'textids',
                                                    'categories',
                                                    'fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.sents': {   'opt_args': [   'textids',
                                                    'categories',
                                                    'fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.tagged_paras': {   'opt_args': [   'textids',
                                                           'categories',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.tagged_sents': {   'opt_args': [   'textids',
                                                           'categories',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.tagged_words': {   'opt_args': [   'textids',
                                                           'categories',
                                                           'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.textids': {   'opt_args': ['categories', 'fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.words': {   'opt_args': [   'textids',
                                                    'categories',
                                                    'fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Pl196xCorpusReader.xml': {   'opt_args': ['categories', 'fileids'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'PlaintextCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                          'para_block_reader',
                                                          'sent_tokenizer',
                                                          'word_tokenizer'],
                                          'req_args': ['fileids', 'root'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'PlaintextCorpusReader.paras': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'PlaintextCorpusReader.sents': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'PlaintextCorpusReader.words': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'PorterStemmer.__init__': {   'opt_args': ['ignore_stopwords'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'PorterStemmer.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\stem\\porter.py'},
    'PorterStemmer.stem': {   'opt_args': ['to_lowercase'],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\porter.py'},
    'PortugueseCategorizedPlaintextCorpusReader.__init__': {   'opt_args': [   'kwargs'],
                                                               'req_args': [],
                                                               'source_file': 'nltk\\nltk\\corpus\\reader\\plaintext.py'},
    'PortugueseStemmer.stem': {   'opt_args': [],
                                  'req_args': ['word'],
                                  'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'Pos.extract_property': {   'opt_args': [],
                                'req_args': ['index', 'tokens'],
                                'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'PositiveNaiveBayesClassifier.train': {   'opt_args': [   'estimator',
                                                              'positive_prob_prior'],
                                              'req_args': [   'unlabeled_featuresets',
                                                              'positive_featuresets'],
                                              'source_file': 'nltk\\nltk\\classify\\positivenaivebayes.py'},
    'PossibleAntecedents.__str__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'PossibleAntecedents.free': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'PossibleAntecedents.replace': {   'opt_args': [   'alpha_convert',
                                                       'replace_bound'],
                                       'req_args': ['expression', 'variable'],
                                       'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'PredHolder.__init__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PredHolder.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PredHolder.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PredHolder.append_prop': {   'opt_args': [],
                                  'req_args': ['new_prop'],
                                  'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PredHolder.append_sig': {   'opt_args': [],
                                 'req_args': ['new_sig'],
                                 'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PredHolder.validate_sig_len': {   'opt_args': [],
                                       'req_args': ['new_sig'],
                                       'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'PrettyDict.__init__': {   'opt_args': ['kwargs'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyDict.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyLazyConcatenation.__add__': {   'opt_args': [],
                                           'req_args': ['other'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyLazyConcatenation.__radd__': {   'opt_args': [],
                                            'req_args': ['other'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyLazyConcatenation.__repr__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyLazyIteratorList.__repr__': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyLazyMap.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyList.__init__': {   'opt_args': ['kwargs'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrettyList.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'PrimitiveCategory.__init__': {   'opt_args': ['restrictions'],
                                      'req_args': ['categ'],
                                      'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.can_unify': {   'opt_args': [],
                                       'req_args': ['other'],
                                       'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.categ': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.is_function': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.is_primitive': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.is_var': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.restrs': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'PrimitiveCategory.substitute': {   'opt_args': [],
                                        'req_args': ['subs'],
                                        'source_file': 'nltk\\nltk\\ccg\\api.py'},
    'ProbDistI.__init__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.discount': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.generate': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.logprob': {   'opt_args': [],
                             'req_args': ['sample'],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.max': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.prob': {   'opt_args': [],
                          'req_args': ['sample'],
                          'source_file': 'nltk\\nltk\\probability.py'},
    'ProbDistI.samples': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticBottomUpInitRule.apply': {   'opt_args': [],
                                               'req_args': ['grammar', 'chart'],
                                               'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticBottomUpPredictRule.apply': {   'opt_args': [],
                                                  'req_args': [   'edge',
                                                                  'grammar',
                                                                  'chart'],
                                                  'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticDependencyGrammar.__init__': {   'opt_args': [],
                                                   'req_args': [   'tags',
                                                                   'events',
                                                                   'productions'],
                                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticDependencyGrammar.__repr__': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticDependencyGrammar.__str__': {   'opt_args': [],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticDependencyGrammar.contains': {   'opt_args': [],
                                                   'req_args': ['mod', 'head'],
                                                   'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticFundamentalRule.apply': {   'opt_args': [],
                                              'req_args': [   'right_edge',
                                                              'left_edge',
                                                              'grammar',
                                                              'chart'],
                                              'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticLeafEdge.prob': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticMixIn.__init__': {   'opt_args': ['kwargs'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticMixIn.logprob': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticMixIn.prob': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticMixIn.set_logprob': {   'opt_args': [],
                                          'req_args': ['logprob'],
                                          'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticMixIn.set_prob': {   'opt_args': [],
                                       'req_args': ['prob'],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'ProbabilisticNonprojectiveParser.__init__': {   'opt_args': [],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.best_incoming_arc': {   'opt_args': [],
                                                              'req_args': [   'node_index'],
                                                              'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.collapse_nodes': {   'opt_args': [],
                                                           'req_args': [   'c_graph',
                                                                           'b_graph',
                                                                           'g_graph',
                                                                           'cycle_path',
                                                                           'new_node'],
                                                           'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.compute_max_subtract_score': {   'opt_args': [   ],
                                                                       'req_args': [   'cycle_indexes',
                                                                                       'column_index'],
                                                                       'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.compute_original_indexes': {   'opt_args': [   ],
                                                                     'req_args': [   'new_indexes'],
                                                                     'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.initialize_edge_scores': {   'opt_args': [   ],
                                                                   'req_args': [   'graph'],
                                                                   'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.original_best_arc': {   'opt_args': [],
                                                              'req_args': [   'node_index'],
                                                              'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.parse': {   'opt_args': [],
                                                  'req_args': [   'tags',
                                                                  'tokens'],
                                                  'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.train': {   'opt_args': [],
                                                  'req_args': [   'dependency_scorer',
                                                                  'graphs'],
                                                  'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticNonprojectiveParser.update_edge_scores': {   'opt_args': [],
                                                               'req_args': [   'cycle_path',
                                                                               'new_node'],
                                                               'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'ProbabilisticProduction.__eq__': {   'opt_args': [],
                                          'req_args': ['other'],
                                          'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticProduction.__hash__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticProduction.__init__': {   'opt_args': ['prob'],
                                            'req_args': ['rhs', 'lhs'],
                                            'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticProduction.__ne__': {   'opt_args': [],
                                          'req_args': ['other'],
                                          'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticProduction.__str__': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\grammar.py'},
    'ProbabilisticProjectiveDependencyParser.__init__': {   'opt_args': [],
                                                            'req_args': [],
                                                            'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProbabilisticProjectiveDependencyParser.compute_prob': {   'opt_args': [],
                                                                'req_args': [   'dg'],
                                                                'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProbabilisticProjectiveDependencyParser.concatenate': {   'opt_args': [],
                                                               'req_args': [   'span2',
                                                                               'span1'],
                                                               'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProbabilisticProjectiveDependencyParser.parse': {   'opt_args': [],
                                                         'req_args': ['tokens'],
                                                         'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProbabilisticProjectiveDependencyParser.train': {   'opt_args': [],
                                                         'req_args': ['graphs'],
                                                         'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProbabilisticTree.__eq__': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.__init__': {   'opt_args': ['children', 'prob_kwargs'],
                                      'req_args': ['node'],
                                      'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.__lt__': {   'opt_args': [],
                                    'req_args': ['other'],
                                    'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.convert': {   'opt_args': [],
                                     'req_args': ['val', 'cls'],
                                     'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTree.copy': {   'opt_args': ['deep'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tree\\probabilistic.py'},
    'ProbabilisticTreeEdge.__init__': {   'opt_args': ['kwargs'],
                                          'req_args': ['prob'],
                                          'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticTreeEdge.from_production': {   'opt_args': [],
                                                 'req_args': [   'p',
                                                                 'index',
                                                                 'production'],
                                                 'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'ProbabilisticTreeEdge.prob': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'Production.__eq__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__hash__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__init__': {   'opt_args': [],
                               'req_args': ['rhs', 'lhs'],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__len__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__lt__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__ne__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.is_lexical': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.is_nonlexical': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.lhs': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'Production.rhs': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'ProgressMessage.__init__': {   'opt_args': [],
                                    'req_args': ['progress'],
                                    'source_file': 'nltk\\nltk\\downloader.py'},
    'ProjectiveDependencyParser.__init__': {   'opt_args': [],
                                               'req_args': [   'dependency_grammar'],
                                               'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProjectiveDependencyParser.concatenate': {   'opt_args': [],
                                                  'req_args': [   'span2',
                                                                  'span1'],
                                                  'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'ProjectiveDependencyParser.parse': {   'opt_args': [],
                                            'req_args': ['tokens'],
                                            'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'PropbankChainTreePointer.__init__': {   'opt_args': [],
                                             'req_args': ['pieces'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankChainTreePointer.__repr__': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankChainTreePointer.__str__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankChainTreePointer.select': {   'opt_args': [],
                                           'req_args': ['tree'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                         'parse_corpus',
                                                         'parse_fileid_xform',
                                                         'verbsfile',
                                                         'framefiles'],
                                         'req_args': ['propfile', 'root'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.instances': {   'opt_args': ['baseform'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.lines': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.roleset': {   'opt_args': [],
                                        'req_args': ['roleset_id'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.rolesets': {   'opt_args': ['baseform'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankCorpusReader.verbs': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInflection.__init__': {   'opt_args': [   'voice',
                                                       'person',
                                                       'aspect',
                                                       'tense',
                                                       'form'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInflection.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInflection.__str__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInflection.parse': {   'opt_args': [],
                                    'req_args': ['s'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.__init__': {   'opt_args': ['parse_corpus'],
                                     'req_args': [   'arguments',
                                                     'predicate',
                                                     'inflection',
                                                     'roleset',
                                                     'tagger',
                                                     'wordnum',
                                                     'sentnum',
                                                     'fileid'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.__str__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.baseform': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.parse': {   'opt_args': [   'parse_corpus',
                                                  'parse_fileid_xform'],
                                  'req_args': ['s'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.predid': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankInstance.sensenumber': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankPointer.__init__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankSplitTreePointer.__init__': {   'opt_args': [],
                                             'req_args': ['pieces'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankSplitTreePointer.__repr__': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankSplitTreePointer.__str__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankSplitTreePointer.select': {   'opt_args': [],
                                           'req_args': ['tree'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__eq__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__init__': {   'opt_args': [],
                                        'req_args': ['height', 'wordnum'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__lt__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__ne__': {   'opt_args': [],
                                      'req_args': ['other'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__repr__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.__str__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.parse': {   'opt_args': [],
                                     'req_args': ['s'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.select': {   'opt_args': [],
                                      'req_args': ['tree'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'PropbankTreePointer.treepos': {   'opt_args': [],
                                       'req_args': ['tree'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\propbank.py'},
    'ProsConsCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                         'word_tokenizer',
                                                         'kwargs'],
                                         'req_args': ['fileids', 'root'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\pros_cons.py'},
    'ProsConsCorpusReader.sents': {   'opt_args': ['categories', 'fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\pros_cons.py'},
    'ProsConsCorpusReader.words': {   'opt_args': ['categories', 'fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\pros_cons.py'},
    'Prover.prove': {   'opt_args': ['verbose', 'assumptions', 'goal'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\inference\\api.py'},
    'Prover9.__init__': {   'opt_args': ['timeout'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9.prover9_input': {   'opt_args': [],
                                 'req_args': ['assumptions', 'goal'],
                                 'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Command.__init__': {   'opt_args': [   'prover',
                                                   'timeout',
                                                   'assumptions',
                                                   'goal'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Command.decorate_proof': {   'opt_args': ['simplify'],
                                         'req_args': ['proof_string'],
                                         'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9CommandParent.print_assumptions': {   'opt_args': ['output_format'],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Exception.__init__': {   'opt_args': [],
                                     'req_args': ['message', 'returncode'],
                                     'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Parent.binary_locations': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Parent.config_prover9': {   'opt_args': ['verbose'],
                                        'req_args': ['binary_location'],
                                        'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'Prover9Parent.prover9_input': {   'opt_args': [],
                                       'req_args': ['assumptions', 'goal'],
                                       'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'ProverCommand.get_prover': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommand.proof': {   'opt_args': ['simplify'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommand.prove': {   'opt_args': ['verbose'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommandDecorator.__init__': {   'opt_args': [],
                                           'req_args': ['proverCommand'],
                                           'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommandDecorator.decorate_proof': {   'opt_args': ['simplify'],
                                                 'req_args': ['proof_string'],
                                                 'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommandDecorator.get_prover': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommandDecorator.proof': {   'opt_args': ['simplify'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\inference\\api.py'},
    'ProverCommandDecorator.prove': {   'opt_args': ['verbose'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\inference\\api.py'},
    'PunktBaseClass.__init__': {   'opt_args': [   'params',
                                                   'token_cls',
                                                   'lang_vars'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktLanguageVars.__getstate__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktLanguageVars.__setstate__': {   'opt_args': [],
                                          'req_args': ['state'],
                                          'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktLanguageVars.period_context_re': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktLanguageVars.word_tokenize': {   'opt_args': [],
                                           'req_args': ['s'],
                                           'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.__init__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.add_ortho_context': {   'opt_args': [],
                                             'req_args': ['flag', 'typ'],
                                             'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.clear_abbrevs': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.clear_collocations': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.clear_ortho_context': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktParameters.clear_sent_starters': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.__init__': {   'opt_args': [   'token_cls',
                                                           'lang_vars',
                                                           'verbose',
                                                           'train_text'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.debug_decisions': {   'opt_args': [],
                                                  'req_args': ['text'],
                                                  'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.dump': {   'opt_args': [],
                                       'req_args': ['tokens'],
                                       'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.sentences_from_text': {   'opt_args': [   'realign_boundaries'],
                                                      'req_args': ['text'],
                                                      'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.sentences_from_text_legacy': {   'opt_args': [],
                                                             'req_args': [   'text'],
                                                             'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.sentences_from_tokens': {   'opt_args': [],
                                                        'req_args': ['tokens'],
                                                        'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.span_tokenize': {   'opt_args': [   'realign_boundaries'],
                                                'req_args': ['text'],
                                                'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.text_contains_sentbreak': {   'opt_args': [],
                                                          'req_args': ['text'],
                                                          'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.tokenize': {   'opt_args': ['realign_boundaries'],
                                           'req_args': ['text'],
                                           'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktSentenceTokenizer.train': {   'opt_args': ['verbose'],
                                        'req_args': ['train_text'],
                                        'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.__init__': {   'opt_args': ['params'],
                               'req_args': ['tok'],
                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.first_case': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.first_lower': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.first_upper': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.is_alpha': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.is_ellipsis': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.is_initial': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.is_non_punct': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.is_number': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.type_no_period': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktToken.type_no_sentperiod': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.__init__': {   'opt_args': [   'token_cls',
                                                 'lang_vars',
                                                 'verbose',
                                                 'train_text'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.finalize_training': {   'opt_args': ['verbose'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.find_abbrev_types': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.freq_threshold': {   'opt_args': [   'sentstart_thresh',
                                                       'colloc_thres',
                                                       'type_thresh',
                                                       'ortho_thresh'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.get_params': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.train': {   'opt_args': ['finalize', 'verbose'],
                              'req_args': ['text'],
                              'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'PunktTrainer.train_tokens': {   'opt_args': ['finalize', 'verbose'],
                                     'req_args': ['tokens'],
                                     'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'QuadgramCollocationFinder.__init__': {   'opt_args': [],
                                              'req_args': [   'ixii',
                                                              'iixi',
                                                              'ixxi',
                                                              'ixi',
                                                              'iii',
                                                              'ii',
                                                              'quadgram_fd',
                                                              'word_fd'],
                                              'source_file': 'nltk\\nltk\\collocations.py'},
    'QuadgramCollocationFinder.from_words': {   'opt_args': ['window_size'],
                                                'req_args': ['words', 'cls'],
                                                'source_file': 'nltk\\nltk\\collocations.py'},
    'QuadgramCollocationFinder.score_ngram': {   'opt_args': [],
                                                 'req_args': [   'w4',
                                                                 'w3',
                                                                 'w2',
                                                                 'w1',
                                                                 'score_fn'],
                                                 'source_file': 'nltk\\nltk\\collocations.py'},
    'QuantifiedExpression.__str__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'QuantifiedExpression.type': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Query.__init__': {   'opt_args': [],
                          'req_args': [   'oauth_token_secret',
                                          'oauth_token',
                                          'app_secret',
                                          'app_key'],
                          'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Query.expand_tweetids': {   'opt_args': ['verbose'],
                                 'req_args': ['ids_f'],
                                 'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Query.register': {   'opt_args': [],
                          'req_args': ['handler'],
                          'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Query.search_tweets': {   'opt_args': [   'retries_after_twython_exception',
                                               'max_id',
                                               'lang',
                                               'limit'],
                               'req_args': ['keywords'],
                               'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Query.user_info_from_id': {   'opt_args': [],
                                   'req_args': ['userids'],
                                   'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Query.user_tweets': {   'opt_args': ['include_rts'],
                             'req_args': ['limit', 'screen_name'],
                             'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'RSLPStemmer.__init__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\stem\\rslp.py'},
    'RSLPStemmer.apply_rule': {   'opt_args': [],
                                  'req_args': ['rule_index', 'word'],
                                  'source_file': 'nltk\\nltk\\stem\\rslp.py'},
    'RSLPStemmer.read_rule': {   'opt_args': [],
                                 'req_args': ['filename'],
                                 'source_file': 'nltk\\nltk\\stem\\rslp.py'},
    'RSLPStemmer.stem': {   'opt_args': [],
                            'req_args': ['word'],
                            'source_file': 'nltk\\nltk\\stem\\rslp.py'},
    'RTECorpusReader.pairs': {   'opt_args': [],
                                 'req_args': ['fileids'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\rte.py'},
    'RTEFeatureExtractor.__init__': {   'opt_args': ['use_lemmatize', 'stop'],
                                        'req_args': ['rtepair'],
                                        'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'RTEFeatureExtractor.hyp_extra': {   'opt_args': ['debug'],
                                         'req_args': ['toktype'],
                                         'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'RTEFeatureExtractor.overlap': {   'opt_args': ['debug'],
                                       'req_args': ['toktype'],
                                       'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'RTEPair.__init__': {   'opt_args': [   'length',
                                            'task',
                                            'value',
                                            'hyp',
                                            'text',
                                            'id',
                                            'challenge'],
                            'req_args': ['pair'],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\rte.py'},
    'RTEPair.__repr__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\rte.py'},
    'RandomChartParser.sort_queue': {   'opt_args': [],
                                        'req_args': ['chart', 'queue'],
                                        'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'RandomProbDist.__init__': {   'opt_args': [],
                                   'req_args': ['samples'],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'RandomProbDist.__repr__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'RandomProbDist.max': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\probability.py'},
    'RandomProbDist.prob': {   'opt_args': [],
                               'req_args': ['sample'],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'RandomProbDist.samples': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'RandomProbDist.unirand': {   'opt_args': [],
                                  'req_args': ['samples', 'cls'],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'RangeFeature.read_value': {   'opt_args': [],
                                   'req_args': [   'parser',
                                                   'reentrances',
                                                   'position',
                                                   's'],
                                   'source_file': 'nltk\\nltk\\featstruct.py'},
    'RangeFeature.unify_base_values': {   'opt_args': [],
                                          'req_args': [   'bindings',
                                                          'fval2',
                                                          'fval1'],
                                          'source_file': 'nltk\\nltk\\featstruct.py'},
    'ReadError.__init__': {   'opt_args': [],
                              'req_args': ['position', 'expected'],
                              'source_file': 'nltk\\nltk\\internals.py'},
    'ReadError.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\internals.py'},
    'ReadingCommand.combine_readings': {   'opt_args': [],
                                           'req_args': ['readings'],
                                           'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'ReadingCommand.parse_to_readings': {   'opt_args': [],
                                            'req_args': ['sentence'],
                                            'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'ReadingCommand.process_thread': {   'opt_args': [],
                                         'req_args': ['sentence_readings'],
                                         'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'ReadingCommand.to_fol': {   'opt_args': [],
                                 'req_args': ['expression'],
                                 'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'RecursiveDescentApp.__init__': {   'opt_args': ['trace'],
                                        'req_args': ['sent', 'grammar'],
                                        'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.about': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.autostep': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.backtrack': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.cancel_autostep': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.destroy': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.edit_grammar': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.edit_sentence': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.expand': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.help': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.mainloop': {   'opt_args': ['kwargs'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.match': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.postscript': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.reset': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.resize': {   'opt_args': ['size'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.set_grammar': {   'opt_args': [],
                                           'req_args': ['grammar'],
                                           'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.set_sentence': {   'opt_args': [],
                                            'req_args': ['sentence'],
                                            'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentApp.step': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\app\\rdparser_app.py'},
    'RecursiveDescentParser.__init__': {   'opt_args': ['trace'],
                                           'req_args': ['grammar'],
                                           'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'RecursiveDescentParser.grammar': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'RecursiveDescentParser.parse': {   'opt_args': [],
                                        'req_args': ['tokens'],
                                        'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'RecursiveDescentParser.trace': {   'opt_args': ['trace'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'Reference.__init__': {   'opt_args': ['synset_relations'],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'Reference.decode': {   'opt_args': [],
                            'req_args': ['string'],
                            'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'Reference.encode': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'Reference.toggle_synset': {   'opt_args': [],
                                   'req_args': ['synset'],
                                   'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'Reference.toggle_synset_relation': {   'opt_args': [],
                                            'req_args': ['relation', 'synset'],
                                            'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'RegexpChunkApp.__init__': {   'opt_args': [   'tagset',
                                                   'chunk_label',
                                                   'grammar',
                                                   'devset',
                                                   'devset_name'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.about': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.destroy': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.load_grammar': {   'opt_args': ['filename'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.mainloop': {   'opt_args': ['kwargs'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.normalize_grammar': {   'opt_args': [],
                                            'req_args': ['grammar'],
                                            'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.reset': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.resize': {   'opt_args': ['size'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.save_grammar': {   'opt_args': ['filename'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.save_history': {   'opt_args': ['filename'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.set_devset_size': {   'opt_args': ['size'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.show_devset': {   'opt_args': ['index'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.show_help': {   'opt_args': [],
                                    'req_args': ['tab'],
                                    'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.show_trace': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.toggle_show_trace': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkApp.update': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\chunkparser_app.py'},
    'RegexpChunkParser.__init__': {   'opt_args': [   'trace',
                                                      'root_label',
                                                      'chunk_label'],
                                      'req_args': ['rules'],
                                      'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkParser.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkParser.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkParser.parse': {   'opt_args': ['trace'],
                                   'req_args': ['chunk_struct'],
                                   'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkParser.rules': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkRule.__init__': {   'opt_args': [],
                                    'req_args': ['descr', 'repl', 'regexp'],
                                    'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkRule.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkRule.apply': {   'opt_args': [],
                                 'req_args': ['chunkstr'],
                                 'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkRule.descr': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpChunkRule.fromstring': {   'opt_args': [],
                                      'req_args': ['s'],
                                      'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpParser.__init__': {   'opt_args': ['trace', 'loop', 'root_label'],
                                 'req_args': ['grammar'],
                                 'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpParser.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpParser.__str__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpParser.parse': {   'opt_args': ['trace'],
                              'req_args': ['chunk_struct'],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'RegexpStemmer.__init__': {   'opt_args': ['min'],
                                  'req_args': ['regexp'],
                                  'source_file': 'nltk\\nltk\\stem\\regexp.py'},
    'RegexpStemmer.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\stem\\regexp.py'},
    'RegexpStemmer.stem': {   'opt_args': [],
                              'req_args': ['word'],
                              'source_file': 'nltk\\nltk\\stem\\regexp.py'},
    'RegexpTagger.__init__': {   'opt_args': ['backoff'],
                                 'req_args': ['regexps'],
                                 'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'RegexpTagger.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'RegexpTagger.choose_tag': {   'opt_args': [],
                                   'req_args': ['history', 'index', 'tokens'],
                                   'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'RegexpTagger.decode_json_obj': {   'opt_args': [],
                                        'req_args': ['obj', 'cls'],
                                        'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'RegexpTagger.encode_json_obj': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'RegexpTokenizer.__init__': {   'opt_args': [   'flags',
                                                    'discard_empty',
                                                    'gaps'],
                                    'req_args': ['pattern'],
                                    'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'RegexpTokenizer.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'RegexpTokenizer.span_tokenize': {   'opt_args': [],
                                         'req_args': ['text'],
                                         'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'RegexpTokenizer.tokenize': {   'opt_args': [],
                                    'req_args': ['text'],
                                    'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'ReplaceZone.addTags': {   'opt_args': [],
                               'req_args': ['m'],
                               'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'ReplaceZone.substitute': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'ReppTokenizer.__init__': {   'opt_args': ['encoding'],
                                  'req_args': ['repp_dir'],
                                  'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ReppTokenizer.find_repptokenizer': {   'opt_args': [],
                                            'req_args': ['repp_dirname'],
                                            'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ReppTokenizer.generate_repp_command': {   'opt_args': [],
                                               'req_args': ['inputfilename'],
                                               'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ReppTokenizer.parse_repp_outputs': {   'opt_args': [],
                                            'req_args': ['repp_output'],
                                            'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ReppTokenizer.tokenize': {   'opt_args': [],
                                  'req_args': ['sentence'],
                                  'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ReppTokenizer.tokenize_sents': {   'opt_args': ['keep_token_positions'],
                                        'req_args': ['sentences'],
                                        'source_file': 'nltk\\nltk\\tokenize\\repp.py'},
    'ResolutionProverCommand.__init__': {   'opt_args': [   'prover',
                                                            'assumptions',
                                                            'goal'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'ResolutionProverCommand.find_answers': {   'opt_args': ['verbose'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'ResolutionProverCommand.prove': {   'opt_args': ['verbose'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'Review.__init__': {   'opt_args': ['review_lines', 'title'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'Review.__repr__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'Review.add_line': {   'opt_args': [],
                           'req_args': ['review_line'],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'Review.features': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'Review.sents': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewLine.__init__': {   'opt_args': ['notes', 'features'],
                               'req_args': ['sent'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewLine.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewsCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                        'word_tokenizer'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewsCorpusReader.features': {   'opt_args': ['fileids'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewsCorpusReader.reviews': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewsCorpusReader.sents': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'ReviewsCorpusReader.words': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\reviews.py'},
    'RomanianStemmer.stem': {   'opt_args': [],
                                'req_args': ['word'],
                                'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'Rule.__eq__': {   'opt_args': [],
                       'req_args': ['other'],
                       'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.__hash__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.__init__': {   'opt_args': [],
                         'req_args': [   'conditions',
                                         'replacement_tag',
                                         'original_tag',
                                         'templateid'],
                         'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.__ne__': {   'opt_args': [],
                       'req_args': ['other'],
                       'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.__repr__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.__str__': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.applies': {   'opt_args': [],
                        'req_args': ['index', 'tokens'],
                        'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.decode_json_obj': {   'opt_args': [],
                                'req_args': ['obj', 'cls'],
                                'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.encode_json_obj': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'Rule.format': {   'opt_args': [],
                       'req_args': ['fmt'],
                       'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'RussianStemmer.__cyrillic_to_roman': {   'opt_args': [],
                                              'req_args': ['word'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'RussianStemmer.__regions_russian': {   'opt_args': [],
                                            'req_args': ['word'],
                                            'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'RussianStemmer.__roman_to_cyrillic': {   'opt_args': [],
                                              'req_args': ['word'],
                                              'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'RussianStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SExprTokenizer.__init__': {   'opt_args': ['strict', 'parens'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tokenize\\sexpr.py'},
    'SExprTokenizer.tokenize': {   'opt_args': [],
                                   'req_args': ['text'],
                                   'source_file': 'nltk\\nltk\\tokenize\\sexpr.py'},
    'ScannerRule.apply': {   'opt_args': [],
                             'req_args': ['edge', 'grammar', 'chart'],
                             'source_file': 'nltk\\nltk\\parse\\earleychart.py'},
    'ScrollWatcherWidget.__init__': {   'opt_args': ['attribs'],
                                        'req_args': ['canvas'],
                                        'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ScrollWatcherWidget.add_child': {   'opt_args': [],
                                         'req_args': ['canvaswidget'],
                                         'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ScrollWatcherWidget.remove_child': {   'opt_args': [],
                                            'req_args': ['canvaswidget'],
                                            'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SeekableUnicodeStreamReader.__del__': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.__enter__': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.__exit__': {   'opt_args': [],
                                                'req_args': [   'traceback',
                                                                'value',
                                                                'type'],
                                                'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.__init__': {   'opt_args': ['errors'],
                                                'req_args': [   'encoding',
                                                                'stream'],
                                                'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.__iter__': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.__next__': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.char_seek_forward': {   'opt_args': [],
                                                         'req_args': ['offset'],
                                                         'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.close': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.closed': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.discard_line': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.mode': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.name': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.next': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.read': {   'opt_args': ['size'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.readline': {   'opt_args': ['size'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.readlines': {   'opt_args': [   'keepends',
                                                                 'sizehint'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.seek': {   'opt_args': ['whence'],
                                            'req_args': ['offset'],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.tell': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\data.py'},
    'SeekableUnicodeStreamReader.xreadlines': {   'opt_args': [],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\data.py'},
    'SelectDownloadDirMessage.__init__': {   'opt_args': [],
                                             'req_args': ['download_dir'],
                                             'source_file': 'nltk\\nltk\\downloader.py'},
    'SemcorCorpusReader.__init__': {   'opt_args': ['lazy'],
                                       'req_args': [   'wordnet',
                                                       'fileids',
                                                       'root'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.chunk_sents': {   'opt_args': ['fileids'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.chunks': {   'opt_args': ['fileids'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.sents': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.tagged_chunks': {   'opt_args': ['tag', 'fileids'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.tagged_sents': {   'opt_args': ['tag', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorCorpusReader.words': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorSentence.__init__': {   'opt_args': [],
                                   'req_args': ['items', 'num'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorWordView.__init__': {   'opt_args': [],
                                   'req_args': [   'wordnet',
                                                   'sem_tag',
                                                   'pos_tag',
                                                   'bracket_sent',
                                                   'unit',
                                                   'fileid'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorWordView.handle_elt': {   'opt_args': [],
                                     'req_args': ['context', 'elt'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorWordView.handle_sent': {   'opt_args': [],
                                      'req_args': ['elt'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'SemcorWordView.handle_word': {   'opt_args': [],
                                      'req_args': ['elt'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\semcor.py'},
    'Senna.__init__': {   'opt_args': ['encoding'],
                          'req_args': ['operations', 'senna_path'],
                          'source_file': 'nltk\\nltk\\classify\\senna.py'},
    'Senna.executable': {   'opt_args': [],
                            'req_args': ['base_path'],
                            'source_file': 'nltk\\nltk\\classify\\senna.py'},
    'Senna.tag': {   'opt_args': [],
                     'req_args': ['tokens'],
                     'source_file': 'nltk\\nltk\\classify\\senna.py'},
    'Senna.tag_sents': {   'opt_args': [],
                           'req_args': ['sentences'],
                           'source_file': 'nltk\\nltk\\classify\\senna.py'},
    'SennaChunkTagger.__init__': {   'opt_args': ['encoding'],
                                     'req_args': ['path'],
                                     'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaChunkTagger.bio_to_chunks': {   'opt_args': [],
                                          'req_args': [   'chunk_type',
                                                          'tagged_sent'],
                                          'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaChunkTagger.tag_sents': {   'opt_args': [],
                                      'req_args': ['sentences'],
                                      'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaNERTagger.__init__': {   'opt_args': ['encoding'],
                                   'req_args': ['path'],
                                   'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaNERTagger.tag_sents': {   'opt_args': [],
                                    'req_args': ['sentences'],
                                    'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaTagger.__init__': {   'opt_args': ['encoding'],
                                'req_args': ['path'],
                                'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SennaTagger.tag_sents': {   'opt_args': [],
                                 'req_args': ['sentences'],
                                 'source_file': 'nltk\\nltk\\tag\\senna.py'},
    'SensevalCorpusReader.instances': {   'opt_args': ['fileids'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\senseval.py'},
    'SensevalCorpusView.__init__': {   'opt_args': [],
                                       'req_args': ['encoding', 'fileid'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\senseval.py'},
    'SensevalCorpusView.read_block': {   'opt_args': [],
                                         'req_args': ['stream'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\senseval.py'},
    'SensevalInstance.__init__': {   'opt_args': [],
                                     'req_args': [   'senses',
                                                     'context',
                                                     'position',
                                                     'word'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\senseval.py'},
    'SensevalInstance.__repr__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\senseval.py'},
    'SentiSynset.__init__': {   'opt_args': [],
                                'req_args': [   'synset',
                                                'neg_score',
                                                'pos_score'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiSynset.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiSynset.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiSynset.neg_score': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiSynset.obj_score': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiSynset.pos_score': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiText.__init__': {   'opt_args': [],
                              'req_args': [   'regex_remove_punctuation',
                                              'punc_list',
                                              'text'],
                              'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentiText.allcap_differential': {   'opt_args': [],
                                         'req_args': ['words'],
                                         'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentiWordNetCorpusReader.__init__': {   'opt_args': ['encoding'],
                                             'req_args': ['fileids', 'root'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiWordNetCorpusReader.all_senti_synsets': {   'opt_args': [],
                                                      'req_args': [],
                                                      'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiWordNetCorpusReader.senti_synset': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentiWordNetCorpusReader.senti_synsets': {   'opt_args': ['pos'],
                                                  'req_args': ['string'],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\sentiwordnet.py'},
    'SentimentAnalyzer.__init__': {   'opt_args': ['classifier'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.add_feat_extractor': {   'opt_args': ['kwargs'],
                                                'req_args': ['function'],
                                                'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.all_words': {   'opt_args': ['labeled'],
                                       'req_args': ['documents'],
                                       'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.apply_features': {   'opt_args': ['labeled'],
                                            'req_args': ['documents'],
                                            'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.bigram_collocation_feats': {   'opt_args': [   'assoc_measure',
                                                                      'min_freq',
                                                                      'top_n'],
                                                      'req_args': ['documents'],
                                                      'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.classify': {   'opt_args': [],
                                      'req_args': ['instance'],
                                      'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.evaluate': {   'opt_args': [   'verbose',
                                                      'recall',
                                                      'precision',
                                                      'f_measure',
                                                      'accuracy',
                                                      'classifier'],
                                      'req_args': ['test_set'],
                                      'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.extract_features': {   'opt_args': [],
                                              'req_args': ['document'],
                                              'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.save_file': {   'opt_args': [],
                                       'req_args': ['filename', 'content'],
                                       'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.train': {   'opt_args': ['save_classifier', 'kwargs'],
                                   'req_args': ['training_set', 'trainer'],
                                   'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentAnalyzer.unigram_word_feats': {   'opt_args': [   'min_freq',
                                                                'top_n'],
                                                'req_args': ['words'],
                                                'source_file': 'nltk\\nltk\\sentiment\\sentiment_analyzer.py'},
    'SentimentIntensityAnalyzer.__init__': {   'opt_args': ['lexicon_file'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentimentIntensityAnalyzer.make_lex_dict': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentimentIntensityAnalyzer.polarity_scores': {   'opt_args': [],
                                                      'req_args': ['text'],
                                                      'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentimentIntensityAnalyzer.score_valence': {   'opt_args': [],
                                                    'req_args': [   'text',
                                                                    'sentiments'],
                                                    'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SentimentIntensityAnalyzer.sentiment_valence': {   'opt_args': [],
                                                        'req_args': [   'sentiments',
                                                                        'i',
                                                                        'item',
                                                                        'sentitext',
                                                                        'valence'],
                                                        'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'SequenceWidget.__getitem__': {   'opt_args': [],
                                      'req_args': ['attr'],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.__init__': {   'opt_args': ['attribs'],
                                   'req_args': ['canvas'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.__repr__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.__setitem__': {   'opt_args': [],
                                      'req_args': ['value', 'attr'],
                                      'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.insert_child': {   'opt_args': [],
                                       'req_args': ['child', 'index'],
                                       'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.remove_child': {   'opt_args': [],
                                       'req_args': ['child'],
                                       'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequenceWidget.replace_child': {   'opt_args': [],
                                        'req_args': ['newchild', 'oldchild'],
                                        'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SequentialBackoffTagger.__init__': {   'opt_args': ['backoff'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'SequentialBackoffTagger.backoff': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'SequentialBackoffTagger.choose_tag': {   'opt_args': [],
                                              'req_args': [   'history',
                                                              'index',
                                                              'tokens'],
                                              'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'SequentialBackoffTagger.tag': {   'opt_args': [],
                                       'req_args': ['tokens'],
                                       'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'SequentialBackoffTagger.tag_one': {   'opt_args': [],
                                           'req_args': [   'history',
                                                           'index',
                                                           'tokens'],
                                           'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'SetHolder.__getitem__': {   'opt_args': [],
                                 'req_args': ['item'],
                                 'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'ShiftReduceApp.__init__': {   'opt_args': ['trace'],
                                   'req_args': ['sent', 'grammar'],
                                   'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.about': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.destroy': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.edit_grammar': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.edit_sentence': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.help': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.mainloop': {   'opt_args': ['kwargs'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.postscript': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.reduce': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.reset': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.resize': {   'opt_args': ['size'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.set_grammar': {   'opt_args': [],
                                      'req_args': ['grammar'],
                                      'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.set_sentence': {   'opt_args': [],
                                       'req_args': ['sent'],
                                       'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.shift': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.step': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceApp.undo': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\app\\srparser_app.py'},
    'ShiftReduceParser.__init__': {   'opt_args': ['trace'],
                                      'req_args': ['grammar'],
                                      'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'ShiftReduceParser.grammar': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'ShiftReduceParser.parse': {   'opt_args': [],
                                   'req_args': ['tokens'],
                                   'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'ShiftReduceParser.trace': {   'opt_args': ['trace'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'ShowText.__init__': {   'opt_args': ['height', 'width', 'textbox_options'],
                             'req_args': ['text', 'title', 'root'],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ShowText.destroy': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ShowText.find_dimentions': {   'opt_args': [],
                                    'req_args': ['height', 'width', 'text'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'ShowText.mainloop': {   'opt_args': ['kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SimpleGoodTuringProbDist.__init__': {   'opt_args': ['bins'],
                                             'req_args': ['freqdist'],
                                             'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.__repr__': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.check': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.discount': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.find_best_fit': {   'opt_args': [],
                                                  'req_args': ['nr', 'r'],
                                                  'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.freqdist': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.max': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.prob': {   'opt_args': [],
                                         'req_args': ['sample'],
                                         'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.samples': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\probability.py'},
    'SimpleGoodTuringProbDist.smoothedNr': {   'opt_args': [],
                                               'req_args': ['r'],
                                               'source_file': 'nltk\\nltk\\probability.py'},
    'SingleEdgeFundamentalRule.apply': {   'opt_args': [],
                                           'req_args': [   'edge',
                                                           'grammar',
                                                           'chart'],
                                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SingleEdgeProbabilisticFundamentalRule.__str__': {   'opt_args': [],
                                                          'req_args': [],
                                                          'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'SingleEdgeProbabilisticFundamentalRule.apply': {   'opt_args': [],
                                                        'req_args': [   'edge1',
                                                                        'grammar',
                                                                        'chart'],
                                                        'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'SklearnClassifier.__init__': {   'opt_args': ['sparse', 'dtype'],
                                      'req_args': ['estimator'],
                                      'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SklearnClassifier.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SklearnClassifier.classify_many': {   'opt_args': [],
                                           'req_args': ['featuresets'],
                                           'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SklearnClassifier.labels': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SklearnClassifier.prob_classify_many': {   'opt_args': [],
                                                'req_args': ['featuresets'],
                                                'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SklearnClassifier.train': {   'opt_args': [],
                                   'req_args': ['labeled_featuresets'],
                                   'source_file': 'nltk\\nltk\\classify\\scikitlearn.py'},
    'SlashFeature.read_value': {   'opt_args': [],
                                   'req_args': [   'parser',
                                                   'reentrances',
                                                   'position',
                                                   's'],
                                   'source_file': 'nltk\\nltk\\featstruct.py'},
    'Slots.__init__': {   'opt_args': [],
                          'req_args': ['target_sentence_length'],
                          'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'Slots.__len__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'Slots.occupy': {   'opt_args': [],
                        'req_args': ['position'],
                        'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'Slots.vacancies_at': {   'opt_args': [],
                              'req_args': ['position'],
                              'source_file': 'nltk\\nltk\\translate\\ibm5.py'},
    'Smoothing.__init__': {   'opt_args': [],
                              'req_args': ['counter', 'vocabulary'],
                              'source_file': 'nltk\\nltk\\lm\\api.py'},
    'Smoothing.alpha_gamma': {   'opt_args': [],
                                 'req_args': ['context', 'word'],
                                 'source_file': 'nltk\\nltk\\lm\\api.py'},
    'Smoothing.unigram_score': {   'opt_args': [],
                                   'req_args': ['word'],
                                   'source_file': 'nltk\\nltk\\lm\\api.py'},
    'SmoothingFunction.__init__': {   'opt_args': ['k', 'alpha', 'epsilon'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method0': {   'opt_args': ['kwargs'],
                                     'req_args': ['p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method1': {   'opt_args': ['kwargs'],
                                     'req_args': ['p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method2': {   'opt_args': ['kwargs'],
                                     'req_args': ['p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method3': {   'opt_args': ['kwargs'],
                                     'req_args': ['p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method4': {   'opt_args': ['hyp_len', 'kwargs'],
                                     'req_args': [   'hypothesis',
                                                     'references',
                                                     'p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method5': {   'opt_args': ['hyp_len', 'kwargs'],
                                     'req_args': [   'hypothesis',
                                                     'references',
                                                     'p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method6': {   'opt_args': ['hyp_len', 'kwargs'],
                                     'req_args': [   'hypothesis',
                                                     'references',
                                                     'p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SmoothingFunction.method7': {   'opt_args': ['hyp_len', 'kwargs'],
                                     'req_args': [   'hypothesis',
                                                     'references',
                                                     'p_n'],
                                     'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'SnowballStemmer.__init__': {   'opt_args': ['ignore_stopwords'],
                                    'req_args': ['language'],
                                    'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SnowballStemmer.stem': {   'opt_args': [],
                                'req_args': ['token'],
                                'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SpaceWidget.__init__': {   'opt_args': ['attribs'],
                                'req_args': ['height', 'width', 'canvas'],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SpaceWidget.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SpaceWidget.set_height': {   'opt_args': [],
                                  'req_args': ['height'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SpaceWidget.set_width': {   'opt_args': [],
                                 'req_args': ['width'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SpanishStemmer.__replace_accented': {   'opt_args': [],
                                             'req_args': ['word'],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SpanishStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SpeakerInfo.__init__': {   'opt_args': ['comments'],
                                'req_args': [   'edu',
                                                'race',
                                                'ht',
                                                'birthdate',
                                                'recdate',
                                                'use',
                                                'dr',
                                                'sex',
                                                'id'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'SpeakerInfo.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'SpecialList.__init__': {   'opt_args': ['kwargs'],
                                'req_args': ['typ'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'SpecialList.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'SpecialList.__str__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'SplitRule.__init__': {   'opt_args': [],
                              'req_args': [   'descr',
                                              'right_tag_pattern',
                                              'left_tag_pattern'],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'SplitRule.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'StackDecoder.__compute_log_distortion': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.__init__': {   'opt_args': [],
                                 'req_args': ['language_model', 'phrase_table'],
                                 'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.compute_future_scores': {   'opt_args': [],
                                              'req_args': ['src_sentence'],
                                              'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.distortion_factor': {   'opt_args': [],
                                          'req_args': ['d'],
                                          'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.distortion_score': {   'opt_args': [],
                                         'req_args': [   'next_src_phrase_span',
                                                         'hypothesis'],
                                         'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.expansion_score': {   'opt_args': [],
                                        'req_args': [   'src_phrase_span',
                                                        'translation_option',
                                                        'hypothesis'],
                                        'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.find_all_src_phrases': {   'opt_args': [],
                                             'req_args': ['src_sentence'],
                                             'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.future_score': {   'opt_args': [],
                                     'req_args': [   'sentence_length',
                                                     'future_score_table',
                                                     'hypothesis'],
                                     'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.translate': {   'opt_args': [],
                                  'req_args': ['src_sentence'],
                                  'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackDecoder.valid_phrases': {   'opt_args': [],
                                      'req_args': [   'hypothesis',
                                                      'all_phrases_from'],
                                      'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    'StackWidget.__getitem__': {   'opt_args': [],
                                   'req_args': ['attr'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.__init__': {   'opt_args': ['attribs'],
                                'req_args': ['canvas'],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.__setitem__': {   'opt_args': [],
                                   'req_args': ['value', 'attr'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.insert_child': {   'opt_args': [],
                                    'req_args': ['child', 'index'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.remove_child': {   'opt_args': [],
                                    'req_args': ['child'],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StackWidget.replace_child': {   'opt_args': [],
                                     'req_args': ['newchild', 'oldchild'],
                                     'source_file': 'nltk\\nltk\\draw\\util.py'},
    'StaleMessage.__init__': {   'opt_args': [],
                                 'req_args': ['package'],
                                 'source_file': 'nltk\\nltk\\downloader.py'},
    'StandardFormat.__init__': {   'opt_args': ['encoding', 'filename'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\toolbox.py'},
    'StandardFormat.close': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\toolbox.py'},
    'StandardFormat.fields': {   'opt_args': [   'unicode_fields',
                                                 'errors',
                                                 'encoding',
                                                 'unwrap',
                                                 'strip'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\toolbox.py'},
    'StandardFormat.open': {   'opt_args': [],
                               'req_args': ['sfm_file'],
                               'source_file': 'nltk\\nltk\\toolbox.py'},
    'StandardFormat.open_string': {   'opt_args': [],
                                      'req_args': ['s'],
                                      'source_file': 'nltk\\nltk\\toolbox.py'},
    'StandardFormat.raw_fields': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\toolbox.py'},
    'StanfordDependencyParser.__init__': {   'opt_args': ['kwargs'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'StanfordNERTagger.__init__': {   'opt_args': ['kwargs'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordNERTagger.parse_output': {   'opt_args': [],
                                          'req_args': ['sentences', 'text'],
                                          'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordNeuralDependencyParser.__init__': {   'opt_args': ['kwargs'],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'StanfordNeuralDependencyParser.tagged_parse_sents': {   'opt_args': [   'verbose'],
                                                             'req_args': [   'sentences'],
                                                             'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'StanfordPOSTagger.__init__': {   'opt_args': ['kwargs'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordParser.__init__': {   'opt_args': ['kwargs'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\stanford.py'},
    'StanfordSegmenter.__init__': {   'opt_args': [   'java_options',
                                                      'verbose',
                                                      'options',
                                                      'encoding',
                                                      'keep_whitespaces',
                                                      'sihan_post_processing',
                                                      'path_to_sihan_corpora_dict',
                                                      'path_to_dict',
                                                      'path_to_model',
                                                      'java_class',
                                                      'path_to_slf4j',
                                                      'path_to_jar'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordSegmenter.default_config': {   'opt_args': [],
                                            'req_args': ['lang'],
                                            'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordSegmenter.segment': {   'opt_args': [],
                                     'req_args': ['tokens'],
                                     'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordSegmenter.segment_file': {   'opt_args': [],
                                          'req_args': ['input_file_path'],
                                          'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordSegmenter.segment_sents': {   'opt_args': [],
                                           'req_args': ['sentences'],
                                           'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordSegmenter.tokenize': {   'opt_args': [],
                                      'req_args': ['s'],
                                      'source_file': 'nltk\\nltk\\tokenize\\stanford_segmenter.py'},
    'StanfordTagger.__init__': {   'opt_args': [   'java_options',
                                                   'verbose',
                                                   'encoding',
                                                   'path_to_jar'],
                                   'req_args': ['model_filename'],
                                   'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordTagger.parse_output': {   'opt_args': ['sentences'],
                                       'req_args': ['text'],
                                       'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordTagger.tag': {   'opt_args': [],
                              'req_args': ['tokens'],
                              'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordTagger.tag_sents': {   'opt_args': [],
                                    'req_args': ['sentences'],
                                    'source_file': 'nltk\\nltk\\tag\\stanford.py'},
    'StanfordTokenizer.__init__': {   'opt_args': [   'java_options',
                                                      'verbose',
                                                      'options',
                                                      'encoding',
                                                      'path_to_jar'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tokenize\\stanford.py'},
    'StanfordTokenizer.tokenize': {   'opt_args': [],
                                      'req_args': ['s'],
                                      'source_file': 'nltk\\nltk\\tokenize\\stanford.py'},
    'StartCollectionMessage.__init__': {   'opt_args': [],
                                           'req_args': ['collection'],
                                           'source_file': 'nltk\\nltk\\downloader.py'},
    'StartDownloadMessage.__init__': {   'opt_args': [],
                                         'req_args': ['package'],
                                         'source_file': 'nltk\\nltk\\downloader.py'},
    'StartPackageMessage.__init__': {   'opt_args': [],
                                        'req_args': ['package'],
                                        'source_file': 'nltk\\nltk\\downloader.py'},
    'StartUnzipMessage.__init__': {   'opt_args': [],
                                      'req_args': ['package'],
                                      'source_file': 'nltk\\nltk\\downloader.py'},
    'StemmerI.stem': {   'opt_args': [],
                         'req_args': ['token'],
                         'source_file': 'nltk\\nltk\\stem\\api.py'},
    'SteppingChartParser.__init__': {   'opt_args': ['trace', 'strategy'],
                                        'req_args': ['grammar'],
                                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.chart': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.current_chartrule': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.grammar': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.initialize': {   'opt_args': [],
                                          'req_args': ['tokens'],
                                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.parse': {   'opt_args': ['tree_class'],
                                     'req_args': ['tokens'],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.parses': {   'opt_args': ['tree_class'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.set_chart': {   'opt_args': [],
                                         'req_args': ['chart'],
                                         'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.set_grammar': {   'opt_args': [],
                                           'req_args': ['grammar'],
                                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.set_strategy': {   'opt_args': [],
                                            'req_args': ['strategy'],
                                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.step': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingChartParser.strategy': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'SteppingRecursiveDescentParser.__init__': {   'opt_args': ['trace'],
                                                   'req_args': ['grammar'],
                                                   'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.backtrack': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.currently_complete': {   'opt_args': [],
                                                             'req_args': [],
                                                             'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.expand': {   'opt_args': ['production'],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.expandable_productions': {   'opt_args': [],
                                                                 'req_args': [],
                                                                 'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.frontier': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.initialize': {   'opt_args': [],
                                                     'req_args': ['tokens'],
                                                     'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.match': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.parse': {   'opt_args': [],
                                                'req_args': ['tokens'],
                                                'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.parses': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.remaining_text': {   'opt_args': [],
                                                         'req_args': [],
                                                         'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.set_grammar': {   'opt_args': [],
                                                      'req_args': ['grammar'],
                                                      'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.step': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.tree': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.untried_expandable_productions': {   'opt_args': [   ],
                                                                         'req_args': [   ],
                                                                         'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingRecursiveDescentParser.untried_match': {   'opt_args': [],
                                                        'req_args': [],
                                                        'source_file': 'nltk\\nltk\\parse\\recursivedescent.py'},
    'SteppingShiftReduceParser.__init__': {   'opt_args': ['trace'],
                                              'req_args': ['grammar'],
                                              'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.initialize': {   'opt_args': [],
                                                'req_args': ['tokens'],
                                                'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.parse': {   'opt_args': [],
                                           'req_args': ['tokens'],
                                           'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.parses': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.reduce': {   'opt_args': ['production'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.reducible_productions': {   'opt_args': [],
                                                           'req_args': [],
                                                           'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.remaining_text': {   'opt_args': [],
                                                    'req_args': [],
                                                    'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.set_grammar': {   'opt_args': [],
                                                 'req_args': ['grammar'],
                                                 'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.shift': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.stack': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.step': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'SteppingShiftReduceParser.undo': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\parse\\shiftreduce.py'},
    'StreamBackedCorpusView.__add__': {   'opt_args': [],
                                          'req_args': ['other'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__enter__': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__exit__': {   'opt_args': [],
                                           'req_args': [   'traceback',
                                                           'value',
                                                           'type'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__getitem__': {   'opt_args': [],
                                              'req_args': ['i'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__init__': {   'opt_args': [   'encoding',
                                                           'startpos',
                                                           'block_reader'],
                                           'req_args': ['fileid'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__len__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__mul__': {   'opt_args': [],
                                          'req_args': ['count'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__radd__': {   'opt_args': [],
                                           'req_args': ['other'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.__rmul__': {   'opt_args': [],
                                           'req_args': ['count'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.close': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.iterate_from': {   'opt_args': [],
                                               'req_args': ['start_tok'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'StreamBackedCorpusView.read_block': {   'opt_args': [],
                                             'req_args': ['stream'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'Streamer.__init__': {   'opt_args': [],
                             'req_args': [   'oauth_token_secret',
                                             'oauth_token',
                                             'app_secret',
                                             'app_key'],
                             'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Streamer.filter': {   'opt_args': ['lang', 'follow', 'track'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Streamer.on_error': {   'opt_args': [],
                             'req_args': ['data', 'status_code'],
                             'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Streamer.on_success': {   'opt_args': [],
                               'req_args': ['data'],
                               'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Streamer.register': {   'opt_args': [],
                             'req_args': ['handler'],
                             'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Streamer.sample': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'StringCategoryCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                               'delimiter'],
                                               'req_args': ['fileids', 'root'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\string_category.py'},
    'StringCategoryCorpusReader.tuples': {   'opt_args': ['fileids'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\string_category.py'},
    'StringTokenizer.span_tokenize': {   'opt_args': [],
                                         'req_args': ['s'],
                                         'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'StringTokenizer.tokenize': {   'opt_args': [],
                                    'req_args': ['s'],
                                    'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'StripRule.__init__': {   'opt_args': [],
                              'req_args': ['descr', 'tag_pattern'],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'StripRule.__repr__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'StupidBackoff.__init__': {   'opt_args': ['alpha', 'kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\lm\\models.py'},
    'StupidBackoff.unmasked_score': {   'opt_args': ['context'],
                                        'req_args': ['word'],
                                        'source_file': 'nltk\\nltk\\lm\\models.py'},
    'SubstituteBindingsI.substitute_bindings': {   'opt_args': [],
                                                   'req_args': ['bindings'],
                                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'SubstituteBindingsI.variables': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'SubstituteBindingsSequence.subst': {   'opt_args': [],
                                            'req_args': ['bindings', 'v'],
                                            'source_file': 'nltk\\nltk\\featstruct.py'},
    'SubstituteBindingsSequence.substitute_bindings': {   'opt_args': [],
                                                          'req_args': [   'bindings'],
                                                          'source_file': 'nltk\\nltk\\featstruct.py'},
    'SubstituteBindingsSequence.variables': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\featstruct.py'},
    'SvmClassifier.__init__': {   'opt_args': ['kwargs'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\classify\\svm.py'},
    'SwadeshCorpusReader.entries': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordlist.py'},
    'SwedishStemmer.stem': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    'SwitchboardCorpusReader.__init__': {   'opt_args': ['tagset'],
                                            'req_args': ['root'],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.discourses': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.tagged_discourses': {   'opt_args': ['tagset'],
                                                     'req_args': [],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.tagged_turns': {   'opt_args': ['tagset'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.tagged_words': {   'opt_args': ['tagset'],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.turns': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardCorpusReader.words': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardTurn.__init__': {   'opt_args': [],
                                    'req_args': ['id', 'speaker', 'words'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SwitchboardTurn.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\switchboard.py'},
    'SyllableTokenizer.__init__': {   'opt_args': [   'sonority_hierarchy',
                                                      'lang'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tokenize\\sonority_sequencing.py'},
    'SyllableTokenizer.assign_values': {   'opt_args': [],
                                           'req_args': ['token'],
                                           'source_file': 'nltk\\nltk\\tokenize\\sonority_sequencing.py'},
    'SyllableTokenizer.tokenize': {   'opt_args': [],
                                      'req_args': ['token'],
                                      'source_file': 'nltk\\nltk\\tokenize\\sonority_sequencing.py'},
    'SyllableTokenizer.validate_syllables': {   'opt_args': [],
                                                'req_args': ['syllable_list'],
                                                'source_file': 'nltk\\nltk\\tokenize\\sonority_sequencing.py'},
    'SymbolWidget.__init__': {   'opt_args': ['attribs'],
                                 'req_args': ['symbol', 'canvas'],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SymbolWidget.__repr__': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SymbolWidget.set_symbol': {   'opt_args': [],
                                   'req_args': ['symbol'],
                                   'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SymbolWidget.symbol': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'SymbolWidget.symbolsheet': {   'opt_args': ['size'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\draw\\util.py'},
    'Synset.__init__': {   'opt_args': [],
                           'req_args': ['wordnet_corpus_reader'],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.__repr__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.closure': {   'opt_args': ['depth'],
                          'req_args': ['rel'],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.common_hypernyms': {   'opt_args': [],
                                   'req_args': ['other'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.definition': {   'opt_args': ['lang'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.examples': {   'opt_args': ['lang'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.frame_ids': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.hypernym_distances': {   'opt_args': ['simulate_root', 'distance'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.hypernym_paths': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.jcn_similarity': {   'opt_args': ['verbose'],
                                 'req_args': ['ic', 'other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lch_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lemma_names': {   'opt_args': ['lang'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lemmas': {   'opt_args': ['lang'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lexname': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lin_similarity': {   'opt_args': ['verbose'],
                                 'req_args': ['ic', 'other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.lowest_common_hypernyms': {   'opt_args': [   'use_min_depth',
                                                          'simulate_root'],
                                          'req_args': ['other'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.max_depth': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.min_depth': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.name': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.offset': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.path_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                                  'req_args': ['other'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.pos': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.res_similarity': {   'opt_args': ['verbose'],
                                 'req_args': ['ic', 'other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.root_hypernyms': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.shortest_path_distance': {   'opt_args': ['simulate_root'],
                                         'req_args': ['other'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.tree': {   'opt_args': ['cut_mark', 'depth'],
                       'req_args': ['rel'],
                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'Synset.wup_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'SyntaxCorpusReader.parsed_sents': {   'opt_args': ['fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'SyntaxCorpusReader.sents': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'SyntaxCorpusReader.tagged_sents': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'SyntaxCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'SyntaxCorpusReader.words': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\api.py'},
    'TEICorpusView.__init__': {   'opt_args': ['textids', 'head_len', 'tagset'],
                                  'req_args': [   'group_by_para',
                                                  'group_by_sent',
                                                  'tagged',
                                                  'corpus_file'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'TEICorpusView.read_block': {   'opt_args': [],
                                    'req_args': ['stream'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\pl196x.py'},
    'Table.__delitem__': {   'opt_args': [],
                             'req_args': ['row_index'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.__getitem__': {   'opt_args': [],
                             'req_args': ['index'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.__init__': {   'opt_args': [   'cnf',
                                          'reprfunc',
                                          'click_to_sort',
                                          'scrollbar',
                                          'column_weights',
                                          'rows',
                                          'kw'],
                          'req_args': ['column_names', 'master'],
                          'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.__len__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.__setitem__': {   'opt_args': [],
                             'req_args': ['val', 'index'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.append': {   'opt_args': [],
                        'req_args': ['rowvalue'],
                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.bind': {   'opt_args': ['add', 'func', 'sequence'],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.bind_to_columns': {   'opt_args': ['add', 'func', 'sequence'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.bind_to_labels': {   'opt_args': ['add', 'func', 'sequence'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.bind_to_listboxes': {   'opt_args': ['add', 'func', 'sequence'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.clear': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.column_index': {   'opt_args': [],
                              'req_args': ['i'],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.column_names': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.columnconfigure': {   'opt_args': ['cnf', 'kw'],
                                 'req_args': ['col_index'],
                                 'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.extend': {   'opt_args': [],
                        'req_args': ['rowvalues'],
                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.focus': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.grid': {   'opt_args': ['kwargs'],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.hide_column': {   'opt_args': [],
                             'req_args': ['column_index'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.insert': {   'opt_args': [],
                        'req_args': ['rowvalue', 'row_index'],
                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.itemconfigure': {   'opt_args': ['cnf', 'kw'],
                               'req_args': ['col_index', 'row_index'],
                               'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.pack': {   'opt_args': ['kwargs'],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.rowconfigure': {   'opt_args': ['cnf', 'kw'],
                              'req_args': ['row_index'],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.select': {   'opt_args': ['see', 'delta', 'index'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.selected_row': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.show_column': {   'opt_args': [],
                             'req_args': ['column_index'],
                             'source_file': 'nltk\\nltk\\draw\\table.py'},
    'Table.sort_by': {   'opt_args': ['order'],
                         'req_args': ['column_index'],
                         'source_file': 'nltk\\nltk\\draw\\table.py'},
    'TableauProver.is_atom': {   'opt_args': [],
                                 'req_args': ['e'],
                                 'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'TableauProverCommand.__init__': {   'opt_args': [   'prover',
                                                         'assumptions',
                                                         'goal'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'TadmEventMaxentFeatureEncoding.__init__': {   'opt_args': [   'alwayson_features',
                                                                   'unseen_features'],
                                                   'req_args': [   'mapping',
                                                                   'labels'],
                                                   'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmEventMaxentFeatureEncoding.describe': {   'opt_args': [],
                                                   'req_args': ['fid'],
                                                   'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmEventMaxentFeatureEncoding.encode': {   'opt_args': [],
                                                 'req_args': [   'label',
                                                                 'featureset'],
                                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmEventMaxentFeatureEncoding.labels': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmEventMaxentFeatureEncoding.length': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmEventMaxentFeatureEncoding.train': {   'opt_args': [   'labels',
                                                                'count_cutoff',
                                                                'options'],
                                                'req_args': [   'train_toks',
                                                                'cls'],
                                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TadmMaxentClassifier.train': {   'opt_args': ['kwargs'],
                                      'req_args': ['train_toks', 'cls'],
                                      'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TagRule.__eq__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TagRule.__hash__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TagRule.__init__': {   'opt_args': [],
                            'req_args': ['replacement_tag', 'original_tag'],
                            'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TagRule.__ne__': {   'opt_args': [],
                          'req_args': ['other'],
                          'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TagRule.applies': {   'opt_args': [],
                           'req_args': ['index', 'tokens'],
                           'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TagRule.apply': {   'opt_args': ['positions'],
                         'req_args': ['tokens'],
                         'source_file': 'nltk\\nltk\\tbl\\rule.py'},
    'TaggedCorpusReader.__init__': {   'opt_args': [   'tagset',
                                                       'encoding',
                                                       'para_block_reader',
                                                       'sent_tokenizer',
                                                       'word_tokenizer',
                                                       'sep'],
                                       'req_args': ['fileids', 'root'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.paras': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.sents': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.tagged_paras': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.tagged_sents': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.tagged_words': {   'opt_args': ['tagset', 'fileids'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusReader.words': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusView.__init__': {   'opt_args': ['tag_mapping_function'],
                                     'req_args': [   'para_block_reader',
                                                     'sent_tokenizer',
                                                     'word_tokenizer',
                                                     'sep',
                                                     'group_by_para',
                                                     'group_by_sent',
                                                     'tagged',
                                                     'encoding',
                                                     'corpus_file'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggedCorpusView.read_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TaggerI.accuracy': {   'opt_args': [],
                            'req_args': ['gold'],
                            'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.confusion': {   'opt_args': [],
                             'req_args': ['gold'],
                             'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.evaluate': {   'opt_args': [],
                            'req_args': ['gold'],
                            'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.evaluate_per_tag': {   'opt_args': [   'sort_by_count',
                                                    'truncate',
                                                    'alpha'],
                                    'req_args': ['gold'],
                                    'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.f_measure': {   'opt_args': ['alpha'],
                             'req_args': ['gold'],
                             'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.precision': {   'opt_args': [],
                             'req_args': ['gold'],
                             'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.recall': {   'opt_args': [],
                          'req_args': ['gold'],
                          'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.tag': {   'opt_args': [],
                       'req_args': ['tokens'],
                       'source_file': 'nltk\\nltk\\tag\\api.py'},
    'TaggerI.tag_sents': {   'opt_args': [],
                             'req_args': ['sentences'],
                             'source_file': 'nltk\\nltk\\tag\\api.py'},
    'Template.__init__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'Template.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'Template.applicable_rules': {   'opt_args': [],
                                     'req_args': [   'correct_tag',
                                                     'index',
                                                     'tokens'],
                                     'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'Template.expand': {   'opt_args': ['skipintersecting', 'combinations'],
                           'req_args': ['featurelists', 'cls'],
                           'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'Template.get_neighborhood': {   'opt_args': [],
                                     'req_args': ['index', 'tokens'],
                                     'source_file': 'nltk\\nltk\\tbl\\template.py'},
    'TestGrammar.__init__': {   'opt_args': ['reject', 'accept'],
                                'req_args': ['suite', 'grammar'],
                                'source_file': 'nltk\\nltk\\parse\\util.py'},
    'TestGrammar.run': {   'opt_args': ['show_trees'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\util.py'},
    'Text.__getitem__': {   'opt_args': [],
                            'req_args': ['i'],
                            'source_file': 'nltk\\nltk\\text.py'},
    'Text.__init__': {   'opt_args': ['name'],
                         'req_args': ['tokens'],
                         'source_file': 'nltk\\nltk\\text.py'},
    'Text.__len__': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\text.py'},
    'Text.__repr__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\text.py'},
    'Text.__str__': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\text.py'},
    'Text.collocation_list': {   'opt_args': ['window_size', 'num'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\text.py'},
    'Text.collocations': {   'opt_args': ['window_size', 'num'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\text.py'},
    'Text.common_contexts': {   'opt_args': ['num'],
                                'req_args': ['words'],
                                'source_file': 'nltk\\nltk\\text.py'},
    'Text.concordance': {   'opt_args': ['lines', 'width'],
                            'req_args': ['word'],
                            'source_file': 'nltk\\nltk\\text.py'},
    'Text.concordance_list': {   'opt_args': ['lines', 'width'],
                                 'req_args': ['word'],
                                 'source_file': 'nltk\\nltk\\text.py'},
    'Text.count': {   'opt_args': [],
                      'req_args': ['word'],
                      'source_file': 'nltk\\nltk\\text.py'},
    'Text.dispersion_plot': {   'opt_args': [],
                                'req_args': ['words'],
                                'source_file': 'nltk\\nltk\\text.py'},
    'Text.findall': {   'opt_args': [],
                        'req_args': ['regexp'],
                        'source_file': 'nltk\\nltk\\text.py'},
    'Text.generate': {   'opt_args': ['random_seed', 'text_seed', 'length'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\text.py'},
    'Text.index': {   'opt_args': [],
                      'req_args': ['word'],
                      'source_file': 'nltk\\nltk\\text.py'},
    'Text.plot': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\text.py'},
    'Text.readability': {   'opt_args': [],
                            'req_args': ['method'],
                            'source_file': 'nltk\\nltk\\text.py'},
    'Text.similar': {   'opt_args': ['num'],
                        'req_args': ['word'],
                        'source_file': 'nltk\\nltk\\text.py'},
    'Text.vocab': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\text.py'},
    'TextCat.__init__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCat.calc_dist': {   'opt_args': [],
                             'req_args': ['text_profile', 'trigram', 'lang'],
                             'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCat.guess_language': {   'opt_args': [],
                                  'req_args': ['text'],
                                  'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCat.lang_dists': {   'opt_args': [],
                              'req_args': ['text'],
                              'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCat.profile': {   'opt_args': [],
                           'req_args': ['text'],
                           'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCat.remove_punctuation': {   'opt_args': [],
                                      'req_args': ['text'],
                                      'source_file': 'nltk\\nltk\\classify\\textcat.py'},
    'TextCollection.__init__': {   'opt_args': [],
                                   'req_args': ['source'],
                                   'source_file': 'nltk\\nltk\\text.py'},
    'TextCollection.idf': {   'opt_args': [],
                              'req_args': ['term'],
                              'source_file': 'nltk\\nltk\\text.py'},
    'TextCollection.tf': {   'opt_args': [],
                             'req_args': ['text', 'term'],
                             'source_file': 'nltk\\nltk\\text.py'},
    'TextCollection.tf_idf': {   'opt_args': [],
                                 'req_args': ['text', 'term'],
                                 'source_file': 'nltk\\nltk\\text.py'},
    'TextTilingTokenizer.__init__': {   'opt_args': [   'demo_mode',
                                                        'cutoff_policy',
                                                        'smoothing_rounds',
                                                        'smoothing_width',
                                                        'smoothing_method',
                                                        'stopwords',
                                                        'similarity_method',
                                                        'k',
                                                        'w'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\tokenize\\texttiling.py'},
    'TextTilingTokenizer.tokenize': {   'opt_args': [],
                                        'req_args': ['text'],
                                        'source_file': 'nltk\\nltk\\tokenize\\texttiling.py'},
    'TextWidget.__getitem__': {   'opt_args': [],
                                  'req_args': ['attr'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TextWidget.__init__': {   'opt_args': ['attribs'],
                               'req_args': ['text', 'canvas'],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TextWidget.__repr__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TextWidget.__setitem__': {   'opt_args': [],
                                  'req_args': ['value', 'attr'],
                                  'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TextWidget.set_text': {   'opt_args': [],
                               'req_args': ['text'],
                               'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TextWidget.text': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\draw\\util.py'},
    'TheoremToolCommand.add_assumptions': {   'opt_args': [],
                                              'req_args': ['new_assumptions'],
                                              'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommand.assumptions': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommand.goal': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommand.print_assumptions': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommand.retract_assumptions': {   'opt_args': ['debug'],
                                                  'req_args': ['retracted'],
                                                  'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.__init__': {   'opt_args': [],
                                                'req_args': ['command'],
                                                'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.add_assumptions': {   'opt_args': [],
                                                       'req_args': [   'new_assumptions'],
                                                       'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.assumptions': {   'opt_args': [],
                                                   'req_args': [],
                                                   'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.goal': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.print_assumptions': {   'opt_args': [],
                                                         'req_args': [],
                                                         'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolCommandDecorator.retract_assumptions': {   'opt_args': [   'debug'],
                                                           'req_args': [   'retracted'],
                                                           'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolThread.__init__': {   'opt_args': ['name'],
                                      'req_args': ['verbose', 'command'],
                                      'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolThread.result': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TheoremToolThread.run': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\inference\\api.py'},
    'TimitCorpusReader.__init__': {   'opt_args': ['encoding'],
                                      'req_args': ['root'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.audiodata': {   'opt_args': ['end', 'start'],
                                       'req_args': ['utterance'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.fileids': {   'opt_args': ['filetype'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.phone_times': {   'opt_args': ['utterances'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.phone_trees': {   'opt_args': ['utterances'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.phones': {   'opt_args': ['utterances'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.play': {   'opt_args': ['end', 'start'],
                                  'req_args': ['utterance'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.sent_times': {   'opt_args': ['utterances'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.sentid': {   'opt_args': [],
                                    'req_args': ['utterance'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.sents': {   'opt_args': ['utterances'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.spkrid': {   'opt_args': [],
                                    'req_args': ['utterance'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.spkrinfo': {   'opt_args': [],
                                      'req_args': ['speaker'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.spkrutteranceids': {   'opt_args': [],
                                              'req_args': ['speaker'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.transcription_dict': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.utterance': {   'opt_args': [],
                                       'req_args': ['sentid', 'spkrid'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.utteranceids': {   'opt_args': [   'sentid',
                                                          'sent_type',
                                                          'spkrid',
                                                          'sex',
                                                          'dialect'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.wav': {   'opt_args': ['end', 'start'],
                                 'req_args': ['utterance'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.word_times': {   'opt_args': ['utterances'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitCorpusReader.words': {   'opt_args': ['utterances'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'TimitTaggedCorpusReader.__init__': {   'opt_args': ['kwargs'],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TimitTaggedCorpusReader.paras': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TimitTaggedCorpusReader.tagged_paras': {   'opt_args': [],
                                                'req_args': [],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\tagged.py'},
    'TnT.__init__': {   'opt_args': ['C', 'N', 'Trained', 'unk'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'TnT.tag': {   'opt_args': [],
                   'req_args': ['data'],
                   'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'TnT.tagdata': {   'opt_args': [],
                       'req_args': ['data'],
                       'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'TnT.train': {   'opt_args': [],
                     'req_args': ['data'],
                     'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'Token.__cmp__': {   'opt_args': [],
                         'req_args': ['other'],
                         'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'Token.__init__': {   'opt_args': ['semantics'],
                          'req_args': ['categ', 'token'],
                          'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'Token.__str__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'Token.categ': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'Token.semantics': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'TokenSearcher.__init__': {   'opt_args': [],
                                  'req_args': ['tokens'],
                                  'source_file': 'nltk\\nltk\\text.py'},
    'TokenSearcher.findall': {   'opt_args': [],
                                 'req_args': ['regexp'],
                                 'source_file': 'nltk\\nltk\\text.py'},
    'TokenSequence.__init__': {   'opt_args': ['original_length'],
                                  'req_args': ['wrdindex_list', 'index'],
                                  'source_file': 'nltk\\nltk\\tokenize\\texttiling.py'},
    'TokenTableField.__init__': {   'opt_args': [   'last_tok_seq',
                                                    'last_par',
                                                    'par_count',
                                                    'total_count'],
                                    'req_args': ['ts_occurences', 'first_pos'],
                                    'source_file': 'nltk\\nltk\\tokenize\\texttiling.py'},
    'TokenizerI.span_tokenize': {   'opt_args': [],
                                    'req_args': ['s'],
                                    'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'TokenizerI.span_tokenize_sents': {   'opt_args': [],
                                          'req_args': ['strings'],
                                          'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'TokenizerI.tokenize': {   'opt_args': [],
                               'req_args': ['s'],
                               'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'TokenizerI.tokenize_sents': {   'opt_args': [],
                                     'req_args': ['strings'],
                                     'source_file': 'nltk\\nltk\\tokenize\\api.py'},
    'ToktokTokenizer.tokenize': {   'opt_args': ['return_str'],
                                    'req_args': ['text'],
                                    'source_file': 'nltk\\nltk\\tokenize\\toktok.py'},
    'ToolboxCorpusReader.entries': {   'opt_args': ['kwargs'],
                                       'req_args': ['fileids'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\toolbox.py'},
    'ToolboxCorpusReader.fields': {   'opt_args': [   'unicode_fields',
                                                      'errors',
                                                      'encoding',
                                                      'unwrap',
                                                      'strip'],
                                      'req_args': ['fileids'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\toolbox.py'},
    'ToolboxCorpusReader.words': {   'opt_args': ['key'],
                                     'req_args': ['fileids'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\toolbox.py'},
    'ToolboxCorpusReader.xml': {   'opt_args': ['key'],
                                   'req_args': ['fileids'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\toolbox.py'},
    'ToolboxData.parse': {   'opt_args': ['grammar', 'kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\toolbox.py'},
    'ToolboxSettings.__init__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\toolbox.py'},
    'ToolboxSettings.parse': {   'opt_args': ['errors', 'encoding', 'kwargs'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\toolbox.py'},
    'TopDownChartParser.__init__': {   'opt_args': ['parser_args'],
                                       'req_args': ['grammar'],
                                       'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TopDownInitRule.apply': {   'opt_args': [],
                                 'req_args': ['grammar', 'chart'],
                                 'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TopDownPredictRule.apply': {   'opt_args': [],
                                    'req_args': ['edge', 'grammar', 'chart'],
                                    'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'Transition.__init__': {   'opt_args': [],
                               'req_args': ['alg_option'],
                               'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Transition.left_arc': {   'opt_args': [],
                               'req_args': ['relation', 'conf'],
                               'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Transition.reduce': {   'opt_args': [],
                             'req_args': ['conf'],
                             'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Transition.right_arc': {   'opt_args': [],
                                'req_args': ['relation', 'conf'],
                                'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Transition.shift': {   'opt_args': [],
                            'req_args': ['conf'],
                            'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'TransitionParser.__init__': {   'opt_args': [],
                                     'req_args': ['algorithm'],
                                     'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'TransitionParser.parse': {   'opt_args': [],
                                  'req_args': ['modelFile', 'depgraphs'],
                                  'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'TransitionParser.train': {   'opt_args': ['verbose'],
                                  'req_args': ['modelfile', 'depgraphs'],
                                  'source_file': 'nltk\\nltk\\parse\\transitionparser.py'},
    'Tree.__add__': {   'opt_args': [],
                        'req_args': ['v'],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__copy__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__deepcopy__': {   'opt_args': [],
                             'req_args': ['memo'],
                             'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__delitem__': {   'opt_args': [],
                            'req_args': ['index'],
                            'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__eq__': {   'opt_args': [],
                       'req_args': ['other'],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__getitem__': {   'opt_args': [],
                            'req_args': ['index'],
                            'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__init__': {   'opt_args': ['children'],
                         'req_args': ['node'],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__lt__': {   'opt_args': [],
                       'req_args': ['other'],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__mul__': {   'opt_args': [],
                        'req_args': ['v'],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__radd__': {   'opt_args': [],
                         'req_args': ['v'],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__repr__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__rmul__': {   'opt_args': [],
                         'req_args': ['v'],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__setitem__': {   'opt_args': [],
                            'req_args': ['value', 'index'],
                            'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.__str__': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.chomsky_normal_form': {   'opt_args': [   'parentChar',
                                                    'childChar',
                                                    'vertMarkov',
                                                    'horzMarkov',
                                                    'factor'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.collapse_unary': {   'opt_args': [   'joinChar',
                                               'collapseRoot',
                                               'collapsePOS'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.convert': {   'opt_args': [],
                        'req_args': ['tree', 'cls'],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.copy': {   'opt_args': ['deep'],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.draw': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.flatten': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.freeze': {   'opt_args': ['leaf_freezer'],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.fromlist': {   'opt_args': [],
                         'req_args': ['l', 'cls'],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.fromstring': {   'opt_args': [   'remove_empty_top_bracketing',
                                           'leaf_pattern',
                                           'node_pattern',
                                           'read_leaf',
                                           'read_node',
                                           'brackets'],
                           'req_args': ['s', 'cls'],
                           'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.height': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.label': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.leaf_treeposition': {   'opt_args': [],
                                  'req_args': ['index'],
                                  'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.leaves': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.pformat': {   'opt_args': [   'quotes',
                                        'parens',
                                        'nodesep',
                                        'indent',
                                        'margin'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.pformat_latex_qtree': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.pos': {   'opt_args': [],
                    'req_args': [],
                    'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.pprint': {   'opt_args': ['kwargs'],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.pretty_print': {   'opt_args': [   'stream',
                                             'highlight',
                                             'sentence',
                                             'kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.productions': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.set_label': {   'opt_args': [],
                          'req_args': ['label'],
                          'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.subtrees': {   'opt_args': ['filter'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.treeposition_spanning_leaves': {   'opt_args': [],
                                             'req_args': ['end', 'start'],
                                             'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.treepositions': {   'opt_args': ['order'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'Tree.un_chomsky_normal_form': {   'opt_args': [   'unaryChar',
                                                       'parentChar',
                                                       'childChar',
                                                       'expandUnary'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'TreeEdge.__init__': {   'opt_args': ['dot'],
                             'req_args': ['rhs', 'lhs', 'span'],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.dot': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.end': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.from_production': {   'opt_args': [],
                                    'req_args': ['index', 'production'],
                                    'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.is_complete': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.is_incomplete': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.length': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.lhs': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.move_dot_forward': {   'opt_args': [],
                                     'req_args': ['new_end'],
                                     'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.nextsym': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.rhs': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.span': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreeEdge.start': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\chart.py'},
    'TreePrettyPrinter.__init__': {   'opt_args': ['highlight', 'sentence'],
                                      'req_args': ['tree'],
                                      'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreePrettyPrinter.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreePrettyPrinter.__str__': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreePrettyPrinter.nodecoords': {   'opt_args': [],
                                        'req_args': [   'highlight',
                                                        'sentence',
                                                        'tree'],
                                        'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreePrettyPrinter.svg': {   'opt_args': [   'funccolor',
                                                 'leafcolor',
                                                 'nodecolor'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreePrettyPrinter.text': {   'opt_args': [   'maxwidth',
                                                  'abbreviate',
                                                  'funccolor',
                                                  'leafcolor',
                                                  'nodecolor',
                                                  'ansi',
                                                  'html',
                                                  'unicodelines',
                                                  'nodedist'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'TreeSegmentWidget.__getitem__': {   'opt_args': [],
                                         'req_args': ['attr'],
                                         'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.__init__': {   'opt_args': ['attribs'],
                                      'req_args': [   'subtrees',
                                                      'label',
                                                      'canvas'],
                                      'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.__setitem__': {   'opt_args': [],
                                         'req_args': ['value', 'attr'],
                                         'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.insert_child': {   'opt_args': [],
                                          'req_args': ['child', 'index'],
                                          'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.label': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.remove_child': {   'opt_args': [],
                                          'req_args': ['child'],
                                          'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.replace_child': {   'opt_args': [],
                                           'req_args': ['newchild', 'oldchild'],
                                           'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.set_label': {   'opt_args': [],
                                       'req_args': ['label'],
                                       'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeSegmentWidget.subtrees': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeView.__init__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeView.destroy': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeView.mainloop': {   'opt_args': ['kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeView.resize': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.__getitem__': {   'opt_args': [],
                                  'req_args': ['attr'],
                                  'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.__init__': {   'opt_args': [   'make_leaf',
                                               'make_node',
                                               'attribs'],
                               'req_args': ['t', 'canvas'],
                               'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.__setitem__': {   'opt_args': [],
                                  'req_args': ['value', 'attr'],
                                  'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_click_leaves': {   'opt_args': ['button'],
                                        'req_args': ['callback'],
                                        'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_click_nodes': {   'opt_args': ['button'],
                                       'req_args': ['callback'],
                                       'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_click_trees': {   'opt_args': ['button'],
                                       'req_args': ['callback'],
                                       'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_drag_leaves': {   'opt_args': ['button'],
                                       'req_args': ['callback'],
                                       'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_drag_nodes': {   'opt_args': ['button'],
                                      'req_args': ['callback'],
                                      'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.bind_drag_trees': {   'opt_args': ['button'],
                                      'req_args': ['callback'],
                                      'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.collapsed_tree': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.expanded_tree': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreeWidget.toggle_collapsed': {   'opt_args': [],
                                       'req_args': ['treeseg'],
                                       'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'TreebankWordDetokenizer.detokenize': {   'opt_args': [   'convert_parentheses'],
                                              'req_args': ['tokens'],
                                              'source_file': 'nltk\\nltk\\tokenize\\treebank.py'},
    'TreebankWordDetokenizer.tokenize': {   'opt_args': ['convert_parentheses'],
                                            'req_args': ['tokens'],
                                            'source_file': 'nltk\\nltk\\tokenize\\treebank.py'},
    'TreebankWordTokenizer.span_tokenize': {   'opt_args': [],
                                               'req_args': ['text'],
                                               'source_file': 'nltk\\nltk\\tokenize\\treebank.py'},
    'TreebankWordTokenizer.tokenize': {   'opt_args': [   'return_str',
                                                          'convert_parentheses'],
                                          'req_args': ['text'],
                                          'source_file': 'nltk\\nltk\\tokenize\\treebank.py'},
    'Trie.__init__': {   'opt_args': ['strings'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\collections.py'},
    'Trie.__missing__': {   'opt_args': [],
                            'req_args': ['key'],
                            'source_file': 'nltk\\nltk\\collections.py'},
    'Trie.insert': {   'opt_args': [],
                       'req_args': ['string'],
                       'source_file': 'nltk\\nltk\\collections.py'},
    'TrigramCollocationFinder.__init__': {   'opt_args': [],
                                             'req_args': [   'trigram_fd',
                                                             'wildcard_fd',
                                                             'bigram_fd',
                                                             'word_fd'],
                                             'source_file': 'nltk\\nltk\\collocations.py'},
    'TrigramCollocationFinder.bigram_finder': {   'opt_args': [],
                                                  'req_args': [],
                                                  'source_file': 'nltk\\nltk\\collocations.py'},
    'TrigramCollocationFinder.from_words': {   'opt_args': ['window_size'],
                                               'req_args': ['words', 'cls'],
                                               'source_file': 'nltk\\nltk\\collocations.py'},
    'TrigramCollocationFinder.score_ngram': {   'opt_args': [],
                                                'req_args': [   'w3',
                                                                'w2',
                                                                'w1',
                                                                'score_fn'],
                                                'source_file': 'nltk\\nltk\\collocations.py'},
    'TrigramTagger.__init__': {   'opt_args': [   'verbose',
                                                  'cutoff',
                                                  'backoff',
                                                  'model',
                                                  'train'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'TruthValueType.__str__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'TruthValueType.str': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'TweetHandlerI.__init__': {   'opt_args': [   'lower_date_limit',
                                                  'upper_date_limit',
                                                  'limit'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'TweetHandlerI.check_date_limit': {   'opt_args': ['verbose'],
                                          'req_args': ['data'],
                                          'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'TweetHandlerI.handle': {   'opt_args': [],
                                'req_args': ['data'],
                                'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'TweetHandlerI.on_finish': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\twitter\\api.py'},
    'TweetTokenizer.PHONE_WORD_RE': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'TweetTokenizer.WORD_RE': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'TweetTokenizer.__init__': {   'opt_args': [   'match_phone_numbers',
                                                   'strip_handles',
                                                   'reduce_len',
                                                   'preserve_case'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'TweetTokenizer.tokenize': {   'opt_args': [],
                                   'req_args': ['text'],
                                   'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'TweetViewer.handle': {   'opt_args': [],
                              'req_args': ['data'],
                              'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetViewer.on_finish': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetWriter.__init__': {   'opt_args': [   'gzip_compress',
                                                'repeat',
                                                'subdir',
                                                'fprefix',
                                                'lower_date_limit',
                                                'upper_date_limit',
                                                'limit'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetWriter.do_continue': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetWriter.handle': {   'opt_args': [],
                              'req_args': ['data'],
                              'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetWriter.on_finish': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TweetWriter.timestamped_file': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Twitter.__init__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'Twitter.tweets': {   'opt_args': [   'gzip_compress',
                                          'repeat',
                                          'lang',
                                          'date_limit',
                                          'limit',
                                          'stream',
                                          'to_screen',
                                          'follow',
                                          'keywords'],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\twitter\\twitterclient.py'},
    'TwitterCorpusReader.__init__': {   'opt_args': [   'encoding',
                                                        'word_tokenizer',
                                                        'fileids'],
                                        'req_args': ['root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\twitter.py'},
    'TwitterCorpusReader.docs': {   'opt_args': ['fileids'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\twitter.py'},
    'TwitterCorpusReader.strings': {   'opt_args': ['fileids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\twitter.py'},
    'TwitterCorpusReader.tokenized': {   'opt_args': ['fileids'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\twitter.py'},
    'Type.__hash__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Type.__repr__': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Type.fromstring': {   'opt_args': [],
                           'req_args': ['s', 'cls'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'TypeException.__init__': {   'opt_args': [],
                                  'req_args': ['msg'],
                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'TypeResolutionException.__init__': {   'opt_args': [],
                                            'req_args': [   'other_type',
                                                            'expression'],
                                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'TypedMaxentFeatureEncoding.__init__': {   'opt_args': [   'alwayson_features',
                                                               'unseen_features'],
                                               'req_args': [   'mapping',
                                                               'labels'],
                                               'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TypedMaxentFeatureEncoding.describe': {   'opt_args': [],
                                               'req_args': ['f_id'],
                                               'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TypedMaxentFeatureEncoding.encode': {   'opt_args': [],
                                             'req_args': [   'label',
                                                             'featureset'],
                                             'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TypedMaxentFeatureEncoding.labels': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TypedMaxentFeatureEncoding.length': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'TypedMaxentFeatureEncoding.train': {   'opt_args': [   'labels',
                                                            'count_cutoff',
                                                            'options'],
                                            'req_args': ['train_toks', 'cls'],
                                            'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'UdhrCorpusReader.__init__': {   'opt_args': ['root'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\udhr.py'},
    'UnChunkRule.__init__': {   'opt_args': [],
                                'req_args': ['descr', 'tag_pattern'],
                                'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'UnChunkRule.__repr__': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'UndirectedBinaryCombinator.can_combine': {   'opt_args': [],
                                                  'req_args': [   'argument',
                                                                  'function'],
                                                  'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedBinaryCombinator.combine': {   'opt_args': [],
                                              'req_args': [   'argument',
                                                              'function'],
                                              'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedComposition.__str__': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedComposition.can_combine': {   'opt_args': [],
                                             'req_args': [   'argument',
                                                             'function'],
                                             'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedComposition.combine': {   'opt_args': [],
                                         'req_args': ['argument', 'function'],
                                         'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedFunctionApplication.__str__': {   'opt_args': [],
                                                 'req_args': [],
                                                 'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedFunctionApplication.can_combine': {   'opt_args': [],
                                                     'req_args': [   'argument',
                                                                     'function'],
                                                     'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedFunctionApplication.combine': {   'opt_args': [],
                                                 'req_args': [   'argument',
                                                                 'function'],
                                                 'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedSubstitution.__str__': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedSubstitution.can_combine': {   'opt_args': [],
                                              'req_args': [   'argument',
                                                              'function'],
                                              'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedSubstitution.combine': {   'opt_args': [],
                                          'req_args': ['argument', 'function'],
                                          'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedTypeRaise.__str__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedTypeRaise.can_combine': {   'opt_args': [],
                                           'req_args': ['arg', 'function'],
                                           'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UndirectedTypeRaise.combine': {   'opt_args': [],
                                       'req_args': ['arg', 'function'],
                                       'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'UnexpectedTokenException.__init__': {   'opt_args': [   'message',
                                                             'expected',
                                                             'unexpected'],
                                             'req_args': ['index'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'UnicharsCorpusReader.chars': {   'opt_args': ['fileids', 'category'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordlist.py'},
    'UnificationException.__init__': {   'opt_args': [],
                                         'req_args': ['bindings', 'b', 'a'],
                                         'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'UniformProbDist.__init__': {   'opt_args': [],
                                    'req_args': ['samples'],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'UniformProbDist.__repr__': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\probability.py'},
    'UniformProbDist.max': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\probability.py'},
    'UniformProbDist.prob': {   'opt_args': [],
                                'req_args': ['sample'],
                                'source_file': 'nltk\\nltk\\probability.py'},
    'UniformProbDist.samples': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'UnigramTagger.__init__': {   'opt_args': [   'verbose',
                                                  'cutoff',
                                                  'backoff',
                                                  'model',
                                                  'train'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'UnigramTagger.context': {   'opt_args': [],
                                 'req_args': ['history', 'index', 'tokens'],
                                 'source_file': 'nltk\\nltk\\tag\\sequential.py'},
    'UniqueNamesProver.assumptions': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'UnsortedChartParser.sort_queue': {   'opt_args': [],
                                          'req_args': ['chart', 'queue'],
                                          'source_file': 'nltk\\nltk\\parse\\pchart.py'},
    'UpToDateMessage.__init__': {   'opt_args': [],
                                    'req_args': ['package'],
                                    'source_file': 'nltk\\nltk\\downloader.py'},
    'VaderConstants.__init__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'VaderConstants.negated': {   'opt_args': ['include_nt'],
                                  'req_args': ['input_words'],
                                  'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'VaderConstants.normalize': {   'opt_args': ['alpha'],
                                    'req_args': ['score'],
                                    'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'VaderConstants.scalar_inc_dec': {   'opt_args': [],
                                         'req_args': [   'is_cap_diff',
                                                         'valence',
                                                         'word'],
                                         'source_file': 'nltk\\nltk\\sentiment\\vader.py'},
    'Valuation.__getitem__': {   'opt_args': [],
                                 'req_args': ['key'],
                                 'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Valuation.__init__': {   'opt_args': [],
                              'req_args': ['xs'],
                              'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Valuation.__str__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Valuation.domain': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Valuation.fromstring': {   'opt_args': [],
                                'req_args': ['s', 'cls'],
                                'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Valuation.symbols': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'Variable.__eq__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__hash__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__init__': {   'opt_args': [],
                             'req_args': ['name'],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__lt__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__ne__': {   'opt_args': [],
                           'req_args': ['other'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__repr__': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.__str__': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'Variable.substitute_bindings': {   'opt_args': [],
                                        'req_args': ['bindings'],
                                        'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.__eq__': {   'opt_args': [],
                                           'req_args': ['other'],
                                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.__init__': {   'opt_args': [],
                                             'req_args': ['term', 'variable'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.__ne__': {   'opt_args': [],
                                           'req_args': ['other'],
                                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.alpha_convert': {   'opt_args': [],
                                                  'req_args': ['newvar'],
                                                  'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.findtype': {   'opt_args': [],
                                             'req_args': ['variable'],
                                             'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.free': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.replace': {   'opt_args': [   'alpha_convert',
                                                            'replace_bound'],
                                            'req_args': [   'expression',
                                                            'variable'],
                                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.visit': {   'opt_args': [],
                                          'req_args': [   'combinator',
                                                          'function'],
                                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableBinderExpression.visit_structured': {   'opt_args': [],
                                                     'req_args': [   'combinator',
                                                                     'function'],
                                                     'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'VariableExpression.unify': {   'opt_args': [],
                                    'req_args': ['bindings', 'other'],
                                    'source_file': 'nltk\\nltk\\sem\\linearlogic.py'},
    'VectorSpaceClusterer.__init__': {   'opt_args': [   'svd_dimensions',
                                                         'normalise'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.classify': {   'opt_args': [],
                                         'req_args': ['vector'],
                                         'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.classify_vectorspace': {   'opt_args': [],
                                                     'req_args': ['vector'],
                                                     'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.cluster': {   'opt_args': [   'trace',
                                                        'assign_clusters'],
                                        'req_args': ['vectors'],
                                        'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.cluster_vectorspace': {   'opt_args': [],
                                                    'req_args': [   'trace',
                                                                    'vectors'],
                                                    'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.likelihood': {   'opt_args': [],
                                           'req_args': ['label', 'vector'],
                                           'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.likelihood_vectorspace': {   'opt_args': [],
                                                       'req_args': [   'cluster',
                                                                       'vector'],
                                                       'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VectorSpaceClusterer.vector': {   'opt_args': [],
                                       'req_args': ['vector'],
                                       'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'VerbnetCorpusReader.__init__': {   'opt_args': ['wrap_etree'],
                                        'req_args': ['fileids', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.classids': {   'opt_args': [   'classid',
                                                        'fileid',
                                                        'wordnetid',
                                                        'lemma'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.fileids': {   'opt_args': ['vnclass_ids'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.frames': {   'opt_args': [],
                                      'req_args': ['vnclass'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.lemmas': {   'opt_args': ['vnclass'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.longid': {   'opt_args': [],
                                      'req_args': ['shortid'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.pprint': {   'opt_args': [],
                                      'req_args': ['vnclass'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.pprint_frames': {   'opt_args': ['indent'],
                                             'req_args': ['vnclass'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.pprint_members': {   'opt_args': ['indent'],
                                              'req_args': ['vnclass'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.pprint_subclasses': {   'opt_args': ['indent'],
                                                 'req_args': ['vnclass'],
                                                 'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.pprint_themroles': {   'opt_args': ['indent'],
                                                'req_args': ['vnclass'],
                                                'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.shortid': {   'opt_args': [],
                                       'req_args': ['longid'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.subclasses': {   'opt_args': [],
                                          'req_args': ['vnclass'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.themroles': {   'opt_args': [],
                                         'req_args': ['vnclass'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.vnclass': {   'opt_args': [],
                                       'req_args': ['fileid_or_classid'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'VerbnetCorpusReader.wordnetids': {   'opt_args': ['vnclass'],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\verbnet.py'},
    'ViterbiParser.__init__': {   'opt_args': ['trace'],
                                  'req_args': ['grammar'],
                                  'source_file': 'nltk\\nltk\\parse\\viterbi.py'},
    'ViterbiParser.__repr__': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\viterbi.py'},
    'ViterbiParser.grammar': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\parse\\viterbi.py'},
    'ViterbiParser.parse': {   'opt_args': [],
                               'req_args': ['tokens'],
                               'source_file': 'nltk\\nltk\\parse\\viterbi.py'},
    'ViterbiParser.trace': {   'opt_args': ['trace'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\parse\\viterbi.py'},
    'Vocabulary.__contains__': {   'opt_args': [],
                                   'req_args': ['item'],
                                   'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__eq__': {   'opt_args': [],
                             'req_args': ['other'],
                             'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__getitem__': {   'opt_args': [],
                                  'req_args': ['item'],
                                  'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__init__': {   'opt_args': [   'unk_label',
                                               'unk_cutoff',
                                               'counts'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__iter__': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__len__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.__str__': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.cutoff': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.lookup': {   'opt_args': [],
                             'req_args': ['words'],
                             'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'Vocabulary.update': {   'opt_args': ['counter_kwargs'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\lm\\vocabulary.py'},
    'WekaClassifier.__init__': {   'opt_args': [],
                                   'req_args': ['model_filename', 'formatter'],
                                   'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WekaClassifier.classify_many': {   'opt_args': [],
                                        'req_args': ['featuresets'],
                                        'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WekaClassifier.parse_weka_distribution': {   'opt_args': [],
                                                  'req_args': ['s'],
                                                  'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WekaClassifier.parse_weka_output': {   'opt_args': [],
                                            'req_args': ['lines'],
                                            'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WekaClassifier.prob_classify_many': {   'opt_args': [],
                                             'req_args': ['featuresets'],
                                             'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WekaClassifier.train': {   'opt_args': ['quiet', 'options', 'classifier'],
                                'req_args': [   'featuresets',
                                                'model_filename',
                                                'cls'],
                                'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'WhitespaceTokenizer.__init__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'WittenBell.__init__': {   'opt_args': ['kwargs'],
                               'req_args': ['counter', 'vocabulary'],
                               'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'WittenBell.alpha_gamma': {   'opt_args': [],
                                  'req_args': ['context', 'word'],
                                  'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'WittenBell.unigram_score': {   'opt_args': [],
                                    'req_args': ['word'],
                                    'source_file': 'nltk\\nltk\\lm\\smoothing.py'},
    'WittenBellInterpolated.__init__': {   'opt_args': ['kwargs'],
                                           'req_args': ['order'],
                                           'source_file': 'nltk\\nltk\\lm\\models.py'},
    'WittenBellProbDist.__init__': {   'opt_args': ['bins'],
                                       'req_args': ['freqdist'],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.discount': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.freqdist': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.max': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.prob': {   'opt_args': [],
                                   'req_args': ['sample'],
                                   'source_file': 'nltk\\nltk\\probability.py'},
    'WittenBellProbDist.samples': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\probability.py'},
    'Word.extract_property': {   'opt_args': [],
                                 'req_args': ['index', 'tokens'],
                                 'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'WordListCorpusReader.words': {   'opt_args': [   'ignore_lines_startswith',
                                                      'fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordlist.py'},
    'WordNetCorpusReader.__init__': {   'opt_args': [],
                                        'req_args': ['omw_reader', 'root'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.add_exomw': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.add_provs': {   'opt_args': [],
                                         'req_args': ['reader'],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.all_eng_synsets': {   'opt_args': ['pos'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.all_lemma_names': {   'opt_args': ['lang', 'pos'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.all_omw_synsets': {   'opt_args': ['lang', 'pos'],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.all_synsets': {   'opt_args': ['lang', 'pos'],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.citation': {   'opt_args': ['lang'],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.corpus2sk': {   'opt_args': ['corpus'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.custom_lemmas': {   'opt_args': [],
                                             'req_args': ['lang', 'tab_file'],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.digraph': {   'opt_args': [   'verbose',
                                                       'attr',
                                                       'shapes',
                                                       'maxdepth',
                                                       'pos',
                                                       'rel'],
                                       'req_args': ['inputs'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.disable_custom_lemmas': {   'opt_args': [],
                                                     'req_args': ['lang'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.doc': {   'opt_args': ['lang', 'file'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.get_version': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.ic': {   'opt_args': [   'smoothing',
                                                  'weight_senses_equally'],
                                  'req_args': ['corpus'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.jcn_similarity': {   'opt_args': ['verbose'],
                                              'req_args': [   'ic',
                                                              'synset2',
                                                              'synset1'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.langs': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lch_similarity': {   'opt_args': [   'simulate_root',
                                                              'verbose'],
                                              'req_args': [   'synset2',
                                                              'synset1'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lemma': {   'opt_args': ['lang'],
                                     'req_args': ['name'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lemma_count': {   'opt_args': [],
                                           'req_args': ['lemma'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lemma_from_key': {   'opt_args': [],
                                              'req_args': ['key'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lemmas': {   'opt_args': ['lang', 'pos'],
                                      'req_args': ['lemma'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.license': {   'opt_args': ['lang'],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.lin_similarity': {   'opt_args': ['verbose'],
                                              'req_args': [   'ic',
                                                              'synset2',
                                                              'synset1'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.map_wn30': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.morphy': {   'opt_args': ['check_exceptions', 'pos'],
                                      'req_args': ['form'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.of2ss': {   'opt_args': [],
                                     'req_args': ['of'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.path_similarity': {   'opt_args': [   'simulate_root',
                                                               'verbose'],
                                               'req_args': [   'synset2',
                                                               'synset1'],
                                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.readme': {   'opt_args': ['lang'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.res_similarity': {   'opt_args': ['verbose'],
                                              'req_args': [   'ic',
                                                              'synset2',
                                                              'synset1'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.ss2of': {   'opt_args': ['lang'],
                                     'req_args': ['ss'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.synonyms': {   'opt_args': ['lang'],
                                        'req_args': ['word'],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.synset': {   'opt_args': [],
                                      'req_args': ['name'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.synset_from_pos_and_offset': {   'opt_args': [],
                                                          'req_args': [   'offset',
                                                                          'pos'],
                                                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.synset_from_sense_key': {   'opt_args': [],
                                                     'req_args': ['sense_key'],
                                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.synsets': {   'opt_args': [   'check_exceptions',
                                                       'lang',
                                                       'pos'],
                                       'req_args': ['lemma'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.words': {   'opt_args': ['lang'],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetCorpusReader.wup_similarity': {   'opt_args': [   'simulate_root',
                                                              'verbose'],
                                              'req_args': [   'synset2',
                                                              'synset1'],
                                              'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetICCorpusReader.__init__': {   'opt_args': [],
                                          'req_args': ['fileids', 'root'],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetICCorpusReader.ic': {   'opt_args': [],
                                    'req_args': ['icfile'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'WordNetLemmatizer.__repr__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\stem\\wordnet.py'},
    'WordNetLemmatizer.lemmatize': {   'opt_args': ['pos'],
                                       'req_args': ['word'],
                                       'source_file': 'nltk\\nltk\\stem\\wordnet.py'},
    'WordPunctTokenizer.__init__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'XMLCorpusReader.__init__': {   'opt_args': ['wrap_etree'],
                                    'req_args': ['fileids', 'root'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XMLCorpusReader.words': {   'opt_args': ['fileid'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XMLCorpusReader.xml': {   'opt_args': ['fileid'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XMLCorpusView.__init__': {   'opt_args': ['elt_handler'],
                                  'req_args': ['tagspec', 'fileid'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XMLCorpusView.handle_elt': {   'opt_args': [],
                                    'req_args': ['context', 'elt'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XMLCorpusView.read_block': {   'opt_args': ['elt_handler', 'tagspec'],
                                    'req_args': ['stream'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\xmldocs.py'},
    'XML_Tool.__init__': {   'opt_args': [],
                             'req_args': ['filename', 'root'],
                             'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'XML_Tool.build_preprocessed_file': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'XML_Tool.remove_preprocessed_file': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\nkjp.py'},
    'YCOECorpusReader.__init__': {   'opt_args': ['encoding'],
                                     'req_args': ['root'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.documents': {   'opt_args': ['fileids'],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.fileids': {   'opt_args': ['documents'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.paras': {   'opt_args': ['documents'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.parsed_sents': {   'opt_args': ['documents'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.sents': {   'opt_args': ['documents'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.tagged_paras': {   'opt_args': ['documents'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.tagged_sents': {   'opt_args': ['documents'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.tagged_words': {   'opt_args': ['documents'],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOECorpusReader.words': {   'opt_args': ['documents'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'YCOETaggedCorpusReader.__init__': {   'opt_args': ['encoding'],
                                           'req_args': ['items', 'root'],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\ycoe.py'},
    'ZipFilePathPointer.__init__': {   'opt_args': ['entry'],
                                       'req_args': ['zipfile'],
                                       'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.__repr__': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.__str__': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.entry': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.file_size': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.join': {   'opt_args': [],
                                   'req_args': ['fileid'],
                                   'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.open': {   'opt_args': ['encoding'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\data.py'},
    'ZipFilePathPointer.zipfile': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\data.py'},
    'Zone.__init__': {   'opt_args': [],
                         'req_args': ['initialText', 'initialField', 'image'],
                         'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'Zone.initScrollText': {   'opt_args': [],
                               'req_args': ['contents', 'txt', 'frm'],
                               'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'Zone.refresh': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    '_DendrogramNode.__init__': {   'opt_args': [],
                                    'req_args': ['value'],
                                    'source_file': 'nltk\\nltk\\cluster\\util.py'},
    '_DendrogramNode.__lt__': {   'opt_args': [],
                                  'req_args': ['comparator'],
                                  'source_file': 'nltk\\nltk\\cluster\\util.py'},
    '_DendrogramNode.groups': {   'opt_args': [],
                                  'req_args': ['n'],
                                  'source_file': 'nltk\\nltk\\cluster\\util.py'},
    '_DendrogramNode.leaves': {   'opt_args': ['values'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\cluster\\util.py'},
    '_Hypothesis.__build_translation': {   'opt_args': [],
                                           'req_args': ['output', 'hypothesis'],
                                           'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.__init__': {   'opt_args': [   'future_score',
                                                'previous',
                                                'trg_phrase',
                                                'src_phrase_span',
                                                'raw_score'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.score': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.total_translated_words': {   'opt_args': [],
                                              'req_args': [],
                                              'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.translated_positions': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.translation_so_far': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Hypothesis.untranslated_spans': {   'opt_args': [],
                                          'req_args': ['sentence_length'],
                                          'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_LanguageSpecificStemmer.__init__': {   'opt_args': ['ignore_stopwords'],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    '_LanguageSpecificStemmer.__repr__': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\stem\\snowball.py'},
    '_Stack.__bool__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.__contains__': {   'opt_args': [],
                               'req_args': ['hypothesis'],
                               'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.__init__': {   'opt_args': ['beam_threshold', 'max_size'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.__iter__': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.best': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.push': {   'opt_args': [],
                       'req_args': ['hypothesis'],
                       'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_Stack.threshold_prune': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\translate\\stack_decoder.py'},
    '_UnificationFailure.__repr__': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\featstruct.py'},
    '_WordNetObject.__eq__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.__hash__': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.__lt__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.__ne__': {   'opt_args': [],
                                 'req_args': ['other'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.also_sees': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.attributes': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.causes': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.entailments': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.hypernyms': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.hyponyms': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.in_region_domains': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.in_topic_domains': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.in_usage_domains': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.instance_hypernyms': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.instance_hyponyms': {   'opt_args': [],
                                            'req_args': [],
                                            'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.member_holonyms': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.member_meronyms': {   'opt_args': [],
                                          'req_args': [],
                                          'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.part_holonyms': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.part_meronyms': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.region_domains': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.similar_tos': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.substance_holonyms': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.substance_meronyms': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.topic_domains': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.usage_domains': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    '_WordNetObject.verb_groups': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.DrtVariableExpression': {   'opt_args': [],
                                      'req_args': ['variable'],
                                      'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'nltk.R': {   'opt_args': [],
                  'req_args': ['q', 'p'],
                  'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.V': {   'opt_args': [],
                  'req_args': ['p'],
                  'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.VariableExpression': {   'opt_args': [],
                                   'req_args': ['variable'],
                                   'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.__call__': {   'opt_args': [],
                         'req_args': ['func', 'self'],
                         'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.__legacysignature': {   'opt_args': [],
                                  'req_args': ['signature'],
                                  'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.accuracy': {   'opt_args': [],
                         'req_args': ['test', 'reference'],
                         'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.acyclic_branches_depth_first': {   'opt_args': [   'traversed',
                                                             'cut_mark',
                                                             'depth',
                                                             'children'],
                                             'req_args': ['tree'],
                                             'source_file': 'nltk\\nltk\\util.py'},
    'nltk.acyclic_breadth_first': {   'opt_args': ['maxdepth', 'children'],
                                      'req_args': ['tree'],
                                      'source_file': 'nltk\\nltk\\util.py'},
    'nltk.acyclic_depth_first': {   'opt_args': [   'traversed',
                                                    'cut_mark',
                                                    'depth',
                                                    'children'],
                                    'req_args': ['tree'],
                                    'source_file': 'nltk\\nltk\\util.py'},
    'nltk.acyclic_dic2tree': {   'opt_args': [],
                                 'req_args': ['dic', 'node'],
                                 'source_file': 'nltk\\nltk\\util.py'},
    'nltk.add_access_token': {   'opt_args': ['creds_file'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\twitter\\util.py'},
    'nltk.add_blank_lines': {   'opt_args': [],
                                'req_args': [   'blanks_between',
                                                'blanks_before',
                                                'tree'],
                                'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.add_default_fields': {   'opt_args': [],
                                   'req_args': ['default_fields', 'elem'],
                                   'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.add_logs': {   'opt_args': [],
                         'req_args': ['logy', 'logx'],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'nltk.add_py3_data': {   'opt_args': [],
                             'req_args': ['path'],
                             'source_file': 'nltk\\nltk\\compat.py'},
    'nltk.align': {   'opt_args': ['epsilon'],
                      'req_args': ['str2', 'str1'],
                      'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.align_blocks': {   'opt_args': ['params'],
                             'req_args': [   'target_sents_lens',
                                             'source_sents_lens'],
                             'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.align_log_prob': {   'opt_args': [],
                               'req_args': [   'params',
                                               'alignment',
                                               'target_sents',
                                               'source_sents',
                                               'j',
                                               'i'],
                               'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.align_texts': {   'opt_args': ['params'],
                            'req_args': ['target_blocks', 'source_blocks'],
                            'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.align_tokens': {   'opt_args': [],
                             'req_args': ['sentence', 'tokens'],
                             'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.align_words': {   'opt_args': ['wordnet', 'stemmer'],
                            'req_args': ['reference', 'hypothesis'],
                            'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.alignment_error_rate': {   'opt_args': ['possible'],
                                     'req_args': ['hypothesis', 'reference'],
                                     'source_file': 'nltk\\nltk\\translate\\metrics.py'},
    'nltk.ancestors': {   'opt_args': [],
                          'req_args': ['node'],
                          'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.app': {   'opt_args': [],
                    'req_args': [],
                    'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.apply_features': {   'opt_args': ['labeled'],
                               'req_args': ['toks', 'feature_func'],
                               'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.approxrand': {   'opt_args': ['kwargs'],
                           'req_args': ['b', 'a'],
                           'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.arity': {   'opt_args': [],
                      'req_args': ['rel'],
                      'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.arity_parse_demo': {   'opt_args': [],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'nltk.attested_labels': {   'opt_args': [],
                                'req_args': ['tokens'],
                                'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.augParseCategory': {   'opt_args': ['var'],
                                 'req_args': ['families', 'primitives', 'line'],
                                 'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.babelize_shell': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\misc\\babelfish.py'},
    'nltk.backwardBxConstraint': {   'opt_args': [],
                                     'req_args': ['right', 'left'],
                                     'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.backwardOnly': {   'opt_args': [],
                             'req_args': ['right', 'left'],
                             'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.backwardSxConstraint': {   'opt_args': [],
                                     'req_args': ['right', 'left'],
                                     'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.backwardTConstraint': {   'opt_args': [],
                                    'req_args': ['right', 'left'],
                                    'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.basic_sent_chop': {   'opt_args': ['raw'],
                                'req_args': ['data'],
                                'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'nltk.bigrams': {   'opt_args': ['kwargs'],
                        'req_args': ['sequence'],
                        'source_file': 'nltk\\nltk\\util.py'},
    'nltk.binary_concept': {   'opt_args': [],
                               'req_args': [   'records',
                                               'obj',
                                               'subj',
                                               'closures',
                                               'label'],
                               'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.binary_distance': {   'opt_args': [],
                                'req_args': ['label2', 'label1'],
                                'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.binary_names_demo_features': {   'opt_args': [],
                                           'req_args': ['name'],
                                           'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.binary_search_file': {   'opt_args': ['cacheDepth', 'cache'],
                                   'req_args': ['key', 'file'],
                                   'source_file': 'nltk\\nltk\\util.py'},
    'nltk.binding_ops': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.boolean_ops': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.bothBackward': {   'opt_args': [],
                             'req_args': ['right', 'left'],
                             'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.bothForward': {   'opt_args': [],
                            'req_args': ['right', 'left'],
                            'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.bracket_parse': {   'opt_args': [],
                              'req_args': ['s'],
                              'source_file': 'nltk\\nltk\\tree\\parsing.py'},
    'nltk.breadth_first': {   'opt_args': ['maxdepth', 'children'],
                              'req_args': ['tree'],
                              'source_file': 'nltk\\nltk\\util.py'},
    'nltk.brevity_penalty': {   'opt_args': [],
                                'req_args': ['hyp_len', 'closest_ref_len'],
                                'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'nltk.brill24': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'nltk.brown_tagset': {   'opt_args': ['tagpattern'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\help.py'},
    'nltk.bubble': {   'opt_args': [],
                       'req_args': ['a'],
                       'source_file': 'nltk\\nltk\\misc\\sort.py'},
    'nltk.build_index': {   'opt_args': [],
                            'req_args': ['base_url', 'root'],
                            'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.build_model': {   'opt_args': ['fmt'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.calculate_deltas': {   'opt_args': [],
                                 'req_args': [   'encoding',
                                                 'nftranspose',
                                                 'nfarray',
                                                 'nfmap',
                                                 'ffreq_empirical',
                                                 'unattested',
                                                 'classifier',
                                                 'train_toks'],
                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.calculate_empirical_fcount': {   'opt_args': [],
                                           'req_args': [   'encoding',
                                                           'train_toks'],
                                           'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.calculate_estimated_fcount': {   'opt_args': [],
                                           'req_args': [   'encoding',
                                                           'train_toks',
                                                           'classifier'],
                                           'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.calculate_nfmap': {   'opt_args': [],
                                'req_args': ['encoding', 'train_toks'],
                                'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.call_megam': {   'opt_args': [],
                           'req_args': ['args'],
                           'source_file': 'nltk\\nltk\\classify\\megam.py'},
    'nltk.call_tadm': {   'opt_args': [],
                          'req_args': ['args'],
                          'source_file': 'nltk\\nltk\\classify\\tadm.py'},
    'nltk.casual_tokenize': {   'opt_args': [   'match_phone_numbers',
                                                'strip_handles',
                                                'reduce_len',
                                                'preserve_case'],
                                'req_args': ['text'],
                                'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'nltk.cfg_demo': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.chatbots': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\chat\\__init__.py'},
    'nltk.check': {   'opt_args': [],
                      'req_args': [   'cols',
                                      'rows',
                                      'grid',
                                      'y',
                                      'x',
                                      'dir',
                                      'word'],
                      'source_file': 'nltk\\nltk\\misc\\wordfinder.py'},
    'nltk.check_megam_config': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.chomsky_normal_form': {   'opt_args': [   'parentChar',
                                                    'childChar',
                                                    'vertMarkov',
                                                    'horzMarkov',
                                                    'factor'],
                                    'req_args': ['tree'],
                                    'source_file': 'nltk\\nltk\\tree\\transforms.py'},
    'nltk.choose': {   'opt_args': [],
                       'req_args': ['k', 'n'],
                       'source_file': 'nltk\\nltk\\util.py'},
    'nltk.chrf_precision_recall_fscore_support': {   'opt_args': [   'epsilon',
                                                                     'beta'],
                                                     'req_args': [   'n',
                                                                     'hypothesis',
                                                                     'reference'],
                                                     'source_file': 'nltk\\nltk\\translate\\chrf_score.py'},
    'nltk.cities2table': {   'opt_args': ['setup', 'verbose'],
                             'req_args': ['dbname', 'rel_name', 'filename'],
                             'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.class_abbrev': {   'opt_args': [],
                             'req_args': ['type'],
                             'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.clause': {   'opt_args': [],
                       'req_args': ['relsym', 'reldict'],
                       'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.clause2concepts': {   'opt_args': ['closures'],
                                'req_args': ['schema', 'rel_name', 'filename'],
                                'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.clausify': {   'opt_args': [],
                         'req_args': ['expression'],
                         'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'nltk.claws5_tagset': {   'opt_args': ['tagpattern'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\help.py'},
    'nltk.clean_html': {   'opt_args': [],
                           'req_args': ['html'],
                           'source_file': 'nltk\\nltk\\util.py'},
    'nltk.clean_url': {   'opt_args': [],
                          'req_args': ['url'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'nltk.clear_cache': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\data.py'},
    'nltk.cli': {   'opt_args': [],
                    'req_args': [],
                    'source_file': 'nltk\\nltk\\cli.py'},
    'nltk.closed_domain_demo': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.closed_world_demo': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.closest_ref_length': {   'opt_args': [],
                                   'req_args': ['hyp_len', 'references'],
                                   'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'nltk.cmp_chunks': {   'opt_args': [],
                           'req_args': ['guessed', 'correct'],
                           'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.collapse_unary': {   'opt_args': [   'joinChar',
                                               'collapseRoot',
                                               'collapsePOS'],
                               'req_args': ['tree'],
                               'source_file': 'nltk\\nltk\\tree\\transforms.py'},
    'nltk.combination_prover_demo': {   'opt_args': [],
                                        'req_args': [],
                                        'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.compute_composition_semantics': {   'opt_args': [],
                                              'req_args': [   'argument',
                                                              'function'],
                                              'source_file': 'nltk\\nltk\\ccg\\logic.py'},
    'nltk.compute_function_semantics': {   'opt_args': [],
                                           'req_args': ['argument', 'function'],
                                           'source_file': 'nltk\\nltk\\ccg\\logic.py'},
    'nltk.compute_semantics': {   'opt_args': [],
                                  'req_args': ['edge', 'children'],
                                  'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'nltk.compute_substitution_semantics': {   'opt_args': [],
                                               'req_args': [   'argument',
                                                               'function'],
                                               'source_file': 'nltk\\nltk\\ccg\\logic.py'},
    'nltk.compute_type_raised_semantics': {   'opt_args': [],
                                              'req_args': ['semantics'],
                                              'source_file': 'nltk\\nltk\\ccg\\logic.py'},
    'nltk.concat': {   'opt_args': [],
                       'req_args': ['docs'],
                       'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.concepts': {   'opt_args': ['items'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.config_java': {   'opt_args': ['verbose', 'options', 'bin'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.config_megam': {   'opt_args': ['bin'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\classify\\megam.py'},
    'nltk.config_tadm': {   'opt_args': ['bin'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\classify\\tadm.py'},
    'nltk.config_weka': {   'opt_args': ['classpath'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\classify\\weka.py'},
    'nltk.conflicts': {   'opt_args': ['trace'],
                          'req_args': ['fstruct2', 'fstruct1'],
                          'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.conll_demo': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'nltk.conll_file_demo': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'nltk.conllesp': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.conllned': {   'opt_args': ['trace'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.conllstr2tree': {   'opt_args': ['root_label', 'chunk_types'],
                              'req_args': ['s'],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.conlltags2tree': {   'opt_args': [   'strict',
                                               'root_label',
                                               'chunk_types'],
                               'req_args': ['sentence'],
                               'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.convert_to_prover9': {   'opt_args': [],
                                   'req_args': ['input'],
                                   'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'nltk.corpus_bleu': {   'opt_args': [   'auto_reweigh',
                                            'smoothing_function',
                                            'weights'],
                            'req_args': ['hypotheses', 'list_of_references'],
                            'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'nltk.corpus_chrf': {   'opt_args': [   'ignore_whitespace',
                                            'beta',
                                            'max_len',
                                            'min_len'],
                            'req_args': ['hypotheses', 'references'],
                            'source_file': 'nltk\\nltk\\translate\\chrf_score.py'},
    'nltk.corpus_gleu': {   'opt_args': ['max_len', 'min_len'],
                            'req_args': ['hypotheses', 'list_of_references'],
                            'source_file': 'nltk\\nltk\\translate\\gleu_score.py'},
    'nltk.corpus_nist': {   'opt_args': ['n'],
                            'req_args': ['hypotheses', 'list_of_references'],
                            'source_file': 'nltk\\nltk\\translate\\nist_score.py'},
    'nltk.corpus_ribes': {   'opt_args': ['beta', 'alpha'],
                             'req_args': ['hypotheses', 'list_of_references'],
                             'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.corpus_size': {   'opt_args': [],
                            'req_args': ['seqs'],
                            'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.corpusreader_demo': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.cosine_distance': {   'opt_args': [],
                                'req_args': ['v', 'u'],
                                'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'nltk.credsfromfile': {   'opt_args': ['verbose', 'subdir', 'creds_file'],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\twitter\\util.py'},
    'nltk.crossedDirs': {   'opt_args': [],
                            'req_args': ['right', 'left'],
                            'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.custom_distance': {   'opt_args': [],
                                'req_args': ['file'],
                                'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.cycle_finding_demo': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'nltk.decode_result': {   'opt_args': [],
                              'req_args': ['found'],
                              'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'nltk.decorator': {   'opt_args': [],
                          'req_args': ['caller'],
                          'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.decorator_factory': {   'opt_args': [],
                                  'req_args': ['cls'],
                                  'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.default_reasoning_demo': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.delta': {   'opt_args': [],
                      'req_args': ['q', 'p'],
                      'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.demo': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\tree\\tree.py'},
    'nltk.demo2': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'nltk.demo3': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\tag\\tnt.py'},
    'nltk.demoException': {   'opt_args': [],
                              'req_args': ['s'],
                              'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.demo_bw': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'nltk.demo_error_analysis': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_errors': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.demo_eval': {   'opt_args': [],
                          'req_args': ['text', 'chunkparser'],
                          'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'nltk.demo_generated_templates': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_grammar': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'nltk.demo_high_accuracy_rules': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_learning_curve': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_legacy_grammar': {   'opt_args': [],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.demo_liu_hu_lexicon': {   'opt_args': ['plot'],
                                    'req_args': ['sentence'],
                                    'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_model0': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.demo_movie_reviews': {   'opt_args': ['output', 'n_instances'],
                                   'req_args': ['trainer'],
                                   'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_multifeature_template': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_multiposition_feature': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_pos': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'nltk.demo_pos_bw': {   'opt_args': [   'max_iterations',
                                            'verbose',
                                            'unsupervised',
                                            'supervised',
                                            'test'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'nltk.demo_read_depgraph': {   'opt_args': [],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\sem\\lfg.py'},
    'nltk.demo_repr_rule_format': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_sent_subjectivity': {   'opt_args': [],
                                       'req_args': ['text'],
                                       'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_serialize_tagger': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_str_rule_format': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_subjectivity': {   'opt_args': [   'output',
                                                  'n_instances',
                                                  'save_analyzer'],
                                  'req_args': ['trainer'],
                                  'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_template_statistics': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.demo_tweets': {   'opt_args': ['output', 'n_instances'],
                            'req_args': ['trainer'],
                            'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_vader_instance': {   'opt_args': [],
                                    'req_args': ['text'],
                                    'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_vader_tweets': {   'opt_args': ['output', 'n_instances'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.demo_verbose_rule_format': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.deprecated': {   'opt_args': [],
                           'req_args': ['message'],
                           'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.descape_entity': {   'opt_args': ['defs'],
                               'req_args': ['m'],
                               'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.describe_template_sets': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'nltk.dg_demo': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.diff': {   'opt_args': [],
                     'req_args': ['f', 'q', 'p'],
                     'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.discourse_demo': {   'opt_args': ['reading_command'],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'nltk.dispersion_plot': {   'opt_args': ['title', 'ignore_case'],
                                'req_args': ['words', 'text'],
                                'source_file': 'nltk\\nltk\\draw\\dispersion.py'},
    'nltk.display_unification': {   'opt_args': ['indent'],
                                    'req_args': ['fs2', 'fs1'],
                                    'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.dot2img': {   'opt_args': ['t'],
                        'req_args': ['dot_string'],
                        'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'nltk.download_gui': {   'opt_args': [],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.download_shell': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.draw_trees': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'nltk.drt_discourse_demo': {   'opt_args': ['reading_command'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'nltk.edge_closure': {   'opt_args': ['verbose', 'maxdepth', 'children'],
                             'req_args': ['tree'],
                             'source_file': 'nltk\\nltk\\util.py'},
    'nltk.edges2dot': {   'opt_args': ['attr', 'shapes'],
                          'req_args': ['edges'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'nltk.edit_distance': {   'opt_args': [   'transpositions',
                                              'substitution_cost'],
                              'req_args': ['s2', 's1'],
                              'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.edit_distance_align': {   'opt_args': ['substitution_cost'],
                                    'req_args': ['s2', 's1'],
                                    'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.elementtree_indent': {   'opt_args': ['level'],
                                   'req_args': ['elem'],
                                   'source_file': 'nltk\\nltk\\util.py'},
    'nltk.eliza_chat': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\chat\\eliza.py'},
    'nltk.encoding_demo': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\classify\\tadm.py'},
    'nltk.entropy': {   'opt_args': [],
                        'req_args': ['pdist'],
                        'source_file': 'nltk\\nltk\\probability.py'},
    'nltk.equality_preds': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.error_list': {   'opt_args': [],
                           'req_args': ['test_sents', 'train_sents'],
                           'source_file': 'nltk\\nltk\\tbl\\erroranalysis.py'},
    'nltk.euclidean_distance': {   'opt_args': [],
                                   'req_args': ['v', 'u'],
                                   'source_file': 'nltk\\nltk\\cluster\\util.py'},
    'nltk.evaluate_sents': {   'opt_args': ['trace'],
                               'req_args': [   'assignment',
                                               'model',
                                               'grammar',
                                               'inputs'],
                               'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.everygrams': {   'opt_args': [   'pad_right',
                                           'pad_left',
                                           'max_len',
                                           'min_len',
                                           'kwargs'],
                           'req_args': ['sequence'],
                           'source_file': 'nltk\\nltk\\util.py'},
    'nltk.exact_match': {   'opt_args': [],
                            'req_args': ['reference', 'hypothesis'],
                            'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.expand_tweetids_demo': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.extract': {   'opt_args': [],
                        'req_args': [   'max_phrase_length',
                                        'trglen',
                                        'srclen',
                                        'trgtext',
                                        'srctext',
                                        'f_aligned',
                                        'alignment',
                                        'e_end',
                                        'e_start',
                                        'f_end',
                                        'f_start'],
                        'source_file': 'nltk\\nltk\\translate\\phrase_based.py'},
    'nltk.extract_bigram_feats': {   'opt_args': [],
                                     'req_args': ['bigrams', 'document'],
                                     'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.extract_fields': {   'opt_args': [],
                               'req_args': ['fields', 'tweet'],
                               'source_file': 'nltk\\nltk\\twitter\\common.py'},
    'nltk.extract_rels': {   'opt_args': ['window', 'pattern', 'corpus'],
                             'req_args': ['doc', 'objclass', 'subjclass'],
                             'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.extract_test_sentences': {   'opt_args': [   'encoding',
                                                       'comment_chars'],
                                       'req_args': ['string'],
                                       'source_file': 'nltk\\nltk\\parse\\util.py'},
    'nltk.extract_unigram_feats': {   'opt_args': ['handle_negation'],
                                      'req_args': ['unigrams', 'document'],
                                      'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.f': {   'opt_args': [],
                  'req_args': ['x'],
                  'source_file': 'nltk\\nltk\\classify\\decisiontree.py'},
    'nltk.f_measure': {   'opt_args': ['alpha'],
                          'req_args': ['test', 'reference'],
                          'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.fcfg_demo': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.filestring': {   'opt_args': [],
                           'req_args': ['f'],
                           'source_file': 'nltk\\nltk\\util.py'},
    'nltk.find': {   'opt_args': ['paths'],
                     'req_args': ['resource_name'],
                     'source_file': 'nltk\\nltk\\data.py'},
    'nltk.find_binary': {   'opt_args': [   'verbose',
                                            'url',
                                            'binary_names',
                                            'searchpath',
                                            'env_vars',
                                            'path_to_bin'],
                            'req_args': ['name'],
                            'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_binary_iter': {   'opt_args': [   'verbose',
                                                 'url',
                                                 'binary_names',
                                                 'searchpath',
                                                 'env_vars',
                                                 'path_to_bin'],
                                 'req_args': ['name'],
                                 'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_corpus_fileids': {   'opt_args': [],
                                    'req_args': ['regexp', 'root'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.find_dir': {   'opt_args': [   'verbose',
                                         'url',
                                         'file_names',
                                         'searchpath',
                                         'env_vars'],
                         'req_args': ['filename'],
                         'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_file': {   'opt_args': [   'verbose',
                                          'url',
                                          'file_names',
                                          'searchpath',
                                          'env_vars'],
                          'req_args': ['filename'],
                          'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_file_iter': {   'opt_args': [   'finding_dir',
                                               'verbose',
                                               'url',
                                               'file_names',
                                               'searchpath',
                                               'env_vars'],
                               'req_args': ['filename'],
                               'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_increasing_sequences': {   'opt_args': [],
                                          'req_args': ['worder'],
                                          'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.find_jar': {   'opt_args': [   'is_regex',
                                         'verbose',
                                         'url',
                                         'searchpath',
                                         'env_vars',
                                         'path_to_jar'],
                         'req_args': ['name_pattern'],
                         'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_jar_iter': {   'opt_args': [   'is_regex',
                                              'verbose',
                                              'url',
                                              'searchpath',
                                              'env_vars',
                                              'path_to_jar'],
                              'req_args': ['name_pattern'],
                              'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_jars_within_path': {   'opt_args': [],
                                      'req_args': ['path_to_jars'],
                                      'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.find_malt_model': {   'opt_args': [],
                                'req_args': ['model_filename'],
                                'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'nltk.find_maltparser': {   'opt_args': [],
                                'req_args': ['parser_dirname'],
                                'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'nltk.find_variables': {   'opt_args': ['fs_class'],
                               'req_args': ['fstruct'],
                               'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.flatten': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\util.py'},
    'nltk.fntbl37': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'nltk.foldemo': {   'opt_args': ['trace'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.followtoscreen_demo': {   'opt_args': ['limit'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.folmodel': {   'opt_args': ['trace', 'quiet'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.format_debug_decision': {   'opt_args': [],
                                      'req_args': ['d'],
                                      'source_file': 'nltk\\nltk\\tokenize\\punkt.py'},
    'nltk.forwardOnly': {   'opt_args': [],
                            'req_args': ['right', 'left'],
                            'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.forwardSConstraint': {   'opt_args': [],
                                   'req_args': ['right', 'left'],
                                   'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.forwardTConstraint': {   'opt_args': [],
                                   'req_args': ['right', 'left'],
                                   'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.fractional_presence': {   'opt_args': [],
                                    'req_args': ['label'],
                                    'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.fromstring': {   'opt_args': ['include_semantics'],
                           'req_args': ['lex_str'],
                           'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.generate': {   'opt_args': ['n', 'depth', 'start'],
                         'req_args': ['grammar'],
                         'source_file': 'nltk\\nltk\\parse\\generate.py'},
    'nltk.generate_chomsky': {   'opt_args': ['line_length', 'times'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\misc\\chomsky.py'},
    'nltk.get_domain': {   'opt_args': [],
                           'req_args': ['assumptions', 'goal'],
                           'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.get_header_field_list': {   'opt_args': [],
                                      'req_args': [   'entity_fields',
                                                      'entity_type',
                                                      'main_fields'],
                                      'source_file': 'nltk\\nltk\\twitter\\common.py'},
    'nltk.get_relations_data': {   'opt_args': [],
                                   'req_args': ['synset', 'word'],
                                   'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_static_index_page': {   'opt_args': [],
                                      'req_args': ['with_shutdown'],
                                      'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_static_page_by_path': {   'opt_args': [],
                                        'req_args': ['path'],
                                        'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_static_upper_page': {   'opt_args': [],
                                      'req_args': ['with_shutdown'],
                                      'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_static_web_help_page': {   'opt_args': [],
                                         'req_args': [],
                                         'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_static_welcome_message': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_unique_counter_from_url': {   'opt_args': [],
                                            'req_args': ['sp'],
                                            'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.get_words_from_dictionary': {   'opt_args': [],
                                          'req_args': ['lemmas'],
                                          'source_file': 'nltk\\nltk\\metrics\\paice.py'},
    'nltk.getattr_': {   'opt_args': [],
                         'req_args': ['default_thunk', 'name', 'obj'],
                         'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.getinfo': {   'opt_args': [],
                        'req_args': ['func'],
                        'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.ghd': {   'opt_args': [   'boundary',
                                    'shift_cost_coeff',
                                    'del_cost',
                                    'ins_cost'],
                    'req_args': ['hyp', 'ref'],
                    'source_file': 'nltk\\nltk\\metrics\\segmentation.py'},
    'nltk.grow_diag_final_and': {   'opt_args': [],
                                    'req_args': [   'f2e',
                                                    'e2f',
                                                    'trglen',
                                                    'srclen'],
                                    'source_file': 'nltk\\nltk\\translate\\gdfa.py'},
    'nltk.gt_demo': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\probability.py'},
    'nltk.guess_encoding': {   'opt_args': [],
                               'req_args': ['data'],
                               'source_file': 'nltk\\nltk\\util.py'},
    'nltk.guess_path': {   'opt_args': [],
                           'req_args': ['pth'],
                           'source_file': 'nltk\\nltk\\twitter\\util.py'},
    'nltk.gzip_open_unicode': {   'opt_args': [   'newline',
                                                  'errors',
                                                  'fileobj',
                                                  'encoding',
                                                  'compresslevel',
                                                  'mode'],
                                  'req_args': ['filename'],
                                  'source_file': 'nltk\\nltk\\data.py'},
    'nltk.hall_demo': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'nltk.hole_readings': {   'opt_args': ['verbose', 'grammar_filename'],
                              'req_args': ['sentence'],
                              'source_file': 'nltk\\nltk\\sem\\hole.py'},
    'nltk.ieer_headlines': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.ieerstr2tree': {   'opt_args': ['root_label', 'chunk_types'],
                             'req_args': ['s'],
                             'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.iesha_chat': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\chat\\iesha.py'},
    'nltk.import_from_stdlib': {   'opt_args': [],
                                   'req_args': ['module'],
                                   'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.in_demo': {   'opt_args': ['sql', 'trace'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.in_idle': {   'opt_args': [],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\util.py'},
    'nltk.induce_pcfg': {   'opt_args': [],
                            'req_args': ['productions', 'start'],
                            'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.information_content': {   'opt_args': [],
                                    'req_args': ['ic', 'synset'],
                                    'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.innermostFunction': {   'opt_args': [],
                                  'req_args': ['categ'],
                                  'source_file': 'nltk\\nltk\\ccg\\combinator.py'},
    'nltk.interactive_demo': {   'opt_args': ['trace'],
                                 'req_args': [],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.interpret_sents': {   'opt_args': ['trace', 'semkey'],
                                'req_args': ['grammar', 'inputs'],
                                'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.interval_distance': {   'opt_args': [],
                                  'req_args': ['label2', 'label1'],
                                  'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.invert_dict': {   'opt_args': [],
                            'req_args': ['d'],
                            'source_file': 'nltk\\nltk\\util.py'},
    'nltk.invert_graph': {   'opt_args': [],
                             'req_args': ['graph'],
                             'source_file': 'nltk\\nltk\\util.py'},
    'nltk.is_cjk': {   'opt_args': [],
                       'req_args': ['character'],
                       'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.is_eventvar': {   'opt_args': [],
                            'req_args': ['expr'],
                            'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.is_funcvar': {   'opt_args': [],
                           'req_args': ['expr'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.is_indvar': {   'opt_args': [],
                          'req_args': ['expr'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.is_nonterminal': {   'opt_args': [],
                               'req_args': ['item'],
                               'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.is_rel': {   'opt_args': [],
                       'req_args': ['s'],
                       'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.is_terminal': {   'opt_args': [],
                            'req_args': ['item'],
                            'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.is_writable': {   'opt_args': [],
                            'req_args': ['path'],
                            'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.jaccard_distance': {   'opt_args': [],
                                 'req_args': ['label2', 'label1'],
                                 'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.jaro_similarity': {   'opt_args': [],
                                'req_args': ['s2', 's1'],
                                'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.jaro_winkler_similarity': {   'opt_args': ['max_l', 'p'],
                                        'req_args': ['s2', 's1'],
                                        'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.java': {   'opt_args': [   'blocking',
                                     'stderr',
                                     'stdout',
                                     'stdin',
                                     'classpath'],
                     'req_args': ['cmd'],
                     'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.jcn_similarity': {   'opt_args': ['verbose'],
                               'req_args': ['ic', 'synset2', 'synset1'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.json2csv': {   'opt_args': ['gzip_compress', 'errors', 'encoding'],
                         'req_args': ['fields', 'outfile', 'fp'],
                         'source_file': 'nltk\\nltk\\twitter\\common.py'},
    'nltk.json2csv_entities': {   'opt_args': [   'gzip_compress',
                                                  'errors',
                                                  'encoding'],
                                  'req_args': [   'entity_fields',
                                                  'entity_type',
                                                  'main_fields',
                                                  'outfile',
                                                  'tweets_file'],
                                  'source_file': 'nltk\\nltk\\twitter\\common.py'},
    'nltk.json2csv_preprocess': {   'opt_args': [   'limit',
                                                    'remove_duplicates',
                                                    'strip_off_emoticons',
                                                    'skip_ambiguous_tweets',
                                                    'skip_tongue_tweets',
                                                    'skip_retweets',
                                                    'gzip_compress',
                                                    'errors',
                                                    'encoding'],
                                    'req_args': [   'fields',
                                                    'outfile',
                                                    'json_file'],
                                    'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.kendall_tau': {   'opt_args': ['normalize'],
                            'req_args': ['worder'],
                            'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.label_indivs': {   'opt_args': ['lexicon'],
                             'req_args': ['valuation'],
                             'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.launchRefresh': {   'opt_args': [],
                              'req_args': ['_'],
                              'source_file': 'nltk\\nltk\\app\\nemo_app.py'},
    'nltk.lch_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                               'req_args': ['synset2', 'synset1'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.lemma_property': {   'opt_args': [],
                               'req_args': ['func', 'synset', 'word'],
                               'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.lesk': {   'opt_args': ['synsets', 'pos'],
                     'req_args': ['ambiguous_word', 'context_sentence'],
                     'source_file': 'nltk\\nltk\\wsd.py'},
    'nltk.limit_by_time_demo': {   'opt_args': ['keywords'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.lin_similarity': {   'opt_args': ['verbose'],
                               'req_args': ['ic', 'synset2', 'synset1'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.line_tokenize': {   'opt_args': ['blanklines'],
                              'req_args': ['text'],
                              'source_file': 'nltk\\nltk\\tokenize\\simple.py'},
    'nltk.list2sym': {   'opt_args': [],
                         'req_args': ['lst'],
                         'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.load': {   'opt_args': [   'encoding',
                                     'fstruct_reader',
                                     'logic_parser',
                                     'verbose',
                                     'cache',
                                     'format'],
                     'req_args': ['resource_url'],
                     'source_file': 'nltk\\nltk\\data.py'},
    'nltk.load_ace_data': {   'opt_args': ['skip_bnews', 'fmt'],
                              'req_args': ['roots'],
                              'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.load_ace_file': {   'opt_args': [],
                              'req_args': ['fmt', 'textfile'],
                              'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.load_fol': {   'opt_args': [],
                         'req_args': ['s'],
                         'source_file': 'nltk\\nltk\\inference\\discourse.py'},
    'nltk.load_parser': {   'opt_args': [   'beam_size',
                                            'chart_class',
                                            'parser',
                                            'trace',
                                            'load_args'],
                            'req_args': ['grammar_url'],
                            'source_file': 'nltk\\nltk\\parse\\util.py'},
    'nltk.load_pos': {   'opt_args': [],
                         'req_args': ['num_sents'],
                         'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'nltk.log_base2': {   'opt_args': [],
                          'req_args': ['score'],
                          'source_file': 'nltk\\nltk\\lm\\util.py'},
    'nltk.log_likelihood': {   'opt_args': [],
                               'req_args': ['test', 'reference'],
                               'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.logsumexp2': {   'opt_args': [],
                           'req_args': ['arr'],
                           'source_file': 'nltk\\nltk\\tag\\hmm.py'},
    'nltk.longest_target_sentence_length': {   'opt_args': [],
                                               'req_args': [   'sentence_aligned_corpus'],
                                               'source_file': 'nltk\\nltk\\translate\\ibm_model.py'},
    'nltk.lookup_by_userid_demo': {   'opt_args': [],
                                      'req_args': [],
                                      'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.main': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.make_lex': {   'opt_args': [],
                         'req_args': ['symbols'],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.make_lookup_link': {   'opt_args': [],
                                 'req_args': ['label', 'ref'],
                                 'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.make_valuation': {   'opt_args': ['lexicon', 'read'],
                               'req_args': ['concepts'],
                               'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.malt_demo': {   'opt_args': ['nx'],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\parse\\dependencygraph.py'},
    'nltk.malt_regex_tagger': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\parse\\malt.py'},
    'nltk.map_tag': {   'opt_args': [],
                        'req_args': ['source_tag', 'target', 'source'],
                        'source_file': 'nltk\\nltk\\tag\\mapping.py'},
    'nltk.mark_negation': {   'opt_args': ['shallow', 'double_neg_flip'],
                              'req_args': ['document'],
                              'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.masi_distance': {   'opt_args': [],
                              'req_args': ['label2', 'label1'],
                              'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.matchBrackets': {   'opt_args': [],
                              'req_args': ['string'],
                              'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.md5_hexdigest': {   'opt_args': [],
                              'req_args': ['file'],
                              'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.memoize': {   'opt_args': [],
                        'req_args': ['func'],
                        'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.merge': {   'opt_args': [],
                      'req_args': ['a'],
                      'source_file': 'nltk\\nltk\\misc\\sort.py'},
    'nltk.meteor_score': {   'opt_args': [   'gamma',
                                             'beta',
                                             'alpha',
                                             'wordnet',
                                             'stemmer',
                                             'preprocess'],
                             'req_args': ['hypothesis', 'references'],
                             'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.mimic_wrap': {   'opt_args': ['wrap_at', 'kwargs'],
                           'req_args': ['lines'],
                           'source_file': 'nltk\\nltk\\corpus\\reader\\framenet.py'},
    'nltk.modified_precision': {   'opt_args': [],
                                   'req_args': [   'n',
                                                   'hypothesis',
                                                   'references'],
                                   'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'nltk.most_general_unification': {   'opt_args': ['bindings'],
                                         'req_args': ['b', 'a'],
                                         'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'nltk.names_demo': {   'opt_args': ['features'],
                           'req_args': ['trainer'],
                           'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.names_demo_features': {   'opt_args': [],
                                    'req_args': ['name'],
                                    'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.ne_chunk': {   'opt_args': ['binary'],
                         'req_args': ['tagged_tokens'],
                         'source_file': 'nltk\\nltk\\chunk\\__init__.py'},
    'nltk.ne_chunk_sents': {   'opt_args': ['binary'],
                               'req_args': ['tagged_sentences'],
                               'source_file': 'nltk\\nltk\\chunk\\__init__.py'},
    'nltk.ne_chunked': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.new_wrapper': {   'opt_args': [],
                            'req_args': ['model', 'wrapper'],
                            'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.nextCategory': {   'opt_args': [],
                             'req_args': ['string'],
                             'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.ngrams': {   'opt_args': ['kwargs'],
                       'req_args': ['n', 'sequence'],
                       'source_file': 'nltk\\nltk\\util.py'},
    'nltk.nist_length_penalty': {   'opt_args': [],
                                    'req_args': ['hyp_len', 'ref_len'],
                                    'source_file': 'nltk\\nltk\\translate\\nist_score.py'},
    'nltk.nltkdemo18': {   'opt_args': [],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'nltk.nltkdemo18plus': {   'opt_args': [],
                               'req_args': [],
                               'source_file': 'nltk\\nltk\\tag\\brill.py'},
    'nltk.nonprojective_conll_parse_demo': {   'opt_args': [],
                                               'req_args': [],
                                               'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'nltk.nonterminals': {   'opt_args': [],
                             'req_args': ['symbols'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.norm': {   'opt_args': [],
                     'req_args': ['value_string'],
                     'source_file': 'nltk\\nltk\\corpus\\reader\\rte.py'},
    'nltk.normalize_resource_name': {   'opt_args': [   'relative_path',
                                                        'allow_relative'],
                                        'req_args': ['resource_name'],
                                        'source_file': 'nltk\\nltk\\data.py'},
    'nltk.normalize_resource_url': {   'opt_args': [],
                                       'req_args': ['resource_url'],
                                       'source_file': 'nltk\\nltk\\data.py'},
    'nltk.outf_writer_compat': {   'opt_args': ['gzip_compress'],
                                   'req_args': [   'errors',
                                                   'encoding',
                                                   'outfile'],
                                   'source_file': 'nltk\\nltk\\twitter\\common.py'},
    'nltk.output_markdown': {   'opt_args': ['kwargs'],
                                'req_args': ['filename'],
                                'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.overridden': {   'opt_args': [],
                           'req_args': ['method'],
                           'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.pad_sequence': {   'opt_args': [   'right_pad_symbol',
                                             'left_pad_symbol',
                                             'pad_right',
                                             'pad_left'],
                             'req_args': ['n', 'sequence'],
                             'source_file': 'nltk\\nltk\\util.py'},
    'nltk.padded_everygram_pipeline': {   'opt_args': [],
                                          'req_args': ['text', 'order'],
                                          'source_file': 'nltk\\nltk\\lm\\preprocessing.py'},
    'nltk.padded_everygrams': {   'opt_args': [],
                                  'req_args': ['sentence', 'order'],
                                  'source_file': 'nltk\\nltk\\lm\\preprocessing.py'},
    'nltk.page_from_href': {   'opt_args': [],
                               'req_args': ['href'],
                               'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.page_from_reference': {   'opt_args': [],
                                    'req_args': ['href'],
                                    'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.page_from_word': {   'opt_args': [],
                               'req_args': ['word'],
                               'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.pairwise': {   'opt_args': [],
                         'req_args': ['iterable'],
                         'source_file': 'nltk\\nltk\\util.py'},
    'nltk.parallelize_preprocess': {   'opt_args': ['progress_bar'],
                                       'req_args': [   'processes',
                                                       'iterator',
                                                       'func'],
                                       'source_file': 'nltk\\nltk\\util.py'},
    'nltk.parseApplication': {   'opt_args': [],
                                 'req_args': ['app'],
                                 'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.parseLexicon': {   'opt_args': [],
                             'req_args': ['lex_str'],
                             'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.parsePrimitiveCategory': {   'opt_args': [],
                                       'req_args': [   'var',
                                                       'families',
                                                       'primitives',
                                                       'chunks'],
                                       'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.parseSubscripts': {   'opt_args': [],
                                'req_args': ['subscr'],
                                'source_file': 'nltk\\nltk\\ccg\\lexicon.py'},
    'nltk.parse_megam_weights': {   'opt_args': ['explicit'],
                                    'req_args': ['features_count', 's'],
                                    'source_file': 'nltk\\nltk\\classify\\megam.py'},
    'nltk.parse_sents': {   'opt_args': ['trace'],
                            'req_args': ['grammar', 'inputs'],
                            'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.parse_tadm_weights': {   'opt_args': [],
                                   'req_args': ['paramfile'],
                                   'source_file': 'nltk\\nltk\\classify\\tadm.py'},
    'nltk.parse_token_stream': {   'opt_args': [],
                                   'req_args': [   'hard_delimiter',
                                                   'soft_delimiter',
                                                   'stream'],
                                   'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.parse_tweets_set': {   'opt_args': [   'skip_header',
                                                 'sent_tokenizer',
                                                 'word_tokenizer'],
                                 'req_args': ['label', 'filename'],
                                 'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.parse_with_bindops': {   'opt_args': ['trace', 'grammar'],
                                   'req_args': ['sentence'],
                                   'source_file': 'nltk\\nltk\\sem\\cooper_storage.py'},
    'nltk.partial_names_demo': {   'opt_args': ['features'],
                                   'req_args': ['trainer'],
                                   'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.path_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                                'req_args': ['synset2', 'synset1'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.pcfg_demo': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.pg': {   'opt_args': [],
                   'req_args': ['body', 'word'],
                   'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.phrase_extraction': {   'opt_args': ['max_phrase_length'],
                                  'req_args': [   'alignment',
                                                  'trgtext',
                                                  'srctext'],
                                  'source_file': 'nltk\\nltk\\translate\\phrase_based.py'},
    'nltk.pk': {   'opt_args': ['boundary', 'k'],
                   'req_args': ['hyp', 'ref'],
                   'source_file': 'nltk\\nltk\\metrics\\segmentation.py'},
    'nltk.plot_word_freq_dist': {   'opt_args': [],
                                    'req_args': ['text'],
                                    'source_file': 'nltk\\nltk\\app\\wordfreq_app.py'},
    'nltk.pos_tag': {   'opt_args': ['lang', 'tagset'],
                        'req_args': ['tokens'],
                        'source_file': 'nltk\\nltk\\tag\\__init__.py'},
    'nltk.pos_tag_sents': {   'opt_args': ['lang', 'tagset'],
                              'req_args': ['sentences'],
                              'source_file': 'nltk\\nltk\\tag\\__init__.py'},
    'nltk.position_of_ngram': {   'opt_args': [],
                                  'req_args': ['sentence', 'ngram'],
                                  'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.postag': {   'opt_args': [   'cache_baseline_tagger',
                                       'separate_baseline_data',
                                       'baseline_backoff_tagger',
                                       'learning_curve_take',
                                       'learning_curve_output',
                                       'serialize_output',
                                       'error_output',
                                       'template_stats',
                                       'incremental_stats',
                                       'ruleformat',
                                       'randomize',
                                       'trace',
                                       'train',
                                       'min_acc',
                                       'min_score',
                                       'max_rules',
                                       'num_sents',
                                       'tagged_data',
                                       'templates'],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\tbl\\demo.py'},
    'nltk.postag_tree': {   'opt_args': [],
                            'req_args': ['tree'],
                            'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.pr': {   'opt_args': ['end', 'start'],
                   'req_args': ['data'],
                   'source_file': 'nltk\\nltk\\util.py'},
    'nltk.precision': {   'opt_args': [],
                          'req_args': ['test', 'reference'],
                          'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.prefix_replace': {   'opt_args': [],
                               'req_args': ['new', 'old', 'original'],
                               'source_file': 'nltk\\nltk\\stem\\util.py'},
    'nltk.presence': {   'opt_args': [],
                         'req_args': ['label'],
                         'source_file': 'nltk\\nltk\\metrics\\distance.py'},
    'nltk.printCCGDerivation': {   'opt_args': [],
                                   'req_args': ['tree'],
                                   'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'nltk.printCCGTree': {   'opt_args': [],
                             'req_args': ['tree', 'lwidth'],
                             'source_file': 'nltk\\nltk\\ccg\\chart.py'},
    'nltk.print_proof': {   'opt_args': [],
                            'req_args': ['premises', 'goal'],
                            'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.print_string': {   'opt_args': ['width'],
                             'req_args': ['s'],
                             'source_file': 'nltk\\nltk\\util.py'},
    'nltk.printtype': {   'opt_args': [],
                          'req_args': ['ex'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.process_bundle': {   'opt_args': [],
                               'req_args': ['rels'],
                               'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.projective_prob_parse_demo': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'nltk.projective_rule_parse_demo': {   'opt_args': [],
                                           'req_args': [],
                                           'source_file': 'nltk\\nltk\\parse\\projectivedependencyparser.py'},
    'nltk.propdemo': {   'opt_args': ['trace'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.py3_data': {   'opt_args': [],
                         'req_args': ['init_func'],
                         'source_file': 'nltk\\nltk\\compat.py'},
    'nltk.quick': {   'opt_args': [],
                      'req_args': ['a'],
                      'source_file': 'nltk\\nltk\\misc\\sort.py'},
    'nltk.raise_unorderable_types': {   'opt_args': [],
                                        'req_args': ['b', 'a', 'ordering'],
                                        'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.ranks_from_scores': {   'opt_args': ['rank_gap'],
                                  'req_args': ['scores'],
                                  'source_file': 'nltk\\nltk\\metrics\\spearman.py'},
    'nltk.ranks_from_sequence': {   'opt_args': [],
                                    'req_args': ['seq'],
                                    'source_file': 'nltk\\nltk\\metrics\\spearman.py'},
    'nltk.re_show': {   'opt_args': ['right', 'left'],
                        'req_args': ['string', 'regexp'],
                        'source_file': 'nltk\\nltk\\util.py'},
    'nltk.read_alignedsent_block': {   'opt_args': [],
                                       'req_args': ['stream'],
                                       'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_blankline_block': {   'opt_args': [],
                                     'req_args': ['stream'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_cmudict_block': {   'opt_args': [],
                                   'req_args': ['stream'],
                                   'source_file': 'nltk\\nltk\\corpus\\reader\\cmudict.py'},
    'nltk.read_grammar': {   'opt_args': ['encoding', 'probabilistic'],
                             'req_args': ['nonterm_parser', 'input'],
                             'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.read_int': {   'opt_args': [],
                         'req_args': ['start_position', 's'],
                         'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.read_line_block': {   'opt_args': [],
                                'req_args': ['stream'],
                                'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_logic': {   'opt_args': ['encoding', 'logic_parser'],
                           'req_args': ['s'],
                           'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.read_number': {   'opt_args': [],
                            'req_args': ['start_position', 's'],
                            'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.read_regexp_block': {   'opt_args': ['end_re'],
                                  'req_args': ['start_re', 'stream'],
                                  'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_sents': {   'opt_args': ['encoding'],
                           'req_args': ['filename'],
                           'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.read_sexpr_block': {   'opt_args': ['comment_char', 'block_size'],
                                 'req_args': ['stream'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_str': {   'opt_args': [],
                         'req_args': ['start_position', 's'],
                         'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.read_timit_block': {   'opt_args': [],
                                 'req_args': ['stream'],
                                 'source_file': 'nltk\\nltk\\corpus\\reader\\timit.py'},
    'nltk.read_type': {   'opt_args': [],
                          'req_args': ['type_string'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.read_valuation': {   'opt_args': ['encoding'],
                               'req_args': ['s'],
                               'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.read_whitespace_block': {   'opt_args': [],
                                      'req_args': ['stream'],
                                      'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.read_wordpunct_block': {   'opt_args': [],
                                     'req_args': ['stream'],
                                     'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.rebuild_tree': {   'opt_args': [],
                             'req_args': ['orig_tree'],
                             'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.recall': {   'opt_args': [],
                       'req_args': ['test', 'reference'],
                       'source_file': 'nltk\\nltk\\metrics\\scores.py'},
    'nltk.reduce_lengthening': {   'opt_args': [],
                                   'req_args': ['text'],
                                   'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'nltk.regexp_span_tokenize': {   'opt_args': [],
                                     'req_args': ['regexp', 's'],
                                     'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.regexp_tokenize': {   'opt_args': ['flags', 'discard_empty', 'gaps'],
                                'req_args': ['pattern', 'text'],
                                'source_file': 'nltk\\nltk\\tokenize\\regexp.py'},
    'nltk.register_tag': {   'opt_args': [],
                             'req_args': ['cls'],
                             'source_file': 'nltk\\nltk\\jsontags.py'},
    'nltk.remove_blanks': {   'opt_args': [],
                              'req_args': ['elem'],
                              'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.remove_handles': {   'opt_args': [],
                               'req_args': ['text'],
                               'source_file': 'nltk\\nltk\\tokenize\\casual.py'},
    'nltk.remove_variables': {   'opt_args': ['fs_class'],
                                 'req_args': ['fstruct'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.rename_variables': {   'opt_args': [   'fs_class',
                                                 'new_vars',
                                                 'used_vars',
                                                 'vars'],
                                 'req_args': ['fstruct'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.res_similarity': {   'opt_args': ['verbose'],
                               'req_args': ['ic', 'synset2', 'synset1'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.resolution_test': {   'opt_args': [],
                                'req_args': ['e'],
                                'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'nltk.resolve_anaphora': {   'opt_args': ['trail'],
                                 'req_args': ['expression'],
                                 'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'nltk.retract_bindings': {   'opt_args': ['fs_class'],
                                 'req_args': ['bindings', 'fstruct'],
                                 'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.retrieve': {   'opt_args': ['verbose', 'filename'],
                         'req_args': ['resource_url'],
                         'source_file': 'nltk\\nltk\\data.py'},
    'nltk.revword': {   'opt_args': [],
                        'req_args': ['word'],
                        'source_file': 'nltk\\nltk\\misc\\wordfinder.py'},
    'nltk.roles_demo': {   'opt_args': ['trace'],
                           'req_args': [],
                           'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.root_semrep': {   'opt_args': ['semkey'],
                            'req_args': ['syntree'],
                            'source_file': 'nltk\\nltk\\sem\\util.py'},
    'nltk.rte_classifier': {   'opt_args': ['sample_N'],
                               'req_args': ['algorithm'],
                               'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'nltk.rte_features': {   'opt_args': [],
                             'req_args': ['rtepair'],
                             'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'nltk.rte_featurize': {   'opt_args': [],
                              'req_args': ['rte_pairs'],
                              'source_file': 'nltk\\nltk\\classify\\rte_classify.py'},
    'nltk.rtuple': {   'opt_args': ['rcon', 'lcon'],
                       'req_args': ['reldict'],
                       'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.rude_chat': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\chat\\rude.py'},
    'nltk.rule_based_demo': {   'opt_args': [],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\parse\\nonprojectivedependencyparser.py'},
    'nltk.run_profile': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\parse\\featurechart.py'},
    'nltk.sampletoscreen_demo': {   'opt_args': ['limit'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.satdemo': {   'opt_args': ['trace'],
                        'req_args': [],
                        'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.sdg_demo': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.search_demo': {   'opt_args': ['keywords'],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.selection': {   'opt_args': [],
                          'req_args': ['a'],
                          'source_file': 'nltk\\nltk\\misc\\sort.py'},
    'nltk.semi_rel2reldict': {   'opt_args': ['trace', 'window'],
                                 'req_args': ['pairs'],
                                 'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.sent_tokenize': {   'opt_args': ['language'],
                              'req_args': ['text'],
                              'source_file': 'nltk\\nltk\\tokenize\\__init__.py'},
    'nltk.sentence_bleu': {   'opt_args': [   'auto_reweigh',
                                              'smoothing_function',
                                              'weights'],
                              'req_args': ['hypothesis', 'references'],
                              'source_file': 'nltk\\nltk\\translate\\bleu_score.py'},
    'nltk.sentence_chrf': {   'opt_args': [   'ignore_whitespace',
                                              'beta',
                                              'max_len',
                                              'min_len'],
                              'req_args': ['hypothesis', 'reference'],
                              'source_file': 'nltk\\nltk\\translate\\chrf_score.py'},
    'nltk.sentence_gleu': {   'opt_args': ['max_len', 'min_len'],
                              'req_args': ['hypothesis', 'references'],
                              'source_file': 'nltk\\nltk\\translate\\gleu_score.py'},
    'nltk.sentence_nist': {   'opt_args': ['n'],
                              'req_args': ['hypothesis', 'references'],
                              'source_file': 'nltk\\nltk\\translate\\nist_score.py'},
    'nltk.sentence_ribes': {   'opt_args': ['beta', 'alpha'],
                               'req_args': ['hypothesis', 'references'],
                               'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.sents': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\book.py'},
    'nltk.set2rel': {   'opt_args': [],
                        'req_args': ['s'],
                        'source_file': 'nltk\\nltk\\sem\\evaluate.py'},
    'nltk.set_proxy': {   'opt_args': ['password', 'user'],
                          'req_args': ['proxy'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'nltk.setup': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.shape': {   'opt_args': [],
                      'req_args': ['word'],
                      'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.show_cfg': {   'opt_args': ['escape'],
                         'req_args': ['resource_url'],
                         'source_file': 'nltk\\nltk\\data.py'},
    'nltk.sigma_exp': {   'opt_args': [],
                          'req_args': ['q', 'p'],
                          'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.sigma_skip': {   'opt_args': [],
                           'req_args': ['p'],
                           'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.sigma_sub': {   'opt_args': [],
                          'req_args': ['q', 'p'],
                          'source_file': 'nltk\\nltk\\metrics\\aline.py'},
    'nltk.simplify_pos': {   'opt_args': [],
                             'req_args': ['s'],
                             'source_file': 'nltk\\nltk\\chunk\\named_entity.py'},
    'nltk.single_meteor_score': {   'opt_args': [   'gamma',
                                                    'beta',
                                                    'alpha',
                                                    'wordnet',
                                                    'stemmer',
                                                    'preprocess'],
                                    'req_args': ['hypothesis', 'reference'],
                                    'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.sinica_parse': {   'opt_args': [],
                             'req_args': ['s'],
                             'source_file': 'nltk\\nltk\\tree\\parsing.py'},
    'nltk.skipgrams': {   'opt_args': ['kwargs'],
                          'req_args': ['k', 'n', 'sequence'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'nltk.skolem_function': {   'opt_args': ['univ_scope'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.skolemize': {   'opt_args': ['used_variables', 'univ_scope'],
                          'req_args': ['expression'],
                          'source_file': 'nltk\\nltk\\sem\\skolemize.py'},
    'nltk.slice_bounds': {   'opt_args': ['allow_step'],
                             'req_args': ['slice_obj', 'sequence'],
                             'source_file': 'nltk\\nltk\\internals.py'},
    'nltk.smooth': {   'opt_args': ['window', 'window_len'],
                       'req_args': ['x'],
                       'source_file': 'nltk\\nltk\\tokenize\\texttiling.py'},
    'nltk.sort_fields': {   'opt_args': [],
                            'req_args': ['field_orders', 'elem'],
                            'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.spacer': {   'opt_args': ['num'],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'nltk.spans_to_relative': {   'opt_args': [],
                                  'req_args': ['spans'],
                                  'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.spearman_correlation': {   'opt_args': [],
                                     'req_args': ['ranks2', 'ranks1'],
                                     'source_file': 'nltk\\nltk\\metrics\\spearman.py'},
    'nltk.spearman_rho': {   'opt_args': ['normalize'],
                             'req_args': ['worder'],
                             'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.split_at': {   'opt_args': [],
                         'req_args': ['split_value', 'it'],
                         'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.split_resource_url': {   'opt_args': [],
                                   'req_args': ['resource_url'],
                                   'source_file': 'nltk\\nltk\\data.py'},
    'nltk.split_train_test': {   'opt_args': ['n'],
                                 'req_args': ['all_instances'],
                                 'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.sql_demo': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.sql_query': {   'opt_args': [],
                          'req_args': ['query', 'dbname'],
                          'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.standard_nonterm_parser': {   'opt_args': [],
                                        'req_args': ['pos', 'string'],
                                        'source_file': 'nltk\\nltk\\grammar.py'},
    'nltk.startBrowser': {   'opt_args': [],
                             'req_args': ['server_ready', 'url'],
                             'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.stem_match': {   'opt_args': ['stemmer'],
                           'req_args': ['reference', 'hypothesis'],
                           'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.step': {   'opt_args': [],
                     'req_args': ['grid', 'yf', 'y', 'xf', 'x', 'word'],
                     'source_file': 'nltk\\nltk\\misc\\wordfinder.py'},
    'nltk.str2tuple': {   'opt_args': ['sep'],
                          'req_args': ['s'],
                          'source_file': 'nltk\\nltk\\tag\\util.py'},
    'nltk.streamtofile_demo': {   'opt_args': ['limit'],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.string_span_tokenize': {   'opt_args': [],
                                     'req_args': ['sep', 's'],
                                     'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.substitute_bindings': {   'opt_args': ['fs_class'],
                                    'req_args': ['bindings', 'fstruct'],
                                    'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.subsumes': {   'opt_args': [],
                         'req_args': ['fstruct2', 'fstruct1'],
                         'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.suffix_replace': {   'opt_args': [],
                               'req_args': ['new', 'old', 'original'],
                               'source_file': 'nltk\\nltk\\stem\\util.py'},
    'nltk.sum_logs': {   'opt_args': [],
                         'req_args': ['logs'],
                         'source_file': 'nltk\\nltk\\probability.py'},
    'nltk.suntsu_chat': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\chat\\suntsu.py'},
    'nltk.tableau_test': {   'opt_args': ['verbose', 'ps'],
                             'req_args': ['c'],
                             'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'nltk.tag_pattern2re_pattern': {   'opt_args': [],
                                       'req_args': ['tag_pattern'],
                                       'source_file': 'nltk\\nltk\\chunk\\regexp.py'},
    'nltk.tagged_treebank_para_block_reader': {   'opt_args': [],
                                                  'req_args': ['stream'],
                                                  'source_file': 'nltk\\nltk\\corpus\\reader\\util.py'},
    'nltk.taggedsent_to_conll': {   'opt_args': [],
                                    'req_args': ['sentence'],
                                    'source_file': 'nltk\\nltk\\parse\\util.py'},
    'nltk.taggedsents_to_conll': {   'opt_args': [],
                                     'req_args': ['sentences'],
                                     'source_file': 'nltk\\nltk\\parse\\util.py'},
    'nltk.tagset_mapping': {   'opt_args': [],
                               'req_args': ['target', 'source'],
                               'source_file': 'nltk\\nltk\\tag\\mapping.py'},
    'nltk.tagstr2tree': {   'opt_args': [   'target_tagset',
                                            'source_tagset',
                                            'sep',
                                            'root_label',
                                            'chunk_label'],
                            'req_args': ['s'],
                            'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.test': {   'opt_args': [],
                     'req_args': [],
                     'source_file': 'nltk\\nltk\\tree\\prettyprinter.py'},
    'nltk.testHigherOrderTableauProver': {   'opt_args': [],
                                             'req_args': [],
                                             'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'nltk.testResolutionProver': {   'opt_args': [],
                                     'req_args': [],
                                     'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'nltk.testTableauProver': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\tableau.py'},
    'nltk.test_build_model': {   'opt_args': [],
                                 'req_args': ['arguments'],
                                 'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'nltk.test_clausify': {   'opt_args': [],
                              'req_args': [],
                              'source_file': 'nltk\\nltk\\inference\\resolution.py'},
    'nltk.test_config': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'nltk.test_convert_to_prover9': {   'opt_args': [],
                                        'req_args': ['expr'],
                                        'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'nltk.test_draw': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\sem\\drt.py'},
    'nltk.test_make_relation_set': {   'opt_args': [],
                                       'req_args': [],
                                       'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'nltk.test_model_found': {   'opt_args': [],
                                 'req_args': ['arguments'],
                                 'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'nltk.test_prove': {   'opt_args': [],
                           'req_args': ['arguments'],
                           'source_file': 'nltk\\nltk\\inference\\prover9.py'},
    'nltk.test_transform_output': {   'opt_args': [],
                                      'req_args': ['argument_pair'],
                                      'source_file': 'nltk\\nltk\\inference\\mace.py'},
    'nltk.texts': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\book.py'},
    'nltk.tgrep_compile': {   'opt_args': [],
                              'req_args': ['tgrep_string'],
                              'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.tgrep_nodes': {   'opt_args': ['search_leaves'],
                            'req_args': ['trees', 'pattern'],
                            'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.tgrep_positions': {   'opt_args': ['search_leaves'],
                                'req_args': ['trees', 'pattern'],
                                'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.tgrep_tokenize': {   'opt_args': [],
                               'req_args': ['tgrep_string'],
                               'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.timer': {   'opt_args': [],
                      'req_args': ['method'],
                      'source_file': 'nltk\\nltk\\sentiment\\util.py'},
    'nltk.to_cnf': {   'opt_args': [],
                       'req_args': ['second', 'first'],
                       'source_file': 'nltk\\nltk\\sem\\skolemize.py'},
    'nltk.to_settings_string': {   'opt_args': [   'unicode_fields',
                                                   'errors',
                                                   'encoding'],
                                   'req_args': ['tree'],
                                   'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.to_sfm_string': {   'opt_args': [   'unicode_fields',
                                              'errors',
                                              'encoding'],
                              'req_args': ['tree'],
                              'source_file': 'nltk\\nltk\\toolbox.py'},
    'nltk.tokenize_file': {   'opt_args': [],
                              'req_args': [   'delimiter',
                                              'encoding',
                                              'processes',
                                              'preserve_line',
                                              'language'],
                              'source_file': 'nltk\\nltk\\cli.py'},
    'nltk.tokenwrap': {   'opt_args': ['width', 'separator'],
                          'req_args': ['tokens'],
                          'source_file': 'nltk\\nltk\\util.py'},
    'nltk.trace': {   'opt_args': [],
                      'req_args': [   'target_sents_lens',
                                      'source_sents_lens',
                                      'backlinks'],
                      'source_file': 'nltk\\nltk\\translate\\gale_church.py'},
    'nltk.tracktoscreen_demo': {   'opt_args': ['limit', 'track'],
                                   'req_args': [],
                                   'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.train_maxent_classifier_with_gis': {   'opt_args': [   'labels',
                                                                 'encoding',
                                                                 'trace',
                                                                 'cutoffs'],
                                                 'req_args': ['train_toks'],
                                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.train_maxent_classifier_with_iis': {   'opt_args': [   'labels',
                                                                 'encoding',
                                                                 'trace',
                                                                 'cutoffs'],
                                                 'req_args': ['train_toks'],
                                                 'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.train_maxent_classifier_with_megam': {   'opt_args': [   'gaussian_prior_sigma',
                                                                   'labels',
                                                                   'encoding',
                                                                   'trace',
                                                                   'kwargs'],
                                                   'req_args': ['train_toks'],
                                                   'source_file': 'nltk\\nltk\\classify\\maxent.py'},
    'nltk.transform': {   'opt_args': [],
                          'req_args': ['sentence'],
                          'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'nltk.transitive_closure': {   'opt_args': ['reflexive'],
                                   'req_args': ['graph'],
                                   'source_file': 'nltk\\nltk\\util.py'},
    'nltk.tree2conllstr': {   'opt_args': [],
                              'req_args': ['t'],
                              'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.tree2conlltags': {   'opt_args': [],
                               'req_args': ['t'],
                               'source_file': 'nltk\\nltk\\chunk\\util.py'},
    'nltk.tree2semi_rel': {   'opt_args': [],
                              'req_args': ['tree'],
                              'source_file': 'nltk\\nltk\\sem\\relextract.py'},
    'nltk.tree_to_treesegment': {   'opt_args': [   'make_leaf',
                                                    'make_node',
                                                    'attribs'],
                                    'req_args': ['t', 'canvas'],
                                    'source_file': 'nltk\\nltk\\draw\\tree.py'},
    'nltk.treepositions_no_leaves': {   'opt_args': [],
                                        'req_args': ['tree'],
                                        'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.trigrams': {   'opt_args': ['kwargs'],
                         'req_args': ['sequence'],
                         'source_file': 'nltk\\nltk\\util.py'},
    'nltk.try_port': {   'opt_args': ['port'],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\parse\\corenlp.py'},
    'nltk.tuple2str': {   'opt_args': ['sep'],
                          'req_args': ['tagged_token'],
                          'source_file': 'nltk\\nltk\\tag\\util.py'},
    'nltk.tweets_by_user_demo': {   'opt_args': ['count', 'user'],
                                    'req_args': [],
                                    'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.twitterclass_demo': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.typecheck': {   'opt_args': ['signature'],
                          'req_args': ['expressions'],
                          'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.un_chomsky_normal_form': {   'opt_args': [   'unaryChar',
                                                       'parentChar',
                                                       'childChar',
                                                       'expandUnary'],
                                       'req_args': ['tree'],
                                       'source_file': 'nltk\\nltk\\tree\\transforms.py'},
    'nltk.unary_concept': {   'opt_args': [],
                              'req_args': ['records', 'subj', 'label'],
                              'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.unify': {   'opt_args': [   'fs_class',
                                      'rename_vars',
                                      'fail',
                                      'trace',
                                      'bindings'],
                      'req_args': ['fstruct2', 'fstruct1'],
                      'source_file': 'nltk\\nltk\\featstruct.py'},
    'nltk.unique_ancestors': {   'opt_args': [],
                                 'req_args': ['node'],
                                 'source_file': 'nltk\\nltk\\tgrep.py'},
    'nltk.unique_list': {   'opt_args': [],
                            'req_args': ['xs'],
                            'source_file': 'nltk\\nltk\\util.py'},
    'nltk.unique_names_demo': {   'opt_args': [],
                                  'req_args': [],
                                  'source_file': 'nltk\\nltk\\inference\\nonmonotonic.py'},
    'nltk.unique_variable': {   'opt_args': ['ignore', 'pattern'],
                                'req_args': [],
                                'source_file': 'nltk\\nltk\\sem\\logic.py'},
    'nltk.untag': {   'opt_args': [],
                      'req_args': ['tagged_sentence'],
                      'source_file': 'nltk\\nltk\\tag\\util.py'},
    'nltk.unweighted_minimum_spanning_dict': {   'opt_args': ['children'],
                                                 'req_args': ['tree'],
                                                 'source_file': 'nltk\\nltk\\util.py'},
    'nltk.unweighted_minimum_spanning_digraph': {   'opt_args': [   'attr',
                                                                    'shapes',
                                                                    'children'],
                                                    'req_args': ['tree'],
                                                    'source_file': 'nltk\\nltk\\util.py'},
    'nltk.unweighted_minimum_spanning_tree': {   'opt_args': ['children'],
                                                 'req_args': ['tree'],
                                                 'source_file': 'nltk\\nltk\\util.py'},
    'nltk.unzip': {   'opt_args': ['verbose'],
                      'req_args': ['root', 'filename'],
                      'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.update': {   'opt_args': [],
                       'req_args': [],
                       'source_file': 'nltk\\nltk\\downloader.py'},
    'nltk.update_wrapper': {   'opt_args': ['infodict'],
                               'req_args': ['model', 'wrapper'],
                               'source_file': 'nltk\\nltk\\decorators.py'},
    'nltk.upenn_tagset': {   'opt_args': ['tagpattern'],
                             'req_args': [],
                             'source_file': 'nltk\\nltk\\help.py'},
    'nltk.usage': {   'opt_args': [],
                      'req_args': [],
                      'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.val_dump': {   'opt_args': [],
                         'req_args': ['db', 'rels'],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.val_load': {   'opt_args': [],
                         'req_args': ['db'],
                         'source_file': 'nltk\\nltk\\sem\\chat80.py'},
    'nltk.verbose': {   'opt_args': [],
                        'req_args': ['func'],
                        'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.windowdiff': {   'opt_args': ['weighted', 'boundary'],
                           'req_args': ['k', 'seg2', 'seg1'],
                           'source_file': 'nltk\\nltk\\metrics\\segmentation.py'},
    'nltk.wnb': {   'opt_args': ['logfilename', 'runBrowser', 'port'],
                    'req_args': [],
                    'source_file': 'nltk\\nltk\\app\\wordnet_app.py'},
    'nltk.word_finder': {   'opt_args': [],
                            'req_args': [],
                            'source_file': 'nltk\\nltk\\misc\\wordfinder.py'},
    'nltk.word_rank_alignment': {   'opt_args': ['character_based'],
                                    'req_args': ['hypothesis', 'reference'],
                                    'source_file': 'nltk\\nltk\\translate\\ribes_score.py'},
    'nltk.word_tokenize': {   'opt_args': ['preserve_line', 'language'],
                              'req_args': ['text'],
                              'source_file': 'nltk\\nltk\\tokenize\\__init__.py'},
    'nltk.wordfinder': {   'opt_args': ['alph', 'attempts', 'cols', 'rows'],
                           'req_args': ['words'],
                           'source_file': 'nltk\\nltk\\misc\\wordfinder.py'},
    'nltk.wordnetsyn_match': {   'opt_args': ['wordnet'],
                                 'req_args': ['reference', 'hypothesis'],
                                 'source_file': 'nltk\\nltk\\translate\\meteor_score.py'},
    'nltk.write_megam_file': {   'opt_args': ['explicit', 'bernoulli'],
                                 'req_args': [   'stream',
                                                 'encoding',
                                                 'train_toks'],
                                 'source_file': 'nltk\\nltk\\classify\\megam.py'},
    'nltk.write_tadm_file': {   'opt_args': [],
                                'req_args': [   'stream',
                                                'encoding',
                                                'train_toks'],
                                'source_file': 'nltk\\nltk\\classify\\tadm.py'},
    'nltk.wsd_demo': {   'opt_args': ['n'],
                         'req_args': ['features', 'word', 'trainer'],
                         'source_file': 'nltk\\nltk\\classify\\util.py'},
    'nltk.wup_similarity': {   'opt_args': ['simulate_root', 'verbose'],
                               'req_args': ['synset2', 'synset1'],
                               'source_file': 'nltk\\nltk\\corpus\\reader\\wordnet.py'},
    'nltk.xml_escape': {   'opt_args': [],
                           'req_args': ['text'],
                           'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.xml_unescape': {   'opt_args': [],
                             'req_args': ['text'],
                             'source_file': 'nltk\\nltk\\tokenize\\util.py'},
    'nltk.xpath': {   'opt_args': [],
                      'req_args': ['ns', 'path', 'root'],
                      'source_file': 'nltk\\nltk\\corpus\\reader\\mte.py'},
    'nltk.yesterday': {   'opt_args': [],
                          'req_args': [],
                          'source_file': 'nltk\\nltk\\twitter\\twitter_demo.py'},
    'nltk.zen_chat': {   'opt_args': [],
                         'req_args': [],
                         'source_file': 'nltk\\nltk\\chat\\zen.py'}}
