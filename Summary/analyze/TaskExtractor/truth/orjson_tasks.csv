Paragraphs,Tasks
"orjson is a fast, correct JSON library for Python. It benchmarks as the fastest Python library for JSON and is more correct than the standard json library or other third-party libraries. It serializes dataclass, datetime, numpy, and UUID instances natively.","Serialize dataclass
serialize datetime
serialize numpy
serialize UUID instances"
Its features and drawbacks compared to other Python JSON libraries:,
"orjson supports CPython 3.7, 3.8, 3.9, and 3.10. It distributes x86_64/amd64 and aarch64/armv8 wheels for Linux and macOS. It distributes x86_64/amd64 wheels for Windows. orjson does not support PyPy. Releases follow semantic versioning and serializing a new object type without an opt-in flag is considered a breaking change.",Serialize a new object
"orjson is licensed under both the Apache 2.0 and MIT licenses. The repository and issue tracker is github.com/ijl/orjson, and patches may be submitted there. There is a CHANGELOG available in the repository.",
To install a wheel from PyPI:,Install wheel from PyPi
"To build a wheel, see packaging.",Build wheel
"This is an example of serializing, with options specified, and deserializing:","Serialize with specified options
Deserialize with specified options"
"orjson version 3 serializes more types than version 2. Subclasses of str, int, dict, and list are now serialized. This is faster and more similar to the standard library. It can be disabled with orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances are now serialized by default and cannot be customized in a default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is specified. uuid.UUID instances are serialized by default. For any type that is now serialized, implementations in a default function and options enabling them can be removed but do not need to be. There was no change in deserialization.",
"To migrate from the standard library, the largest difference is that orjson.dumps returns bytes and json.dumps returns a str. Users with dict objects using non-str keys should specify option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by option=orjson.OPT_SORT_KEYS. indent is replaced by option=orjson.OPT_INDENT_2 and other levels of indentation are not supported.",Migrate from standard library
dumps() serializes Python objects to JSON.,Serialize Python objects to JSON
"It natively serializes str, dict, list, tuple, int, float, bool, dataclasses.dataclass, typing.TypedDict, datetime.datetime, datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and None instances. It supports arbitrary types through default. It serializes subclasses of str, int, dict, list, dataclasses.dataclass, and enum.Enum. It does not serialize subclasses of tuple to avoid serializing namedtuple objects as arrays. To avoid serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.","Serialize str
Serialize dict
Serialize list
Serialize tuple
Serialize int
Serialize float
Serialize bool
Serialize dataclasses.dataclass
Serialize typing.TypedDict
Serialize datetime.datetime
Serialize datetime.date
Serialize datetime.time
Serialize uuid.UUID
Serialize numpy.ndarray
Serialize None
Serialize subclass of str
Serialize subclass of int
Serialize subclass of dict
Serialize subclass of list
Serialize subclass of dataclasses.dataclass
Serialize subclass of enum.Enum
Avoid serializing subclasses"
The output is a bytes object containing UTF-8.,
The global interpreter lock (GIL) is held for the duration of the call.,
"It raises JSONEncodeError on an unsupported type. This exception message describes the invalid object with the error message Type is not JSON serializable: .... To fix this, specify default.",
It raises JSONEncodeError on a str that contains invalid UTF-8.,
"It raises JSONEncodeError on an integer that exceeds 64 bits by default or, with OPT_STRICT_INTEGER, 53 bits.",
"It raises JSONEncodeError if a dict has a key of a type other than str, unless OPT_NON_STR_KEYS is specified.",
It raises JSONEncodeError if the output of default recurses to handling by default more than 254 levels deep.,
It raises JSONEncodeError on circular references.,
It raises JSONEncodeError if a tzinfo on a datetime object is unsupported.,
JSONEncodeError is a subclass of TypeError. This is for compatibility with the standard library.,
"To serialize a subclass or arbitrary types, specify default as a callable that returns a supported type. default may be a function, lambda, or callable class instance. To specify that a type was not handled by default, raise an exception such as TypeError.","Serialize subclass
Serialize arbitrary types
Specify type not handled by default"
The default callable may return an object that itself must be handled by default up to 254 times before an exception is raised.,
"It is important that default raise an exception if a type cannot be handled. Python otherwise implicitly returns None, which appears to the caller like a legitimate value and is serialized:",
"To modify how data is serialized, specify option. Each option is an integer constant in orjson. To specify multiple options, mask them together, e.g., option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.","Modify how data is serialized
Specify multiple options"
Append \n to the output. This is a convenience and optimization for the pattern of dumps(...) + \n. bytes objects are immutable and this pattern copies the original contents.,Append \n to output
Pretty-print output with an indent of two spaces. This is equivalent to indent=2 in the standard library. Pretty printing is slower and the output larger. orjson is the fastest compared library at pretty printing and has much less of a slowdown to pretty print than the standard library does. This option is compatible with all other options.,Pretty-print output
"If displayed, the indentation and linebreaks appear like this:",
This measures serializing the github.json fixture as compact (52KiB) or pretty (64KiB):,
"This measures serializing the citm_catalog.json fixture, more of a worst case due to the amount of nesting and newlines, as compact (489KiB) or pretty (1.1MiB):",
rapidjson is blank because it does not support pretty printing. This can be reproduced using the pyindent script.,
Serialize datetime.datetime objects without a tzinfo as UTC. This has no effect on datetime.datetime objects that have tzinfo set.,Serialize datetime.datetime without tzinfo as UTC
"Serialize dict keys of type other than str. This allows dict keys to be one of str, int, float, bool, None, datetime.datetime, datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison, the standard library serializes str, int, float, bool or None by default. orjson benchmarks as being faster at serializing non-str keys than other libraries. This option is slower for str keys than the default.",Serialize dict keys of type other than str
"These types are generally serialized how they would be as values, e.g., datetime.datetime is still an RFC 3339 string and respects options affecting it. The exception is that int serialization does not respect OPT_STRICT_INTEGER.",
"This option has the risk of creating duplicate keys. This is because non-str objects may serialize to the same str as an existing key, e.g., {1: true, 1: false}. The last key to be inserted to the dict will be serialized last and a JSON deserializer will presumably take the last occurrence of a key (in the above, false). The first value will be lost.",
"This option is compatible with orjson.OPT_SORT_KEYS. If sorting is used, note the sort is unstable and will be unpredictable for duplicate keys.", 
"This measures serializing 589KiB of JSON comprising a list of 100 dict in which each dict has both 365 randomly-sorted int keys representing epoch timestamps as well as one str key and the value for each key is a single integer. In str keys, the keys were converted to str before serialization, and orjson still specifes option=orjson.OPT_NON_STR_KEYS (which is always somewhat slower).", 
ujson is blank for sorting because it segfaults. json is blank because it raises TypeError on attempting to sort before converting all keys to str. rapidjson is blank because it does not support non-str keys. This can be reproduced using the pynonstr script.,
Do not serialize the microsecond field on datetime.datetime and datetime.time instances.,
Passthrough dataclasses.dataclass instances to default. This allows customizing their output but is much slower.,"Passthrough dataclasses.dataclass
Customize output "
"Passthrough datetime.datetime, datetime.date, and datetime.time instances to default. This allows serializing datetimes to a custom format, e.g., HTTP dates:",Serialize datetimes to custom format
This does not affect datetimes in dict keys if using OPT_NON_STR_KEYS.,
Passthrough subclasses of builtin types to default.,
This does not affect serializing subclasses as dict keys if using OPT_NON_STR_KEYS.,
"This is deprecated and has no effect in version 3. In version 2 this was required to serialize dataclasses.dataclass instances. For more, see dataclass.",
"Serialize numpy.ndarray instances. For more, see numpy.",Serialize numpy.ndarray instance
"This is deprecated and has no effect in version 3. In version 2 this was required to serialize uuid.UUID instances. For more, see UUID.",Serialize uuid.UUID
Serialize dict keys in sorted order. The default is to serialize in an unspecified order. This is equivalent to sort_keys=True in the standard library.,Serialize dict keys
This can be used to ensure the order is deterministic for hashing or tests. It has a substantial performance penalty and is not recommended in general.,
This measures serializing the twitter.json fixture unsorted and sorted:,Serialize twitter.json
The benchmark can be reproduced using the pysort script.,
The sorting is not collation/locale-aware:,
"This is the same sorting behavior as the standard library, rapidjson, simplejson, and ujson.",
dataclass also serialize as maps but this has no effect on them.,
"Enforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as the Python standard library. For more, see int.",Enforce integer limit
Serialize a UTC timezone on datetime.datetime instances as Z instead of +00:00.,Serialize UTC timezone on datetime.datetime instance
"loads() deserializes JSON to Python objects. It deserializes to dict, list, int, float, str, bool, and None objects.",Deserialize JSON to Python objects
"bytes, bytearray, memoryview, and str input are accepted. If the input exists as a memoryview, bytearray, or bytes object, it is recommended to pass these directly rather than creating an unnecessary str object. This has lower memory usage and lower latency.",
The input must be valid UTF-8.,
orjson maintains a cache of map keys for the duration of the process. This causes a net reduction in memory usage by avoiding duplicate strings. The keys must be at most 64 bytes to be cached and 512 entries are stored.,
The global interpreter lock (GIL) is held for the duration of the call.,
"It raises JSONDecodeError if given an invalid type or invalid JSON. This includes if the input contains NaN, Infinity, or -Infinity, which the standard library allows, but is not valid JSON.",
JSONDecodeError is a subclass of json.JSONDecodeError and ValueError. This is for compatibility with the standard library.,
orjson serializes instances of dataclasses.dataclass natively. It serializes instances 40-50x as fast as other libraries and avoids a severe slowdown seen in other libraries compared to serializing dict.,Serialize dataclasses.dataclass natively
"It is supported to pass all variants of dataclasses, including dataclasses using __slots__, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using __slots__.", 
"This measures serializing 555KiB of JSON, orjson natively and other libraries using default to serialize the output of dataclasses.asdict(). This can be reproduced using the pydataclass script.",Serialize dataclasses.asdict()
"Dataclasses are serialized as maps, with every attribute serialized and in the order given on class definition:",Serialize Dataclasses as maps
"Users may wish to control how dataclass instances are serialized, e.g., to not serialize an attribute or to change the name of an attribute when serialized. orjson may implement support using the metadata mapping on field attributes, e.g., field(metadata={json_serialize: False}), if use cases are clear.","Control dataclass instance serialization 
Change attribute name when serialized"
"orjson serializes datetime.datetime objects to RFC 3339 format, e.g., 1970-01-01T00:00:00+00:00. This is a subset of ISO 8601 and compatible with isoformat() in the standard library.",
"datetime.datetime supports instances with a tzinfo that is None, datetime.timezone.utc, a timezone instance from the python3.9+ zoneinfo module, or a timezone instance from the third-party pendulum, pytz, or dateutil/arrow libraries.",
datetime.time objects must not have a tzinfo.,
datetime.date objects will always serialize.,
Errors with tzinfo result in JSONEncodeError being raised.,
"It is faster to have orjson serialize datetime objects than to do so before calling dumps(). If using an unsupported type such as pendulum.datetime, use default.",
To disable serialization of datetime objects specify the option orjson.OPT_PASSTHROUGH_DATETIME.,Disable serialization of datetime objects
"To use Z suffix instead of +00:00 to indicate UTC (Zulu) time, use the option orjson.OPT_UTC_Z.",Use Z suffix instead of +00:00
"To assume datetimes without timezone are UTC, se the option orjson.OPT_NAIVE_UTC.",Assume datetimes without timezone are UTC
orjson serializes enums natively. Options apply to their values.,Serialize enums natively
Enums with members that are not supported types can be serialized using default:,
"orjson serializes and deserializes double precision floats with no loss of precision and consistent rounding. The same behavior is observed in rapidjson, simplejson, and json. ujson 1.35 was inaccurate in both serialization and deserialization, i.e., it modifies the data, and the recent 2.0 release is accurate.",
"orjson.dumps() serializes Nan, Infinity, and -Infinity, which are not compliant JSON, as null:",
"orjson serializes and deserializes 64-bit integers by default. The range supported is a signed 64-bit integer's minimum (-9223372036854775807) to an unsigned 64-bit integer's maximum (18446744073709551615). This is widely compatible, but there are implementations that only support 53-bits for integers, e.g., web browsers. For those implementations, dumps() can be configured to raise a JSONEncodeError on values exceeding the 53-bit range.", 
"orjson natively serializes numpy.ndarray and individual numpy.float64, numpy.float32, numpy.int64, numpy.int32, numpy.int8, numpy.uint64, numpy.uint32, numpy.uint8, numpy.uintp, or numpy.intp, and numpy.datetime64 instances.","Serialize numpy.ndarray
Serialize individual numpy.float64
Serialize numpy.float32
Serialize numpy.int64
Serialize numpy.int32
Serialize numpy.int8
Serialize numpy.uint64
Serialize numpy.uint32
Serialize numpy.uint8
Serialize numpy.uintp
Serialize numpy.intp
Serialize numpy.datetime64 instances"
orjson is faster than all compared libraries at serializing numpy instances. Serializing numpy data requires specifying option=orjson.OPT_SERIALIZE_NUMPY.,
The array must be a contiguous C array (C_CONTIGUOUS) and one of the supported datatypes.,
numpy.datetime64 instances are serialized as RFC 3339 strings and datetime options affect them.,
"If an array is not a contiguous C array, contains an supported datatype, or contains a numpy.datetime64 using an unsupported representation (e.g., picoseconds), orjson falls through to default. In default, obj.tolist() can be specified. If an array is malformed, which is not expected, orjson.JSONEncodeError is raised.",
"This measures serializing 92MiB of JSON from an numpy.ndarray with dimensions of (50000, 100) and numpy.float64 values:",Serialize numpy.ndarray
"This measures serializing 100MiB of JSON from an numpy.ndarray with dimensions of (100000, 100) and numpy.int32 values:",Serialize numpy.ndarray
"This measures serializing 105MiB of JSON from an numpy.ndarray with dimensions of (100000, 200) and numpy.bool values:",Serialize numpy.ndarray
"In these benchmarks, orjson serializes natively, ujson is blank because it does not support a default parameter, and the other libraries serialize ndarray.tolist() via default. The RSS column measures peak memory usage during serialization. This can be reproduced using the pynumpy script.",
"orjson does not have an installation or compilation dependency on numpy. The implementation is independent, reading numpy.ndarray using PyArrayInterface.",
"orjson is strict about UTF-8 conformance. This is stricter than the standard library's json module, which will serialize and deserialize UTF-16 surrogates, e.g., \ud800, that are invalid UTF-8.",
"If orjson.dumps() is given a str that does not contain valid UTF-8, orjson.JSONEncodeError is raised. If loads() receives invalid UTF-8, orjson.JSONDecodeError is raised.",
orjson and rapidjson are the only compared JSON libraries to consistently error on bad input.,
"To make a best effort at deserializing bad input, first decode bytes using the replace or lossy argument for errors:",Deserialize bad input
"orjson serializes uuid.UUID instances to RFC 4122 format, e.g., ""f81d4fae-7dec-11d0-a765-00a0c91e6bf6"".",
The library has comprehensive tests. There are tests against fixtures in the JSONTestSuite and nativejson-benchmark repositories. It is tested to not crash against the Big List of Naughty Strings. It is tested to not leak memory. It is tested to not crash against and not accept invalid UTF-8. There are integration tests exercising the library's use in web servers (gunicorn using multiprocess/forked workers) and when multithreaded. It also uses some tests from the ultrajson library.,
orjson is the most correct of the compared libraries. This graph shows how each library handles a combined 342 JSON fixtures from the JSONTestSuite and nativejson-benchmark tests:,
This shows that all libraries deserialize valid JSON but only orjson correctly rejects the given invalid JSON fixtures. Errors are largely due to accepting invalid strings and numbers.,
The graph above can be reproduced using the pycorrectness script.,
"Serialization and deserialization performance of orjson is better than ultrajson, rapidjson, simplejson, or json. The benchmarks are done on fixtures of real data:",
"twitter.json, 631.5KiB, results of a search on Twitter for 一, containing CJK strings, dictionaries of strings and arrays of dictionaries, indented.",
"github.json, 55.8KiB, a GitHub activity feed, containing dictionaries of strings and arrays of dictionaries, not indented.",
"citm_catalog.json, 1.7MiB, concert data, containing nested dictionaries of strings and arrays of integers, indented.",
"canada.json, 2.2MiB, coordinates of the Canadian border in GeoJSON format, containing floats and arrays, indented.",
orjson's memory usage when deserializing is similar to or lower than the standard library and other third-party libraries.,
"This measures, in the first column, RSS after importing a library and reading the fixture, and in the second column, increases in RSS after repeatedly calling loads() on the fixture.",
"The above was measured using Python 3.8.3 on Linux (x86_64) with orjson 3.3.0, ujson 3.0.0, python-rapidson 0.9.1, and simplejson 3.17.2.",
The latency results can be reproduced using the pybench and graph scripts. The memory results can be reproduced using the pymem script.,
Probably pip needs to be upgraded to version 20.3 or later to support the latest manylinux_x_y or universal2 wheel formats.,
No. This requires a schema specifying what types are expected and how to handle errors etc. This is addressed by data validation libraries a level above this.,
No. bytes is the correct type for a serialized blob.,
If someone implements it well.,
To package orjson requires Rust and the maturin build tool.,
This is an example for x86_64 on the Rust nightly channel:,
"To build on the stable channel, do not specify --features=unstable-simd.", 
The project's own CI tests against nightly-2021-08-17 and stable 1.54. It is prudent to pin the nightly version because that channel can introduce breaking changes.,
orjson is tested for amd64 and aarch64 on Linux and amd64 on macOS and Windows. It may not work on 32-bit targets.,
There are no runtime dependencies other than libc.,
orjson's tests are included in the source distribution on PyPI. The requirements to run the tests are specified in test/requirements.txt. The tests should be run as part of the build. It can be run with pytest -q test.,
"orjson was written by ijl <ijl@mailbox.org>, copyright 2018 - 2021, licensed under both the Apache 2 and MIT licenses.",
