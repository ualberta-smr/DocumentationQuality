Paragraph,Tasks
image credit: Ismael PÃ©rez Ortiz,
Click here if you just want the latest release jar file.,
JSON is a light-weight language-independent data interchange format.,
The JSON-Java package is a reference implementation that demonstrates how to parse JSON documents into Java objects and how to generate new JSON documents from the Java classes.,"Parse JSON documents into Java objects
Generate new JSON documents from Java classes"
Project goals include:,
"The files in this package implement JSON encoders and decoders. The package can also convert between JSON and XML, HTTP headers, Cookies, and CDL.","Convert between JSON and XML
Convert between JSON and HTTP Headers
Convert between JSON and Cookies
Convert between JSON and CDL"
"The license includes this restriction: The software shall be used for good, not evil. If your conscience cannot live with that, then choose a different package.",
If you would like to contribute to this project,
"Bug fixes, code improvements, and unit test coverage changes are welcome! Because this project is currently in the maintenance phase, the kinds of changes that can be accepted are limited. For more information, please read the FAQ.",
"The org.json package can be built from the command line, Maven, and Gradle. The unit tests can be executed from Maven, Gradle, or individually in an IDE e.g. Eclipse.","Build from command line
Build from Maven
Build from Gradle
Execute unit tests from Maven
Execute unit tests from Gradle
Execute unit tests from IDE"
Building from the command line,Build from the command line
Build the class files from the package root directory src/main/java,Build the class files
Create the jar file in the current directory,Create the jar file in the current directory
Compile a program that uses the jar (see example code below),
Test file contents,
Execute the Test file,
Expected output,
Tools to build the package and execute the unit tests,"Build the package
Execute unit tests"
Execute the test suite with Maven:,
Execute the test suite with Gradlew:,
Recent directory structure change,
"Due to a recent commit - #515 Merge tests and pom and code - the structure of the project has changed from a flat directory containing all of the Java files to a directory structure that includes unit tests and several tools used to build the project jar and run the unit tests. If you have difficulty using the new structure, please open an issue so we can work through it.", 
Implementation notes,
"Numeric types in this package comply with ECMA-404: The JSON Data Interchange Format and RFC 8259: The JavaScript Object Notation (JSON) Data Interchange Format. This package fully supports Integer, Long, and Double Java types. Partial support for BigInteger and BigDecimal values in JSONObject and JSONArray objects is provided in the form of get(), opt(), and put() API methods.",
"Although 1.6 compatibility is currently supported, it is not a project goal and might be removed in some future release.",
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading JSON Text strings, but when output by the Generator, the tab is properly converted to \t in the string. Other instances may occur where reading invalid JSON text does not cause an error to be generated. Malformed JSON Texts such as missing end  (quote) on strings or invalid number formats (1.2e6.3) will cause errors as such documents can not be read reliably.",
Some notable exceptions that the JSON Parser in this library accepts are:,
Recent pull requests added a new method putAll on the JSONArray. The putAll method works similarly to other put methods in that it does not call JSONObject.wrap for items added. This can lead to inconsistent object representation in JSONArray structures.,
"For example, code like this will create a mixed JSONArray, some items wrapped, others not:",Create mixed JSONArray
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.",
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.",
Option 1:,
Option 2:,
Unit Test Conventions,
"Test filenames should consist of the name of the module being tested, with the suffix Test. For example, Cookie.java is tested by CookieTest.java.",
The fundamental issues with JSON-Java testing are:,
General issues with unit testing are:,
"JSONObject.java: The JSONObject can parse text from a String or a JSONTokener to produce a map-like object. The object provides methods for manipulating its contents, and for producing a JSON compliant object serialization.","Parse string
Parse JSONTokener
Produce map-like object"
"JSONArray.java: The JSONArray can parse text from a String or a JSONTokener to produce a vector-like object. The object provides methods for manipulating its contents, and for producing a JSON compliant array serialization.","Parse String
Parse JSONTokener
Produce Vector-like object"
"JSONTokener.java: The JSONTokener breaks a text into a sequence of individual tokens. It can be constructed from a String, Reader, or InputStream. It also can parse text from a String, Number, Boolean or null like hello, 42, true, null to produce a simple json object.","Break text into sequence of tokens
Parse String 
Parse Number
Parse Boolean
Parse null "
JSONException.java: The JSONException is the standard exception type thrown by this package.,
JSONPointer.java: Implementation of JSON Pointer (RFC 6901). Supports JSON Pointers both in the form of string representation and URI fragment representation.,
"JSONPropertyIgnore.java: Annotation class that can be used on Java Bean getter methods. When used on a bean method that would normally be serialized into a JSONObject, it overrides the getter-to-key-name logic and forces the property to be excluded from the resulting JSONObject.",Use Annotation class on Java Bean getter methods
"JSONPropertyName.java: Annotation class that can be used on Java Bean getter methods. When used on a bean method that would normally be serialized into a JSONObject, it overrides the getter-to-key-name logic and uses the value of the annotation. The Bean processor will look through the class hierarchy. This means you can use the annotation on a base class or interface and the value of the annotation will be used even if the getter is overridden in a child class.",Use Annotation class on Java Bean getter methods
"JSONString.java: The JSONString interface requires a toJSONString method, allowing an object to provide its own serialization.",Provide own serialization
JSONStringer.java: The JSONStringer provides a convenient facility for building JSON strings.,Build JSON strings
JSONWriter.java: The JSONWriter provides a convenient facility for building JSON text through a writer.,Build JSON text through a writer
CDL.java: CDL provides support for converting between JSON and comma delimited lists.,Convert between JSON and comma delimited lists
Cookie.java: Cookie provides support for converting between JSON and cookies.,Convert between JSON and cookies
CookieList.java: CookieList provides support for converting between JSON and cookie lists.,Convert between JSON and cookie lists
HTTP.java: HTTP provides support for converting between JSON and HTTP headers.,Convert between JSON and HTTP headers
HTTPTokener.java: HTTPTokener extends JSONTokener for parsing HTTP headers.,Parse HTTP headers
XML.java: XML provides support for converting between JSON and XML.,Convert between JSON and XML
JSONML.java: JSONML provides support for converting between JSONML and XML.,Covert between JSONML and XML
XMLTokener.java: XMLTokener extends JSONTokener for parsing XML text.,Parse XML text
JSON-java releases can be found by searching the Maven repository for groupId org.json and artifactId json. For example: https://search.maven.org/search?q=g:org.json%20AND%20a:json&core=gav,
