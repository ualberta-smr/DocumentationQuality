"Paragraph","Tasks"
"The neural models for English, French, German, and Spanish have been retrained with UD 2.0 dependencies, this will change several labels for the dependency parses. Info about UD 2.0 can be found here.","change several labels for dependency parses"
"Annotators, models, and rules for English, French, German, and Spanish now work with UD 2.0 tokenization by default. This includes models for tagging, parsing, named entity recognition (with an important exception), and KBP relation extraction. For example, the English tokenizer now splits most hyphenated tokens, does not normalize parentheses (e.g. turn ( into -LRB-), and does not normalize quotation marks.","include KBP relation extraction for tagging
include models for tagging
split hyphenated tokens"
"A specialized tokenization that is mostly the UD 2.0 version is used for named entity recognition (see below).","use specialized tokenization for named entity recognition"
"The tokenization process for these languages has been designed to maximize F1 on dev/test sets from the CoNLL 2018 shared task, similar to Stanza.","design tokenization process for languages"
"A complication is that the UD 2.0 standard for English and German says to split tokens on hyphen, but this can lead to diminished performance. Consider the example of double barrel names such as Daniel Day-Lewis or hyphenated place names such as Bergen-Enkheim. It was found that splitting on hyphen dropped F1 score, so the hyphen splitting is mostly deactivated for named entity recognition. The only exceptions are the following key words: based, area, registered, headquartered, native, born, raised, backed, controlled, owned, resident, trained, educated. So Chicago-based WILL be split into Chicago - based to allow for the token Chicago to be recognized as a CITY.","split tokens on hyphen
deactivate hyphen splitting for named entity recognition
split chicago-based WILL into chicago
recognize  as CITY"
"The NERAnnotator by default takes in UD 2.0 tokens, and then merges all tokens that were originally joined by a hyphen in the text (except for cases like Chicago-based). The model is run on the modified tokens list, and the labels are finally applied to the original UD 2.0 tokens. This behavior can be turned off by setting ner.useNERSpecificTokenization to false.","run model on modified tokens list
set ner.useNERSpecificTokenization to false"
"Related to the tokenization change, French, German, and Spanish now require the use of the MWTAnnotator which splits some tokens into multiple words with rules and statistical models. For instance the French token “des” is sometimes split into the words “de” and “les”.","split tokens into multiple words
split MWTAnnotator into multiple words
split French token des into words
split French token des for instance"
"Some multi-word token splitting for these languages used to occur in the tokenize annotator, but now this annotator focuses on creating tokens, and the mwt annotator is used to make token splitting decisions, sometimes via a dictionary and other times via a statistical model.","create tokens
use mwt annotator"
"These languages require the mwt annotator be run immediately after the ssplit annotator.","run mwt annotator after ssplit annotator"
"The ner, coref, and quote annotators will run some of the annotators themselves as sub-annotators. This means for instance that the ner annotator will run a combination of CRF classifiers (adding ner tags to tokens), then the TokensRegex based regexner to produce fine-grained annotations (“LOCATION” -> “COUNTRY”), and then finally it will annotate the full entity mentions (“Joe”, “Smith” –> “Joe Smith”) with its internal entitymentions annotator.","run  as sub-annotators
run combination of CRF classifiers
produce fine-grained annotations"
"You can run the ner annotator without the additional annotators with these options","run ner annotator without additional annotators"
"If you wish to set parameters for the ner annotator’s internal regexner annotator set ner.fine.regexner properties. For instance:","set parameters for internal regexner annotator
set ner.fine.regexner properties"
"Likewise to set the ner annotator’s internal entitymentions annotator, set ner.entitymentions properties. For instance:","set internal entitymentions annotator
set ner.entitymentions properties"
"And for quote annotation, quote attribution can be deactivated with","deactivate quote attribution for quote annotation"
