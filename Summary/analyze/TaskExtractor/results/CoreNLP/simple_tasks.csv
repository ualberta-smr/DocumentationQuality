"Paragraph","Tasks"
"In addition to the fully-featured annotator pipeline interface to CoreNLP, Stanford provides a simple API for users who do not need a lot of customization. The intended audience of this package is users of CoreNLP who want “import nlp” to work as fast and easily as possible, and do not care about the details of the behaviors of the algorithms.","provide simple API for users
provide simple API in_addition_to fully-featured annotator pipeline interface"
"The API is included in the CoreNLP release from 3.6.0 onwards. Visit the download page to download CoreNLP; make sure to include both the code jar and the models jar in your classpath!","include API in CoreNLP release
include API from 3.6.0 onwards
download corenlp
include code jar in classpath
include models jar in classpath"
"This interface offers a number of advantages (and a few disadvantages – see below) over the default annotator pipeline:","offer number of advantages"
"Lazy Computation Annotations are run as needed only when requested. This allows you to “change your mind” later in a program and request new annotations.","run lazy Computation annotations
change mind in program
request new annotations"
"No NullPointerExceptions Lazy computation allows us to ensure that no function will ever return null. Items which may not exist are wrapped inside of an Optional to clearly mark that they may be empty.","return null
wrap items inside_of optional"
"Less Customizability Although the ability to pass properties to annotators is supported, it is significantly more clunky than the annotation pipeline interface, and is generally discouraged.","pass properties to annotators
support ability"
"Possible Nondeterminism There is no guarantee that the same algorithm will be used to compute the requested function on each invocation. For example, if a dependency parse is requested, followed by a constituency parse, we will compute the dependency parse with the Neural Dependency Parser, and then use the Stanford Parser for the constituency parse. If, however, you request the constituency parse before the dependency parse, we will use the Stanford Parser for both.","compute requested function on invocation
use same algorithm
compute dependency parse with neural Dependency parser
use stanford Parser for constituency parse
request dependency parse
request constituency parse before dependency parse
use Stanford parser"
"There are two main classes in the interface: Document and Sentence. Tokens are represented as array elements in a sentence; e.g., to get the lemma of a token, get the lemmas array from the sentence and index it at the appropriate index. A constructor is provided for both the Document and Sentence class. For the former, the text is treated as an entire document containing potentially multiple sentences. For the latter, the text is forced to be interpreted as a single sentence.","get lemma
get  at appropriate index
provide constructor for sentence class
force text for latter"
"An example program using the interface is given below:","use interface"
"The interface is not guaranteed to support all of the annotators in the CoreNLP pipeline. However, most common annotators are supported. A list of these, and their invocation, is given below. Functionality is the plain-english description of the task to be performed. The second column lists the analogous CoreNLP annotator for that task. The implementing class and function describe the class and function used in this wrapper to perform the same tasks.","support common annotators
perform same tasks
use  in wrapper"
"Some potentially useful utility functions are implemented in the SentenceAlgorithms class. These can be called from a Sentence object with, e.g.:","call  from sentence object"
"headOfSpan(Span) Finds the index of the head word of the given span. So, for example, United States president Barack Obama would return Obama.","return obama"
"dependencyPathBetween(int, int) Returns the dependency path between the words at the given two indices. This is returned as a list of String objects, meant primarily as an input to a featurizer.","return  as list"
