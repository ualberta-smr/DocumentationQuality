"Paragraph","Tasks"
"Below is a quick snippet of code that demonstrates running a full pipeline on some sample text. It requires the english and english-kbp models jars which contain essential resources.","run full pipeline on sample text"
"It uses new wrapper classes that have been developed for Stanford CoreNLP 3.9.0 to make it easier to work with annotations.","use new wrapper classes
develop new wrapper classes for Stanford CoreNLP 3.9.0"
"The backbone of the CoreNLP package is formed by two classes: Annotation and Annotator. Annotations are the data structure which hold the results of annotators. Annotations are basically maps, from keys to bits of the annotation, such as the parse, the part-of-speech tags, or named entity tags. Annotators are a lot like functions, except that they operate over Annotations instead of Objects. They do things like tokenize, parse, or NER tag sentences. Annotators and Annotations are integrated by AnnotationPipelines, which create sequences of generic Annotators. Stanford CoreNLP inherits from the AnnotationPipeline class, and is customized with NLP Annotators.","create sequences of generic annotators
create AnnotationPipelines of generic annotators
integrate annotators
integrate Annotations
inherit  from AnnotationPipeline class"
"To construct a Stanford CoreNLP object from a given set of properties, use StanfordCoreNLP(Properties props). This method creates the pipeline using the annotators given in the “annotators” property (see below for an example setting). The complete list of accepted annotator names is listed in the first column of the table here. To parse an arbitrary text, use the annotate(Annotation document) method.","create pipeline
use annotators
parse arbitrary text
use annotate(Annotation document) method"
"You can give other properties to CoreNLP by building a Properties object with more stuff in it. There are some overall properties like ""annotators"" but most properties apply to one annotator and are written as annotator.property. Note that the value of a property is always a String. In our documentation of individual annotators, we variously refer to their Type as “boolean”, “file, classpath, or URL” or “List(String)”. This means that the String value will be interpreted as objects of this type by using String parsing methods. The value itself in the Properties object is always a String. If you want to set several properties, you might find it conventient to use our PropertiesUtils.asProperties(String ...) method which will take a list of Strings that are alternately keys and values and build a Properties object:","build Properties object with more stuff
write most properties as annotator.property
use String parsing methods
set several properties
use PropertiesUtils.asProperties(String ...) method
build Properties object
build PropertiesUtils.asProperties(String ...) method"
"If you do not anticipate requiring extensive customization, consider using the Simple CoreNLP API.","use simple CoreNLP API"
"If you want to do funkier things with CoreNLP, such as to use a second StanfordCoreNLP object to add additional analyses to an existing Annotation object, then you need to include the property enforceRequirements = false to avoid complaints about required earlier annotators not being present in the pipeline.","use second StanfordCoreNLP object
add additional analyses to existing annotation object"
"The output of the Annotators is accessed using the data structures CoreMap and CoreLabel.","use data structures CoreMap
use CoreLabel
access output of Annotators"
