"Paragraph","Tasks"
"There are two strategies available to address this that may help. One is to try to first correctly capitalize the text with a truecaser, and then to process the text with the standard models. See the TrueCaseAnnotator for how to do this.","process text with standard models"
"An example command for using regular annotators following truecasing is:","use regular annotators following truecasing"
"The GATE folk made an English POS tagger model trained on twitter text. You can get it from the extensions page.","get  from extensions page"
"We have made slightly different Stanford CoreNLP models for the tagger, parser, and NER that ignore capitalization. We have only trained such models for English, but the same method could be used for other languages.","ignore capitalization
ignore tagger
ignore NER
ignore parser
use same method for other languages"
"To use these models, you need to download a jar file with caseless models. Prior to version 3.6, caseless models were packaged separately as their own jar file (approximately treating “caseless English” like a separate language). Starting with version 3.6, caseless models for English are included in the new comprehensive english jar file. You can find these jar files on the Release history page.","use models
download jar file with caseless models
include caseless models in new comprehensive english jar file
include caseless models for English"
"Be sure to include the path to the case-insensitive models jar in the -cp classpath flag and then you can ask for these models to be used like this:","include path to case-insensitive models jar
ask  for models"
"However, if we ask to use the caseless models, then we’re doing pretty well: All the name words are now recognized as proper nouns, and the two person names are recognized. However, the team name is still missed. Correct named entity recognition is just harder for caseless English than for well-edited English!","use caseless models
recognize name words as proper nouns
recognize person names"
"To train your own caseless models, you need one additional property, which asks for a function to be called before a token is processed which leads to the case of all words being ignored. We use by default a function that also Americanizes the spelling of certain words:","ask additional property for function
use spelling by default
use spelling of certain words"
"The caseless NER model edu/stanford/nlp/models/ner/english.all.3class.caseless.distsim.crf.ser.gz released with version 3.6.0 was defective and has very poor performance. Sorry! Stuff happens. If you want good caseless NER, you should either run with caseless models from a 3.5.x series release (all of which are compatible with version 3.6.0) or download the new fixed model from version 3.7.0 or a later version. Since the version 3.5.x releases have a separate caseless jar, it is easy to also specify an additional jar as a dependency; you just have to make sure that it appears on your classpath before other jars which contain models with the same name.","release  with version 3.6.0
download new fixed model from later version
download new fixed model from version 3.7.0
run  with caseless models
run  from 3.5.x series release
specify additional jar as dependency"
