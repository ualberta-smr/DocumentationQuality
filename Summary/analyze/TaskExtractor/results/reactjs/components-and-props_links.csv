Paragraph,Example,Page
The simplest way to define a component is to write a JavaScript function:,"function Welcome(props) {
  return <h1>Hello, {props.name}h1>;
}",https://reactjs.org/docs/components-and-props.html
You can also use an ES6 class to define a component:,"class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}h1>;
  }
}",https://reactjs.org/docs/components-and-props.html
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function Welcome(props) {  return <h1>Hello, {props.name}h1>;
}

const root = ReactDOM.createRoot(document.getElementById('root'));
const element = <Welcome name=""Sara"" />;root.render(element);",https://reactjs.org/docs/components-and-props.html
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function Welcome(props) {
  return <h1>Hello, {props.name}h1>;
}

function App() {
  return (
    <div>
      <Welcome name=""Sara"" />      <Welcome name=""Cahal"" />      <Welcome name=""Edite"" />    div>
  );
}",https://reactjs.org/docs/components-and-props.html
Don’t be afraid to split components into smaller components.,"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <img className=""Avatar""
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className=""UserInfo-name"">
          {props.author.name}
        div>
      div>
      <div className=""Comment-text"">
        {props.text}
      div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      div>
    div>
  );
}",https://reactjs.org/docs/components-and-props.html
Don’t be afraid to split components into smaller components.,"function Avatar(props) {
  return (
    <img className=""Avatar""      src={props.user.avatarUrl}      alt={props.user.name}    />  );
}",https://reactjs.org/docs/components-and-props.html
We recommend naming props from the component’s own point of view rather than the context in which it is being used.,"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <Avatar user={props.author} />        <div className=""UserInfo-name"">
          {props.author.name}
        div>
      div>
      <div className=""Comment-text"">
        {props.text}
      div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      div>
    div>
  );
}",https://reactjs.org/docs/components-and-props.html
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function UserInfo(props) {
  return (
    <div className=""UserInfo"">      <Avatar user={props.user} />      <div className=""UserInfo-name"">        {props.user.name}      div>    div>  );
}",https://reactjs.org/docs/components-and-props.html
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function Comment(props) {
  return (
    <div className=""Comment"">
      <UserInfo user={props.author} />      <div className=""Comment-text"">
        {props.text}
      div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      div>
    div>
  );
}",https://reactjs.org/docs/components-and-props.html
"Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.","function withdraw(account, amount) {
  account.total -= amount;
}",https://reactjs.org/docs/components-and-props.html
