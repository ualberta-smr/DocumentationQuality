Example,Truth functions,Test functions,Linked functions,Source
"new jBinary(data, typeSet)",['jBinary'],['jBinary'],['jBinary']
"var b1 = new jBinary([0x05, 0x03, 0x7F, 0x1E]); // with default typeset
var b2 = new jBinary(new jDataView(data, 5, 10, true), {
  MetaName: ['string', 30]
}); // with custom jDataView instance on data and typeset with custom type MetaName.
var b3 = new jBinary(1024, typeSet); // jBinary on empty pre-allocated 1KB buffer with typeSet defined in variable",['jBinary'],['N/A'],[]
"read(type, offset = binary.tell())",['read'],"['N/A', 'proto.tell']",[]
readAll(),['readAll'],['N/A'],[]
"write(type, data, offset = binary.tell())",['write'],"['N/A', 'proto.tell']",[]
writeAll(data),['writeAll'],['N/A'],[]
tell(),['tell'],['N/A'],[]
"seek(position[, callback])",['seek'],['N/A'],[]
"skip(count[, callback])",['skip'],['N/A'],[]
"slice(start, end, forceCopy = false)",['slice'],['N/A'],[]
"as(typeSet, modifyOriginal = false)",['as'],['N/A'],[]
var currentPos = binary.tell();,['tell'],['proto.tell'],[]
var binary = someExternalBinary.as(TAR); // casting external jBinary instance with no or with irrelevant typeset to TAR typeSet object (any operations including both data and pointer manipulations will affect both instances).,['as'],['proto.as'],[]
getType(type),['getType'],['N/A'],[]
getContext(filter),['getContext'],['N/A'],[]
"inContext(newContext, callback)",['inContext'],['N/A'],[]
"// Example:
var currentContext = binary.getContext(); // current object that value belongs to
var parentContext = binary.getContext(1); // one level up
var contextWithID = binary.getContext('id'); // first context with ""id"" property (bubbling up)
var contextWithID1 = binary.getContext(function (context) { return context.id === 1 }); // first context that matches custom condition",['getContext'],"['proto.getContext', 'proto.getContext', 'proto.getContext']",[]
"var fs = require('fs');
var jBinary = require('jbinary');
var typeSet = {
  magic: ['array', 'uint8', 4]
};

jBinary.load('file.bin', typeSet, function (err, binary) {
  console.log(binary.read('magic'));
});",['load'],"['N/A', 'N/A', 'N/A', 'proto.read']",[]
"<script src=""//jdataview.github.io/dist/jdataview.js"">script>
<script src=""//jdataview.github.io/dist/jbinary.js"">script>

<script>
var typeSet = {
  magic: ['array', 'uint8', 4]
};

jBinary.load('file.bin', typeSet, function (err, binary) {
  console.log(binary.read('magic'));
});
script>",['load'],"['N/A', 'N/A', 'proto.read']",[]
"// somewhere in config:
require.config({
  paths: {
    jdataview: '//jdataview.github.io/dist/jdataview.js',
    jbinary: '//jdataview.github.io/dist/jbinary.js',
  }
});

// ...

// in code:
require(['jbinary'], function (jBinary) {
  var typeSet = {
    magic: ['array', 'uint8', 4]
  };

  jBinary.load('file.bin', typeSet, function (err, binary) {
    console.log(binary.read('magic'));
  });
});",['load'],"['N/A', 'N/A', 'N/A', 'N/A', 'proto.read']",[]
"jBinary.loadData(source, [callback])",['loadData'],['N/A'],[]
"callback(error, data)","['N/A', 'N/A', 'N/A']","['N/A', 'N/A', 'N/A']","['N/A', 'N/A', 'N/A']"
"jBinary.load(source, [typeSet], [callback])",['load'],['N/A'],[]
"saveAs(dest, mimeType = 'application/octet-stream', [callback])",['saveAs'],['N/A'],[]
toURI(mimeType = 'application/octet-stream'),['toURI'],['N/A'],[]
"then(onFulfill, onReject)",['N/A'],['N/A'],['N/A']
Promise.from(...),['N/A'],['N/A'],['N/A']
Q(...),['N/A'],['N/A'],['N/A']
"fileInput.addEventListener('change', function () {
  jBinary.loadData(fileInput.files[0]).then(function (data) {
    if (error) {
      return console.log(error);
    }

    // here you get data from  that you can use in jDataView/jBinary constructors
  });
});

jBinary.load('sample.tar').then(function (binary) {
  // here TAR format is auto-detected and used by `binary` (in the case you use it in combination with jBinary.Repo)
  var tar = binary.readAll;

  // ... more code ...

  return binary.saveAs('new.tar'); // opens browser's ""Save as"" dialog or saves to disk if called from Node.js
}).then(function () {
  console.log('Processed and saved successfully!');
}, function (err) {
  console.error(err);
});","['loadData', 'load', 'readAll', 'saveAs']","['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']",[]
"{
  'jBinary.all': 'File',
  'jBinary.littleEndian': true,

  // declaring custom type by wrapping structure
  DynamicArray: jBinary.Template({
    setParams: function (itemType) {
      this.baseType = {
        // using built-in type
        length: 'uint16',
        // using complex built-in type with simple argument and argument from another field
        values: ['array', itemType, 'length']
      };
    },
    read: function () {
      return this.baseRead().values;
    },
    write: function (values) {
      this.baseWrite({
        length: values.length,
        values: values
      });
    }
  }),

  // declaring simple structure
  FileItem: {
    // using built-in type with argument
    name: ['string0', 256],
    // using another custom type with no arguments
    content: 'DynamicArray'
  },

  // aliasing FileItem[] as type of entire File
  File: ['array', 'FileItem']
}",['Template'],"['N/A', 'N/A']",[]
"string(@length, encoding = 'binary')",['string'],['N/A'],[]
"string0(@length, encoding = 'binary')",['string0'],['N/A'],[]
"const(baseType, value, strict = false)",['const'],['N/A'],[]
strict(readValue),['N/A'],['N/A'],['N/A']
"array(baseType, @length)",['array'],['N/A'],[]
"object(structure, proto = Object.prototype)",['object'],['N/A'],[]
extend(...object structures...),['extend'],['extend'],[]
"enum(baseType, matches)",['enum'],['N/A'],[]
bitfield(length),['bitfield'],['N/A'],[]
blob(@length),['blob'],['N/A'],[]
"binary(@length, typeSet = {})",['binary'],['N/A'],[]
"if(@condition, trueType, falseType)",['if'],['N/A'],[]
"if_not(@condition, falseType, trueType)",['if_not'],['N/A'],[]
skip(@length),['skip'],['N/A'],[]
callback(context),['N/A'],['N/A'],['N/A']
jBinary.Type(config),['Type'],['Type'],[]
read(context),['N/A'],['N/A'],['N/A']
"write(data, context)",['N/A'],['N/A'],['N/A']
setParams(...params...),['N/A'],['N/A'],['N/A']
resolve(getType),['N/A'],['N/A'],['N/A']
"toValue(value, allowResolve = true)",['toValue'],['toValue'],[]
"inherit(args, getType)",['inherit'],['inherit'],[]
createProperty(binary),['createProperty'],['N/A'],[]
"var binary = new jBinary([0x00, 0x03, 0x04, 0x05, 0x06, 0x07], {
  DynamicArray: jBinary.Type({
    params: ['itemType'],
    resolve: function (getType) {
      this.itemType = getType(this.itemType);
    },
    read: function () {
      var length = this.binary.read('uint16');
      return this.binary.read(['array', this.itemType, length]);
    },
    write: function (values) {
      this.binary.write('uint16', values.length);
      this.binary.write(['array', this.itemType], values);
    }
  }),

  byteArray: ['DynamicArray', 'uint8']
});

var byteArray = binary.read('byteArray'); // [0x04, 0x05, 0x06]","['jBinary', 'Type']","['N/A', 'proto.read']",[]
jBinary.Template(config),['Template'],['Template'],[]
getBaseType(context),['getBaseType'],['N/A'],[]
baseRead(),['baseRead'],['N/A'],[]
baseWrite(data),['baseWrite'],['N/A'],[]
"var binary = new jBinary([0x00, 0x03, 0x04, 0x05, 0x06, 0x07], {
  DynamicArray: jBinary.Template({
    setParams: function (itemType) {
      this.baseType = {
        length: 'uint16',
        values: ['array', itemType, 'length']
      };
    },
    read: function () {
      return this.baseRead().values;
    },
    write: function (values) {
      this.baseWrite({
        length: values.length,
        values: values
      });
    }
  }),

  byteArray: ['DynamicArray', 'uint8']
});

var byteArray = binary.read('byteArray'); // [0x04, 0x05, 0x06]","['jBinary', 'Template', 'baseRead', 'baseWrite', 'read']","['N/A', 'N/A', 'proto.read']",[]
"jBinary.Repo('bmp', function (BMP) {
  var binary = new jBinary(data, BMP);
  // ...do whatever you want with `binary` or simply...
  var data = binary.readAll();
  // ...get entire file as parsed object in `data`
});","['jBinary', 'readAll']","['N/A', 'jBinary', 'proto.readAll']",['jBinary']
"jBinary.Repo(['tar', 'gzip'], function (TAR, GZIP) {
  // your code goes here ;)
});",['N/A'],['N/A'],['N/A']
"require(['jbinary.repo!tar', 'jbinary.repo!gzip'], function (TAR, GZIP) {
  // you can put just the same code as in sample above
});",['N/A'],['N/A'],['N/A']
