{   'addToTaskQueue': {   'req_args': ['tasksArray'],
                          'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'addToTestQueue': {   'req_args': ['testTasksFunc', 'prioritize', 'seed'],
                          'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'advance': {   'req_args': [],
                   'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'advanceTaskQueue': {   'req_args': [],
                            'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'advanceTestQueue': {   'req_args': [],
                            'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'begin': {'req_args': [], 'source_file': 'qunit\\src\\core.js'},
    'createModule': {   'req_args': ['name', 'testEnvironment', 'modifiers'],
                        'source_file': 'qunit\\src\\module.js'},
    'decycledShallowClone': {   'req_args': ['object', None],
                                'source_file': 'qunit\\src\\reporters\\TapReporter.js'},
    'diff': {   'req_args': ['a', 'b'],
                'source_file': 'qunit\\src\\core\\utilities.js'},
    'displayAvailableReporters': {   'req_args': [   'builtin',
                                                     'inputReporterName'],
                                     'source_file': 'qunit\\src\\cli\\find-reporter.js'},
    'done': {   'req_args': [],
                'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'emit': {   'req_args': ['eventName', 'data'],
                'source_file': 'qunit\\src\\events.js'},
    'error': {   'req_args': ['message'],
                 'source_file': 'qunit\\src\\cli\\utils.js'},
    'errorString': {   'req_args': ['error'],
                       'source_file': 'qunit\\src\\core\\utilities.js'},
    'escapeText': {   'req_args': ['str'],
                      'source_file': 'qunit\\src\\html-reporter\\html.js'},
    'existsStat': {'req_args': [], 'source_file': 'qunit\\src\\cli\\utils.js'},
    'extend': {   'req_args': ['a', 'b', 'undefOnly'],
                  'source_file': 'qunit\\src\\core\\utilities.js'},
    'extractStacktrace': {   'req_args': ['e', 'offset'],
                             'source_file': 'qunit\\src\\core\\stacktrace.js'},
    'findReporter': {   'req_args': ['reporterName', 'builtin'],
                        'source_file': 'qunit\\src\\cli\\find-reporter.js'},
    'generateHash': {   'req_args': ['module', 'testName'],
                        'source_file': 'qunit\\src\\core\\utilities.js'},
    'getFilesFromArgs': {   'req_args': ['args'],
                            'source_file': 'qunit\\src\\cli\\utils.js'},
    'getIgnoreList': {   'req_args': ['baseDir'],
                         'source_file': 'qunit\\src\\cli\\utils.js'},
    'getNativePerf': {   'req_args': [],
                         'source_file': 'qunit\\src\\core\\utilities.js'},
    'getReportersFromDependencies': {   'req_args': [],
                                        'source_file': 'qunit\\src\\cli\\find-reporter.js'},
    'inArray': {   'req_args': ['elem', 'array'],
                   'source_file': 'qunit\\src\\core\\utilities.js'},
    'is': {   'req_args': ['type', 'obj'],
              'source_file': 'qunit\\src\\core\\utilities.js'},
    'isParentModuleInQueue': {   'req_args': [],
                                 'source_file': 'qunit\\src\\module.js'},
    'makeAddGlobalHook': {   'req_args': ['hookName'],
                             'source_file': 'qunit\\src\\core\\hooks.js'},
    'makeSetHook': {   'req_args': ['module', 'hookName'],
                       'source_file': 'qunit\\src\\module.js'},
    'module': {   'req_args': ['name', 'options', 'executeNow'],
                  'source_file': 'qunit\\src\\module.js'},
    'module.only': {'req_args': [None], 'source_file': 'qunit\\src\\module.js'},
    'module.skip': {   'req_args': ['name', 'options', 'executeNow'],
                       'source_file': 'qunit\\src\\module.js'},
    'module.todo': {   'req_args': ['name', 'options', 'executeNow'],
                       'source_file': 'qunit\\src\\module.js'},
    'objectType': {   'req_args': ['obj'],
                      'source_file': 'qunit\\src\\core\\utilities.js'},
    'objectValues': {   'req_args': ['obj', None],
                        'source_file': 'qunit\\src\\core\\utilities.js'},
    'objectValuesSubset': {   'req_args': ['obj', 'model'],
                              'source_file': 'qunit\\src\\core\\utilities.js'},
    'on': {   'req_args': ['eventName', 'callback'],
              'source_file': 'qunit\\src\\events.js'},
    'prettyYamlValue': {   'req_args': ['value', None],
                           'source_file': 'qunit\\src\\reporters\\TapReporter.js'},
    'processModule': {   'req_args': ['name', 'options', 'executeNow', None],
                         'source_file': 'qunit\\src\\module.js'},
    'processTaskQueue': {   'req_args': ['start'],
                            'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'registerLoggingCallbacks': {   'req_args': ['obj'],
                                    'source_file': 'qunit\\src\\core\\logging.js'},
    'run': {   'req_args': ['args', 'options'],
               'source_file': 'qunit\\src\\cli\\run.js'},
    'run.abort': {   'req_args': ['callback'],
                     'source_file': 'qunit\\src\\cli\\run.js'},
    'run.restart': {   'req_args': ['args'],
                       'source_file': 'qunit\\src\\cli\\run.js'},
    'run.watch': {   'req_args': ['_', 'options'],
                     'source_file': 'qunit\\src\\cli\\run.js'},
    'runLoggingCallbacks': {   'req_args': ['key', 'args'],
                               'source_file': 'qunit\\src\\core\\logging.js'},
    'scheduleBegin': {'req_args': [], 'source_file': 'qunit\\src\\core.js'},
    'setHookFromEnvironment': {   'req_args': ['hooks', 'environment', 'name'],
                                  'source_file': 'qunit\\src\\module.js'},
    'sourceFromStacktrace': {   'req_args': ['offset'],
                                'source_file': 'qunit\\src\\core\\stacktrace.js'},
    'taskQueueLength': {   'req_args': [],
                           'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'unblockAndAdvanceQueue': {   'req_args': [],
                                  'source_file': 'qunit\\src\\core.js'},
    'unitSamplerGenerator': {   'req_args': ['seed'],
                                'source_file': 'qunit\\src\\core\\processing-queue.js'},
    'validateException': {   'req_args': ['actual', 'expected', 'message'],
                             'source_file': 'qunit\\src\\assert.js'},
    'validateExpectedExceptionArgs': {   'req_args': [   'expected',
                                                         'message',
                                                         'assertionMethod'],
                                         'source_file': 'qunit\\src\\assert.js'}}
