Explanations,Examples
The simplest way to define a component is to write a JavaScript function:,"function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}"
You can also use an ES6 class to define a component:,"class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}"
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;
"However, elements can also represent user-defined components:","const element = <Welcome name=""Sara"" />;"
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function Welcome(props) {  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name=""Sara"" />;ReactDOM.render(
  element,
  document.getElementById('root')
);"
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name=""Sara"" />      <Welcome name=""Cahal"" />      <Welcome name=""Edite"" />    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);"
Don’t be afraid to split components into smaller components.,"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <img className=""Avatar""
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className=""UserInfo-name"">
          {props.author.name}
        </div>
      </div>
      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}"
"First, we will extract Avatar:","function Avatar(props) {
  return (
    <img className=""Avatar""      src={props.user.avatarUrl}      alt={props.user.name}    />  );
}"
We can now simplify Comment a tiny bit:,"function Comment(props) {
  return (
    <div className=""Comment"">
      <div className=""UserInfo"">
        <Avatar user={props.author} />        <div className=""UserInfo-name"">
          {props.author.name}
        </div>
      </div>
      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}"
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function UserInfo(props) {
  return (
    <div className=""UserInfo"">      <Avatar user={props.user} />      <div className=""UserInfo-name"">        {props.user.name}      </div>    </div>  );
}"
This lets us simplify Comment even further:,"function Comment(props) {
  return (
    <div className=""Comment"">
      <UserInfo user={props.author} />      <div className=""Comment-text"">
        {props.text}
      </div>
      <div className=""Comment-date"">
        {formatDate(props.date)}
      </div>
    </div>
  );
}"
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}"
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}"