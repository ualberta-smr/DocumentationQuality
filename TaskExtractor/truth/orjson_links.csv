Paragraph,Example
To install a wheel from PyPI:,"pip install --upgrade ""pip>=20.3"" # manylinux_x_y, universal2 wheel support
pip install --upgrade orjson"
"This is an example of serializing, with options specified, and deserializing:",">>> import orjson, datetime, numpy
>>> data = {
    ""type"": ""job"",
    ""created_at"": datetime.datetime(1970, 1, 1),
    ""status"": ""ðŸ†—"",
    ""payload"": numpy.array([[1, 2], [3, 4]]),
}
>>> orjson.dumps(data, option=orjson.OPT_NAIVE_UTC | orjson.OPT_SERIALIZE_NUMPY)
b'{""type"":""job"",""created_at"":""1970-01-01T00:00:00+00:00"",""status"":""\xf0\x9f\x86\x97"",""payload"":[[1,2],[3,4]]}'
>>> orjson.loads(_)
{'type': 'job', 'created_at': '1970-01-01T00:00:00+00:00', 'status': 'ðŸ†—', 'payload': [[1, 2], [3, 4]]}"
dumps() serializes Python objects to JSON.,"def dumps(
    __obj: Any,
    default: Optional[Callable[[Any], Any]] = ...,
    option: Optional[int] = ...,
) -> bytes: ..."
"To serialize a subclass or arbitrary types, specify default as a callable that returns a supported type. default may be a function, lambda, or callable class instance. To specify that a type was not handled by default, raise an exception such as TypeError.",">>> import orjson, decimal
>>>
def default(obj):
    if isinstance(obj, decimal.Decimal):
        return str(obj)
    raise TypeError

>>> orjson.dumps(decimal.Decimal(""0.0842389659712649442845""))
JSONEncodeError: Type is not JSON serializable: decimal.Decimal
>>> orjson.dumps(decimal.Decimal(""0.0842389659712649442845""), default=default)
b'""0.0842389659712649442845""'
>>> orjson.dumps({1, 2}, default=default)
orjson.JSONEncodeError: Type is not JSON serializable: set"
"It is important that default raise an exception if a type cannot be handled. Python otherwise implicitly returns None, which appears to the caller like a legitimate value and is serialized:",">>> import orjson, json, rapidjson
>>>
def default(obj):
    if isinstance(obj, decimal.Decimal):
        return str(obj)

>>> orjson.dumps({""set"":{1, 2}}, default=default)
b'{""set"":null}'
>>> json.dumps({""set"":{1, 2}}, default=default)
'{""set"":null}'
>>> rapidjson.dumps({""set"":{1, 2}}, default=default)
'{""set"":null}'"
"Append \n to the output. This is a convenience and optimization for the pattern of dumps(...) + ""\n"". bytes objects are immutable and this pattern copies the original contents.",">>> import orjson
>>> orjson.dumps([])
b""[]""
>>> orjson.dumps([], option=orjson.OPT_APPEND_NEWLINE)
b""[]\n"""
Pretty-print output with an indent of two spaces. This is equivalent to indent=2 in the standard library. Pretty printing is slower and the output larger. orjson is the fastest compared library at pretty printing and has much less of a slowdown to pretty print than the standard library does. This option is compatible with all other options.,">>> import orjson
>>> orjson.dumps({""a"": ""b"", ""c"": {""d"": True}, ""e"": [1, 2]})
b'{""a"":""b"",""c"":{""d"":true},""e"":[1,2]}'
>>> orjson.dumps(
    {""a"": ""b"", ""c"": {""d"": True}, ""e"": [1, 2]},
    option=orjson.OPT_INDENT_2
)
b'{\n  ""a"": ""b"",\n  ""c"": {\n    ""d"": true\n  },\n  ""e"": [\n    1,\n    2\n  ]\n}'"
"If displayed, the indentation and linebreaks appear like this:","{
  ""a"": ""b"",
  ""c"": {
    ""d"": true
  },
  ""e"": [
    1,
    2
  ]
}"
Serialize datetime.datetime objects without a tzinfo as UTC. This has no effect on datetime.datetime objects that have tzinfo set.,">>> import orjson, datetime
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0),
    )
b'""1970-01-01T00:00:00""'
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0),
        option=orjson.OPT_NAIVE_UTC,
    )
b'""1970-01-01T00:00:00+00:00""'"
"Serialize dict keys of type other than str. This allows dict keys to be one of str, int, float, bool, None, datetime.datetime, datetime.date, datetime.time, enum.Enum, and uuid.UUID. For comparison, the standard library serializes str, int, float, bool or None by default. orjson benchmarks as being faster at serializing non-str keys than other libraries. This option is slower for str keys than the default.",">>> import orjson, datetime, uuid
>>> orjson.dumps(
        {uuid.UUID(""7202d115-7ff3-4c81-a7c1-2a1f067b1ece""): [1, 2, 3]},
        option=orjson.OPT_NON_STR_KEYS,
    )
b'{""7202d115-7ff3-4c81-a7c1-2a1f067b1ece"":[1,2,3]}'
>>> orjson.dumps(
        {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},
        option=orjson.OPT_NON_STR_KEYS | orjson.OPT_NAIVE_UTC,
    )
b'{""1970-01-01T00:00:00+00:00"":[1,2,3]}'"
"This option is compatible with orjson.OPT_SORT_KEYS. If sorting is used, note the sort is unstable and will be unpredictable for duplicate keys",">>> import orjson, datetime
>>> orjson.dumps(
    {""other"": 1, datetime.date(1970, 1, 5): 2, datetime.date(1970, 1, 3): 3},
    option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SORT_KEYS
)
b'{""1970-01-03"":3,""1970-01-05"":2,""other"":1}'"
Do not serialize the microsecond field on datetime.datetime and datetime.time instances.,">>> import orjson, datetime
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),
    )
b'""1970-01-01T00:00:00.000001""'
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),
        option=orjson.OPT_OMIT_MICROSECONDS,
    )
b'""1970-01-01T00:00:00""'"
Passthrough dataclasses.dataclass instances to default. This allows customizing their output but is much slower.,">>> import orjson, dataclasses
>>>
@dataclasses.dataclass
class User:
    id: str
    name: str
    password: str

def default(obj):
    if isinstance(obj, User):
        return {""id"": obj.id, ""name"": obj.name}
    raise TypeError

>>> orjson.dumps(User(""3b1"", ""asd"", ""zxc""))
b'{""id"":""3b1"",""name"":""asd"",""password"":""zxc""}'
>>> orjson.dumps(User(""3b1"", ""asd"", ""zxc""), option=orjson.OPT_PASSTHROUGH_DATACLASS)
TypeError: Type is not JSON serializable: User
>>> orjson.dumps(
        User(""3b1"", ""asd"", ""zxc""),
        option=orjson.OPT_PASSTHROUGH_DATACLASS,
        default=default,
    )
b'{""id"":""3b1"",""name"":""asd""}'"
"Passthrough datetime.datetime, datetime.date, and datetime.time instances to default. This allows serializing datetimes to a custom format, e.g., HTTP dates:",">>> import orjson, datetime
>>>
def default(obj):
    if isinstance(obj, datetime.datetime):
        return obj.strftime(""%a, %d %b %Y %H:%M:%S GMT"")
    raise TypeError

>>> orjson.dumps({""created_at"": datetime.datetime(1970, 1, 1)})
b'{""created_at"":""1970-01-01T00:00:00""}'
>>> orjson.dumps({""created_at"": datetime.datetime(1970, 1, 1)}, option=orjson.OPT_PASSTHROUGH_DATETIME)
TypeError: Type is not JSON serializable: datetime.datetime
>>> orjson.dumps(
        {""created_at"": datetime.datetime(1970, 1, 1)},
        option=orjson.OPT_PASSTHROUGH_DATETIME,
        default=default,
    )
b'{""created_at"":""Thu, 01 Jan 1970 00:00:00 GMT""}'
"
Passthrough subclasses of builtin types to default.,">>> import orjson
>>>
class Secret(str):
    pass

def default(obj):
    if isinstance(obj, Secret):
        return ""******""
    raise TypeError

>>> orjson.dumps(Secret(""zxc""))
b'""zxc""'
>>> orjson.dumps(Secret(""zxc""), option=orjson.OPT_PASSTHROUGH_SUBCLASS)
TypeError: Type is not JSON serializable: Secret
>>> orjson.dumps(Secret(""zxc""), option=orjson.OPT_PASSTHROUGH_SUBCLASS, default=default)
b'""******""'"
Serialize dict keys in sorted order. The default is to serialize in an unspecified order. This is equivalent to sort_keys=True in the standard library.,">>> import orjson
>>> orjson.dumps({""b"": 1, ""c"": 2, ""a"": 3})
b'{""b"":1,""c"":2,""a"":3}'
>>> orjson.dumps({""b"": 1, ""c"": 2, ""a"": 3}, option=orjson.OPT_SORT_KEYS)
b'{""a"":3,""b"":1,""c"":2}'
"
The sorting is not collation/locale-aware:,">>> import orjson
>>> orjson.dumps({""a"": 1, ""Ã¤"": 2, ""A"": 3}, option=orjson.OPT_SORT_KEYS)
b'{""A"":3,""a"":1,""\xc3\xa4"":2}'"
Serialize a UTC timezone on datetime.datetime instances as Z instead of +00:00.,">>> import orjson, datetime
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc),
    )
b'""1970-01-01T00:00:00+00:00""'
>>> orjson.dumps(
        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc),
        option=orjson.OPT_UTC_Z
    )
b'""1970-01-01T00:00:00Z""'"
"loads() deserializes JSON to Python objects. It deserializes to dict, list, int, float, str, bool, and None objects.","def loads(__obj: Union[bytes, bytearray, memoryview, str]) -> Any: ..."
"Dataclasses are serialized as maps, with every attribute serialized and in the order given on class definition:",">>> import dataclasses, orjson, typing

@dataclasses.dataclass
class Member:
    id: int
    active: bool = dataclasses.field(default=False)

@dataclasses.dataclass
class Object:
    id: int
    name: str
    members: typing.List[Member]

>>> orjson.dumps(Object(1, ""a"", [Member(1, True), Member(2)]))
b'{""id"":1,""name"":""a"",""members"":[{""id"":1,""active"":true},{""id"":2,""active"":false}]}'
"
"orjson serializes datetime.datetime objects to RFC 3339 format, e.g., ""1970-01-01T00:00:00+00:00"". This is a subset of ISO 8601 and compatible with isoformat() in the standard library.",">>> import orjson, datetime, zoneinfo
>>> orjson.dumps(
    datetime.datetime(2018, 12, 1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo('Australia/Adelaide'))
)
b'""2018-12-01T02:03:04.000009+10:30""'
>>> orjson.dumps(
    datetime.datetime.fromtimestamp(4123518902).replace(tzinfo=datetime.timezone.utc)
)
b'""2100-09-01T21:55:02+00:00""'
>>> orjson.dumps(
    datetime.datetime.fromtimestamp(4123518902)
)
b'""2100-09-01T21:55:02""'"
datetime.time objects must not have a tzinfo.,">>> import orjson, datetime
>>> orjson.dumps(datetime.time(12, 0, 15, 290))
b'""12:00:15.000290""'"
datetime.date objects will always serialize.,">>> import orjson, datetime
>>> orjson.dumps(datetime.date(1900, 1, 2))
b'""1900-01-02""'"
orjson serializes enums natively. Options apply to their values.,">>> import enum, datetime, orjson
>>>
class DatetimeEnum(enum.Enum):
    EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)
>>> orjson.dumps(DatetimeEnum.EPOCH)
b'""1970-01-01T00:00:00""'
>>> orjson.dumps(DatetimeEnum.EPOCH, option=orjson.OPT_NAIVE_UTC)
b'""1970-01-01T00:00:00+00:00""'"
Enums with members that are not supported types can be serialized using default:,">>> import enum, orjson
>>>
class Custom:
    def __init__(self, val):
        self.val = val

def default(obj):
    if isinstance(obj, Custom):
        return obj.val
    raise TypeError

class CustomEnum(enum.Enum):
    ONE = Custom(1)

>>> orjson.dumps(CustomEnum.ONE, default=default)
b'1'"
"orjson.dumps() serializes Nan, Infinity, and -Infinity, which are not compliant JSON, as null:",">>> import orjson, ujson, rapidjson, json
>>> orjson.dumps([float(""NaN""), float(""Infinity""), float(""-Infinity"")])
b'[null,null,null]'
>>> ujson.dumps([float(""NaN""), float(""Infinity""), float(""-Infinity"")])
OverflowError: Invalid Inf value when encoding double
>>> rapidjson.dumps([float(""NaN""), float(""Infinity""), float(""-Infinity"")])
'[NaN,Infinity,-Infinity]'
>>> json.dumps([float(""NaN""), float(""Infinity""), float(""-Infinity"")])
'[NaN, Infinity, -Infinity]'"
"orjson serializes and deserializes 64-bit integers by default. The range supported is a signed 64-bit integer's minimum (-9223372036854775807) to an unsigned 64-bit integer's maximum (18446744073709551615). This is widely compatible, but there are implementations that only support 53-bits for integers, e.g., web browsers. For those implementations, dumps() can be configured to raise a JSONEncodeError on values exceeding the 53-bit range.",">>> import orjson
>>> orjson.dumps(9007199254740992)
b'9007199254740992'
>>> orjson.dumps(9007199254740992, option=orjson.OPT_STRICT_INTEGER)
JSONEncodeError: Integer exceeds 53-bit range
>>> orjson.dumps(-9007199254740992, option=orjson.OPT_STRICT_INTEGER)
JSONEncodeError: Integer exceeds 53-bit range"
orjson is faster than all compared libraries at serializing numpy instances. Serializing numpy data requires specifying option=orjson.OPT_SERIALIZE_NUMPY.,">>> import orjson, numpy
>>> orjson.dumps(
        numpy.array([[1, 2, 3], [4, 5, 6]]),
        option=orjson.OPT_SERIALIZE_NUMPY,
)
b'[[1,2,3],[4,5,6]]'"
numpy.datetime64 instances are serialized as RFC 3339 strings and datetime options affect them.,">>> import orjson, numpy
>>> orjson.dumps(
        numpy.datetime64(""2021-01-01T00:00:00.172""),
        option=orjson.OPT_SERIALIZE_NUMPY,
)
b'""2021-01-01T00:00:00.172000""'
>>> orjson.dumps(
        numpy.datetime64(""2021-01-01T00:00:00.172""),
        option=(
            orjson.OPT_SERIALIZE_NUMPY |
            orjson.OPT_NAIVE_UTC |
            orjson.OPT_OMIT_MICROSECONDS
        ),
)
b'""2021-01-01T00:00:00+00:00""'"
orjson and rapidjson are the only compared JSON libraries to consistently error on bad input.,">>> import orjson, ujson, rapidjson, json
>>> orjson.dumps('\ud800')
JSONEncodeError: str is not valid UTF-8: surrogates not allowed
>>> ujson.dumps('\ud800')
UnicodeEncodeError: 'utf-8' codec ...
>>> rapidjson.dumps('\ud800')
UnicodeEncodeError: 'utf-8' codec ...
>>> json.dumps('\ud800')
'""\\ud800""'
>>> orjson.loads('""\\ud800""')
JSONDecodeError: unexpected end of hex escape at line 1 column 8: line 1 column 1 (char 0)
>>> ujson.loads('""\\ud800""')
''
>>> rapidjson.loads('""\\ud800""')
ValueError: Parse error at offset 1: The surrogate pair in string is invalid.
>>> json.loads('""\\ud800""')
'\ud800'"
"To make a best effort at deserializing bad input, first decode bytes using the replace or lossy argument for errors:",">>> import orjson
>>> orjson.loads(b'""\xed\xa0\x80""')
JSONDecodeError: str is not valid UTF-8: surrogates not allowed
>>> orjson.loads(b'""\xed\xa0\x80""'.decode(""utf-8"", ""replace""))
'ï¿½ï¿½ï¿½'"
"orjson serializes uuid.UUID instances to RFC 4122 format, e.g., ""f81d4fae-7dec-11d0-a765-00a0c91e6bf6"".",">>> import orjson, uuid
>>> orjson.dumps(uuid.UUID('f81d4fae-7dec-11d0-a765-00a0c91e6bf6'))
b'""f81d4fae-7dec-11d0-a765-00a0c91e6bf6""'
>>> orjson.dumps(uuid.uuid5(uuid.NAMESPACE_DNS, ""python.org""))
b'""886313e1-3b8a-5372-9b90-0c9aee199e5d""'"
This is an example for x86_64 on the Rust nightly channel:,"export RUSTFLAGS=""-C target-cpu=k8""
maturin build --no-sdist --release --strip --cargo-extra-args=""--features=unstable-simd"""
