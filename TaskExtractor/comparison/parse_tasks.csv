Paragraph,Ground truth tasks,Program tasks,Partial Ratio
An iterator that generates parse trees for the sentence.,generate parse tree from sentence,generate iterator,71
Interface for parsing with BLLIP Parser. BllipParser objects can be constructed with the BllipParser.from_unified_model_dir class method or manually using the BllipParser constructor.,use bllip parser,use bllipparser constructor,94
Interface for parsing with BLLIP Parser. BllipParser objects can be constructed with the BllipParser.from_unified_model_dir class method or manually using the BllipParser constructor.,use bllip parser,use bllipparser objects,94
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser object,create bllipparser object from unified parsing model directory,100
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser object,store bllip parser on disk,64
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser object,store reranker models on disk,36
An iterator that generates parse trees for the sentence,generate parse trees,generate iterator,71
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip to parse a sentence,use bllip,100
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip to parse a sentence,use others,40
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip to parse a sentence,specify tag as none,47
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges to chart,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add new edge,67
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,pass edges to apply(),33
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,specify number of edges,45
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,return generator,75
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add generator,46
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add new edge,67
"A rule licensing any edge corresponding to a production whose right-hand side begins with a complete edge’s left-hand side. In particular, this rule specifies that [A -> alpha \*] licenses the edge [B -> A \* beta] for each grammar production B -> A beta.",how to define a rule ,specify [ a,36
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges to chart,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add new edge,67
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,pass edges to apply(),33
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,specify number of edges,45
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges to chart,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add new edge,67
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,pass edges to apply(),33
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,specify number of edges,45
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add edges to chart,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add edges given a rule and also add to the chart,add new edge,67
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,pass edges to apply(),33
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get the existing edges,specify number of edges,45
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,select specific collection of edges,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,use select method,47
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,complete edges,57
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,create index for set,45
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,get the child pointer list for an edge,list  for given edge,75
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,get the child pointer list for an edge,use edges,56
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get all the edges in the chart,add new edges to chart,68
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get all the edges in the chart,add new edges to edges(),50
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get all the edges in the chart,add new edges after call,62
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add a new edge to the chart and checked if it modified the chart,add new edge to chart,81
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add a new edge to the chart and checked if it modified the chart,return true,45
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add a new edge to the chart and checked if it modified the chart,modify chart,58
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,get sequence of lists of edges that formed this edge,use sequence of lists,90
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,get sequence of lists of edges that formed this edge,use list,62
"Add a new edge to the chart, using a pointer to the previous edge.",add a new edge to the chart and point to the previous edge,add new edge to chart,81
"Add a new edge to the chart, using a pointer to the previous edge.",add a new edge to the chart and point to the previous edge,use pointer to previous edge,82
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,get an iterator of over the chart edges,add new edges to chart,55
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,get an iterator of over the chart edges,generate new edges,61
Return the leaf value of the word at the given index.,get the leaf value of the word at index,return leaf value of word,80
Return the number of edges contained in this chart.,get number of edges in chart,return number of edges,82
Return a pretty-printed string representation of a given edge in this chart.,pretty print string representation of an edge,return pretty-printed string representation of given edge,87
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,pretty print string representation chart leaves,use string as header,50
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,pretty print string representation chart leaves,use string to pretty_format_edge,53
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over the edges in the chart,add new edges to chart,68
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over the edges in the chart,generate new edges,56
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over the edges in the chart,use restrictions,38
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over the edges in the chart,generate edges,71
Return an iterator of the tree structures that are associated with edge.,get iterator of tree structures associated with edge,return iterator of tree structures,88
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",eliminate subtree sharing,share common subtree,50
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",eliminate subtree sharing,encode subtree in trees,58
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",eliminate subtree sharing,use same tree,54
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",eliminate subtree sharing,create deep copy of tree,35
Return the final parse Chart from which all possible parse trees can be extracted.,get final parse chart,return final parse chart,86
The grammar used by this parser.,get grammer used by parser,use  by parser,93
An iterator that generates parse trees for the sentence.,get iterator that generates parse trees,generate iterator,71
"A rule that specifies what new edges are licensed by any given set of existing edges. Each chart rule expects a fixed number of edges, as indicated by the class variable NUM_EDGES. In particular:",specify which edges are licensed ,specify rule of existing edges,50
"A chart rule with NUM_EDGES=0 specifies what new edges are licensed, regardless of existing edges.",specify which edges are licensed ,specify  regardless_of existing edges,55
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add licensed edges,add edges at time,47
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add licensed edges,add edges to chart,50
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add licensed edges,add new edge,58
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,return generator,75
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges,78
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add generator,77
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",get edge dot position,return dot position,74
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,return left-hand side,71
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify kind of structure,32
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify left-hand side of structure,56
Return the element of this edge’s right-hand side that immediately follows its dot.,get the edge right hand side that follows the dot,return element of right-hand side,64
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,return right-hand side,73
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify content of structure,29
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify right-hand side of structure,67
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",get tuple of tokens that indicate consistency of edge structure,return tuple,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,return left-hand side,71
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify kind of structure,32
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify left-hand side of structure,56
Return the element of this edge’s right-hand side that immediately follows its dot.,get the edge right hand side that follows the dot,return element of right-hand side,64
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,return right-hand side,73
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify content of structure,29
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify right-hand side of structure,67
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",get tuple of tokens that indicate consistency of edge structure,return tuple,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",get edge dot position,return dot position,74
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,return left-hand side,71
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify kind of structure,32
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",get the edge left hand side,specify left-hand side of structure,56
Return the element of this edge’s right-hand side that immediately follows its dot.,get the edge right hand side that follows the dot,return element of right-hand side,64
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,return right-hand side,73
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify content of structure,29
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",get edge right hand side,specify right-hand side of structure,67
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",get tuple of tokens that indicate consistency of edge structure,return tuple,67
Adds an arc from the node specified by head_address to the node specified by the mod address.,add arc from head node to target node,add arc from node,82
Adds an arc from the node specified by head_address to the node specified by the mod address.,add arc from head node to target node,specify  to node,56
Fully connects all non-root nodes. All nodes are set to be dependents of the root node.,connect all non-root nodes,set nodes,78
"Returns true if the graph contains a node with the given node address, false otherwise.",check if graph contains specific node,return true,27
Return the node with the given address.,get specific node,return node with given address,41
Returns the number of left children under the node specified by the given address.,get number of children of node,return number of left children,70
Returns the number of left children under the node specified by the given address.,get number of children of node,return number under node,58
Convert the data in a nodelist into a networkx labeled directed graph.,convert nodelist to networkx labeled directed graph,convert data in nodelist graph,60
Removes the node with the given address. References to this node in others will still exist.,remove specific node,remove node with given address,55
Returns the number of right children under the node specified by the given address.,get number of right children under node,return number of right children,87
Returns the number of right children under the node specified by the given address.,get number of right children under node,return number under node,58
Return a dot representation suitable for using with Graphviz.,get dot representation ,use  with graphviz,33
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,get iterator over edges of chart,return iterator over edges,85
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get list of edges in chart,add new edges to chart,64
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get list of edges in chart,add new edges to edges(),46
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,get list of edges in chart,add new edges after call,48
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,get iterator over edges of chart,add new edges to chart,73
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,get iterator over edges of chart,generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over edges of chart,add new edges to chart,73
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over edges of chart,generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over edges of chart,use restrictions,31
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,get iterator over edges of chart,generate edges,57
Return the final parse Chart from which all possible parse trees can be extracted.,get final parse chart,return final parse chart,86
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,get iterator over chart edges,return iterator over edges,77
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge chart and check if chart is modified,add new edge to chart,86
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge chart and check if chart is modified,return true,45
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge chart and check if chart is modified,modify chart,67
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",assign score to each edge of graph,convert graph into feature-based representation,38
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",assign score to each edge of graph,assign score,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",assign score to each edge of graph,assign  to positive label,56
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",assign score to each edge of graph,return scores in multidimensional list,38
"Trains a NaiveBayesClassifier using the edges present in graphs list as positive examples, the edges not present as negative examples. Uses a feature vector of head-word, head-tag, child-word, and child-tag.",train naive bayes classifier,use edges present list as positive examples,43
"Takes a list of nodes that have been identified to belong to a cycle, and collapses them into on larger node. The arcs of all nodes in the graph must be updated to account for this.",collapses nodes in cycle to one node,identify nodes,52
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score to every edge in dependencygraph,assign score to edge,90
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score to every edge in dependencygraph,generate scores via scorer,46
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score to every edge in dependencygraph,assign scorer during training process,59
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse tokens according to mst parsing algorithm,provide tags,50
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse tokens according to mst parsing algorithm,implement dependencyscoreri interface,35
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse tokens according to mst parsing algorithm,pass  to training algorithm,70
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse tokens according to mst parsing algorithm,use various scoring methods,59
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edge objects,sort given queue of edge objects,100
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edge objects,place edge,60
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edge objects,add edge to queue,53
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edge objects,call method,27
Set the level of tracing output that should be generated when parsing a text.,set tracing output when parsing text,set level of tracing,55
Set the level of tracing output that should be generated when parsing a text.,set tracing output when parsing text,generate output,60
"Sort the given queue of edges, in descending order of the inside probabilities of the edges’ trees.",sort queue of edges in descending order of probability,sort given queue of edges,76
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edges,sort given queue of edge objects,96
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edges,place edge,60
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edges,add edge to queue,53
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort given queue of edges,call method,27
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges at time,65
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",get generator that will add all edges licensed by rule,add new edge,75
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,pass edges to apply(),38
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,get set of existing edges,specify number of edges,48
Computes the probability of a dependency graph based on the parser’s probability model (defined by the parser’s statistical dependency grammar).,compute probability of dependency graph,compute probability of dependency graph,100
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate two spans,include rightward concatenation between adjacent spans,67
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate two spans,include leftward concatenation between adjacent spans,67
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate two spans,include rightward concatenation between adjacent spans,67
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate two spans,include leftward concatenation between adjacent spans,67
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,perform single parsing operation,93
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,perform match,38
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,return matched token,40
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,perform expansion,47
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,return production,53
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",do single parsing operation,return none,45
Set the level of tracing output that should be generated when parsing a text.,set tracing output level when parsing text,set level of tracing,65
Set the level of tracing output that should be generated when parsing a text.,set tracing output level when parsing text,generate output,60
"Move a token from the beginning of the remaining text to the end of the stack. If there are no more tokens in the remaining text, then do nothing.",move a token from the beginning of remaining text to end of stack,move  from beginning,75
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform single parsing operation,perform single parsing operation,100
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform single parsing operation,perform reduction,59
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform single parsing operation,return production,53
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform single parsing operation,return false,33
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",set parser to state before the most recent shift or reduce operation,return parser before most recent shift,76
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",set parser to state before the most recent shift or reduce operation,return parser to state,82
"Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list where each sentence is a list of words. Each sentence will be automatically tagged with this StanfordParser instance’s tagger. If whitespaces exists inside a token, then the token will be treated as separate tokens.",use stanford parser to parse multiple sentences,use stanfordparser,94
"Use StanfordParser to parse a sentence. Takes a sentence as a string; before parsing, it will be automatically tokenized and tagged by the Stanford Parser.",use stanford parser to parse a single sentence,use stanfordparser,94
Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list of strings. Each sentence will be automatically tokenized and tagged by the Stanford Parser.,use stanford parser to parse multiple sentences,use stanfordparser,94
"Use StanfordParser to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged.",use stanford parser to parse a single sentence,use stanfordparser,94
"Use StanfordParser to parse multiple sentences. Takes multiple sentences where each sentence is a list of (word, tag) tuples. The sentences must have already been tokenized and tagged.",use stanford parser to parse multiple sentences,use stanfordparser,94
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)",extract set of features for current configuration,describe  in table,39
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)",extract set of features for current configuration,describe  in dependency parsing book,31
"Load a grammar from a file, and build a parser based on that grammar. The parser depends on the grammar format, and might also depend on properties of the grammar itself.",load grammar from file and build parser on grammar,load grammar from file,100
Set the level of tracing output that should be generated when parsing a text.,set level of tracing output when parsing text,set level of tracing,100
Set the level of tracing output that should be generated when parsing a text.,set level of tracing output when parsing text,generate output,60
