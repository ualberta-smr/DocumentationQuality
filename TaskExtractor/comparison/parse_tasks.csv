Paragraph,Ground truth tasks,Program tasks,Partial Ratio
An iterator that generates parse trees for the sentence.,generate parse trees,generate iterator,71
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,create bllipparser object from unified parsing model directory,100
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,store bllip parser on disk,78
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,store reranker models on disk,39
An iterator that generates parse trees for the sentence,generate parse trees,generate iterator,71
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.","use bllip, specify tag as none",use bllip,100
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.","use bllip, specify tag as none",use others,40
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.","use bllip, specify tag as none",specify tag as none,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges at time, add edges to chart, add new edge",add edges at time,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges at time, add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges at time, add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",return generator,31
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add generator,54
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add new edge,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges at time,76
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges at time,76
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges at time,76
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add edges to chart,61
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.","select specific collection of edges, use select method, create index for set",select specific collection of edges,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.","select specific collection of edges, use select method, create index for set",use select method,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.","select specific collection of edges, use select method, create index for set",complete edges,57
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.","select specific collection of edges, use select method, create index for set",create index for set,100
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,"list for given edge, use edges",list  for given edge,95
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,"list for given edge, use edges",use edges,100
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to chart,64
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to edges(),46
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges after call,48
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, modify, chart",add new edge to chart,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, modify, chart",return true,36
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, modify, chart",modify chart,92
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,use sequence of lists,use sequence of lists,100
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,use sequence of lists,use list,62
"Add a new edge to the chart, using a pointer to the previous edge.","add new edge to chart, use pointer to previous edge ",add new edge to chart,100
"Add a new edge to the chart, using a pointer to the previous edge.","add new edge to chart, use pointer to previous edge ",use pointer to previous edge,100
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,add new edges to chart,50
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,generate new edges,44
Return the leaf value of the word at the given index.,return leaf value of word,return leaf value of word,100
Return the number of edges contained in this chart.,return number of edges,return number of edges,100
Return a pretty-printed string representation of a given edge in this chart.,return pretty-printed string representation of given edge,return pretty-printed string representation of given edge,100
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,return pretty-printed string representation of chart leaves,use string as header,55
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,return pretty-printed string representation of chart leaves,use string to pretty_format_edge,50
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,add new edges to chart,68
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,use restrictions,38
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,generate edges,57
span – Only generate edges e where e.span()==span,generate edges e,generate edges e,100
start – Only generate edges e where e.start()==start,generate edges e,generate edges e,100
end – Only generate edges e where e.end()==end,generate edges e,generate edges e,100
length – Only generate edges e where e.length()==length,generate edges e,generate edges e,100
lhs – Only generate edges e where e.lhs()==lhs,generate edges e,generate edges e,100
rhs – Only generate edges e where e.rhs()==rhs,generate edges e,generate edges e,100
nextsym – Only generate edges e where e.nextsym()==nextsym,generate edges e,generate edges e,100
dot – Only generate edges e where e.dot()==dot,generate edges e,generate edges e,100
is_complete – Only generate edges e where e.is_complete()==is_complete,generate edges e,generate edges e,100
is_incomplete – Only generate edges e where e.is_incomplete()==is_incomplete,generate edges e,generate edges e,100
Return an iterator of the tree structures that are associated with edge.,return iterator of tree structures,return iterator of tree structures,100
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.","encode subtree in trees, create deep copy of tree",share common subtree,50
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.","encode subtree in trees, create deep copy of tree",encode subtree in trees,100
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.","encode subtree in trees, create deep copy of tree",use same tree,54
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.","encode subtree in trees, create deep copy of tree",create deep copy of tree,100
Return the final parse Chart from which all possible parse trees can be extracted.,return final parse chart,return final parse chart,100
The grammar used by this parser.,use by parser,use  by parser,92
An iterator that generates parse trees for the sentence.,generate parse trees,generate iterator,71
"A rule that specifies what new edges are licensed by any given set of existing edges. Each chart rule expects a fixed number of edges, as indicated by the class variable NUM_EDGES. In particular:",specify rule of existing edges,specify rule of existing edges,100
"A chart rule with NUM_EDGES=0 specifies what new edges are licensed, regardless of existing edges.",specify regardless of existing edges,specify  regardless_of existing edges,94
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",return generator,38
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add generator,62
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",return dot position,return dot position,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify left-hand side of structure,66
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify right-hand side of structure,64
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)",return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)", e),100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify left-hand side of structure,66
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify right-hand side of structure,64
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)",return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)", e),100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",return dot position,return dot position,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.","return left-hand side, specify kind of structure",specify left-hand side of structure,66
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.","return right-hand side, specify content of structure",specify right-hand side of structure,64
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)",return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.","return tuple (s, e)", e),100
Adds an arc from the node specified by head_address to the node specified by the mod address.,"add arc from node, specify to node",add arc from node,100
Adds an arc from the node specified by head_address to the node specified by the mod address.,"add arc from node, specify to node",specify  to node,97
Fully connects all non-root nodes. All nodes are set to be dependents of the root node.,set nodes,set nodes,100
"Returns true if the graph contains a node with the given node address, false otherwise.",return true,return true,100
Return the node with the given address.,return node with given address,return node with given address,100
Returns the number of left children under the node specified by the given address.,"return number of left children, return number under node",return number of left children,100
Returns the number of left children under the node specified by the given address.,"return number of left children, return number under node",return number under node,100
Convert the data in a nodelist into a networkx labeled directed graph.,"convert data into networkx, convert data in nodelist",convert data into networkx,100
Convert the data in a nodelist into a networkx labeled directed graph.,"convert data into networkx, convert data in nodelist",convert data in nodelist,100
Removes the node with the given address. References to this node in others will still exist.,remove node with given address,remove node with given address,100
Returns the number of right children under the node specified by the given address.,"return number of right children, return number under node",return number of right children,100
Returns the number of right children under the node specified by the given address.,"return number of right children, return number under node",return number under node,100
Return a dot representation suitable for using with Graphviz.,use with graphviz,use  with graphviz,94
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,return iterator over edges,return iterator over edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to chart,64
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to edges(),46
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges after call,48
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,add new edges to chart,50
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,generate new edges,44
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,"return iterator over edges, use restrictions",add new edges to chart,55
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,"return iterator over edges, use restrictions",generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,"return iterator over edges, use restrictions",use restrictions,100
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,"return iterator over edges, use restrictions",generate edges,57
span – Only generate edges e where e.span()==span,generate edges e,generate edges e,100
start – Only generate edges e where e.start()==start,generate edges e,generate edges e,100
end – Only generate edges e where e.end()==end,generate edges e,generate edges e,100
length – Only generate edges e where e.length()==length,generate edges e,generate edges e,100
lhs – Only generate edges e where e.lhs()==lhs,generate edges e,generate edges e,100
rhs – Only generate edges e where e.rhs()==rhs,generate edges e,generate edges e,100
nextsym – Only generate edges e where e.nextsym()==nextsym,generate edges e,generate edges e,100
dot – Only generate edges e where e.dot()==dot,generate edges e,generate edges e,100
is_complete – Only generate edges e where e.is_complete()==is_complete,generate edges e,generate edges e,100
is_incomplete – Only generate edges e where e.is_incomplete()==is_incomplete,generate edges e,generate edges e,100
Return the final parse Chart from which all possible parse trees can be extracted.,return final parse chart,return final parse chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,return iterator over edges,return iterator over edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, return true, modify chart",add new edge to chart,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, return true, modify chart",return true,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.","add new edge to chart, return true, modify chart",modify chart,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.","convert graph into feature-based representation, assign score, assign to positive label, return scores in multidimensional list",convert graph into feature-based representation,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.","convert graph into feature-based representation, assign score, assign to positive label, return scores in multidimensional list",assign score,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.","convert graph into feature-based representation, assign score, assign to positive label, return scores in multidimensional list",assign  to positive label,96
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.","convert graph into feature-based representation, assign score, assign to positive label, return scores in multidimensional list",return scores in multidimensional list,100
"Trains a NaiveBayesClassifier using the edges present in graphs list as positive examples, the edges not present as negative examples. Uses a feature vector of head-word, head-tag, child-word, and child-tag.","use edges present list as positive examples, train naivebayesclassifier",use edges present list as positive examples,100
"Takes a list of nodes that have been identified to belong to a cycle, and collapses them into on larger node. The arcs of all nodes in the graph must be updated to account for this.",collapse list of nodes,identify nodes,64
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,assign score to edge,100
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,generate scores via scorer,67
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,assign scorer during training process,100
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,provide tags,42
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,implement dependencyscoreri interface,35
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,pass  to training algorithm,45
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,use various scoring methods,40
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,sort given queue of edge objects,82
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,place edge,50
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,add edge to queue,47
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,call method,27
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
"Sort the given queue of edges, in descending order of the inside probabilities of the edges’ trees.",sort edges,sort given queue of edges,70
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,sort given queue of edge objects,82
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,place edge,50
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,add edge to queue,47
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,call method,27
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.","add edges to chart, add new edge",add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,"pass edges to apply(), specify number of edges",specify number of edges,100
Computes the probability of a dependency graph based on the parser’s probability model (defined by the parser’s statistical dependency grammar).,compute dependency graph probability,compute probability of dependency graph,60
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include rightward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include leftward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include rightward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include leftward concatenation between adjacent spans,65
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",perform single parsing operation,56
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",perform match,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",return matched token,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",perform expansion,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",return production,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.","perform match, return matched token, perform expansion, return production",return none,64
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
"Move a token from the beginning of the remaining text to the end of the stack. If there are no more tokens in the remaining text, then do nothing.",move token,move  from beginning,60
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.","perform reduction, return production",perform single parsing operation,53
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.","perform reduction, return production",perform reduction,100
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.","perform reduction, return production",return production,100
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.","perform reduction, return production",return false,58
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",return parser,return parser before most recent shift,100
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",return parser,return parser to state,100
"Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list where each sentence is a list of words. Each sentence will be automatically tagged with this StanfordParser instance’s tagger. If whitespaces exists inside a token, then the token will be treated as separate tokens.",use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse a sentence. Takes a sentence as a string; before parsing, it will be automatically tokenized and tagged by the Stanford Parser.",use stanfordparser,use stanfordparser,100
Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list of strings. Each sentence will be automatically tokenized and tagged by the Stanford Parser.,use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged.",use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse multiple sentences. Takes multiple sentences where each sentence is a list of (word, tag) tuples. The sentences must have already been tokenized and tagged.",use stanfordparser,use stanfordparser,100
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)","extract features, implement features",describe  in table,39
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)","extract features, implement features",describe  in dependency parsing book,39
"Load a grammar from a file, and build a parser based on that grammar. The parser depends on the grammar format, and might also depend on properties of the grammar itself.",build parser,load grammar from file,42
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
