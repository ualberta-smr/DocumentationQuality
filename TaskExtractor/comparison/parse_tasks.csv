Paragraph,Ground truth tasks,Program tasks,Partial Ratio
An iterator that generates parse trees for the sentence.,generate parse trees,generate iterator,71
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,create bllipparser object from unified parsing model directory,100
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,store bllip parser on disk,78
Create a BllipParser object from a unified parsing model directory. Unified parsing model directories are a standardized way of storing BLLIP parser and reranker models together on disk. See bllipparser.RerankingParser.get_unified_model_parameters() for more information about unified model directories.,create bllipparser,store reranker models on disk,39
An iterator that generates parse trees for the sentence,generate parse trees,generate iterator,71
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip,use bllip,100
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip,use others,44
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.",use bllip,specify tag as none,33
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.", specify tag as none,use bllip,33
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.", specify tag as none,use others,40
"Use BLLIP to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged. BLLIP will attempt to use the tags provided but may use others if it can’t come up with a complete parse subject to those constraints. You may also specify a tag as None to leave a token’s tag unconstrained.", specify tag as none,specify tag as none,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges at time,add edges at time,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges at time,add edges to chart,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges at time,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,return generator,33
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add generator,67
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add new edge,67
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,return generator,31
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges,67
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add generator,46
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges at time,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges at time,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges at time,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,select specific collection of edges,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,use select method,47
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,complete edges,57
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.",select specific collection of edges,create index for set,45
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", use select method,select specific collection of edges,50
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", use select method,use select method,100
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", use select method,complete edges,43
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", use select method,create index for set,33
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", create index for set,select specific collection of edges,48
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", create index for set,use select method,35
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", create index for set,complete edges,50
"The select method can be used to select a specific collection of edges. For example chart.select(is_complete=True, start=0) yields all complete edges whose start indices are 0. To ensure the efficiency of these selection operations, Chart dynamically creates and maintains an index for each set of attributes that have been selected on.", create index for set,create index for set,100
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,list for given edge,list  for given edge,95
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge.,list for given edge,use edges,71
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge., use edges,list  for given edge,63
Return the set of child pointer lists for the given edge. Each child pointer list is a list of edges that have been used to form this edge., use edges,use edges,100
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to chart,64
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to edges(),46
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges after call,48
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,add new edge to chart,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,return true,36
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,modify chart,58
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify,add new edge to chart,29
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify,return true,14
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify,modify chart,86
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", chart,add new edge to chart,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", chart,return true,33
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", chart,modify chart,100
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,use sequence of lists,use sequence of lists,100
child_pointer_lists (sequence of tuple(EdgeI)) – A sequence of lists of the edges that were used to form this edge. This list is used to reconstruct the trees (or partial trees) that are associated with edge.,use sequence of lists,use list,62
"Add a new edge to the chart, using a pointer to the previous edge.",add new edge to chart,add new edge to chart,100
"Add a new edge to the chart, using a pointer to the previous edge.",add new edge to chart,use pointer to previous edge,38
"Add a new edge to the chart, using a pointer to the previous edge.", use pointer to previous edge ,add new edge to chart,38
"Add a new edge to the chart, using a pointer to the previous edge.", use pointer to previous edge ,use pointer to previous edge,100
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,add new edges to chart,50
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,generate new edges,44
Return the leaf value of the word at the given index.,return leaf value of word,return leaf value of word,100
Return the number of edges contained in this chart.,return number of edges,return number of edges,100
Return a pretty-printed string representation of a given edge in this chart.,return pretty-printed string representation of given edge,return pretty-printed string representation of given edge,100
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,return pretty-printed string representation of chart leaves,use string as header,55
Return a pretty-printed string representation of this chart’s leaves. This string can be used as a header for calls to pretty_format_edge.,return pretty-printed string representation of chart leaves,use string to pretty_format_edge,50
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,add new edges to chart,68
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,use restrictions,38
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges in chart,generate edges,57
span – Only generate edges e where e.span()==span,generate edges e,generate edges e,100
start – Only generate edges e where e.start()==start,generate edges e,generate edges e,100
end – Only generate edges e where e.end()==end,generate edges e,generate edges e,100
length – Only generate edges e where e.length()==length,generate edges e,generate edges e,100
lhs – Only generate edges e where e.lhs()==lhs,generate edges e,generate edges e,100
rhs – Only generate edges e where e.rhs()==rhs,generate edges e,generate edges e,100
nextsym – Only generate edges e where e.nextsym()==nextsym,generate edges e,generate edges e,100
dot – Only generate edges e where e.dot()==dot,generate edges e,generate edges e,100
is_complete – Only generate edges e where e.is_complete()==is_complete,generate edges e,generate edges e,100
is_incomplete – Only generate edges e where e.is_incomplete()==is_incomplete,generate edges e,generate edges e,100
Return an iterator of the tree structures that are associated with edge.,return iterator of tree structures,return iterator of tree structures,100
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",encode subtree in trees,share common subtree,50
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",encode subtree in trees,encode subtree in trees,100
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",encode subtree in trees,use same tree,54
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.",encode subtree in trees,create deep copy of tree,49
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.", create deep copy of tree,share common subtree,50
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.", create deep copy of tree,encode subtree in trees,49
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.", create deep copy of tree,use same tree,46
"If two trees share a common subtree, then the same Tree may be used to encode that subtree in both trees. If you need to eliminate this subtree sharing, then create a deep copy of each tree.", create deep copy of tree,create deep copy of tree,100
Return the final parse Chart from which all possible parse trees can be extracted.,return final parse chart,return final parse chart,100
The grammar used by this parser.,use by parser,use  by parser,92
An iterator that generates parse trees for the sentence.,generate parse trees,generate iterator,71
"A rule that specifies what new edges are licensed by any given set of existing edges. Each chart rule expects a fixed number of edges, as indicated by the class variable NUM_EDGES. In particular:",specify rule of existing edges,specify rule of existing edges,100
"A chart rule with NUM_EDGES=0 specifies what new edges are licensed, regardless of existing edges.",specify regardless of existing edges,specify  regardless_of existing edges,94
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,return generator,39
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges,100
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add generator,62
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,return generator,31
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges,67
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add generator,46
"Return a generator that will add all edges licensed by this rule, given the edges that are currently in the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",return dot position,return dot position,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify kind of structure,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify left-hand side of structure,76
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,return left-hand side,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify left-hand side of structure,69
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify content of structure,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify right-hand side of structure,77
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,return right-hand side,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify right-hand side of structure,59
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s,return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s, e),33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e),return tuple (s,33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e), e),100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify kind of structure,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify left-hand side of structure,76
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,return left-hand side,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify left-hand side of structure,69
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify content of structure,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify right-hand side of structure,77
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,return right-hand side,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify right-hand side of structure,59
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s,return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s, e),33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e),return tuple (s,33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e), e),100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return this edge’s dot position, which indicates how much of the hypothesized structure is consistent with the sentence. In particular, self.rhs[:dot] is consistent with tokens[self.start():self.end()].",return dot position,return dot position,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,return left-hand side,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify kind of structure,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.",return left-hand side,specify left-hand side of structure,76
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,return left-hand side,29
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify kind of structure,100
"Return this edge’s left-hand side, which specifies what kind of structure is hypothesized by this edge.", specify kind of structure,specify left-hand side of structure,69
Return the element of this edge’s right-hand side that immediately follows its dot.,return element of right-hand side,return element of right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,return right-hand side,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify content of structure,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.",return right-hand side,specify right-hand side of structure,77
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,return right-hand side,27
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify content of structure,100
"Return this edge’s right-hand side, which specifies the content of the structure hypothesized by this edge.", specify content of structure,specify right-hand side of structure,59
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s,return tuple (s,100
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.",return tuple (s, e),33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e),return tuple (s,33
"Return a tuple (s, e), where tokens[s:e] is the portion of the sentence that is consistent with this edge’s structure.", e), e),100
Adds an arc from the node specified by head_address to the node specified by the mod address.,add arc from node,add arc from node,100
Adds an arc from the node specified by head_address to the node specified by the mod address.,add arc from node,specify  to node,50
Adds an arc from the node specified by head_address to the node specified by the mod address., specify to node,add arc from node,58
Adds an arc from the node specified by head_address to the node specified by the mod address., specify to node,specify  to node,94
Fully connects all non-root nodes. All nodes are set to be dependents of the root node.,set nodes,set nodes,100
"Returns true if the graph contains a node with the given node address, false otherwise.",return true,return true,100
Return the node with the given address.,return node with given address,return node with given address,100
Returns the number of left children under the node specified by the given address.,return number of left children,return number of left children,100
Returns the number of left children under the node specified by the given address.,return number of left children,return number under node,67
Returns the number of left children under the node specified by the given address., return number under node,return number of left children,64
Returns the number of left children under the node specified by the given address., return number under node,return number under node,100
Convert the data in a nodelist into a networkx labeled directed graph.,convert data into networkx,convert data into networkx,100
Convert the data in a nodelist into a networkx labeled directed graph.,convert data into networkx,convert data in nodelist,79
Convert the data in a nodelist into a networkx labeled directed graph., convert data in nodelist,convert data into networkx,76
Convert the data in a nodelist into a networkx labeled directed graph., convert data in nodelist,convert data in nodelist,100
Removes the node with the given address. References to this node in others will still exist.,remove node with given address,remove node with given address,100
Returns the number of right children under the node specified by the given address.,return number of right children,return number of right children,100
Returns the number of right children under the node specified by the given address.,return number of right children,return number under node,67
Returns the number of right children under the node specified by the given address., return number under node,return number of right children,64
Returns the number of right children under the node specified by the given address., return number under node,return number under node,100
Return a dot representation suitable for using with Graphviz.,use with graphviz,use  with graphviz,94
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,return iterator over edges,return iterator over edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to chart,64
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges to edges(),46
Return a list of all edges in this chart. New edges that are added to the chart after the call to edges() will not be contained in this list.,return list of edges in chart,add new edges after call,48
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,add new edges to chart,50
Return an iterator over the edges in this chart. It is not guaranteed that new edges which are added to the chart before the iterator is exhausted will also be generated.,return iterator over chart,generate new edges,44
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges,add new edges to chart,41
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges,generate new edges,67
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges,use restrictions,38
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated.,return iterator over edges,generate edges,57
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated., use restrictions,add new edges to chart,42
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated., use restrictions,generate new edges,35
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated., use restrictions,use restrictions,100
Return an iterator over the edges in this chart. Any new edges that are added to the chart before the iterator is exahusted will also be generated. restrictions can be used to restrict the set of edges that will be generated., use restrictions,generate edges,36
span – Only generate edges e where e.span()==span,generate edges e,generate edges e,100
start – Only generate edges e where e.start()==start,generate edges e,generate edges e,100
end – Only generate edges e where e.end()==end,generate edges e,generate edges e,100
length – Only generate edges e where e.length()==length,generate edges e,generate edges e,100
lhs – Only generate edges e where e.lhs()==lhs,generate edges e,generate edges e,100
rhs – Only generate edges e where e.rhs()==rhs,generate edges e,generate edges e,100
nextsym – Only generate edges e where e.nextsym()==nextsym,generate edges e,generate edges e,100
dot – Only generate edges e where e.dot()==dot,generate edges e,generate edges e,100
is_complete – Only generate edges e where e.is_complete()==is_complete,generate edges e,generate edges e,100
is_incomplete – Only generate edges e where e.is_incomplete()==is_incomplete,generate edges e,generate edges e,100
Return the final parse Chart from which all possible parse trees can be extracted.,return final parse chart,return final parse chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
Returns an iterator over the edges in this chart. See Chart.select for more information about the restrictions on the edges.,return iterator over edges,return iterator over edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,add new edge to chart,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,return true,36
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.",add new edge to chart,modify chart,58
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", return true,add new edge to chart,33
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", return true,return true,100
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", return true,modify chart,25
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify chart,add new edge to chart,62
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify chart,return true,18
"Add a new edge to the chart, and return True if this operation modified the chart. In particular, return true iff the chart did not already contain edge, or if it did not already associate child_pointer_lists with edge.", modify chart,modify chart,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",convert graph into feature-based representation,convert graph into feature-based representation,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",convert graph into feature-based representation,assign score,42
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",convert graph into feature-based representation,assign  to positive label,40
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.",convert graph into feature-based representation,return scores in multidimensional list,37
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign score,convert graph into feature-based representation,38
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign score,assign score,100
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign score,assign  to positive label,62
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign score,return scores in multidimensional list,46
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign to positive label,convert graph into feature-based representation,44
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign to positive label,assign score,67
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign to positive label,assign  to positive label,96
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", assign to positive label,return scores in multidimensional list,40
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", return scores in multidimensional list,convert graph into feature-based representation,36
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", return scores in multidimensional list,assign score,58
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", return scores in multidimensional list,assign  to positive label,40
"Converts the graph into a feature-based representation of each edge, and then assigns a score to each based on the confidence of the classifier in assigning it to the positive label. Scores are returned in a multidimensional list.", return scores in multidimensional list,return scores in multidimensional list,100
"Trains a NaiveBayesClassifier using the edges present in graphs list as positive examples, the edges not present as negative examples. Uses a feature vector of head-word, head-tag, child-word, and child-tag.",use edges present list as positive examples,use edges present list as positive examples,100
"Trains a NaiveBayesClassifier using the edges present in graphs list as positive examples, the edges not present as negative examples. Uses a feature vector of head-word, head-tag, child-word, and child-tag.", train naivebayesclassifier,use edges present list as positive examples,44
"Takes a list of nodes that have been identified to belong to a cycle, and collapses them into on larger node. The arcs of all nodes in the graph must be updated to account for this.",collapse list of nodes,identify nodes,64
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,assign score to edge,100
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,generate scores via scorer,67
Assigns a score to every edge in the DependencyGraph graph. These scores are generated via the parser’s scorer which was assigned during the training process.,assign score,assign scorer during training process,100
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,provide tags,42
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,implement dependencyscoreri interface,35
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,pass  to training algorithm,45
Parses a list of tokens in accordance to the MST parsing algorithm for non-projective dependency parses. Assumes that the tokens to be parsed have already been tagged and those tags are provided. Various scoring methods can be used by implementing the DependencyScorerI interface and passing it to the training algorithm.,parse list of tokens,use various scoring methods,40
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,sort given queue of edge objects,82
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,place edge,50
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,add edge to queue,47
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,call method,27
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
"Sort the given queue of edges, in descending order of the inside probabilities of the edges’ trees.",sort edges,sort given queue of edges,70
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,sort given queue of edge objects,82
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,place edge,50
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,add edge to queue,47
"Sort the given queue of Edge objects, placing the edge that should be tried first at the beginning of the queue. This method will be called after each Edge is added to the queue.",sort edge objects,call method,27
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges at time,71
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add edges to chart,100
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.",add edges to chart,add new edge,67
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges at time,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add edges to chart,62
"Return a generator that will add edges licensed by this rule and the given edges to the chart, one at a time. Each time the generator is resumed, it will either add a new edge and yield that edge; or return.", add new edge,add new edge,100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),pass edges to apply(),100
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable.,pass edges to apply(),specify number of edges,30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,pass edges to apply(),30
edges (list(EdgeI)) – A set of existing edges. The number of edges that should be passed to apply() is specified by the NUM_EDGES class variable., specify number of edges,specify number of edges,100
Computes the probability of a dependency graph based on the parser’s probability model (defined by the parser’s statistical dependency grammar).,compute dependency graph probability,compute probability of dependency graph,60
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include rightward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include leftward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include rightward concatenation between adjacent spans,65
"Concatenates the two spans in whichever way possible. This includes rightward concatenation (from the leftmost word of the leftmost span to the rightmost word of the rightmost span) and leftward concatenation (vice-versa) between adjacent spans. Unlike Eisner’s presentation of span concatenation, these spans do not share or pivot on a particular word/word-index.",concatenate spans,include leftward concatenation between adjacent spans,65
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,perform single parsing operation,62
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,perform match,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,return matched token,62
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,perform expansion,69
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,return production,31
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.",perform match,return none,27
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,perform single parsing operation,38
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,perform match,62
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,return matched token,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,perform expansion,29
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,return production,59
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return matched token,return none,64
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,perform single parsing operation,61
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,perform match,69
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,return matched token,28
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,perform expansion,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,return production,42
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", perform expansion,return none,38
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,perform single parsing operation,56
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,perform match,31
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,return matched token,56
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,perform expansion,41
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,return production,100
"Perform a single parsing operation. If an untried match is possible, then perform the match, and return the matched token. If an untried expansion is possible, then perform the expansion, and return the production that it is based on. If backtracking is possible, then backtrack, and return True. Otherwise, return None.", return production,return none,73
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
"Move a token from the beginning of the remaining text to the end of the stack. If there are no more tokens in the remaining text, then do nothing.",move token,move  from beginning,60
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform reduction,perform single parsing operation,59
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform reduction,perform reduction,100
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform reduction,return production,65
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.",perform reduction,return false,33
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.", return production,perform single parsing operation,56
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.", return production,perform reduction,65
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.", return production,return production,100
"Perform a single parsing operation. If a reduction is possible, then perform that reduction, and return the production that it is based on. Otherwise, if a shift is possible, then perform it, and return True. Otherwise, return False.", return production,return false,58
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",return parser,return parser before most recent shift,100
"Return the parser to its state before the most recent shift or reduce operation. Calling undo repeatedly return the parser to successively earlier states. If no shift or reduce operations have been performed, undo will make no changes.",return parser,return parser to state,100
"Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list where each sentence is a list of words. Each sentence will be automatically tagged with this StanfordParser instance’s tagger. If whitespaces exists inside a token, then the token will be treated as separate tokens.",use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse a sentence. Takes a sentence as a string; before parsing, it will be automatically tokenized and tagged by the Stanford Parser.",use stanfordparser,use stanfordparser,100
Use StanfordParser to parse multiple sentences. Takes multiple sentences as a list of strings. Each sentence will be automatically tokenized and tagged by the Stanford Parser.,use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse a sentence. Takes a sentence as a list of (word, tag) tuples; the sentence must have already been tokenized and tagged.",use stanfordparser,use stanfordparser,100
"Use StanfordParser to parse multiple sentences. Takes multiple sentences where each sentence is a list of (word, tag) tuples. The sentences must have already been tokenized and tagged.",use stanfordparser,use stanfordparser,100
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)",extract features,describe  in table,25
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)",extract features,describe  in dependency parsing book,38
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)", implement features,describe  in table,33
"Extract the set of features for the current configuration. Implement standard features as describe in Table 3.2 (page 31) in Dependency Parsing book by Sandra Kubler, Ryan McDonal, Joakim Nivre. Please note that these features are very basic. :return: list(str)", implement features,describe  in dependency parsing book,53
"Load a grammar from a file, and build a parser based on that grammar. The parser depends on the grammar format, and might also depend on properties of the grammar itself.",build parser,load grammar from file,42
Set the level of tracing output that should be generated when parsing a text.,set tracing level,set level of tracing,53
Set the level of tracing output that should be generated when parsing a text.,set tracing level,generate output,27
Use BLLIP Parser to parse a sentence. Takes a sentence as a list of words; it will be automatically tagged with this BLLIP Parser instance’s tagger.,use bllip
Clear the chart.,clear chart 
Return a list of the leaf values of each word in the chart’s sentence.,return list of leaf values
"Return an iterator of the complete tree structures that span the entire chart, and whose root node is root.",return iterator that span chart
Return a pretty-printed string representation of this chart.,return pretty-printed string representatin of this chart
A chart rule with NUM_EDGES=1 specifies what new edges are licensed by a single existing edge.,specify by single edge
A chart rule with NUM_EDGES=2 specifies what new edges are licensed by a pair of existing edges.,specify by pair of edges
Return the end index of this edge’s span.,return end index
Return the length of this edge’s span.,return edge span length
Return the start index of this edge’s span.,return start index
Return the end index of this edge’s span.,return end index
Return the length of this edge’s span.,return edge span length
Return the start index of this edge’s span.,return start index
Return the end index of this edge’s span.,return end index
Return the length of this edge’s span.,return edge span length
Return the start index of this edge’s span.,return start index
"Takes a sentence as a string; before parsing, it will be automatically tokenized and tagged by the CoreNLP Parser.","tokenize sentences, tag sentence"
Takes multiple sentences as a list of strings. Each sentence will be automatically tokenized and tagged.,"tokenize sentence, tag sentence"
Check whether there are cycles.,check cycles
Redirects arcs to any of the nodes in the originals list to the redirect node address.,redirect nocde arcs
"Extract dependency triples of the form: ((head word, head tag), rel, (dep word, dep tag))",extract dependency triples
Clear the chart.,clear chart 
Return the Labeled Attachment Score (LAS) and Unlabeled Attachment Score (UAS),"return labeled attachment score, return unlabeled attachment score"
"Return an iterator of the complete tree structures that span the entire chart, and whose root node is root.",return iterator that span chart
Return a copy of this edge’s bindings dictionary.,return edge bindings
Train MaltParser from a list of DependencyGraph objects,train maltparser
Train MaltParser from a file :param conll_file: str for the filename of the training input data :type conll_file: str,train maltparser
"Return a new TreeEdge formed from the given production. The new edge’s left-hand side and right-hand side will be taken from production; its span will be (index,index); and its dot position will be 0.",return treeedge
Remove test temporary files >>> remove(‘temp.arceager.model’) >>> remove(‘temp.arcstd.model’),remove test files
"A processing class for deriving trees that represent possible structures for a sequence of tokens. These tree structures are known as “parses”. Typically, parsers are used to derive syntax trees for sentences. But parsers can also be used to derive other kinds of tree structure, such as morphological trees and discourse structures.",,"use parsers,use parsers"
When possible this list is sorted from most likely to least likely.,,sort list
Interface for parsing with BLLIP Parser. BllipParser objects can be constructed with the BllipParser.from_unified_model_dir class method or manually using the BllipParser constructor.,,"use bllipparser constructor,use bllipparser objects"
A BllipParser object using the parser and reranker,,"use parser,use reranker"
"Data classes and parser implementations for “chart parsers”, which use dynamic programming to efficiently parse a text. A chart parser derives parse trees for a text by iteratively adding “edges” to a “chart.” Each edge represents a hypothesis about the tree structure for a subsequence of the text. The chart is a “blackboard” for composing and combining these hypotheses.",,"use dynamic programming,use chart parsers,add edges to chart,compose hypotheses,combine hypotheses"
"When a chart parser begins parsing a text, it creates a new (empty) chart, spanning the text. It then incrementally adds new edges to the chart. A set of “chart rules” specifies the conditions under which new edges should be added to the chart. Once the chart reaches a stage where none of the chart rules adds any new edges, parsing is complete.",,"create new chart,add new edges to chart,specify conditions,add new edges to chart,add conditions to chart,reach stage,add new edges,add stage"
"Charts are encoded with the Chart class, and edges are encoded with the TreeEdge and LeafEdge classes. The chart parser module defines three chart parsers:",,"encode charts with chart class,encode edges with treeedge leafedge classes,define chart parsers"
"ChartParser is a simple and flexible chart parser. Given a set of chart rules, it will apply those rules to the chart until no more edges are added.",,"apply rules to chart,add more edges"
SteppingChartParser is a subclass of ChartParser that can be used to step through the parsing process.,,use subclass of chartparser
"A default implementation for __str__, which returns a name based on the rule’s class name.",,"return name,return __str__"
A ChartParser using a bottom-up parsing strategy. See ChartParser for more information.,,use bottom-up parsing strategy
A ChartParser using a bottom-up left-corner parsing strategy. This strategy is often more efficient than standard bottom-up. See ChartParser for more information.,,use bottom-up left-corner parsing strategy
"This is like BottomUpPredictRule, but it also applies the FundamentalRule to the resulting edge.",,apply fundamentalrule to resulting edge
"A cached version of TopDownPredictRule. After the first time this rule is applied to an edge with a given end and next, it will not generate any more edges for edges with that end and next.",,"apply rule with next,apply rule with given end,apply rule after first time,apply rule to edge"
"If chart or grammar are changed, then the cache is flushed.",,"change chart,change grammar,flush cache"
"A blackboard for hypotheses about the syntactic constituents of a sentence. A chart contains a set of edges, and each edge encodes a single hypothesis about the structure of some portion of the sentence.",,encode single hypothesis about structure
"If edge is incomplete, then the unexpanded children will be encoded as childless subtrees, whose node value is the corresponding terminal or nonterminal.",,encode unexpanded children as childless subtrees
"A generic chart parser. A “strategy”, or list of ChartRuleI instances, is used to decide what edges to add to the chart. In particular, ChartParser uses the following algorithm to parse texts:",,"add  to chart,use strategy of chartrulei instances,use list of chartrulei instances,use following algorithm"
When possible this list is sorted from most likely to least likely.,,sort list
"A left-hand side, specifying what kind of structure is hypothesized.",,specify kind of structure
"A right-hand side, specifying the contents of the hypothesized structure.",,specify contents of hypothesized structure
"An edge is incomplete if its structure is partially consistent with the sentence. For every incomplete edge, the span specifies a possible prefix for the edge’s structure.",,"specify possible prefix for incomplete edge,specify possible prefix for structure"
A TreeEdge records which trees have been found to be (partially) consistent with the text.,,find trees
"The EdgeI interface provides a common interface to both types of edge, allowing chart parsers to treat them in a uniform manner.",,provide common interface to types
"A leaf, specifying the word’s content.",,specify word
"A rule that joins a given edge with adjacent edges in the chart, to form combined edges. In particular, this rule specifies that either of the edges:",,specify  of edges
"A ChartParser that allows you to step through the parsing process, adding a single edge at a time. It also allows you to change the parser’s strategy or grammar midway through parsing a text.",,"add single edge at time,change strategy,change grammar"
The initialize method is used to start parsing a text. step adds a single edge to the chart. set_strategy changes the strategy used by the chart parser. parses returns the set of parses that has been found by the chart parser.,,"use initialize method,add single edge to chart,change strategy,return set of parses,find parses"
"_restart – Records whether the parser’s strategy, grammar, or chart has been changed. If so, then step must restart the parsing algorithm.",,"change strategy,change chart,restart parsing algorithm"
Return the chart rule used to generate the most recent edge.,,generate recent edge
Return the grammar used by this parser.,,use  by parser
When possible this list is sorted from most likely to least likely.,,sort list
Load a given chart into the chart parser.,,load given chart into chart parser
Change the grammar used by the parser.,,use  by parser
Change the strategy that the parser uses to decide which edges to add to the chart.,,"change strategy,add  to chart"
strategy (list(ChartRuleI)) – A list of rules that should be used to decide what edges to add to the chart.,,"add  to chart,use rules"
"Return a generator that adds edges to the chart, one at a time. Each time the generator is resumed, it adds a single edge and yields that edge. If no more edges can be added, then it yields None.",,"add edges to chart,add single edge,add more edges"
"If the parser’s strategy, grammar, or chart is changed, then the generator will continue adding edges using the new strategy, grammar, or chart.",,"add edges,use new strategy,use grammar,use chart,change strategy,change chart"
"Note that this generator never terminates, since the grammar or strategy might be changed to values that would add new edges. Instead, it yields None when no more edges can be added with the current strategy and grammar.",,"add new edges,add values,change grammar to values,change strategy to values,add more edges with current strategy,add more edges with grammar"
A ChartParser using a top-down parsing strategy. See ChartParser for more information.,,use top-down parsing strategy
"A left-hand side, specifying the hypothesized tree’s node value.",,specify hypothesized tree
"A right-hand side, specifying the hypothesized tree’s children. Each element of the right-hand side is either a terminal, specifying a token with that terminal as its leaf value; or a nonterminal, specifying a subtree with that nonterminal’s symbol as its node value.",,"specify hypothesized tree,specify  with terminal,specify  with nonterminal,specify subtree with symbol"
"Return a new TreeEdge formed from this edge. The new edge’s dot position is increased by 1, and its end index will be replaced by new_end.",,replace end index
"stderr (stdout,) – Specifies where CoreNLP output is redirected. Valid values are ‘devnull’, ‘stdout’, ‘pipe’",,"redirect corenlp output,redirect specifies"
The text might contain several sentences which will be split by CoreNLP.,,split several sentences
Tools for reading and writing dependency trees. The input is assumed to be in Malt-TAB format (http://stp.lingfil.uu.se/~nivre/research/MaltXML.html).,,"read dependency trees,write dependency trees"
"rather than 1 (as produced by, e.g., zpar) :param str cell_separator: the cell separator. If not provided, cells are split by whitespace. :param str top_relation_label: the label by which the top relation is identified, for examlple, ROOT, null or TOP.",,"split cells,identify top relation for examlple,identify top relation for root,identify top relation for null,identify top relation for top,identify label for examlple,identify label for root,identify label for null,identify label for top"
"style (int) – the style to use for the format (3, 4, 10 columns)",,use  for format
"Starting with the root node, build a dependency tree using the NLTK Tree constructor. Dependency labels are omitted.",,"use nltk tree constructor,omit dependency labels"
A demonstration of how to read a string representation of a CoNLL format dependency tree.,,read string representation of conll format
A demonstration of the result of reading a dependency version of the first sentence of the Penn Treebank.,,read dependency version of first sentence
"Data classes and parser implementations for incremental chart parsers, which use dynamic programming to efficiently parse a text. A “chart parser” derives parse trees for a text by iteratively adding “edges” to a “chart”. Each “edge” represents a hypothesis about the tree structure for a subsequence of the text. The “chart” is a “blackboard” for composing and combining these hypotheses.",,"use dynamic programming,use incremental chart parsers,add edges to chart,compose hypotheses,combine hypotheses"
An incremental chart parser implementing Jay Earley’s parsing algorithm:,,implement parsing algorithm
Class for measuring labelled and unlabelled attachment score for dependency parsing. Note that the evaluation ignores punctuation.,,ignore punctuation
Extension of chart parsing implementation to handle grammars with feature structures as nodes.,,handle grammars with feature structures
"A specialized version of the fundamental rule that operates on nonterminals whose symbols are FeatStructNonterminal``s.  Rather tha simply comparing the nonterminals for equality, they are unified.  Variable bindings from these unifications are collected and stored in the chart using a ``FeatureTreeEdge. When a complete edge is generated, these bindings are applied to all nonterminals in the edge.",,"compare nonterminals for equality,use featuretreeedge,store variable bindings from unifications,apply bindings to nonterminals,generate complete edge"
assuming that B1 and B2 can be unified to generate B3.,,generate b3
"A specialized version of the completer / single edge fundamental rule that operates on nonterminals whose symbols are ``FeatStructNonterminal``s. Rather than simply comparing the nonterminals for equality, they are unified.",,compare nonterminals for equality
"A specialized version of the (cached) top down predict rule that operates on nonterminals whose symbols are ``FeatStructNonterminal``s. Rather than simply comparing the nonterminals for equality, they are unified.",,compare nonterminals for equality
The top down expand rule states that:,,expand rule states
A specialized tree edge that allows shared variable bindings between nonterminals on the left-hand side and right-hand side.,,"share variable bindings between nonterminals,share variable bindings on right-hand side,share variable bindings on left-hand side"
"Each FeatureTreeEdge contains a set of bindings, i.e., a dictionary mapping from variables to values. If the edge is not complete, then these bindings are simply stored. However, if the edge is complete, then the constructor applies these bindings to every nonterminal in the edge whose symbol implements the interface SubstituteBindingsI.",,"set  of bindings,store bindings,apply bindings to nonterminal,implement interface substitutebindingsi,implement edge"
"A new FeatureTreeEdge formed from this edge. The new edge’s dot position is increased by 1, and its end index will be replaced by new_end.",,replace end index
The set of variables used by this edge.,,use  by edge
"A specialized chart that ‘instantiates’ variables whose names start with ‘@’, by replacing them with unique new variables. In particular, whenever a complete edge is added to the chart, any variables in the edge’s lhs whose names start with ‘@’ will be replaced by unique new ``Variable``s.",,"replace  with unique new variables,add complete edge to chart,replace variables in lhs"
"If the edge is a FeatureTreeEdge, and it is complete, then instantiate all variables whose names start with ‘@’, by replacing them with unique new variables.",,"instantiate variables,replace  with unique new variables"
grammar – The Grammar used to generate sentences.,,generate sentences
start – The Nonterminal from which to start generate sentences.,,generate sentences
A class for dependency parsing with MaltParser. The input is the paths to: - a maltparser directory - (optionally) the path to a pre-trained MaltParser .mco model file - (optionally) the tagger to use for POS tagging before parsing - (optionally) additional Java arguments,,use  for pos
This function generates the maltparser command use at the terminal.,,generate maltparser command use at terminal
"Use MaltParser to parse multiple sentences. Takes a list of sentences, where each sentence is a list of words. Each sentence will be automatically tagged with this MaltParser instance’s tagger.",,use maltparser
"Use MaltParser to parse multiple POS tagged sentences. Takes multiple sentences where each sentence is a list of (word, tag) tuples. The sentences must have already been tokenized and tagged.",,use maltparser
A module to find pre-trained MaltParser model.,,find pre-trained maltparser model
A module to find MaltParser .jar file and its dependencies.,,find maltparser
"scored. :rtype: A three-dimensional list of numbers. :return: The score is returned in a multidimensional(3) list, such that the outer-dimension refers to the head, and the inner-dimension refers to the dependencies. For instance, scores[0][1] would reference the list of scores corresponding to arcs from node 0 to node 1. The node’s ‘address’ field can be used to determine its number identification.",,"return return in multidimensional(3) list,reference list of scores,determine number identification,use field"
"When used in conjunction with a MaxEntClassifier, each score would correspond to the confidence of a particular edge being classified with the positive training examples.",,"use  with maxentclassifier,use  in conjunction"
"Typically the edges present in the graphs can be used as positive training examples, and the edges not present as negative examples.",,use graphs as positive training examples
"A scorer for calculated the weights on the edges of a weighted dependency graph. This is used by a ProbabilisticNonprojectiveParser to initialize the edge weights of a DependencyGraph. While typically this would be done by training a binary classifier, any class that can return a multidimensional list representation of the edge weights can implement this interface. As such, it has no necessary fields.",,"calculate weights on edges,initialize edge weights of dependencygraph,return multidimensional list representation of edge weights,return class of edge weights,implement interface"
"scored. :rtype: A three-dimensional list of numbers. :return: The score is returned in a multidimensional(3) list, such that the outer-dimension refers to the head, and the inner-dimension refers to the dependencies. For instance, scores[0][1] would reference the list of scores corresponding to arcs from node 0 to node 1. The node’s ‘address’ field can be used to determine its number identification.",,"return return in multidimensional(3) list,reference list of scores,determine number identification,use field"
"When used in conjunction with a MaxEntClassifier, each score would correspond to the confidence of a particular edge being classified with the positive training examples.",,"use  with maxentclassifier,use  in conjunction"
"Typically the edges present in the graphs can be used as positive training examples, and the edges not present as negative examples.",,use graphs as positive training examples
"A dependency scorer built around a MaxEnt classifier. In this particular class that classifier is a NaiveBayesClassifier. It uses head-word, head-tag, child-word, and child-tag features for classification.",,use child-tag features
"A non-projective, rule-based, dependency parser. This parser will return the set of all possible non-projective parses based on the word-to-word relations defined in the parser’s dependency grammar, and will allow the branches of the parse tree to cross in order to capture a variety of linguistic phenomena that a projective parser will not.",,"return set of possible non-projective parses,define  in dependency grammar"
"Parses the input tokens with respect to the parser’s grammar. Parsing is accomplished by representing the search-space of possible parses as a fully-connected directed graph. Arcs that would lead to ungrammatical parses are removed and a lattice is constructed of length n, where n is the number of input tokens, to represent all possible grammatical traversals. All possible paths through the lattice are then enumerated to produce the set of non-projective parses.",,"remove arcs,produce set of non-projective parses"
"Nonprojective dependencies allows for “crossing branches” in the parse tree which is necessary for representing particular linguistic phenomena, or even typical parses in some languages. This parser follows the MST parsing algorithm, outlined in McDonald(2005), which likens the search for the best non-projective parse to finding the maximum spanning tree in a weighted directed graph.",,find maximum spanning tree in weighted directed graph
Returns the source of the best incoming arc to the node with address: node_index,,return source of best incoming arc
When updating scores the score of the highest-weighted incoming arc is subtracted upon collapse. This returns the correct amount to subtract from that edge.,,"update scores,return correct amount"
"As nodes are collapsed into others, they are replaced by the new node in the graph, but it’s still necessary to keep track of what these original nodes were. This takes a list of node addresses and replaces any collapsed node addresses with their original addresses.",,replace collapsed node addresses with original addresses
graph (DependencyGraph) – A dependency graph to assign scores to.,,assign scores
"Trains a DependencyScorerI from a set of DependencyGraph objects, and establishes this as the parser’s scorer. This is used to initialize the scores on a DependencyGraph during the parsing procedure.",,"initialize scores during parsing procedure,initialize scores on dependencygraph"
dependency_scorer (DependencyScorerI) – A scorer which implements the DependencyScorerI interface.,,"implement dependencyscoreri interface,implement scorer"
Classes and interfaces for associating probabilities with tree structures that represent the internal organization of a text. The probabilistic parser module defines BottomUpProbabilisticChartParser.,,define bottomupprobabilisticchartparser
"BottomUpProbabilisticChartParser is an abstract class that implements a bottom-up chart parser for PCFG grammars. It maintains a queue of edges, and adds them to the chart one at a time. The ordering of this queue is based on the probabilities associated with the edges, allowing the parser to expand more likely edges before less likely ones. Each subclass implements a different queue ordering, producing different search strategies. Currently the following subclasses are defined:",,"implement bottom-up chart parser for pcfg grammars,implement abstract class for pcfg grammars,expand likely edges,implement different queue,order different search strategies,define following"
InsideChartParser searches edges in decreasing order of their trees’ inside probabilities.,,search edges
RandomChartParser searches edges in random order.,,search edges
LongestChartParser searches edges in decreasing order of their location’s length.,,search edges
"An abstract bottom-up parser for PCFG grammars that uses a Chart to record partial results. BottomUpProbabilisticChartParser maintains a queue of edges that can be added to the chart. This queue is initialized with edges for each token in the text that is being parsed. BottomUpProbabilisticChartParser inserts these edges into the chart one at a time, starting with the most likely edges, and proceeding to less likely edges. For each edge that is added to the chart, it may become possible to insert additional edges into the chart; these are added to the queue. This process continues until enough complete parses have been generated, or until the queue is empty.",,"use chart,add edges to chart,initialize queue with edges,initialize queue in text,insert edges at time,insert additional edges into chart,add edge to chart,add  to queue,generate complete parses"
The sorting order for the queue is not specified by BottomUpProbabilisticChartParser. Different sorting orders will result in different search strategies. The sorting order for the queue is defined by the method sort_queue; subclasses are required to provide a definition for this method.,,"provide definition for method,define sorting order for queue"
_trace – The level of tracing output that should be generated when parsing a text.,,generate output
When possible this list is sorted from most likely to least likely.,,sort list
queue (list(Edge)) – The queue of Edge objects to sort. Each edge in this queue is an edge that could be added to the chart by the fundamental rule; but that has not yet been added.,,add edge to chart
chart (Chart) – The chart being used to parse the text. This chart can be used to provide extra information for sorting the queue.,,"provide extra information for sorting,sort queue,use chart"
trace (int) – The trace level. A trace level of 0 will generate no tracing output; and higher trace levels will produce more verbose tracing output.,,"generate tracing output,produce more verbose"
"A bottom-up parser for PCFG grammars that tries edges in descending order of the inside probabilities of their trees. The “inside probability” of a tree is simply the probability of the entire tree, ignoring its context. In particular, the inside probability of a tree generated by production p with children c[1], c[2], …, c[n] is P(p)P(c[1])P(c[2])…P(c[n]); and the inside probability of a token is 1 if it is present in the text, and 0 if it is absent.",,"ignore context,generate  with children"
queue (list(Edge)) – The queue of Edge objects to sort. Each edge in this queue is an edge that could be added to the chart by the fundamental rule; but that has not yet been added.,,add edge to chart
chart (Chart) – The chart being used to parse the text. This chart can be used to provide extra information for sorting the queue.,,"provide extra information for sorting,sort queue,use chart"
queue (list(Edge)) – The queue of Edge objects to sort. Each edge in this queue is an edge that could be added to the chart by the fundamental rule; but that has not yet been added.,,add edge to chart
chart (Chart) – The chart being used to parse the text. This chart can be used to provide extra information for sorting the queue.,,"provide extra information for sorting,sort queue,use chart"
queue (list(Edge)) – The queue of Edge objects to sort. Each edge in this queue is an edge that could be added to the chart by the fundamental rule; but that has not yet been added.,,add edge to chart
chart (Chart) – The chart being used to parse the text. This chart can be used to provide extra information for sorting the queue.,,"provide extra information for sorting,sort queue,use chart"
queue (list(Edge)) – The queue of Edge objects to sort. Each edge in this queue is an edge that could be added to the chart by the fundamental rule; but that has not yet been added.,,add edge to chart
chart (Chart) – The chart being used to parse the text. This chart can be used to provide extra information for sorting the queue.,,"provide extra information for sorting,sort queue,use chart"
"A demonstration of the probabilistic parsers. The user is prompted to select which demo to run, and how many parses should be found; and then each parser is run on the same demo, and a summary of the results are displayed.",,"run parser on same demo,find parses,display summary of results"
"A cell from the parse chart formed when performing the CYK algorithm. Each cell keeps track of its x and y coordinates (though this will probably be discarded), and a list of spans serving as the cell’s entries.",,perform cyk algorithm
Appends the given span to the list of spans representing the chart cell’s entries.,,append given span to list
"This parser returns the most probable projective parse derived from the probabilistic dependency grammar derived from the train() method. The probabilistic model is an implementation of Eisner’s (1996) Model C, which conditions on head-word, head-tag, child-word, and child-tag. The decoding uses a bottom-up chart-based span concatenation algorithm that’s identical to the one utilized by the rule-based projective parser.",,"return probable projective parse,use bottom-up chart-based span concatenation algorithm"
Parses the list of tokens subject to the projectivity constraint and the productions in the parser’s grammar. This uses a method similar to the span-concatenation algorithm defined in Eisner (1996). It returns the most probable parse derived from the parser’s probabilistic dependency grammar.,,"define  in eisner,return probable parse"
"A projective, rule-based, dependency parser. A ProjectiveDependencyParser is created with a DependencyGrammar, a set of productions specifying word-to-word dependency relations. The parse() method will then return the set of all parses, in tree representation, for a given input sequence of tokens. Each parse must meet the requirements of the both the grammar and the projectivity constraint which specifies that the branches of the dependency tree are not allowed to cross. Alternatively, this can be understood as stating that each parent node and its children in the parse tree form a continuous substring of the input sequence.",,"specify word-to-word dependency relations,create projectivedependencyparser with dependencygrammar,return set in tree representation,return set of parses,return set for given input sequence,specify requirements of grammar,specify requirements of projectivity constraint"
"Performs a projective dependency parse on the list of tokens using a chart-based, span-concatenation algorithm similar to Eisner (1996).",,use chart-based span-concatenation algorithm similar
A demonstration showing the creation of a DependencyGrammar in which a specific number of modifiers is listed for a given head. This can further constrain the number of possible parses created by a ProjectiveDependencyParser.,,"show creation of dependencygrammar,list specific number of modifiers,list specific number for given head,list dependencygrammar of modifiers,list dependencygrammar for given head"
A demo showing the training and use of a projective dependency parser.,,"show training of projective dependency parser,show use of projective dependency parser"
A demonstration showing the creation and use of a DependencyGrammar to perform a projective dependency parse.,,"show creation of dependencygrammar,show use of dependencygrammar,perform projective dependency parse"
"A simple top-down CFG parser that parses texts by recursively expanding the fringe of a Tree, and matching it against a text.",,"expand fringe of tree,match  against text"
RecursiveDescentParser uses a list of tree locations called a “frontier” to remember which subtrees have not yet been expanded and which leaves have not yet been matched against the text. Each tree location consists of a list of child indices specifying the path from the root of the tree to a subtree or a leaf; see the reference documentation for Tree for more information about tree locations.,,"call frontier,specify path from root,specify path to subtree,specify path to leaf"
"When the parser begins parsing a text, it constructs a tree containing only the start symbol, and a frontier containing the location of the tree’s root node. It then extends the tree to cover the text, using the following recursive procedure:",,"extend tree,use following recursive procedure"
"If the frontier is empty, and the text is covered by the tree, then return the tree as a possible parse.",,return tree as possible parse
"If the frontier is empty, and the text is not covered by the tree, then return no parses.",,return parses
"If the first element of the frontier is a subtree, then use CFG productions to “expand” it. For each applicable production, add the expanded subtree’s children to the frontier, and recursively find all parses that can be generated by the new tree and frontier.",,"add children for applicable production,add children to frontier,find parses,generate parses"
"If the first element of the frontier is a token, then “match” it against the next token from the text. Remove the token from the frontier, and recursively find all parses that can be generated by the new tree and frontier.",,"match  against next token,remove  from frontier,find parses,generate parses"
When possible this list is sorted from most likely to least likely.,,sort list
trace (int) – The trace level. A trace level of 0 will generate no tracing output; and higher trace levels will produce more verbose tracing output.,,"generate tracing output,produce more verbose"
"A RecursiveDescentParser that allows you to step through the parsing process, performing a single operation at a time.",,perform single operation at time
"The initialize method is used to start parsing a text. expand expands the first element on the frontier using a single CFG production, and match matches the first element on the frontier against the next text token. backtrack undoes the most recent expand or match operation. step performs a single expand, match, or backtrack operation. parses returns the set of parses that have been found by the parser.",,"use initialize method,expand first element on frontier,use single cfg production,match first element on frontier,expand operation,match operation,perform single expand,perform match,perform backtrack operation,return set of parses,find parses"
"_history – A list of (rtext, tree, frontier) tripples, containing the previous states of the parser. This history is used to implement the backtrack operation.",,"implement backtrack operation,use history"
_tried_e – A record of all productions that have been tried for a given tree. This record is used by expand to perform the next untried production.,,"perform next untried production,use record"
_tried_m – A record of what tokens have been matched for a given tree. This record is used by step to decide whether or not to match a token.,,"match tokens for given tree,use record"
"Return the parser to its state before the most recent match or expand operation. Calling undo repeatedly return the parser to successively earlier states. If no match or expand operations have been performed, undo will make no changes.",,"return parser before most recent match,return parser to state,expand operation,perform match expand operations"
"Expand the first element of the frontier. In particular, if the first element of the frontier is a subtree whose node type is equal to production’s left hand side, then add a child to that subtree for each element of production’s right hand side. If production is not specified, then use the first untried expandable production. If all expandable productions have been tried, do nothing.",,"expand first element of frontier,add child to subtree,use first untried expandable production"
"The production used to expand the frontier, if an expansion was performed. If no expansion was performed, return None.",,"expand frontier,perform expansion,return none,perform expansion"
"Start parsing a given text. This sets the parser’s tree to the start symbol, its frontier to the root node, and its remaining text to token['SUBTOKENS'].",,"set tree to start symbol,set tree to token['subtokens'],set tree to root node,set remaining text to start symbol,set remaining text to token['subtokens'],set remaining text to root node,set frontier to start symbol,set frontier to token['subtokens'],set frontier to root node"
"The token matched, if a match operation was performed. If no match was performed, return None",,"perform match operation,return none,perform match"
When possible this list is sorted from most likely to least likely.,,sort list
An iterator of the parses that have been found by this parser so far.,,find parses
None if no operation was performed; a token if a match was performed; a production if an expansion was performed; and True if a backtrack operation was performed.,,"perform operation,perform match,perform expansion,perform backtrack operation"
A partial structure for the text that is currently being parsed. The elements specified by the frontier have not yet been expanded or matched.,,match elements
"A simple bottom-up CFG parser that uses two operations, “shift” and “reduce”, to find a single parse for a text.",,"use operations,use simple bottom-up cfg parser,find single parse for text"
"ShiftReduceParser maintains a stack, which records the structure of a portion of the text. This stack is a list of strings and Trees that collectively cover a portion of the text. For example, while parsing the sentence “the dog saw the man” with a typical grammar, ShiftReduceParser will produce the following stack, which covers “the dog saw”:",,produce following stack
"ShiftReduceParser attempts to extend the stack to cover the entire text, and to combine the stack elements into a single tree, producing a complete parse for the sentence.",,"extend stack,combine stack elements into single tree,produce complete parse for sentence"
"Initially, the stack is empty. It is extended to cover the text, from left to right, by repeatedly applying two operations:",,apply operations
“shift” moves a token from the beginning of the text to the end of the stack.,,move  from beginning
"Often, more than one operation can be performed on a given stack. In this case, ShiftReduceParser uses the following heuristics to decide which operation to perform:",,"perform operation on given stack,use  in case"
"If multiple reductions are available, then apply the reduction whose CFG production is listed earliest in the grammar.",,"apply reduction,list cfg production"
"Note that these heuristics are not guaranteed to choose an operation that leads to a parse of the text. Also, if multiple parses exists, ShiftReduceParser will return at most one of them.",,choose operation
When possible this list is sorted from most likely to least likely.,,sort list
trace (int) – The trace level. A trace level of 0 will generate no tracing output; and higher trace levels will produce more verbose tracing output.,,"generate tracing output,produce more verbose"
"A ShiftReduceParser that allows you to setp through the parsing process, performing a single operation at a time. It also allows you to change the parser’s grammar midway through parsing a text.",,"perform single operation at time,change grammar"
"The initialize method is used to start parsing a text. shift performs a single shift operation, and reduce performs a single reduce operation. step will perform a single reduce operation if possible; otherwise, it will perform a single shift operation. parses returns the set of parses that have been found by the parser.",,"use initialize method,perform single shift operation,perform single shift operation,perform single shift operation,return set of parses,find parses"
"_history – A list of (stack, remaining_text) pairs, containing all of the previous states of the parser. This history is used to implement the undo operation.",,"implement undo operation,use history"
Start parsing a given text. This sets the parser’s stack to [] and sets its remaining text to tokens.,,"set stack to [],set remaining text to tokens"
When possible this list is sorted from most likely to least likely.,,sort list
An iterator of the parses that have been found by this parser so far.,,find parses
"Use production to combine the rightmost stack elements into a single Tree. If production does not match the rightmost stack elements, then do nothing.",,use production
"The production used to reduce the stack, if a reduction was performed. If no reduction was performed, return None.",,"perform reduction,return none,perform reduction"
False if no operation was performed; True if a shift was performed; and the CFG production used to reduce if a reduction was performed.,,"perform operation,perform shift,perform reduction"
Currently unimplemented because the neural dependency parser (and the StanfordCoreNLP pipeline class) doesn’t support passing in pre- tagged tokens.,,pass  in pre
Class for holding configuration which is the partial analysis of the input sentence. The transition based parser aims at finding set of operators that transfer the initial configuration to the terminal configuration.,,find set of operators
Buffer: for storing remaining input words,,store remaining input words
Set of arcs: for storing partially built dependency tree,,"store built dependency tree,set  of arcs,set  for storing"
This class also provides a method to represent a configuration as list of features.,,provide method
"This class defines a set of transition which is applied to a configuration to get another configuration Note that for different parsing algorithm, the transition is different.",,"define set of transition,get configuration note,apply set of transition,apply set to configuration"
Class for transition based parser. Implement 2 algorithms which are “arc-standard” and “arc-eager”,,implement algorithms
:param depgraphs : list of DependencyGraph as the training data :type depgraphs : DependencyGraph :param modelfile : file name to save the trained model :type modelfile : str,,save trained model
"###################### Check The Transition ####################### Check the Initialized Configuration >>> print(conf) Stack : [0] Buffer : [1, 2, 3, 4, 5, 6, 7, 8, 9] Arcs : []",,"check transition #######################,check initialized"
"A. Check the ARC-STANDARD training >>> import tempfile >>> import os >>> input_file = tempfile.NamedTemporaryFile(prefix=’transition_parse.train’, dir=tempfile.gettempdir(), delete=False)",,check arc-standard training
Check the ARC-EAGER training,,check arc-eager training
Check the ARC-STANDARD parser,,check arc-standard parser
Unit tests for CFG.,,test  for cfg
"The result information is followed by a colon, and then the sentence. Empty lines and lines beginning with a comment char are ignored.",,"ignore empty lines,ignore lines"
"grammar_url (str) – A URL specifying where the grammar is located. The default protocol is ""nltk:"", which searches for the file in the the NLTK data package.",,"locate grammar,search \""nltk:\"" for file"
trace (int) – The level of tracing that should be used when parsing a text. 0 will generate no tracing output; and higher numbers will produce more verbose tracing output.,,"generate tracing output,produce more verbose"
"parser – The class used for parsing; should be ChartParser or a subclass. If None, the class depends on the grammar format.",,use  for parsing
"chart_class – The class used for storing the chart; should be Chart or a subclass. Only used for CFGs and feature CFGs. If None, the chart class depends on the grammar format.",,"store chart,use  for storing,use  for cfgs,use  for feature"
beam_size (int) – The maximum length for the parser’s edge queue. Only used for probabilistic CFGs.,,use  for probabilistic cfgs
load_args – Keyword parameters used when loading the grammar. See data.load for more information.,,load grammar
A module to convert a single POS tagged sentence into CONLL format.,,convert single pos
"A module to convert the a POS tagged document stream (i.e. list of list of tuples, a list of sentences) and yield lines in CONLL format. This module yields one line per word and two newlines for end of sentence.",,convert pos
"A bottom-up PCFG parser that uses dynamic programming to find the single most likely parse for a text. The ViterbiParser parser parses texts by filling in a “most likely constituent table”. This table records the most probable tree representation for any given span and node value. In particular, it has an entry for every start index, end index, and node value, recording the most likely subtree that spans from the start index to the end index, and has the given node value.",,"use dynamic programming,find single likely parse for text,fill  in likely constituent table"
"The ViterbiParser parser fills in this table incrementally. It starts by filling in all entries for constituents that span one element of text (i.e., entries where the end index is one greater than the start index). After it has filled in all table entries for constituents that span one element of text, it fills in the entries for constitutants that span two elements of text. It continues filling in the entries for constituents spanning larger and larger portions of the text, until the entire table has been filled. Finally, it returns the table entry for a constituent spanning the entire text, whose node value is the grammar’s start symbol.",,"fill  in table incrementally,fill  in entries,fill  in table entries,fill  for constituents,fill  in entries,fill  in entries,fill entire table,return table entry for constituent"
"In order to find the most likely constituent with a given span and node value, the ViterbiParser parser considers all productions that could produce that node value. For each production, it finds all children that collectively cover the span and have the node values specified by the production’s right hand side. If the probability of the tree formed by applying the production to the children is greater than the probability of the current entry in the table, then the table is updated with this new tree.",,"find likely constituent with given span,find likely constituent with node value,produce node value,produce productions,find children for production,apply production to children,update table with new tree"
_trace – The level of tracing output that should be generated when parsing a text.,,generate output
When possible this list is sorted from most likely to least likely.,,sort list
trace (int) – The trace level. A trace level of 0 will generate no tracing output; and higher trace levels will produce more verbose tracing output.,,"generate tracing output,produce more verbose"
"A demonstration of the probabilistic parsers. The user is prompted to select which demo to run, and how many parses should be found; and then each parser is run on the same demo, and a summary of the results are displayed.",,"run parser on same demo,find parses,display summary of results"
"Classes and interfaces for producing tree structures that represent the internal organization of a text. This task is known as “parsing” the text, and the resulting tree structures are called the text’s “parses”. Typically, the text is a single sentence, and the tree structure represents the syntactic structure of the sentence. However, parsers can also be used in other domains. For example, parsers can be used to derive the morphological structure of the morphemes that make up a word, or to derive the discourse structure for a set of utterances.",,"produce tree structures,call parses,call resulting tree structures,use parsers in other domains,use parsers"
"Sometimes, a single piece of text can be represented by more than one tree structure. Texts represented by more than one tree structure are called “ambiguous” texts. Note that there are actually two ways in which a text can be ambiguous:",,"call ambiguous texts,call texts"
"The parser module defines ParserI, a standard interface for parsing texts; and two simple implementations of that interface, ShiftReduceParser and RecursiveDescentParser. It also contains three sub-modules for specialized kinds of parsing:",,define parseri
"nltk.parser.chart defines chart parsing, which uses dynamic programming to efficiently parse texts.",,"define chart parsing,use dynamic programming to efficiently parse texts,use chart parsing to efficiently parse texts"
"nltk.parser.probabilistic defines probabilistic parsing, which associates a probability with each parse.",,define probabilistic parsing
