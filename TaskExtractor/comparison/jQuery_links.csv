Paragraph,Ground Truth link,Program link,Partial ratio
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {
  $( "".result"" ).html( data );
  alert( ""load was performed."" );
});","$.get( ""ajax/test.html"", function( data ) {",55
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {
  $( "".result"" ).html( data );
  alert( ""load was performed."" );
});","$( "".result"" ).html( data );",40
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {
  $( "".result"" ).html( data );
  alert( ""load was performed."" );
});","alert( ""load was performed."" );",43
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {
  $( "".result"" ).html( data );
  alert( ""load was performed."" );
});",});,5
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {
  $( "".result"" ).html( data );
  alert( ""load was performed."" );
});","$.get( ""ajax/test.html"", function( data ) {  $( "".result"" ).html( data );  alert( ""load was performed."" );});",97
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","// assign handlers immediately after making the request,",20
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",// and remember the jqxhr object for this request,18
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","var jqxhr = $.get( ""example.php"", function() {",17
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","alert( ""success"" );",7
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",}),1
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",.done(function() {,7
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","alert( ""second success"" );",10
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",.fail(function() {,7
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","alert( ""error"" );",7
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",.always(function() {,8
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","alert( ""finished"" );",8
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",,0
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",// perform other work here ...,11
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",// set another completion function for the request above,20
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});",jqxhr.always(function() {,10
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","alert( ""second finished"" );",10
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.get( ""example.php"", function() {
  alert( ""success"" );
})
  .done(function() {
    alert( ""second success"" );
  })
  .fail(function() {
    alert( ""error"" );
  })
  .always(function() {
    alert( ""finished"" );
  });
 
// perform other work here ...
 
// set another completion function for the request above
jqxhr.always(function() {
  alert( ""second finished"" );
});","// assign handlers immediately after making the request,// and remember the jqxhr object for this requestvar jqxhr = $.get( ""example.php"", function() {  alert( ""success"" );})  .done(function() {    alert( ""second success"" );  })  .fail(function() {    alert( ""error"" );  })  .always(function() {    alert( ""finished"" );  }); // perform other work here ... // set another completion function for the request abovejqxhr.always(function() {  alert( ""second finished"" );});",96
"Request the test.php page, but ignore the return results.","$.get( ""test.php"" );","$.get( ""test.php"" );",100
Request the test.php page and send some additional data along (while still ignoring the return results).,"$.get( ""test.php"", { name: ""john"", time: ""2pm"" } );","$.get( ""test.php"", { name: ""john"", time: ""2pm"" } );",100
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","$.get( ""test.php"", function( data ) {
  alert( ""data loaded: "" + data );
});","$.get( ""test.php"", function( data ) {",65
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","$.get( ""test.php"", function( data ) {
  alert( ""data loaded: "" + data );
});","alert( ""data loaded: "" + data );",59
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","$.get( ""test.php"", function( data ) {
  alert( ""data loaded: "" + data );
});","$.get( ""test.php"", function( data ) {  alert( ""data loaded: "" + data );});",97
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).","$.get( ""test.cgi"", { name: ""john"", time: ""2pm"" } )
  .done(function( data ) {
    alert( ""data loaded: "" + data );
  });","$.get( ""test.cgi"", { name: ""john"", time: ""2pm"" } )",60
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).","$.get( ""test.cgi"", { name: ""john"", time: ""2pm"" } )
  .done(function( data ) {
    alert( ""data loaded: "" + data );
  });",.done(function( data ) {,34
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).","$.get( ""test.cgi"", { name: ""john"", time: ""2pm"" } )
  .done(function( data ) {
    alert( ""data loaded: "" + data );
  });","$.get( ""test.cgi"", { name: ""john"", time: ""2pm"" } )  .done(function( data ) {    alert( ""data loaded: "" + data );  });",97
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});",// if this was sent on https://api.jquery.com/jquery.get/ you will,38
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});",// get the response result of https://api.jquery.com/jquery.ajax/,37
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});","$.get( ""/jquery.ajax/"", function( data ) {",26
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});",console.log( typeof data ); // string,23
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});",console.log( data ); // html content of the jquery.ajax page,35
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// if this was sent on https://api.jquery.com/jquery.get/ you will
// get the response result of https://api.jquery.com/jquery.ajax/
$.get( ""/jquery.ajax/"", function( data ) {
  console.log( typeof data ); // string
  console.log( data ); // html content of the jquery.ajax page
});","// if this was sent on https://api.jquery.com/jquery.get/ you will// get the response result of https://api.jquery.com/jquery.ajax/$.get( ""/jquery.ajax/"", function( data ) {  console.log( typeof data ); // string  console.log( data ); // html content of the jquery.ajax page});",98
"This is a shorthand Ajax function, which is equivalent to:","$.ajax({
  url: url,
  data: data,
  success: success,
  datatype: datatype
});"
Pass arrays of data to the server (while still ignoring the return results).,"$.get( ""test.php"", { ""choices[]"": [""jon"", ""susan""] } );"
"Get the test.php page contents, which has been returned in json format (<?php echo json_encode( array( ""name""=>""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.","$.get( ""test.php"", function( data ) {
  $( ""body"" )
    .append( ""name: "" + data.name ) // john
    .append( ""time: "" + data.time ); //  2pm
}, ""json"" );"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",,"$( ""body"" )"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",,".append( ""name: "" + data.name ) // john"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",,".append( ""time: "" + data.time ); //  2pm"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",,"}, ""json"" );"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",,"$.get( ""test.php"", function( data ) {  $( ""body"" )    .append( ""name: "" + data.name ) // john    .append( ""time: "" + data.time ); //  2pm}, ""json"" );"
