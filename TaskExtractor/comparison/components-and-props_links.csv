Paragraph,Ground Truth link,Program link,Partial ratio
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",95
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
The simplest way to define a component is to write a JavaScript function:,"function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}","function withdraw(account, amount) { account.total -= amount; }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",96
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
You can also use an ES6 class to define a component:,"class welcome extends react.component {
  render() {
    return <h1>hello, {this.props.name}</h1>;
  }
}","function withdraw(account, amount) { account.total -= amount; }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Previously, we only encountered React elements that represent DOM tags:",const element = <div />;,"function withdraw(account, amount) { account.total -= amount; }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"However, elements can also represent user-defined components:","const element = <welcome name=""sara"" />;","function withdraw(account, amount) { account.total -= amount; }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",96
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function welcome(props) {  return <h1>hello, {props.name}</h1>;
}

const element = <welcome name=""sara"" />;reactdom.render(
  element,
  document.getelementbyid('root')
);","function withdraw(account, amount) { account.total -= amount; }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.","function welcome(props) {
  return <h1>hello, {props.name}</h1>;
}

function app() {
  return (
    <div>
      <welcome name=""sara"" />      <welcome name=""cahal"" />      <welcome name=""edite"" />    </div>
  );
}

reactdom.render(
  <app />,
  document.getelementbyid('root')
);","function withdraw(account, amount) { account.total -= amount; }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",94
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
Don’t be afraid to split components into smaller components.,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <img classname=""avatar""
          src={props.author.avatarurl}
          alt={props.author.name}
        />
        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function withdraw(account, amount) { account.total -= amount; }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"First, we will extract Avatar:","function avatar(props) {
  return (
    <img classname=""avatar""      src={props.user.avatarurl}      alt={props.user.name}    />  );
}","function withdraw(account, amount) { account.total -= amount; }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
We can now simplify Comment a tiny bit:,"function comment(props) {
  return (
    <div classname=""comment"">
      <div classname=""userinfo"">
        <avatar user={props.author} />        <div classname=""userinfo-name"">
          {props.author.name}
        </div>
      </div>
      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function withdraw(account, amount) { account.total -= amount; }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",96
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",72
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function userinfo(props) {
  return (
    <div classname=""userinfo"">      <avatar user={props.user} />      <div classname=""userinfo-name"">        {props.user.name}      </div>    </div>  );
}","function withdraw(account, amount) { account.total -= amount; }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
This lets us simplify Comment even further:,"function comment(props) {
  return (
    <div classname=""comment"">
      <userinfo user={props.author} />      <div classname=""comment-text"">
        {props.text}
      </div>
      <div classname=""comment-date"">
        {formatdate(props.date)}
      </div>
    </div>
  );
}","function withdraw(account, amount) { account.total -= amount; }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"Whether you declare a component as a function or a class, it must never modify its own props. Consider this sum function:","function sum(a, b) {
  return a + b;
}","function withdraw(account, amount) { account.total -= amount; }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function welcome(props) { return <h1>hello, {props.name}h1>; }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","class welcome extends react.component { render() { return <h1>hello, {this.props.name}h1>; } }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } const element = <welcome name=""sara"" />;reactdom.render( element, document.getelementbyid('root') );",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function welcome(props) { return <h1>hello, {props.name}h1>; } function app() { return ( <div> <welcome name=""sara"" /> <welcome name=""cahal"" /> <welcome name=""edite"" /> div> ); } reactdom.render( <app />, document.getelementbyid('root') );",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <img classname=""avatar"" src={props.author.avatarurl} alt={props.author.name} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function avatar(props) { return ( <img classname=""avatar"" src={props.user.avatarurl} alt={props.user.name} /> ); }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function comment(props) { return ( <div classname=""comment""> <div classname=""userinfo""> <avatar user={props.author} /> <div classname=""userinfo-name""> {props.author.name} div> div> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function userinfo(props) { return ( <div classname=""userinfo""> <avatar user={props.user} /> <div classname=""userinfo-name""> {props.user.name} div> div> ); }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function comment(props) { return ( <div classname=""comment""> <userinfo user={props.author} /> <div classname=""comment-text""> {props.text} div> <div classname=""comment-date""> {formatdate(props.date)} div> div> ); }",N/A
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) {
  account.total -= amount;
}","function withdraw(account, amount) { account.total -= amount; }",97
