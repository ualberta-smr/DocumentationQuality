Paragraph,Ground truth tasks,Program tasks,Partial Ratio
The simplest way to define a component is to write a JavaScript function:,define component,write javascript function,38
You can also use an ES6 class to define a component:,"use es6
define component",define component,100
"Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.",use component,use same component abstraction for level,85
Don’t be afraid to split components into smaller components.,split components,split components into smaller components,100
"Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.",return result,"call such functions
change inputs
return same result for same inputs",62
"However, elements can also represent user-defined components:",represent elements
"Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.",,split ui into independent reusable pieces
"Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.",,provide introduction to idea
"Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a detailed component API reference here.",,find detailed component api reference
This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions.,,return react element
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,pass children to component
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,pass jsx attributes to component
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.",,call object props
"To learn more about the reasoning behind this convention, please read JSX In Depth.",,learn  about reasoning
"For example, we can create an App component that renders Welcome many times:",,create app component
"Typically, new React apps have a single App component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like Button and gradually work your way to the top of the view hierarchy.",,integrate react into existing app
"It accepts author (an object), text (a string), and date (a date) as props, and describes a comment on a social media website.",,describe comment on social media website
"This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.",,reuse individual parts
"This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.",,change  because_of nesting
The Avatar doesn’t need to know that it is being rendered inside a Comment. This is why we have given its prop a more generic name: user rather than author.,,render  inside comment
We recommend naming props from the component’s own point of view rather than the context in which it is being used.,,use context
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:",,render userinfo component to name
"Extracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be extracted to a separate component.",,use part of ui
"In contrast, this function is impure because it changes its own input:",,change own input
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,introduce new concept in next section
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,introduce new concept of state
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,change output over time
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,change output to network responses
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,change output to user actions
"Of course, application UIs are dynamic and change over time. In the next section, we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.",,change output without violating
