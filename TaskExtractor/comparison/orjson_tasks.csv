Paragraph,Ground truth tasks,Program tasks,Partial Ratio
"orjson supports CPython 3.7, 3.8, 3.9, and 3.10. It distributes x86_64/amd64 and aarch64/armv8 wheels for Linux and macOS. It distributes x86_64/amd64 wheels for Windows. orjson does not support PyPy. Releases follow semantic versioning and serializing a new object type without an opt-in flag is considered a breaking change.",serialize a new object,support cpython,27
To install a wheel from PyPI:,install wheel from pypi,install wheel from pypi,100
"orjson version 3 serializes more types than version 2. Subclasses of str, int, dict, and list are now serialized. This is faster and more similar to the standard library. It can be disabled with orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances are now serialized by default and cannot be customized in a default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is specified. uuid.UUID instances are serialized by default. For any type that is now serialized, implementations in a default function and options enabling them can be removed but do not need to be. There was no change in deserialization.","specify option=orjson.opt_passthrough_dataclass, remove implementations in default function, remove options enabling default functions, remove implementations for type",specify option=orjson.opt_passthrough_dataclass,100
"orjson version 3 serializes more types than version 2. Subclasses of str, int, dict, and list are now serialized. This is faster and more similar to the standard library. It can be disabled with orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances are now serialized by default and cannot be customized in a default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is specified. uuid.UUID instances are serialized by default. For any type that is now serialized, implementations in a default function and options enabling them can be removed but do not need to be. There was no change in deserialization.","specify option=orjson.opt_passthrough_dataclass, remove implementations in default function, remove options enabling default functions, remove implementations for type",remove implementations in default function,100
"orjson version 3 serializes more types than version 2. Subclasses of str, int, dict, and list are now serialized. This is faster and more similar to the standard library. It can be disabled with orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances are now serialized by default and cannot be customized in a default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is specified. uuid.UUID instances are serialized by default. For any type that is now serialized, implementations in a default function and options enabling them can be removed but do not need to be. There was no change in deserialization.","specify option=orjson.opt_passthrough_dataclass, remove implementations in default function, remove options enabling default functions, remove implementations for type",remove implementations in options,82
"orjson version 3 serializes more types than version 2. Subclasses of str, int, dict, and list are now serialized. This is faster and more similar to the standard library. It can be disabled with orjson.OPT_PASSTHROUGH_SUBCLASS.dataclasses.dataclass instances are now serialized by default and cannot be customized in a default function unless option=orjson.OPT_PASSTHROUGH_DATACLASS is specified. uuid.UUID instances are serialized by default. For any type that is now serialized, implementations in a default function and options enabling them can be removed but do not need to be. There was no change in deserialization.","specify option=orjson.opt_passthrough_dataclass, remove implementations in default function, remove options enabling default functions, remove implementations for type",remove implementations for type,100
"To migrate from the standard library, the largest difference is that orjson.dumps returns bytes and json.dumps returns a str. Users with dict objects using non-str keys should specify option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by option=orjson.OPT_SORT_KEYS. indent is replaced by option=orjson.OPT_INDENT_2 and other levels of indentation are not supported.","migrate from standard library, replace sort_keys with option=orjson.opt_sort_keys",use non-str keys,50
"To migrate from the standard library, the largest difference is that orjson.dumps returns bytes and json.dumps returns a str. Users with dict objects using non-str keys should specify option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by option=orjson.OPT_SORT_KEYS. indent is replaced by option=orjson.OPT_INDENT_2 and other levels of indentation are not supported.","migrate from standard library, replace sort_keys with option=orjson.opt_sort_keys",specify option=orjson.opt_non_str_keys,77
"To migrate from the standard library, the largest difference is that orjson.dumps returns bytes and json.dumps returns a str. Users with dict objects using non-str keys should specify option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by option=orjson.OPT_SORT_KEYS. indent is replaced by option=orjson.OPT_INDENT_2 and other levels of indentation are not supported.","migrate from standard library, replace sort_keys with option=orjson.opt_sort_keys",replace sort_keys,100
"To migrate from the standard library, the largest difference is that orjson.dumps returns bytes and json.dumps returns a str. Users with dict objects using non-str keys should specify option=orjson.OPT_NON_STR_KEYS. sort_keys is replaced by option=orjson.OPT_SORT_KEYS. indent is replaced by option=orjson.OPT_INDENT_2 and other levels of indentation are not supported.","migrate from standard library, replace sort_keys with option=orjson.opt_sort_keys",replace indent,64
"It natively serializes str, dict, list, tuple, int, float, bool, dataclasses.dataclass, typing.TypedDict, datetime.datetime, datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and None instances. It supports arbitrary types through default. It serializes subclasses of str, int, dict, list, dataclasses.dataclass, and enum.Enum. It does not serialize subclasses of tuple to avoid serializing namedtuple objects as arrays. To avoid serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.","serialize str, serialize dict, serialize list, serialize tuple, serialize int, serialize float, serialize bool, serialize dataclasses.dataclass, serialize typing.typeddict, serialize datetime.date, serialize datetime.time, serialize uuid.uuid, serialize numpy.ndarray, serialize none, supports arbitrary types through default, serialize enum.enum. specify option orjson.opt_passthrough_subclass",support arbitrary types through default,97
"It natively serializes str, dict, list, tuple, int, float, bool, dataclasses.dataclass, typing.TypedDict, datetime.datetime, datetime.date, datetime.time, uuid.UUID, numpy.ndarray, and None instances. It supports arbitrary types through default. It serializes subclasses of str, int, dict, list, dataclasses.dataclass, and enum.Enum. It does not serialize subclasses of tuple to avoid serializing namedtuple objects as arrays. To avoid serializing subclasses, specify the option orjson.OPT_PASSTHROUGH_SUBCLASS.","serialize str, serialize dict, serialize list, serialize tuple, serialize int, serialize float, serialize bool, serialize dataclasses.dataclass, serialize typing.typeddict, serialize datetime.date, serialize datetime.time, serialize uuid.uuid, serialize numpy.ndarray, serialize none, supports arbitrary types through default, serialize enum.enum. specify option orjson.opt_passthrough_subclass",specify option orjson.opt_passthrough_subclass,100
"It raises JSONEncodeError on an unsupported type. This exception message describes the invalid object with the error message Type is not JSON serializable: .... To fix this, specify default.","raise jsonencodeerror on unsupported type, specify default",raise jsonencodeerror on unsupported type,100
"It raises JSONEncodeError on an unsupported type. This exception message describes the invalid object with the error message Type is not JSON serializable: .... To fix this, specify default.","raise jsonencodeerror on unsupported type, specify default",describe invalid object with error message type is not json serializable: ...,43
"It raises JSONEncodeError on an unsupported type. This exception message describes the invalid object with the error message Type is not JSON serializable: .... To fix this, specify default.","raise jsonencodeerror on unsupported type, specify default",specify default,100
It raises JSONEncodeError on a str that contains invalid UTF-8.,raise jsonencodeerror on invalid etf-8 str,raise jsonencodeerror on str utf-8,76
"It raises JSONEncodeError on an integer that exceeds 64 bits by default or, with OPT_STRICT_INTEGER, 53 bits.",raise jsonencodeerror integer,raise jsonencodeerror on integer,90
"It raises JSONEncodeError if a dict has a key of a type other than str, unless OPT_NON_STR_KEYS is specified.","raise jsonencodeerror, specify opt_non_str_keys",raise jsonencodeerror,100
"It raises JSONEncodeError if a dict has a key of a type other than str, unless OPT_NON_STR_KEYS is specified.","raise jsonencodeerror, specify opt_non_str_keys",specify opt_non_str_keys,100
It raises JSONEncodeError if the output of default recurses to handling by default more than 254 levels deep.,raise jsonencodeerror,raise jsonencodeerror,100
It raises JSONEncodeError if the output of default recurses to handling by default more than 254 levels deep.,raise jsonencodeerror,handle  by default,28
It raises JSONEncodeError on circular references.,raise jsonencodeerror on circular references,raise jsonencodeerror on circular references,100
It raises JSONEncodeError if a tzinfo on a datetime object is unsupported.,raise jsonencodeerror,raise jsonencodeerror,100
"To serialize a subclass or arbitrary types, specify default as a callable that returns a supported type. default may be a function, lambda, or callable class instance. To specify that a type was not handled by default, raise an exception such as TypeError.","serialize subclass, serialize arbitrary types, specify default, specify type not handled by default",return supported type,52
"To serialize a subclass or arbitrary types, specify default as a callable that returns a supported type. default may be a function, lambda, or callable class instance. To specify that a type was not handled by default, raise an exception such as TypeError.","serialize subclass, serialize arbitrary types, specify default, specify type not handled by default",return callable,40
"To serialize a subclass or arbitrary types, specify default as a callable that returns a supported type. default may be a function, lambda, or callable class instance. To specify that a type was not handled by default, raise an exception such as TypeError.","serialize subclass, serialize arbitrary types, specify default, specify type not handled by default",raise exception such_as typeerror,42
"To modify how data is serialized, specify option. Each option is an integer constant in orjson. To specify multiple options, mask them together, e.g., option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.","modify serialized data, specify option, specify multiple options",specify option,100
"To modify how data is serialized, specify option. Each option is an integer constant in orjson. To specify multiple options, mask them together, e.g., option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC.","modify serialized data, specify option, specify multiple options",specify multiple options,100
rapidjson is blank because it does not support pretty printing. This can be reproduced using the pyindent script.,use pyindent script,use pyindent script,100
Passthrough dataclasses.dataclass instances to default. This allows customizing their output but is much slower.,"passthrough dataclasses.dataclass, customize output ",customize output,100
"It is supported to pass all variants of dataclasses, including dataclasses using __slots__, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using __slots__.",pass dataclasses,pass variants of dataclasses,81
"It is supported to pass all variants of dataclasses, including dataclasses using __slots__, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using __slots__.",pass dataclasses,use subclasses,64
"It is supported to pass all variants of dataclasses, including dataclasses using __slots__, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using __slots__.",pass dataclasses,use __slots__,31
"It is supported to pass all variants of dataclasses, including dataclasses using __slots__, frozen dataclasses, those with optional or default attributes, and subclasses. There is a performance benefit to not using __slots__.",pass dataclasses,support  including dataclasses,75
"This measures serializing 555KiB of JSON, orjson natively and other libraries using default to serialize the output of dataclasses.asdict(). This can be reproduced using the pydataclass script.",serialize dataclasses.asdict(),use default,45
"This measures serializing 555KiB of JSON, orjson natively and other libraries using default to serialize the output of dataclasses.asdict(). This can be reproduced using the pydataclass script.",serialize dataclasses.asdict(),use pydataclass script,64
To disable serialization of datetime objects specify the option orjson.OPT_PASSTHROUGH_DATETIME.,specify option orjson.opt_passthrough_datetime,specify option orjson.opt_passthrough_datetime,100
"To make a best effort at deserializing bad input, first decode bytes using the replace or lossy argument for errors:",deserialize input,use replace lossy argument for errors,35
