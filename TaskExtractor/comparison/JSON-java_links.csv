Paragraph,Ground Truth link,Program link,Partial ratio
Create the jar file in the current directory,jar cf json-java.jar org/json/*.class,jar cf json-java.jar org/json/*.class,100
Compile a program that uses the jar (see example code below),"javac -cp .;json-java.jar test.java (windows)
javac -cp .:json-java.jar test.java (unix systems)","javac -cp .;json-java.jar test.java (windows)
javac -cp .:json-java.jar test.java (unix systems)",100
Compile a program that uses the jar (see example code below),"javac -cp .;json-java.jar test.java (windows)
javac -cp .:json-java.jar test.java (unix systems)","import org.json.jsonobject;
public class test {
    public static void main(string args[]){
       jsonobject jo = new jsonobject(""{ \""abc\"" : \""def\"" }"");
       system.out.println(jo.tostring());
    }
}",33
Execute the Test file,"java -cp .;json-java.jar test (windows)
java -cp .:json-java.jar test (unix systems)","java -cp .;json-java.jar test (windows)
java -cp .:json-java.jar test (unix systems)",100
Execute the Test file,"java -cp .;json-java.jar test (windows)
java -cp .:json-java.jar test (unix systems)","{""abc"":""def""}",8
Execute the test suite with Maven:,mvn clean test,mvn clean test,100
Execute the test suite with Gradlew:,gradlew clean build test,gradlew clean build test,100
"For example, code like this will create a mixed JSONArray, some items wrapped, others not:","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });",99
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
jsonarray jarr = new jsonarray();
// these will not be wrapped
jarr.putall(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });
// our jarr is now consistent.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
jsonarray jarr = new jsonarray();
// these will not be wrapped
jarr.putall(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });
// our jarr is now consistent.",99
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
jsonarray jarr = new jsonarray();
// these will not be wrapped
jarr.putall(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });
// our jarr is now consistent.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will be wrapped
jarr.putall(new jsonarray(new somebean[]{ new somebean(3), new somebean(4) }));
// our jarr is now consistent.",84
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will be wrapped
jarr.putall(new jsonarray(new somebean[]{ new somebean(3), new somebean(4) }));
// our jarr is now consistent.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
jsonarray jarr = new jsonarray();
// these will not be wrapped
jarr.putall(myarr);
// these will not be wrapped
jarr.putall(new somebean[]{ new somebean(3), new somebean(4) });
// our jarr is now consistent.",85
"For structure consistency, it would be recommended that the above code is changed to look like 1 of 2 ways.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will be wrapped
jarr.putall(new jsonarray(new somebean[]{ new somebean(3), new somebean(4) }));
// our jarr is now consistent.","somebean[] myarr = new somebean[]{ new somebean(1), new somebean(2) };
// these will be wrapped
jsonarray jarr = new jsonarray(myarr);
// these will be wrapped
jarr.putall(new jsonarray(new somebean[]{ new somebean(3), new somebean(4) }));
// our jarr is now consistent.",99
Build the class files from the package root directory src/main/java,javac org/json/*.java
Test file contents,"import org.json.jsonobject;
public class test {
    public static void main(string args[]){
       jsonobject jo = new jsonobject(""{ \""abc\"" : \""def\"" }"");
       system.out.println(jo.tostring());
    }
}"
Expected output,"{""abc"":""def""}"
"The org.json package can be built from the command line, Maven, and Gradle. The unit tests can be executed from Maven, Gradle, or individually in an IDE e.g. Eclipse.",,javac org/json/*.java
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid
JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading
JSON Text strings, but when output by the Generator, the tab is properly converted to \t in
the string. Other instances may occur where reading invalid JSON text does not cause an
error to be generated. Malformed JSON Texts such as missing end "" (quote) on strings or
invalid number formats (1.2e6.3) will cause errors as such documents can not be read
reliably.",,"{ key: ""value"" }"
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid
JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading
JSON Text strings, but when output by the Generator, the tab is properly converted to \t in
the string. Other instances may occur where reading invalid JSON text does not cause an
error to be generated. Malformed JSON Texts such as missing end "" (quote) on strings or
invalid number formats (1.2e6.3) will cause errors as such documents can not be read
reliably.",,"{ ""key"": value }"
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid
JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading
JSON Text strings, but when output by the Generator, the tab is properly converted to \t in
the string. Other instances may occur where reading invalid JSON text does not cause an
error to be generated. Malformed JSON Texts such as missing end "" (quote) on strings or
invalid number formats (1.2e6.3) will cause errors as such documents can not be read
reliably.",,"{ ""key"": ""value   with an unescaped tab"" }"
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid
JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading
JSON Text strings, but when output by the Generator, the tab is properly converted to \t in
the string. Other instances may occur where reading invalid JSON text does not cause an
error to be generated. Malformed JSON Texts such as missing end "" (quote) on strings or
invalid number formats (1.2e6.3) will cause errors as such documents can not be read
reliably.",,double
"In compliance with RFC8259 page 10 section 9, the parser is more lax with what is valid
JSON then the Generator. For Example, the tab character (U+0009) is allowed when reading
JSON Text strings, but when output by the Generator, the tab is properly converted to \t in
the string. Other instances may occur where reading invalid JSON text does not cause an
error to be generated. Malformed JSON Texts such as missing end "" (quote) on strings or
invalid number formats (1.2e6.3) will cause errors as such documents can not be read
reliably.",,long
"JSON-java releases can be found by searching the Maven repository for groupId ""org.json""
and artifactId ""json"". For example:
https://search.maven.org/search?q=g:org.json%20AND%20a:json&core=gav",,"20210307    recent commits and potentially breaking fix to jsonpointer

20201115    recent commits and first release after project structure change

20200518    recent commits and snapshot before project structure change

20190722    recent commits

20180813    pom change to include automatic-module-name (#431)

20180130    recent commits

20171018    checkpoint for recent commits.

20170516    roll up recent commits.

20160810    revert code that was breaking opt*() methods.

20160807    this release contains a bug in the jsonobject.opt*() and jsonarray.opt*() methods,
it is not recommended for use.
java 1.6 compatability fixed, jsonarray.tolist() and jsonobject.tomap(),
rfc4180 compatibility, jsonpointer, some exception fixes, optional xml type conversion.
contains the latest code as of 7 aug 2016

20160212    java 1.6 compatibility, osgi bundle. contains the latest code as of 12 feb 2016.

20151123    jsonobject and jsonarray initialization with generics. contains the latest code as of 23 nov 2015.

20150729    checkpoint for maven central repository release. contains the latest code
as of 29 july 2015."
