Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {"
Most implementations will specify a success handler:,"$( "".result"" ).html( data );"
Most implementations will specify a success handler:,"alert( ""Load was performed."" );"
Most implementations will specify a success handler:,});
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// Assign handlers immediately after making the request,"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",// and remember the jqxhr object for this request
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","var jqxhr = $.get( ""example.php"", function() {"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","alert( ""success"" );"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",})
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",.done(function() {
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","alert( ""second success"" );"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",.fail(function() {
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","alert( ""error"" );"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",.always(function() {
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","alert( ""finished"" );"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",// Perform other work here ...
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",// Set another completion function for the request above
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.",jqxhr.always(function() {
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","alert( ""second finished"" );"
"Request the test.php page, but ignore the return results.","$.get( ""test.php"" );"
Request the test.php page and send some additional data along (while still ignoring the return results).,"$.get( ""test.php"", { name: ""John"", time: ""2pm"" } );"
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","$.get( ""test.php"", function( data ) {"
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","alert( ""Data Loaded: "" + data );"
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).","$.get( ""test.cgi"", { name: ""John"", time: ""2pm"" } )"
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).",.done(function( data ) {
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.","$( ""body"" )"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",".append( ""Name: "" + data.name ) // John"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.",".append( ""Time: "" + data.time ); //  2pm"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.","}, ""json"" );"
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,// If this was sent on https://api.jquery.com/jQuery.get/ you will
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,// get the response result of https://api.jquery.com/jQuery.ajax/
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"$.get( ""/jQuery.ajax/"", function( data ) {"
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,console.log( typeof data ); // string
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,console.log( data ); // HTML content of the jQuery.ajax page
Most implementations will specify a success handler:,"$.get( ""ajax/test.html"", function( data ) {  $( "".result"" ).html( data );  alert( ""Load was performed."" );});"
"The Promise interface also allows jQuery's Ajax methods, including $.get(), to chain multiple .done(), .fail(), and .always() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.","// Assign handlers immediately after making the request,// and remember the jqxhr object for this requestvar jqxhr = $.get( ""example.php"", function() {  alert( ""success"" );})  .done(function() {    alert( ""second success"" );  })  .fail(function() {    alert( ""error"" );  })  .always(function() {    alert( ""finished"" );  }); // Perform other work here ... // Set another completion function for the request abovejqxhr.always(function() {  alert( ""second finished"" );});"
"Alert the results from requesting test.php (HTML or XML, depending on what was returned).","$.get( ""test.php"", function( data ) {  alert( ""Data Loaded: "" + data );});"
"Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).","$.get( ""test.cgi"", { name: ""John"", time: ""2pm"" } )  .done(function( data ) {    alert( ""Data Loaded: "" + data );  });"
"Get the test.php page contents, which has been returned in json format (""John"",""time""=>""2pm"" ) ); ?>), and add it to the page.","$.get( ""test.php"", function( data ) {  $( ""body"" )    .append( ""Name: "" + data.name ) // John    .append( ""Time: "" + data.time ); //  2pm}, ""json"" );"
Get another page on the same domain. Outputs to console both the data returned and the type of data returned.,"// If this was sent on https://api.jquery.com/jQuery.get/ you will// get the response result of https://api.jquery.com/jQuery.ajax/$.get( ""/jQuery.ajax/"", function( data ) {  console.log( typeof data ); // string  console.log( data ); // HTML content of the jQuery.ajax page});"
