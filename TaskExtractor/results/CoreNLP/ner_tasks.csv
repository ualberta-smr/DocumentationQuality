"Paragraph","Tasks"
"Recognizes named entities (person and company names, etc.) in text. Principally, this annotator uses one or more machine learning sequence models to label entities, but it may also call specialist rule-based components, such as for labeling and interpreting times and dates. Numerical entities that require normalization, e.g., dates, have their normalized value stored in NormalizedNamedEntityTagAnnotation. For more extensive support for rule-based NER, you may also want to look at the RegexNER annotator. The set of entities recognized is language-dependent, and the recognized set of entities is frequently more limited for other languages than what is described below for English. As the name “NERClassifierCombiner” implies, commonly this annotator will run several named entity recognizers and then combine their results but it can run just a single annotator or only rule-based quantity NER.","use machine
learn sequence models to label entities
call specialist rule-based components
run several named entity recognizers
run single annotator"
"For English, by default, this annotator recognizes named (PERSON, LOCATION, ORGANIZATION, MISC), numerical (MONEY, NUMBER, ORDINAL, PERCENT), and temporal (DATE, TIME, DURATION, SET) entities (12 classes). Adding the regexner annotator and using the supplied RegexNER pattern files adds support for the fine-grained and additional entity classes EMAIL, URL, CITY, STATE_OR_PROVINCE, COUNTRY, NATIONALITY, RELIGION, (job) TITLE, IDEOLOGY, CRIMINAL_CHARGE, CAUSE_OF_DEATH, (Twitter, etc.) HANDLE (12 classes) for a total of 24 classes. Named entities are recognized using a combination of three CRF sequence taggers trained on various corpora, including CoNLL, ACE, MUC, and ERE corpora. Numerical entities are recognized using a rule-based system.","recognize temporal entities by default
recognize temporal entities for english
add regexner annotator
use RegexNER pattern files
add support for additional entity classes
use combination of CRF sequence taggers
recognize named entities
use rule-based system
recognize numerical entities"
"The main class that runs this process is edu.stanford.nlp.pipeline.NERCombinerAnnotator","run process
run main class"
"During this phase a series of trained CRF’s will be run on each sentence. These CRF’s are trained on large tagged data sets. They evaluate the entire sequence and pick the optimal tag sequence.","run series of trained CRF s
run series during phase
run series on sentence
evaluate entire sequence"
"These are the default models that are run:","run default models"
"There are two options for how the models are combined. These are selected with the ner.combinationMode property.","select  with ner.combinationMode property"
"So for example, if the ner.combinationMode is set to NORMAL, only the 3-class model’s ORGANIZATION tags will be applied. If it is set to HIGH_RECALL, the 7-class and 4-class models’ ORGANIZATION tags will also be applied.","set ner.combinationMode to NORMAL
set  to HIGH_RECALL"
"If you do not want to run any statistical models, set ner.model to the empty string.","run statistical models
set ner.model to empty string"
"Next a series of rule based systems are run to recognize and tag numeric sequences and time related sequences.","recognize time related sequences
recognize numeric sequences
tag time related sequences
tag numeric sequences
run systems"
"This phase runs by default, but can be deactivated by setting ner.applyNumericClassifiers to false.","set ner.applyNumericClassifiers to false
run  by default
deactivate phase"
"This produces tags such as NUMBER, ORDINAL, MONEY, DATE, and TIME","produce tags such_as NUMBER"
"The class that runs this phase is edu.stanford.nlp.ie.regexp.NumberSequenceClassifier","run phase
run class"
"SUTime (described in more detail below) is also used by default. You can deactivate this by setting ner.useSUTime to false.","use SUTime
deactivate  by setting
set ner.useSUTime to false"
"At this point, a series of rules used for the KBP 2017 competition will be run to create more fine-grained NER tags. These rules are applied using a TokensRegexNERAnnotator sub-annotator. That is the main NERCombinerAnnotator builds a TokensRegexNERAnnotator as a sub-annotator and runs it on all sentences as part of it’s entire tagging process. The purpose of these rules is give tokens more specific tags. So for instance California would be tagged as a STATE_OR_PROVINCE rather than just a LOCATION.","create more fine-grained NER tags
use  for KBP competition
run series at point
run series of rules
use TokensRegexNERAnnotator sub-annotator
build TokensRegexNERAnnotator as sub-annotator
build main NERCombinerAnnotator as sub-annotator
run main NERCombinerAnnotator on sentences
tag california as STATE_OR_PROVINCE
tag california as LOCATION
tag california for instance"
"The TokensRegexNERAnnotator runs TokensRegex rules. You can review all of the settings for a TokensRegexNERAnnotator here.","run TokensRegex rules"
"If you do not want to run the fine-grained rules, set ner.applyFineGrained to false.","run fine-grained rules
set ner.applyFineGrained to false"
"The first column is the tokens pattern, the second column is the NER tag to apply, the third is the types of NER tags that can be overwritten, and the fourth is a priority used for tie-breaking if two rules match a sequence.","match sequence
use  for tie-breaking"
"means to match the token “Los” followed by the token “Angeles”, and label them both as CITY, provided they have a current NER tag of O, LOCATION, or MISC.","match token los"
"Here is a breakdown of how to customize the fine-grained NER. The overall ner annotator creates a sub-annotator called ner.fine.regexner which is an instance of a TokensRegexNERAnnotator.","call ner.fine.regexner"
"The ner.fine.regexner.mapping property allows one to specify a set of rules files and additional properties for each rules file.","specify set of rules files
specify set for rules file
specify additional properties of rules files
specify additional properties for rules file"
"while there are no options set for edu/stanford/nlp/models/kbp/english/gazetteers/regexner_cased.tab in this example.","set  for edu/stanford/nlp/models/kbp/english/gazetteers/regexner_cased.tab"
"If you want to set global settings that will apply for all rules files, remember to use ner.fine.regexner.ignorecase and ner.fine.regexner.validpospattern. If you are setting options for a specific rules file with the ner.fine.regexner.mapping option, follow the pattern from above.","set global settings
use ner.fine.regexner.ignorecase
use ner.fine.regexner.validpospattern
set options for specific rules file"
"After the fine-grained rules are run, there is also an option for a user to specify additional rules they would like to have run after the fine-grained NER phase.","specify additional rules
run  after fine-grained NER phase
run fine-grained rules"
"This second TokensRegexNERAnnotator sub-annotator has the name ner.additional.regexner and is customized in the same manner. This is for the case when users want to run their own rules after the standard rules we provide.","run own rules after standard rules
provide standard rules"
"For instance, suppose you want to match sports teams after the previous NER steps have been run.","match sports teams
run previous NER steps"
"You could integrate this into the entire NER process by setting ner.additional.regexner.mapping to /path/to/sports_teams.rules","integrate  into entire NER process
integrate  by setting
set ner.additional.regexner.mapping to /path/to/sports_teams.rules"
"By default no additional rules are run, so leaving ner.additional.regexner.mapping blank will cause this phase to not be run at all.","run additional rules"
"If you want to run a series of TokensRegex rules before entity building, you can also specify a set of TokensRegex rules. A TokensRegexAnnotator sub-annotator will be called. It has the name ner.additional.tokensregex.","run series before entity building
run series of TokensRegex rules
specify set of TokensRegex rules
call TokensRegexAnnotator sub-annotator"
"After all of the previous steps have been run, entity detection will be run to combine the tagged tokens into entities. The entity mention detection will be based off of the tagging scheme. This is accomplished with an EntityMentionsAnnotator sub-annotator.","run entity detection"
"If a basic IO tagging scheme (example: PERSON, ORGANIZATION, LOCATION) is used, all contiguous sequences of tokens with the same tag will be marked as an entity.","mark contiguous sequences as entity
mark contiguous sequences of tokens
use basic IO tagging scheme"
"If a more advanced tagging scheme (such as BIO with tags like B-PERSON and I-PERSON) is used, sequences with the same tag split by a B-tag will be turned into multiple entities.","use advanced tagging scheme"
"All of our models and rule files use a basic tagging scheme, but you could create your own models and rules that use BIO.","use basic tagging scheme
create own models
create rules
use BIO"
"For instance (Joe PERSON) (Smith PERSON) (Jane PERSON) (Smith PERSON) will create the entity Joe Smith Jane Smith.","create entity for instance"
"On the other hand (Joe B-PERSON) (Smith I-PERSON) (Jane B-PERSON) (Smith I-PERSON) will create two entities: Joe Smith and Jane Smith.","create entities on other hand"
"You can deactivate this with ner.buildEntityMentions being set to false.","deactivate  with ner.buildEntityMentions
set  to false"
"At this point the NER process will be finished, having tagged tokens with NER tags and created entities.","tag tokens with NER tags
tag tokens with created entities"
"Stanford CoreNLP includes SUTime, Stanford’s temporal expression recognizer. SUTime is transparently called from the “ner” annotator, so no configuration is necessary. Furthermore, the “cleanxml” annotator can extract the reference date for a given XML document, so relative dates, e.g., “yesterday”, are transparently normalized with no configuration necessary.","include SUTime
call  from ner annotator
extract reference date for given XML document"
"SUTime supports the same annotations as before, i.e., NamedEntityTagAnnotation is set with the label of the numeric entity (DATE, TIME, DURATION, MONEY, PERCENT, or NUMBER) and NormalizedNamedEntityTagAnnotation is set to the value of the normalized temporal expression.","support same annotations
set NamedEntityTagAnnotation with label
set NormalizedNamedEntityTagAnnotation to value"
"Also, SUTime sets the TimexAnnotation key to an edu.stanford.nlp.time.Timex object, which contains the complete list of TIMEX3 fields for the corresponding expressions, such as “val”, “alt_val”, “type”, “tid”. This might be useful to developers interested in recovering complete TIMEX3 expressions.","set TimexAnnotation key to edu.stanford.nlp.time.Timex object"
"Reference dates are by default extracted from the “datetime” and “date” tags in an xml document. To set a different set of tags to use, use the clean.datetags property. When using the API, reference dates can be added to an Annotation via edu.stanford.nlp.ling.CoreAnnotations.DocDateAnnotation, although note that when processing an xml document, the cleanxml annotator will overwrite the DocDateAnnotation if “datetime” or “date” are specified in the document.","extract  in xml document
extract  from datetime date tags
set different set of tags
use clean.datetags property
use API
process xml document
overwrite DocDateAnnotation
add reference dates to annotation
specify datetime in document
specify date in document"
"The DocDateAnnotator provides a variety of options for setting the document date. The ner annotator will run this annotator as a sub-annotator. These can be specified by setting properties for the ner.docdate sub-annotator.","provide variety of options
set document date
run annotator as sub-annotator
set properties for ner.docdate sub-annotator"
"The following example shows how to access label confidences for tokens and entities. Each token stores the probability of its NER label given by the CRF that was used to assign the label in the CoreAnnotations.NamedEntityTagProbsAnnotation.class. Each entity mention contains the probability of the token with the lowest label probability in its span. For example if Los Angeles had the following probabilities:","access label confidences for tokens
access label confidences for entities
assign label in CoreAnnotations.NamedEntityTagProbsAnnotation.class
use CRF"
"the entity Los Angeles would be assigned the LOCATION tag with a confidence of .992.","assign LOCATION tag with confidence
assign entity los Angeles with confidence"
"Below is code for accessing these confidences.","access confidences"
"It is possible to run Stanford CoreNLP with NER models that ignore capitalization. We have trained models like this for English. You can find details on the Caseless models page.","run Stanford CoreNLP with NER models
ignore capitalization
ignore NER models"
"The training process can be customized using a properties file. Here is an example properties file for training an English model(ner.model.props):","use properties file"
"SUTime rules can be changed by modifying its included TokensRegex rule files. Changing other rule-based components (money, etc.) requires changes to the Java source code.","modify included TokensRegex rule files
change SUTime rules
change other rule-based components"
