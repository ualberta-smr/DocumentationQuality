The simplest way to define a component is to write a JavaScript function:,"function Welcome(props) { return <h1>Hello, {props.name}h1>; }"
You can also use an ES6 class to define a component:,"class Welcome extends React.Component { render() { return <h1>Hello, {this.props.name}h1>; } }"
"When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.","function Welcome(props) { return <h1>Hello, {props.name}h1>; } const element = <Welcome name=""Sara"" />;ReactDOM.render( element, document.getElementById('root') );"
"For example, we can create an App component that renders Welcome many times:","function Welcome(props) { return <h1>Hello, {props.name}h1>; } function App() { return ( <div> <Welcome name=""Sara"" /> <Welcome name=""Cahal"" /> <Welcome name=""Edite"" /> div> ); } ReactDOM.render( <App />, document.getElementById('root') );"
Don’t be afraid to split components into smaller components.,"function Comment(props) { return ( <div className=""Comment""> <div className=""UserInfo""> <img className=""Avatar"" src={props.author.avatarUrl} alt={props.author.name} /> <div className=""UserInfo-name""> {props.author.name} div> div> <div className=""Comment-text""> {props.text} div> <div className=""Comment-date""> {formatDate(props.date)} div> div> ); }"
"This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.","function Avatar(props) { return ( <img className=""Avatar"" src={props.user.avatarUrl} alt={props.user.name} /> ); }"
We recommend naming props from the component’s own point of view rather than the context in which it is being used.,"function Comment(props) { return ( <div className=""Comment""> <div className=""UserInfo""> <Avatar user={props.author} /> <div className=""UserInfo-name""> {props.author.name} div> div> <div className=""Comment-text""> {props.text} div> <div className=""Comment-date""> {formatDate(props.date)} div> div> ); }"
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function UserInfo(props) { return ( <div className=""UserInfo""> <Avatar user={props.user} /> <div className=""UserInfo-name""> {props.user.name} div> div> ); }"
"Next, we will extract a UserInfo component that renders an Avatar next to the user’s name:","function Comment(props) { return ( <div className=""Comment""> <UserInfo user={props.author} /> <div className=""Comment-text""> {props.text} div> <div className=""Comment-date""> {formatDate(props.date)} div> div> ); }"
"In contrast, this function is impure because it changes its own input:","function withdraw(account, amount) { account.total -= amount; }"
