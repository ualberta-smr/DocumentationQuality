{
  "example1": {
    "post": "pandas pivot_table column names:\n\nFor a dataframe like this:\n\nd = {'id': [1,1,1,2,2], 'Month':[1,2,3,1,3],'Value':[12,23,15,45,34], 'Cost':[124,214,1234,1324,234]}\ndf = pd.DataFrame(d)\n\n     Cost  Month  Value  id\n0    124       1     12   1\n1    214       2     23   1\n2    1234      3     15   1\n3    1324      1     45   2\n4    234       3     34   2\nto which I apply pivot_table\n\ndf2 =    pd.pivot_table(df,\n                        values=['Value','Cost'],\n                        index=['id'],\n                        columns=['Month'],\n                        aggfunc=np.sum,\n                        fill_value=0)\nto get df2:\n\n       Cost            Value\nMonth     1    2     3     1   2   3\nid\n1       124  214  1234    12  23  15\n2      1324    0   234    45   0  34\nis there an easy way to format resulting dataframe column names like\n\nid     Cost1    Cost2     Cost3 Value1   Value2   Value3\n1       124      214      1234    12        23       15\n2      1324       0       234     45         0       34\nIf I do:\n\ndf2.columns =[s1 + str(s2) for (s1,s2) in df2.columns.tolist()]\nI get:\n\n    Cost1  Cost2  Cost3  Value1  Value2  Value3\nid\n1     124    214   1234      12      23      15\n2    1324      0    234      45       0      34\nHow to get rid of the extra level?\n\nthanks!",
    "api": "pandas.pivot_table",
    "discusses_api": "no"
  },
  "example2": {
    "post": "python pandas: pivot_table silently drops indices with nans:\n\nIs there an option not to drop the indices with NaN in them? I think silently dropping these rows from the pivot will at some point cause someone serious pain.\n\nimport pandas\nimport numpy\n\na = [['a', 'b', 12, 12, 12], ['a', numpy.nan, 12.3, 233., 12], ['b', 'a', 123.23, 123, 1], ['a', 'b', 1, 1, 1.]]\n\ndf = pandas.DataFrame(a, columns=['a', 'b', 'c', 'd', 'e'])\n\ndf_pivot = df.pivot_table(index=['a', 'b'], values=['c', 'd', 'e'], aggfunc=sum)\nprint(df)\nprint(df_pivot)\nOutput:\n\n   a    b       c    d   e\n0  a    b   12.00   12  12\n1  a  NaN   12.30  233  12\n2  b    a  123.23  123   1\n3  a    b    1.00    1   1\n          c    d   e\na b\na b   13.00   13  13\nb a  123.23  123   1",
    "api": "pandas.pivot_table",
    "discusses_api": "yes"
  }
}