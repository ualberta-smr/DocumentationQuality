{
  "example1": {
    "post": "Why does numpy.savez() output non reproducible files?:\nThe function numpy.savez() allows to store numpy objects in a file. Storing the same same object in two files results in two different files:\n\nimport numpy as np\nsome_array = np.arange(42)\nnp.savez('/tmp/file1', some_array=some_array)\nnp.savez('/tmp/file2', some_array=some_array)\nThe two files differ:\n\n$ diff /tmp/file1.npz /tmp/file2.npz\nBinary files /tmp/file1.npz and /tmp/file2.npz differ\nWhy aren't the files identical? Is there some random behavior, filename or time stamp included? Can this be workaround or fixed? (Is it a bug?)\n\nNote that this is not the case for np.save(). Files produced by np.save() are identical for identical inputs. So I guess it is related to zipping of the data.\n\nAFAICS there are only two bits different:\n\n$ xxd /tmp/file1.npz > /tmp/file1.hex\n$ xxd /tmp/file2.npz > /tmp/file2.hex\n$ diff -u0 /tmp/file1.hex /tmp/file2.hex\n--- /tmp/file1.hex      2018-03-13 13:39:12.235897095 +0100\n+++ /tmp/file2.hex      2018-03-13 13:39:08.743927081 +0100\n@@ -1 +1 @@\n-0000000: 504b 0304 1400 0000 0000 ce6c 6d4c 9c9d  PK.........lmL..\n+0000000: 504b 0304 1400 0000 0000 cf6c 6d4c 9c9d  PK.........lmL..\n@@ -30 +30 @@\n-00001d0: 1403 1400 0000 0000 ce6c 6d4c 9c9d 6ad9  .........lmL..j.\n+00001d0: 1403 1400 0000 0000 cf6c 6d4c 9c9d 6ad9  .........lmL..j.\nI can't find any good hint in the implementation of the function, but I haven't checked the zipping code yet (also Python 3.6 might make a difference).\n\nNote: Tested with Python 2.7 and numpy 1.9.2.",
    "api": "numpy.save",
    "discusses_api": "no",
    "thoughts": "The problem is related to zipping of the data. Though the the API numpy.save was mentioned in this post, but the problem is not regarding the API numpy.save, instead it is about the API numpy.savez. The answer is no."

  },
  "example2": {
    "post": "How to create dummies for certain columns with pandas.get_dummies():\ndf = pd.DataFrame({'A': ['x', 'y', 'x'], 'B': ['z', 'u', 'z'],\n                  'C': ['1', '2', '3'],\n                  'D':['j', 'l', 'j']})\nI just want Column A and D to get dummies not for Column B. If I used pd.get_dummies(df), all columns turned into dummies.\n\nI want the final result containing all of columns , which means column C and column B exit,like 'A_x','A_y','B','C','D_j','D_l'.",
    "api": "pandas.get_dummies",
    "discusses_api": "yes",
    "thoughts": "The user is struggling to get output in a certain way using pandas.get_dummies. So the answer is yes."
  }
}