,id,HAS_API,DISCUSSES_API,discusses_api_result,lexrank_summary
0,63220629,True,False,False,"I have data on a (x,y) grid with scalar values (time) at each point. Now in my process I would analyse the gradient values above and make some adjustments (There is some unsual edge effects that are being create which I need to rectify) and would then integrate the values to get back to a surface which would be very similar to f(x,y) shown above."
1,24633618,True,True,True,What does numpy.gradient do?. What is the gradient of an array?
2,40589624,False,False,False,"Generating colour image gradient using numpy. I wrote a function which generates 2 coloured image blocks: I would then like to combine those two colours to form a gradient, ie 1 image going from one colour to the other."
3,17784587,False,False,False,"gradient descent using python and numpy. My theta from the above code is 100.2 100.2, but it should be 100.2 61.09 in matlab which is correct."
4,51780178,True,True,True,"Adding in a zero to get the lengths matching up (like in the example code above) gives incorrect answers, with an infinite gradient for one point. I can't understand / follow the numpy.gradient documentation for non-uniform spacing (https://docs.scipy.org/doc/numpy/reference/generated/numpy.gradient.html) How should I specify the spacing between points?"
5,57261254,True,False,True,"I want to calculate the partial derivatives of an arbitrary tensor, akin to the action of the center finite-difference numpy.gradient function. I have other ways around this problem, but since I am already using PyTorch, I'm wondering if it is possible use the autograd module (or, in general, any other autodifferentiation module) to perform this action."
6,18991408,True,False,True,"I've been looking around in Numpy/Scipy for modules containing finite difference functions. However, the closest thing I've found is numpy.gradient(), which is good for 1st-order finite differences of 2nd order accuracy, but not so much if you're wanting higher-order derivatives or more accurate methods."
7,46641453,True,False,False,Numerical gradient for nonlinear function in numpy/scipy. My code snippet is as follows: The other downside of this is that I have to evaluate x at several points (and it returns the gradient at several points) Is there a better option in numpy/scipy for the gradient to be numerically evaluated at a single point so I can implement this as a callback function?
8,38809852,True,True,True,"Is it relative to the array index or to the value in the array? If it depends on the value, then does that mean that numpy.gradient could not be used with images since values of neighbor pixels have no fixed value differences?"
9,54685949,False,False,False,First of all I tried (3x3) filter again. Unfortunately it is not possible to look inside the souce code for the correlate1d function since its functionallty is hidden inside the already compiled _nd_image.pyd file in the site-packages folder of my conda enviroment.
10,71217690,True,False,False,Derivative/gradient calculation for non structured data in python. I have a bunch of unstructured points in 3D and a function value at each one.
11,48322740,False,False,False,"The problem I see with the above is that, since the curve is one-pixel wide, at any point the slope can be only one of 0, 1 or infinity. I am looking for some suggestion on where to start in order to get a smooth curve out of the above, so that I can calculate curvature in a more meaningful way."
12,11993790,True,False,False,"I'm using numpy 1.6 and matplotlib 1.1.1, trying to generate a velocity field from a scalar field that I have. So far, I'm generating my scalar data as such: Then I get the gradient: From the numpy documentation, velx is the x component and vely is the y component of the vector field."
13,16078818,True,True,True,Calculating gradient with NumPy. I really can not understand what numpy.gradient function does and how to use it for computation of multivariable function gradient.
14,46635977,False,False,False,"That I'm trying to use in a function to compute the gradient of the regularized loss function. The issue is, w is always equal to (M + 1) - whereas in the dataSet, t is equal to 15."
15,52306279,False,False,False,"pytorch gradient / derivative / difference along axis like numpy.diff. However, you can't simply do this element-wise (due to the tensor limitations), so I tried to construct another tensor, with the elements shifted along one axis: But now we have a different problem - indexing doesn't really work to mimic numpy in pytorch as it advertises, so you can't index with a ""list-like"" Tensor like this."
16,39975050,False,False,False,Stochastic gradient descent implementation with Python's numpy. I have to implement stochastic gradient descent using python numpy library.
17,39333681,False,False,False,"Writing gradient fill in python with numpy similar to Photoshop's. I have a working solution that creates a gradient image at 0 degrees and then rotates it, but I believe it would be more efficient to generate the image directly."
18,45776214,True,True,True,"I have calculated some 100,000 points of a function (return_times) only computable numerically, and now want to take it's derivate using numpy.gradient. Except that it doesn't work."
19,26361007,True,True,True,"numpy.gradient() seems to produce erroneous boundary values (using first differences). There seems to be a problem with the function numpy.gradient() (numpy 1.9.0) regarding how it computes the boundary (start and end) values (which I know it does using first differences, while central values are computed using central differences)."
20,27277954,True,True,False,"Numpy gradient of big 3D array consumes all memory. I'm using numpy to compute the gradient of a big 3D array with possibly arbitrary dimensions The problem is, the PC results unusable for a period of minutes, since ubuntu dedicates most of my 4gb of RAM to this algorithm."
21,58629493,True,False,True,"I'm now trying to use the Numba solution suggested there for another, similar function. The particular function I'm working on at the moment requires a call to numpy.gradient [fx, fy] = np.gradient(DEM, cellsize, cellsize) However, when I try to implement my function using Numba, I run into an issue with gradient."
22,31206443,True,False,True,It is possible to calculate the first derivative with numpy using the numpy.gradient() function. This is a comment regarding laplace versus the hessian matrix; this is no more a question but is meant to help understanding of future readers.
23,23470582,True,False,False,"Efficient way to apply function to each 2D slice of 3D numpy array. Currently I am doing This gives me what I want, but the list comprehension is very slow."
