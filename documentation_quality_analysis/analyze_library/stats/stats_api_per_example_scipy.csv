"import scipy
result = scipy.optimize.curve_fit(...)
",https://docs.scipy.org/doc/scipy/reference/index.html, scipy.optimize.curve_fit
"from scipy import optimize
result = optimize.curve_fit(...)
",https://docs.scipy.org/doc/scipy/reference/index.html, scipy.optimize.curve_fit
">>> from scipy.integrate import quad
>>> quad(deterministic.pdf, -1e-1, 1e-1)
(4.163336342344337e-13, 0.0)
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.integrate.quad
">>> quad(deterministic.pdf, -1e-3, 1e-3)  # warning removed
(1.000076872229173, 0.0010625571718182458)
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.integrate.quad
">>> normdiscrete = stats.rv_discrete(values=(gridint,
...              np.round(probs, decimals=7)), name='normdiscrete')
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.rv_discrete
">>> f2 = np.hstack([f[:5].sum(), f[5:-5], f[-5:].sum()])
>>> p2 = np.hstack([probs[:5].sum(), probs[5:-5], probs[-5:].sum()])
>>> ch2, pval = stats.chisquare(f2, p2*n_sample)
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.chisquare
">>> m, v, s, k = stats.t.stats(10, moments='mvsk')
>>> n, (smin, smax), sm, sv, ss, sk = stats.describe(x)
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.describe
">>> print('t-statistic = %6.3f pvalue = %6.4f' %  stats.ttest_1samp(x, m))
t-statistic =  0.391 pvalue = 0.6955  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.ttest_1samp
">>> print('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 't', (10,)))
KS-statistic D =  0.016 pvalue = 0.9571  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.kstest
">>> print('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 'norm'))
KS-statistic D =  0.028 pvalue = 0.3918  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.kstest
">>> d, pval = stats.kstest((x-x.mean())/x.std(), 'norm')
>>> print('KS-statistic D = %6.3f pvalue = %6.4f' % (d, pval))
KS-statistic D =  0.032 pvalue = 0.2397  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.kstest
">>> quantiles = [0.0, 0.01, 0.05, 0.1, 1-0.10, 1-0.05, 1-0.01, 1.0]
>>> crit = stats.t.ppf(quantiles, 10)
>>> crit
array([       -inf, -2.76376946, -1.81246112, -1.37218364,  1.37218364,
        1.81246112,  2.76376946,         inf])
>>> n_sample = x.size
>>> freqcount = np.histogram(x, bins=crit)[0]
>>> tprob = np.diff(quantiles)
>>> nprob = np.diff(stats.norm.cdf(crit))
>>> tch, tpval = stats.chisquare(freqcount, tprob*n_sample)
>>> nch, npval = stats.chisquare(freqcount, nprob*n_sample)
>>> print('chisquare for t:      chi2 = %6.2f pvalue = %6.4f' % (tch, tpval))
chisquare for t:      chi2 =  2.30 pvalue = 0.8901  # random
>>> print('chisquare for normal: chi2 = %6.2f pvalue = %6.4f' % (nch, npval))
chisquare for normal: chi2 = 64.60 pvalue = 0.0000  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.chisquare
">>> tdof, tloc, tscale = stats.t.fit(x)
>>> nloc, nscale = stats.norm.fit(x)
>>> tprob = np.diff(stats.t.cdf(crit, tdof, loc=tloc, scale=tscale))
>>> nprob = np.diff(stats.norm.cdf(crit, loc=nloc, scale=nscale))
>>> tch, tpval = stats.chisquare(freqcount, tprob*n_sample)
>>> nch, npval = stats.chisquare(freqcount, nprob*n_sample)
>>> print('chisquare for t:      chi2 = %6.2f pvalue = %6.4f' % (tch, tpval))
chisquare for t:      chi2 =  1.58 pvalue = 0.9542  # random
>>> print('chisquare for normal: chi2 = %6.2f pvalue = %6.4f' % (nch, npval))
chisquare for normal: chi2 = 11.08 pvalue = 0.0858  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.chisquare
">>> print('normal skewtest teststat = %6.3f pvalue = %6.4f' % stats.skewtest(x))
normal skewtest teststat =  2.785 pvalue = 0.0054  # random
>>> print('normal kurtosistest teststat = %6.3f pvalue = %6.4f' % stats.kurtosistest(x))
normal kurtosistest teststat =  4.757 pvalue = 0.0000  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.skewtest scipy.stats.kurtosistest
">>> print('normaltest teststat = %6.3f pvalue = %6.4f' % stats.normaltest(x))
normaltest teststat = 30.379 pvalue = 0.0000  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.normaltest
">>> print('normaltest teststat = %6.3f pvalue = %6.4f' %
...       stats.normaltest((x-x.mean())/x.std()))
normaltest teststat = 30.379 pvalue = 0.0000  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.normaltest
">>> print('normaltest teststat = %6.3f pvalue = %6.4f' %
...       stats.normaltest(stats.t.rvs(10, size=100)))
normaltest teststat =  4.698 pvalue = 0.0955  # random
>>> print('normaltest teststat = %6.3f pvalue = %6.4f' %
...              stats.normaltest(stats.norm.rvs(size=1000)))
normaltest teststat =  0.613 pvalue = 0.7361  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.normaltest
">>> rvs1 = stats.norm.rvs(loc=5, scale=10, size=500)
>>> rvs2 = stats.norm.rvs(loc=5, scale=10, size=500)
>>> stats.ttest_ind(rvs1, rvs2)
Ttest_indResult(statistic=-0.5489036175088705, pvalue=0.5831943748663959)  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.ttest_ind
">>> rvs3 = stats.norm.rvs(loc=8, scale=10, size=500)
>>> stats.ttest_ind(rvs1, rvs3)
Ttest_indResult(statistic=-4.533414290175026, pvalue=6.507128186389019e-06)  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.ttest_ind
">>> stats.ks_2samp(rvs1, rvs2)
KstestResult(statistic=0.026, pvalue=0.9959527565364388)  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.ks_2samp
">>> stats.ks_2samp(rvs1, rvs3)
KstestResult(statistic=0.114, pvalue=0.00299005061044668)  # random
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.ks_2samp
">>> x1 = np.array([-7, -5, 1, 4, 5], dtype=np.float64)
>>> kde1 = stats.gaussian_kde(x1)
>>> kde2 = stats.gaussian_kde(x1, bw_method='silverman')
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde
">>> ax.plot(x1, np.zeros(x1.shape), 'b+', ms=20)  # rug plot
>>> x_eval = np.linspace(-10, 10, num=200)
>>> ax.plot(x_eval, kde1(x_eval), 'k-', label=""Scott's Rule"")
>>> ax.plot(x_eval, kde2(x_eval), 'r-', label=""Silverman's Rule"")
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde
">>> ax.plot(x1, np.zeros(x1.shape), 'b+', ms=20)  # rug plot
>>> kde3 = stats.gaussian_kde(x1, bw_method=my_kde_bandwidth)
>>> ax.plot(x_eval, kde3(x_eval), 'g-', label=""With smaller BW"")
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde
"import numpy as np
import matplotlib.pyplot as plt
from scipy import stats


rng = np.random.default_rng()
x1 = rng.normal(size=200)  # random data, normal distribution
xs = np.linspace(x1.min()-1, x1.max()+1, 200)

kde1 = stats.gaussian_kde(x1)
kde2 = stats.gaussian_kde(x1, bw_method='silverman')

fig = plt.figure(figsize=(8, 6))

ax1 = fig.add_subplot(211)
ax1.plot(x1, np.zeros(x1.shape), 'b+', ms=12)  # rug plot
ax1.plot(xs, kde1(xs), 'k-', label=""Scott's Rule"")
ax1.plot(xs, kde2(xs), 'b-', label=""Silverman's Rule"")
ax1.plot(xs, stats.norm.pdf(xs), 'r--', label=""True PDF"")

ax1.set_xlabel('x')
ax1.set_ylabel('Density')
ax1.set_title(""Normal (top) and Student's T$_{df=5}$ (bottom) distributions"")
ax1.legend(loc=1)

x2 = stats.t.rvs(5, size=200, random_state=rng)  # random data, T distribution
xs = np.linspace(x2.min() - 1, x2.max() + 1, 200)

kde3 = stats.gaussian_kde(x2)
kde4 = stats.gaussian_kde(x2, bw_method='silverman')

ax2 = fig.add_subplot(212)
ax2.plot(x2, np.zeros(x2.shape), 'b+', ms=12)  # rug plot
ax2.plot(xs, kde3(xs), 'k-', label=""Scott's Rule"")
ax2.plot(xs, kde4(xs), 'b-', label=""Silverman's Rule"")
ax2.plot(xs, stats.t.pdf(xs, 5), 'r--', label=""True PDF"")

ax2.set_xlabel('x')
ax2.set_ylabel('Density')

plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde scipy.stats.gaussian_kde scipy.stats.gaussian_kde scipy.stats.gaussian_kde
">>> kde = stats.gaussian_kde(x2)
>>> kde2 = stats.gaussian_kde(x2, bw_method='silverman')
>>> kde3 = stats.gaussian_kde(x2, bw_method=partial(my_kde_bandwidth, fac=0.2))
>>> kde4 = stats.gaussian_kde(x2, bw_method=partial(my_kde_bandwidth, fac=0.5))
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde
">>> ax.plot(x2, np.zeros(x2.shape), 'b+', ms=12)
>>> ax.plot(x_eval, kde(x_eval), 'k-', label=""Scott's Rule"")
>>> ax.plot(x_eval, kde2(x_eval), 'b-', label=""Silverman's Rule"")
>>> ax.plot(x_eval, kde3(x_eval), 'g-', label=""Scott * 0.2"")
>>> ax.plot(x_eval, kde4(x_eval), 'c-', label=""Scott * 0.5"")
>>> ax.plot(x_eval, bimodal_pdf, 'r--', label=""Actual PDF"")
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde scipy.stats.gaussian_kde scipy.stats.gaussian_kde
">>> X, Y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]
>>> positions = np.vstack([X.ravel(), Y.ravel()])
>>> values = np.vstack([m1, m2])
>>> kernel = stats.gaussian_kde(values)
>>> Z = np.reshape(kernel.evaluate(positions).T, X.shape)
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.gaussian_kde
">>> import numpy as np
>>> from scipy.stats import qmc
>>> space_1 = np.array([[1, 3], [2, 6], [3, 2], [4, 5], [5, 1], [6, 4]])
>>> space_2 = np.array([[1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 6]])
>>> l_bounds = [0.5, 0.5]
>>> u_bounds = [6.5, 6.5]
>>> space_1 = qmc.scale(space_1, l_bounds, u_bounds, reverse=True)
>>> space_2 = qmc.scale(space_2, l_bounds, u_bounds, reverse=True)
>>> qmc.discrepancy(space_1)
0.008142039609053464
>>> qmc.discrepancy(space_2)
0.010456854423869011
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.qmc.scale scipy.stats.qmc.discrepancy
"""""""Sobol' and Halton sequences.""""""
from scipy.stats import qmc
import numpy as np

import matplotlib.pyplot as plt


rng = np.random.default_rng()

n_sample = 256
dim = 2

sample = {}

# Sobol'
engine = qmc.Sobol(d=dim, seed=rng)
sample[""Sobol'""] = engine.random(n_sample)

# Halton
engine = qmc.Halton(d=dim, seed=rng)
sample[""Halton""] = engine.random(n_sample)

fig, axs = plt.subplots(1, 2, figsize=(8, 4))

for i, kind in enumerate(sample):
    axs[i].scatter(sample[kind][:, 0], sample[kind][:, 1])

    axs[i].set_aspect('equal')
    axs[i].set_xlabel(r'$x_1$')
    axs[i].set_ylabel(r'$x_2$')
    axs[i].set_title(f'{kind}—$C^2 = ${qmc.discrepancy(sample[kind]):.2}')

plt.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.qmc.Sobol scipy.stats.qmc.Halton scipy.stats.qmc.discrepancy
">>> from scipy.stats import qmc
>>> engine = qmc.Halton(d=2)
>>> engine.random(5)
array([[0.22166437, 0.07980522],  # random
       [0.72166437, 0.93165708],
       [0.47166437, 0.41313856],
       [0.97166437, 0.19091633],
       [0.01853937, 0.74647189]])
>>> engine.random(5)
array([[0.51853937, 0.52424967],  # random
       [0.26853937, 0.30202745],
       [0.76853937, 0.857583  ],
       [0.14353937, 0.63536078],
       [0.64353937, 0.01807683]])
",https://docs.scipy.org/doc/scipy/tutorial/stats.html, scipy.stats.qmc.Halton
">>> import scipy as sp
>>> import numpy
>>> dense = numpy.array([[1, 0, 0, 2], [0, 4, 1, 0], [0, 0, 5, 0]])
>>> sparse = sp.sparse.coo_array(dense)
>>> dense
array([[1, 0, 0, 2],
    [0, 4, 1, 0],
    [0, 0, 5, 0]])
>>> sparse
<3x4 sparse array of type ''
      with 5 stored elements in COOrdinate format>
",https://docs.scipy.org/doc/scipy/tutorial/sparse.html, scipy.sparse.coo_array
">>> csr = sp.sparse.csr_array((data, (row, col)))
>>> csr
<3x4 sparse array of type ''
     with 5 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/tutorial/sparse.html, scipy.sparse.csr_array
">>> csr = sp.sparse.csr_array((data, (row, col)))
>>> csr
<3x4 sparse array of type ''
     with 6 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/tutorial/sparse.html, scipy.sparse.csr_array
">>> dupes = sp.sparse.coo_array((data, (row, col)))
>>> dupes
<3x4 sparse array of type ''
     with 6 stored elements in COOrdinate format>
",https://docs.scipy.org/doc/scipy/tutorial/sparse.html, scipy.sparse.coo_array
">>> coo = sp.sparse.coo_array(([1, 1, 1], ([0, 2, 1], [0, 1, 2])))
>>> coo.has_canonical_format
False
",https://docs.scipy.org/doc/scipy/tutorial/sparse.html, scipy.sparse.coo_array
">>> from scipy import special
>>> import numpy as np
>>> def drumhead_height(n, k, distance, angle, t):
...    kth_zero = special.jn_zeros(n, k)[-1]
...    return np.cos(t) * np.cos(n*angle) * special.jn(n, distance*kth_zero)
>>> theta = np.r_[0:2*np.pi:50j]
>>> radius = np.r_[0:1:50j]
>>> x = np.array([r * np.cos(theta) for r in radius])
>>> y = np.array([r * np.sin(theta) for r in radius])
>>> z = np.array([drumhead_height(1, 1, r, theta, 0.5) for r in radius])
",https://docs.scipy.org/doc/scipy/tutorial/special.html, scipy.special.jn_zeros
"from scipy.optimize.cython_optimize cimport brentq

# import math from Cython
from libc cimport math

myargs = {'C0': 1.0, 'C1': 0.7}  # a dictionary of extra arguments
XLO, XHI = 0.5, 1.0  # lower and upper search boundaries
XTOL, RTOL, MITR = 1e-3, 1e-3, 10  # other solver parameters

# user-defined struct for extra parameters
ctypedef struct test_params:
    double C0
    double C1


# user-defined callback
cdef double f(double x, void *args) noexcept:
    cdef test_params *myargs = <test_params *> args
    return myargs.C0 - math.exp(-(x - myargs.C1))


# Cython wrapper function
cdef double brentq_wrapper_example(dict args, double xa, double xb,
                                   double xtol, double rtol, int mitr):
    # Cython automatically casts dictionary to struct
    cdef test_params myargs = args
    return brentq(
        f, xa, xb, <test_params *> &myargs, xtol, rtol, mitr, NULL)


# Python function
def brentq_example(args=myargs, xa=XLO, xb=XHI, xtol=XTOL, rtol=RTOL,
                   mitr=MITR):
    '''Calls Cython wrapper from Python.'''
    return brentq_wrapper_example(args, xa, xb, xtol, rtol, mitr)
",https://docs.scipy.org/doc/scipy/reference/optimize.cython_optimize.html, scipy.optimize.brentq
"from scipy.optimize.cython_optimize cimport zeros_full_output


# cython brentq solver with full output
cdef zeros_full_output brentq_full_output_wrapper_example(
        dict args, double xa, double xb, double xtol, double rtol,
        int mitr):
    cdef test_params myargs = args
    cdef zeros_full_output my_full_output
    # use my_full_output instead of NULL
    brentq(f, xa, xb, &myargs, xtol, rtol, mitr, &my_full_output)
    return my_full_output


# Python function
def brent_full_output_example(args=myargs, xa=XLO, xb=XHI, xtol=XTOL,
                              rtol=RTOL, mitr=MITR):
    '''Returns full output'''
    return brentq_full_output_wrapper_example(args, xa, xb, xtol, rtol,
                                              mitr)

result = brent_full_output_example()
# {'error_num': 0,
#  'funcalls': 6,
#  'iterations': 5,
#  'root': 0.6999942848231314}
",https://docs.scipy.org/doc/scipy/reference/optimize.cython_optimize.html, scipy.optimize.brentq
">>> from scipy.linalg import hilbert
>>> n = 1000
>>> A = hilbert(n)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.hilbert
">>> from scipy.sparse.linalg import aslinearoperator
>>> L = aslinearoperator(A)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.sparse.linalg.aslinearoperator
">>> eps = 1e-3
>>> k, idx, proj = sli.interp_decomp(A, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> idx, proj = sli.interp_decomp(A, k)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> k, idx, proj = sli.interp_decomp(A, eps, rand=False)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> idx, proj = sli.interp_decomp(A, k, rand=False)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> k, idx, proj = sli.interp_decomp(L, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> idx, proj = sli.interp_decomp(L, k)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.interp_decomp
">>> B = sli.reconstruct_skel_matrix(A, k, idx)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.reconstruct_skel_matrix
">>> P = sli.reconstruct_interp_matrix(idx, proj)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.reconstruct_interp_matrix
">>> C = sli.reconstruct_matrix_from_id(B, idx, proj)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.reconstruct_matrix_from_id
">>> U, S, V = sli.id_to_svd(B, idx, proj)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.id_to_svd
">>> U, S, V = sli.svd(A, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.svd
">>> U, S, V = sli.svd(A, k)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.svd
">>> U, S, V = sli.svd(L, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.svd
">>> U, S, V = sli.svd(L, k)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.svd
">>> snorm = sli.estimate_spectral_norm(A)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.estimate_spectral_norm
">>> A1, A2 = A**2, A
>>> diff = sli.estimate_spectral_norm_diff(A1, A2)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.estimate_spectral_norm_diff
">>> k = sli.estimate_rank(A, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.estimate_rank
">>> k = sli.estimate_rank(L, eps)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.estimate_rank
">>> sli.seed('default')
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.seed
">>> s = 42
>>> sli.seed(s)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.seed
">>> arr = sli.rand(n)
",https://docs.scipy.org/doc/scipy/reference/linalg.interpolative.html, scipy.linalg.interpolative.rand
">>> import numpy as np
>>> G_dense = np.array([[0, 2, 1],
...                     [2, 0, 0],
...                     [1, 0, 0]])
>>> G_masked = np.ma.masked_values(G_dense, 0)
>>> from scipy.sparse import csr_matrix
>>> G_sparse = csr_matrix(G_dense)
",https://docs.scipy.org/doc/scipy/reference/sparse.csgraph.html, scipy.sparse.csr_matrix
">>> import numpy as np
>>> G2_data = np.array([[np.inf, 2,      0     ],
...                     [2,      np.inf, np.inf],
...                     [0,      np.inf, np.inf]])
>>> G2_masked = np.ma.masked_invalid(G2_data)
>>> from scipy.sparse.csgraph import csgraph_from_dense
>>> # G2_sparse = csr_matrix(G2_data) would give the wrong result
>>> G2_sparse = csgraph_from_dense(G2_data, null_value=np.inf)
>>> G2_sparse.data
array([ 2.,  0.,  2.,  0.])
",https://docs.scipy.org/doc/scipy/reference/sparse.csgraph.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.csgraph_from_dense
"cd doc
python -c ""from scipy import constants as s; s.test()""
",https://docs.scipy.org/doc/scipy/building/understanding_meson.html, numpy.test
">>> image = datasets.face(gray=True).astype(np.float32)
>>> derfilt = np.array([1.0, -2, 1.0], dtype=np.float32)
>>> ck = signal.cspline2d(image, 8.0)
>>> deriv = (signal.sepfir2d(ck, derfilt, [1]) +
...          signal.sepfir2d(ck, [1], derfilt))
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.datasets.face scipy.signal.sepfir2d
"laplacian = np.array([[0,1,0], [1,-4,1], [0,1,0]], dtype=np.float32)
deriv2 = signal.convolve2d(ck,laplacian,mode='same',boundary='symm')
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.convolve2d
">>> x = np.array([1.0, 2.0, 3.0])
>>> h = np.array([0.0, 1.0, 0.0, 0.0, 0.0])
>>> signal.convolve(x, h)
array([ 0.,  1.,  2.,  3.,  0.,  0.,  0.])
>>> signal.convolve(x, h, 'same')
array([ 2.,  3.,  0.])
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.convolve
">>> x = np.array([[1., 1., 0., 0.], [1., 1., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])
>>> h = np.array([[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 0.]])
>>> signal.convolve(x, h)
array([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  1.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.convolve
">>> image = datasets.face(gray=True)
>>> w = np.zeros((50, 50))
>>> w[0][0] = 1.0
>>> w[49][25] = 1.0
>>> image_new = signal.fftconvolve(image, w)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.datasets.face scipy.signal.fftconvolve
">>> image = np.asarray(datasets.ascent(), np.float64)
>>> w = signal.windows.gaussian(51, 10.0)
>>> image_new = signal.sepfir2d(image, w, w)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.datasets.ascent scipy.signal.windows.gaussian scipy.signal.sepfir2d
">>> x = np.array([1., 0., 0., 0.])
>>> b = np.array([1.0/2, 1.0/4])
>>> a = np.array([1.0, -1.0/3])
>>> signal.lfilter(b, a, x)
array([0.5, 0.41666667, 0.13888889, 0.0462963])
>>> zi = signal.lfiltic(b, a, y=[2.])
>>> signal.lfilter(b, a, x, zi=zi)
(array([ 1.16666667,  0.63888889,  0.21296296,  0.07098765]), array([0.02366]))
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.lfilter scipy.signal.lfiltic
">>> b = np.array([1.0/2, 1.0/4])
>>> a = np.array([1.0, -1.0/3])
>>> signal.tf2zpk(b, a)
(array([-0.5]), array([ 0.33333333]), 0.5)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.tf2zpk
">>> b1 = signal.firwin(40, 0.5)
>>> b2 = signal.firwin(41, [0.3, 0.8])
>>> w1, h1 = signal.freqz(b1)
>>> w2, h2 = signal.freqz(b2)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.freqz
">>> b = signal.firwin2(150, [0.0, 0.3, 0.6, 1.0], [1.0, 2.0, 0.5, 0.0])
>>> w, h = signal.freqz(b)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.freqz
">>> b, a = signal.iirfilter(4, Wn=0.2, rp=5, rs=60, btype='lowpass', ftype='ellip')
>>> w, h = signal.freqz(b, a)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.iirfilter scipy.signal.freqz
">>> b, a = signal.iirdesign(wp=100, ws=200, gpass=2.0, gstop=40., analog=True)
>>> w, h = signal.freqs(b, a)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.iirdesign scipy.signal.freqs
">>> z, p, k = signal.tf2zpk(b, a)
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.tf2zpk
"import matplotlib.pyplot as plt
import numpy as np

from scipy.fft import rfft, rfftfreq

n, T = 100, 0.01  # number of samples and sampling interval
fcc = (20, 20.5)  # frequencies of sines
t = np.arange(n) * T
xx = (np.sin(2 * np.pi * fx_ * t) for fx_ in fcc)  # sine signals

f = rfftfreq(n, T)  # frequency bins range from 0 Hz to Nyquist freq.
XX = (rfft(x_) / n for x_ in xx)  # one-sided magnitude spectrum

fg1, ax1 = plt.subplots(1, 1, tight_layout=True, figsize=(6., 3.))
ax1.set(title=r""Magnitude Spectrum (no window) of $x(t) = \sin(2\pi f_x t)$ "",
        xlabel=rf""Frequency $f$ in Hertz (bin width $\Delta f = {f[1]}\,$Hz)"",
        ylabel=r""Magnitude $|X(f)|/\tau$"", xlim=(f[0], f[-1]))
for X_, fc_, m_ in zip(XX, fcc, ('x-', '.-')):
    ax1.plot(f, abs(X_), m_, label=rf""$f_x={fc_}\,$Hz"")

ax1.grid(True)
ax1.legend()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.fft.rfftfreq scipy.fft.rfft
"import matplotlib.pyplot as plt
import numpy as np

from scipy.fft import rfft, rfftfreq

n, T = 100, 0.01  # number of samples and sampling interval
tau = n*T
t = np.arange(n) * T
fcc = (20, 20.5)  # frequencies of sines
xx = (np.sin(2 * np.pi * fc_ * t) for fc_ in fcc)  # sine signals

f = rfftfreq(n, T)  # frequency bins range from 0 Hz to Nyquist freq.
XX = (rfft(x_) / n for x_ in xx)  # one-sided FFT normalized to magnitude

i0, i1 = 15, 25
f_cont = np.linspace(f[i0], f[i1], 501)

fg1, axx = plt.subplots(1, 2, sharey='all', tight_layout=True,
                        figsize=(6., 3.))
for c_, (ax_, X_, fx_) in enumerate(zip(axx, XX, fcc)):
    Xc_ = (np.sinc(tau * (f_cont - fx_)) +
           np.sinc(tau * (f_cont + fx_))) / 2
    ax_.plot(f_cont, abs(Xc_), f'-C{c_}', alpha=.5, label=rf""$f_x={fx_}\,$Hz"")
    m_line, _, _, = ax_.stem(f[i0:i1+1], abs(X_[i0:i1+1]), markerfmt=f'dC{c_}',
                             linefmt=f'-C{c_}', basefmt=' ')
    plt.setp(m_line, markersize=5)

    ax_.legend(loc='upper left', frameon=False)
    ax_.set(xlabel=""Frequency $f$ in Hertz"", xlim=(f[i0], f[i1]),
            ylim=(0, 0.59))

axx[0].set(ylabel=r'Magnitude $|X(f)/\tau|$')
fg1.suptitle(""Continuous and Sampled Magnitude Spectrum "", x=0.55, y=0.93)
fg1.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.fft.rfftfreq scipy.fft.rfft
"import matplotlib.pyplot as plt
import numpy as np

from scipy.fft import rfft, rfftfreq
from scipy.signal.windows import hann

n, T = 100, 0.01  # number of samples and sampling interval
tau = n*T
q = 3  # over-sampling factor
t = np.arange(n) * T
fcc = (20, 20.5)  # frequencies of sines
xx = [np.sin(2 * np.pi * fc_ * t) for fc_ in fcc]  # sine signals
w = hann(n)
c_w = abs(sum(w))  # normalize constant for window

f_X = rfftfreq(n, T)  # frequency bins range from 0 Hz to Nyquist freq.
XX = (rfft(x_ * w) / c_w for x_ in xx)  # one-sided amplitude spectrum
# Oversampled spectrum:
f_Y = rfftfreq(n*q, T)  # frequency bins range from 0 Hz to Nyquist freq.
YY = (rfft(x_ * w, n=q*n) / c_w for x_ in xx)  # one-sided magnitude spectrum

i0, i1 = 15, 25
j0, j1 = i0*q, i1*q

fg1, axx = plt.subplots(1, 2, sharey='all', tight_layout=True,
                        figsize=(6., 3.))
for c_, (ax_, X_, Y_, fx_) in enumerate(zip(axx, XX, YY, fcc)):
    ax_.plot(f_Y[j0:j1 + 1], abs(Y_[j0:j1 + 1]), f'.-C{c_}',
             label=rf""$f_x={fx_}\,$Hz"")
    m_ln, s_ln, _, = ax_.stem(f_X[i0:i1 + 1], abs(X_[i0:i1 + 1]), basefmt=' ',
                              markerfmt=f'dC{c_}', linefmt=f'-C{c_}')
    plt.setp(m_ln, markersize=5)
    plt.setp(s_ln, alpha=0.5)

    ax_.legend(loc='upper left', frameon=False)
    ax_.set(xlabel=""Frequency $f$ in Hertz"", xlim=(f_X[15], f_X[25]),
            ylim=(0, 0.59))

axx[0].set(ylabel=r'Magnitude $|X(f)/\tau|$')
fg1.suptitle(r""Magnitude Spectrum (Hann window, $%d\times$oversampled)"" % q,
             x=0.55, y=0.93)
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.windows.hann scipy.fft.rfftfreq scipy.fft.rfft
"import matplotlib.pyplot as plt
import numpy as np

from scipy.fft import rfft, rfftfreq
from scipy.signal import get_window

n, n_zp = 128, 16384  # number of samples without and with zero-padding
t = np.arange(n)
f = rfftfreq(n_zp, 1 / n)

ww = ['boxcar', 'hann', 'hamming', 'tukey', 'blackman', 'flattop']
fg0, axx = plt.subplots(len(ww), 1, sharex='all', sharey='all', figsize=(6., 4.))
for c_, (w_name_, ax_) in enumerate(zip(ww, axx)):
    w_ = get_window(w_name_, n, fftbins=False)
    W_ = rfft(w_ / abs(sum(w_)), n=n_zp)
    W_dB = 20*np.log10(np.maximum(abs(W_), 1e-250))
    ax_.plot(f, W_dB, f'C{c_}-', label=w_name_)
    ax_.text(0.1, -50, w_name_, color=f'C{c_}', verticalalignment='bottom',
             horizontalalignment='left', bbox={'color': 'white', 'pad': 0})
    ax_.set_yticks([-20, -60])
    ax_.grid(axis='x')

axx[0].set_title(""Spectral Leakage of various Windows"")
fg0.supylabel(r""Normalized Magnitude $20\,\log_{10}|W(f)/c^\operatorname{amp}|$ in dB"",
              x=0.04, y=0.5, fontsize='medium')
axx[-1].set(xlabel=r""Normalized frequency $f/\Delta f$ in bins"",
            xlim=(0, 9), ylim=(-75, 3))

fg0.tight_layout(h_pad=0.4)
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.fft.rfftfreq scipy.signal.get_window scipy.fft.rfft
"import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt
import numpy as np

from scipy import signal
from scipy.fft import rfft, rfftfreq

# Create input signal:
n = 50
x = np.zeros(n)
x[0] = n

# Apply FIR filter which delays signal by 3 samples:
y = signal.lfilter([0, 0, 0, 1], 1, x)

X, Y = (rfft(z_) / n for z_ in (x, y))
f = rfftfreq(n, 1)  # sampling interval T = 1 s

fig = plt.figure(tight_layout=True, figsize=(6., 4.))
gs = gridspec.GridSpec(3, 1)
ax0 = fig.add_subplot(gs[0, :])
ax1 = fig.add_subplot(gs[1:, :], sharex=ax0)

for Z_, n_, m_ in zip((X, Y), (""Input $X(f)$"", ""Output $Y(f)$""), ('+-', 'x-')):
    ax0.plot(f, abs(Z_), m_, alpha=.5, label=n_)
    ax1.plot(f, np.unwrap(np.angle(Z_)), m_, alpha=.5, label=n_)

ax0.set(title=""Frequency Response of 3 Sample Delay Filter (no window)"",
        ylabel=""Magnitude"", xlim=(0, f[-1]), ylim=(0, 1.1))
ax1.set(xlabel=rf""Frequency $f$ in Hertz ($\Delta f = {1/n}\,$Hz)"",
        ylabel=r""Phase in rad"")
ax1.set_yticks(-np.arange(0, 7)*np.pi/2,
               ['0', '-π/2', '-π', '-3/2π', '-2π', '-4/3π', '-3π'])

ax2 = ax1.twinx()
ax2.set(ylabel=r""Phase in Degrees"", ylim=np.rad2deg(ax1.get_ylim()),
        yticks=np.arange(-540, 90, 90))
for ax_ in (ax0, ax1):
    ax_.legend()
    ax_.grid()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.lfilter scipy.fft.rfft scipy.fft.rfftfreq
"import matplotlib.pyplot as plt
import numpy as np
import scipy.signal as signal

rng = np.random.default_rng(73625)  # seeding for reproducibility

fs, n = 10e3, 10_000
f_x, noise_power = 1270, 1e-3 * fs / 2
t = np.arange(n) / fs
x = (np.sqrt(2) * np.sin(2 * np.pi * f_x * t) +
     rng.normal(scale=np.sqrt(noise_power), size=t.shape))

fg, axx = plt.subplots(1, 2, sharex='all', tight_layout=True, figsize=(7, 3.5))
axx[0].set(title=""Squared Magnitude Spectrum"", ylabel=""Square of Magnitude in V²"")
axx[1].set(title=""Power Spectral Density"", ylabel=""Power Spectral Density in V²/Hz"")
for ax_, s_ in zip(axx, ('spectrum', 'density')):
    f_p, P_p = signal.periodogram(x, fs, 'hann', scaling=s_)
    f_w, P_w = signal.welch(x, fs, scaling=s_)
    ax_.semilogy(f_p/1e3, P_p, label=f""Periodogram ({len(f_p)} bins)"")
    ax_.semilogy(f_w/1e3, P_w, label=f""Welch's Method ({len(f_w)} bins)"")
    ax_.set(xlabel=""Frequency in kHz"", xlim=(0, 2), ylim=(1e-7, 1.3))
    ax_.grid(True)
    ax_.legend(loc='lower center')
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.periodogram scipy.signal.welch
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.fft import fftshift
>>> from scipy.signal import stft, istft, spectrogram, ShortTimeFFT
...
>>> fs, N = 200, 1001  # 200 Hz sampling rate for 5 s signal
>>> t_z = np.arange(N) / fs  # time indexes for signal
>>> z = np.exp(2j*np.pi*70 * (t_z - 0.2*t_z**2))  # complex-valued chirp
...
>>> nperseg, noverlap = 50, 40
>>> win = ('gaussian', 1e-2 * fs)  # Gaussian with 0.01 s standard dev.
...
>>> # Legacy STFT:
>>> f0_u, t0, Sz0_u = stft(z, fs, win, nperseg, noverlap,
...                        return_onesided=False, scaling='spectrum')
>>> f0, Sz0 = fftshift(f0_u), fftshift(Sz0_u, axes=0)
...
>>> # New STFT:
>>> SFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap, fft_mode='centered',
...                                scale_to='magnitude', phase_shift=None)
>>> Sz1 = SFT.stft(z)
...
>>> # Plot results:
>>> fig1, axx = plt.subplots(2, 1, sharex='all', sharey='all',
...                          figsize=(6., 5.))  # enlarge figure a bit
>>> t_lo, t_hi, f_lo, f_hi = SFT.extent(N, center_bins=True)
>>> axx[0].set_title(r""Legacy stft() produces $%d\times%d$ points"" % Sz0.T.shape)
>>> axx[0].set_xlim(t_lo, t_hi)
>>> axx[0].set_ylim(f_lo, f_hi)
>>> axx[1].set_title(r""ShortTimeFFT produces $%d\times%d$ points"" % Sz1.T.shape)
>>> axx[1].set_xlabel(rf""Time $t$ in seconds ($\Delta t= {SFT.delta_t:g}\,$s)"")
...
>>> # Calculate extent of plot with centered bins since
>>> # imshow does not interpolate by default:
>>> dt2 = (nperseg-noverlap) / fs / 2  # equals SFT.delta_t / 2
>>> df2 = fs / nperseg / 2  # equals SFT.delta_f / 2
>>> extent0 = (-dt2, t0[-1] + dt2, f0[0] - df2, f0[-1] - df2)
>>> extent1 = SFT.extent(N, center_bins=True)
...
>>> kw = dict(origin='lower', aspect='auto', cmap='viridis')
>>> im1a = axx[0].imshow(abs(Sz0), extent=extent0, **kw)
>>> im1b = axx[1].imshow(abs(Sz1), extent=extent1, **kw)
>>> fig1.colorbar(im1b, ax=axx, label=""Magnitude $|S_z(t, f)|$"")
>>> _ = fig1.supylabel(r""Frequency $f$ in Hertz ($\Delta f = %g\,$Hz)"" %
...                    SFT.delta_f, x=0.08, y=0.5, fontsize='medium')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.stft scipy.fft.fftshift scipy.signal.ShortTimeFFT.from_window scipy.signal.ShortTimeFFT.extent
">>> t0_r, z0_r = istft(Sz0_u, fs, win, nperseg, noverlap,
...                    input_onesided=False, scaling='spectrum')
>>> z1_r = SFT.istft(Sz1, k1=N)
...
>>> len(z0_r), len(z)
(1010, 1001)
>>> np.allclose(z0_r[:N], z)
True
>>> np.allclose(z1_r, z)
True
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.istft
">>> # Legacy spectrogram (detrending for complex signals not useful):
>>> f2_u, t2, Sz2_u = spectrogram(z, fs, win, nperseg, noverlap,
...                               detrend=None, return_onesided=False,
...                               scaling='spectrum', mode='complex')
>>> f2, Sz2 = fftshift(f2_u), fftshift(Sz2_u, axes=0)
...
>>> # New STFT:
... SFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap,
...                                fft_mode='centered',
...                                scale_to='magnitude', phase_shift=None)
>>> Sz3 = SFT.stft(z, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)
>>> t3 = SFT.t(N, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)
...
>>> np.allclose(t2, t3)
True
>>> np.allclose(f2, SFT.f)
True
>>> np.allclose(Sz2, Sz3)
True
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.spectrogram scipy.fft.fftshift scipy.signal.ShortTimeFFT.from_window scipy.signal.ShortTimeFFT.t
">>> t = np.linspace(-10, 10, 20)
>>> y = 1 + t + 0.01*t**2
>>> yconst = signal.detrend(y, type='constant')
>>> ylin = signal.detrend(y, type='linear')
",https://docs.scipy.org/doc/scipy/tutorial/signal.html, scipy.signal.detrend
">>> from scipy.ndimage import correlate
>>> import numpy as np
>>> correlate(np.arange(10), [1, 2.5])
array([ 0,  2,  6,  9, 13, 16, 20, 23, 27, 30])
>>> correlate(np.arange(10), [1, 2.5], output=np.float64)
array([  0. ,   2.5,   6. ,   9.5,  13. ,  16.5,  20. ,  23.5,  27. ,  30.5])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate
">>> from scipy.ndimage import correlate1d
>>> a = [0, 0, 0, 1, 0, 0, 0]
>>> correlate1d(a, [1, 1, 1])
array([0, 0, 1, 1, 1, 0, 0])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d
">>> a = [0, 0, 0, 1, 0, 0, 0]
>>> correlate1d(a, [1, 1, 1], origin = -1)
array([0, 1, 1, 1, 0, 0, 0])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d
">>> a = [0, 0, 1, 1, 1, 0, 0]
>>> correlate1d(a, [-1, 1])               # backward difference
array([ 0,  0,  1,  0,  0, -1,  0])
>>> correlate1d(a, [-1, 1], origin = -1)  # forward difference
array([ 0,  1,  0,  0, -1,  0,  0])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d
">>> correlate1d(a, [0, -1, 1])
array([ 0,  1,  0,  0, -1,  0,  0])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d
">>> def d2(input, axis, output, mode, cval):
...     return correlate1d(input, [1, -2, 1], axis, output, mode, cval, 0)
...
>>> a = np.zeros((5, 5))
>>> a[2, 2] = 1
>>> from scipy.ndimage import generic_laplace
>>> generic_laplace(a, d2)
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1., -4.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d scipy.ndimage.generic_laplace
">>> def d2(input, axis, output, mode, cval, weights):
...     return correlate1d(input, weights, axis, output, mode, cval, 0,)
...
>>> a = np.zeros((5, 5))
>>> a[2, 2] = 1
>>> generic_laplace(a, d2, extra_arguments = ([1, -2, 1],))
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1., -4.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d scipy.ndimage.generic_laplace
">>> generic_laplace(a, d2, extra_keywords = {'weights': [1, -2, 1]})
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1., -4.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_laplace
">>> a = np.zeros((5, 5))
>>> a[2, 2] = 1
>>> from scipy.ndimage import sobel, generic_gradient_magnitude
>>> generic_gradient_magnitude(a, sobel)
array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  1.41421356,  2.        ,  1.41421356,  0.        ],
       [ 0.        ,  2.        ,  0.        ,  2.        ,  0.        ],
       [ 0.        ,  1.41421356,  2.        ,  1.41421356,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_gradient_magnitude
">>> a = np.arange(12).reshape(3,4)
>>> correlate1d(a, [1, 2, 3])
array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
       [51, 56, 62, 65]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate1d
">>> def fnc(iline, oline):
...     oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]
...
>>> from scipy.ndimage import generic_filter1d
>>> generic_filter1d(a, fnc, 3)
array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
       [51, 56, 62, 65]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter1d
">>> def fnc(iline, oline, a, b):
...     oline[...] = iline[:-2] + a * iline[1:-1] + b * iline[2:]
...
>>> generic_filter1d(a, fnc, 3, extra_arguments = (2, 3))
array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
       [51, 56, 62, 65]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter1d
">>> generic_filter1d(a, fnc, 3, extra_keywords = {'a':2, 'b':3})
array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
       [51, 56, 62, 65]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter1d
">>> a = np.arange(12).reshape(3,4)
>>> correlate(a, [[1, 0], [0, 3]])
array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.correlate
">>> def fnc(buffer):
...     return (buffer * np.array([1, 3])).sum()
...
>>> from scipy.ndimage import generic_filter
>>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]])
array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter
">>> def fnc(buffer, weights):
...     weights = np.asarray(weights)
...     return (buffer * weights).sum()
...
>>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_arguments = ([1, 3],))
array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter
">>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_keywords= {'weights': [1, 3]})
array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter
">>> a = np.arange(12).reshape(3,4)
>>>
>>> class fnc_class:
...     def __init__(self, shape):
...         # store the shape:
...         self.shape = shape
...         # initialize the coordinates:
...         self.coordinates = [0] * len(shape)
...
...     def filter(self, buffer):
...         result = (buffer * np.array([1, 3])).sum()
...         print(self.coordinates)
...         # calculate the next coordinates:
...         axes = list(range(len(self.shape)))
...         axes.reverse()
...         for jj in axes:
...             if self.coordinates[jj] < self.shape[jj] - 1:
...                 self.coordinates[jj] += 1
...                 break
...             else:
...                 self.coordinates[jj] = 0
...         return result
...
>>> fnc = fnc_class(shape = (3,4))
>>> generic_filter(a, fnc.filter, footprint = [[1, 0], [0, 1]])
[0, 0]
[0, 1]
[0, 2]
[0, 3]
[1, 0]
[1, 1]
[1, 2]
[1, 3]
[2, 0]
[2, 1]
[2, 2]
[2, 3]
array([[ 0,  3,  7, 11],
       [12, 15, 19, 23],
       [28, 31, 35, 39]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter
">>> a = np.arange(12).reshape(3,4)
>>>
>>> class fnc1d_class:
...     def __init__(self, shape, axis = -1):
...         # store the filter axis:
...         self.axis = axis
...         # store the shape:
...         self.shape = shape
...         # initialize the coordinates:
...         self.coordinates = [0] * len(shape)
...
...     def filter(self, iline, oline):
...         oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]
...         print(self.coordinates)
...         # calculate the next coordinates:
...         axes = list(range(len(self.shape)))
...         # skip the filter axis:
...         del axes[self.axis]
...         axes.reverse()
...         for jj in axes:
...             if self.coordinates[jj] < self.shape[jj] - 1:
...                 self.coordinates[jj] += 1
...                 break
...             else:
...                 self.coordinates[jj] = 0
...
>>> fnc = fnc1d_class(shape = (3,4))
>>> generic_filter1d(a, fnc.filter, 3)
[0, 0]
[1, 0]
[2, 0]
array([[ 3,  8, 14, 17],
       [27, 32, 38, 41],
       [51, 56, 62, 65]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generic_filter1d
">>> a = np.arange(12).reshape(4,3).astype(np.float64)
>>> def shift_func(output_coordinates):
...     return (output_coordinates[0] - 0.5, output_coordinates[1] - 0.5)
...
>>> from scipy.ndimage import geometric_transform
>>> geometric_transform(a, shift_func)
array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
       [ 0.    ,  4.8125,  6.1875],
       [ 0.    ,  8.2625,  9.6375]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.geometric_transform
">>> def shift_func(output_coordinates, s0, s1):
...     return (output_coordinates[0] - s0, output_coordinates[1] - s1)
...
>>> geometric_transform(a, shift_func, extra_arguments = (0.5, 0.5))
array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
       [ 0.    ,  4.8125,  6.1875],
       [ 0.    ,  8.2625,  9.6375]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.geometric_transform
">>> geometric_transform(a, shift_func, extra_keywords = {'s0': 0.5, 's1': 0.5})
array([[ 0.    ,  0.    ,  0.    ],
       [ 0.    ,  1.3625,  2.7375],
       [ 0.    ,  4.8125,  6.1875],
       [ 0.    ,  8.2625,  9.6375]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.geometric_transform
">>> a = np.arange(12).reshape(4,3).astype(np.float64)
>>> a
array([[  0.,   1.,   2.],
       [  3.,   4.,   5.],
       [  6.,   7.,   8.],
       [  9.,  10.,  11.]])
>>> from scipy.ndimage import map_coordinates
>>> map_coordinates(a, [[0.5, 2], [0.5, 1]])
array([ 1.3625,  7.])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.map_coordinates
">>> from scipy.ndimage import generate_binary_structure
>>> generate_binary_structure(2, 1)
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> generate_binary_structure(2, 2)
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generate_binary_structure
">>> struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
>>> a = np.array([[1,0,0,0,0], [1,1,0,1,0], [0,0,1,1,0], [0,0,0,0,0]])
>>> a
array([[1, 0, 0, 0, 0],
       [1, 1, 0, 1, 0],
       [0, 0, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> from scipy.ndimage import binary_dilation
>>> binary_dilation(np.zeros(a.shape), struct, -1, a, border_value=1)
array([[ True, False, False, False, False],
       [ True,  True, False, False, False],
       [False, False, False, False, False],
       [False, False, False, False, False]], dtype=bool)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.binary_dilation
">>> struct = generate_binary_structure(2, 1)
>>> struct
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> from scipy.ndimage import iterate_structure
>>> iterate_structure(struct, 2)
array([[False, False,  True, False, False],
       [False,  True,  True,  True, False],
       [ True,  True,  True,  True,  True],
       [False,  True,  True,  True, False],
       [False, False,  True, False, False]], dtype=bool)

If the origin of the original structure is equal to 0, then it is
also equal to 0 for the iterated structure. If not, the origin
must also be adapted if the equivalent of the *iterations*
erosions or dilations must be achieved with the iterated
structure. The adapted origin is simply obtained by multiplying
with the number of iterations. For convenience, the
:func:`iterate_structure` also returns the adapted origin if the
*origin* parameter is not ``None``:

.. code:: python

   >>> iterate_structure(struct, 2, -1)
   (array([[False, False,  True, False, False],
           [False,  True,  True,  True, False],
           [ True,  True,  True,  True,  True],
           [False,  True,  True,  True, False],
           [False, False,  True, False, False]], dtype=bool), [-2, -2])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.generate_binary_structure scipy.ndimage.iterate_structure
">>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
>>> s = [[0, 1, 0], [1,1,1], [0,1,0]]
>>> from scipy.ndimage import label
>>> label(a, s)
(array([[0, 1, 1, 0, 0, 0],
        [0, 1, 1, 0, 2, 0],
        [0, 0, 0, 2, 2, 2],
        [0, 0, 0, 0, 2, 0]]), 2)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.label
">>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
>>> s = [[1,1,1], [1,1,1], [1,1,1]]
>>> label(a, s)[0]
array([[0, 1, 1, 0, 0, 0],
       [0, 1, 1, 0, 1, 0],
       [0, 0, 0, 1, 1, 1],
       [0, 0, 0, 0, 1, 0]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.label
">>> l, n = label([1, 0, 1, 0, 1])
>>> l
array([1, 0, 2, 0, 3])
>>> l = np.where(l != 2, l, 0)
>>> l
array([1, 0, 0, 0, 3])
>>> label(l)[0]
array([1, 0, 0, 0, 2])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.label
">>> input = np.array([[0, 0, 0, 0, 0, 0, 0],
...                   [0, 1, 1, 1, 1, 1, 0],
...                   [0, 1, 0, 0, 0, 1, 0],
...                   [0, 1, 0, 0, 0, 1, 0],
...                   [0, 1, 0, 0, 0, 1, 0],
...                   [0, 1, 1, 1, 1, 1, 0],
...                   [0, 0, 0, 0, 0, 0, 0]], np.uint8)
>>> markers = np.array([[1, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 2, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0]], np.int8)
>>> from scipy.ndimage import watershed_ift
>>> watershed_ift(input, markers)
array([[1, 1, 1, 1, 1, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 2, 2, 2, 2, 2, 1],
       [1, 2, 2, 2, 2, 2, 1],
       [1, 2, 2, 2, 2, 2, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 1, 1, 1, 1, 1, 1]], dtype=int8)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.watershed_ift
">>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 2, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 1]], np.int8)
>>> watershed_ift(input, markers)
array([[1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 1, 2, 2, 2, 1, 1],
       [1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1]], dtype=int8)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.watershed_ift
">>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 2, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, 0],
...                     [0, 0, 0, 0, 0, 0, -1]], np.int8)
>>> watershed_ift(input, markers)
array([[-1, -1, -1, -1, -1, -1, -1],
       [-1, -1,  2,  2,  2, -1, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1, -1,  2,  2,  2, -1, -1],
       [-1, -1, -1, -1, -1, -1, -1]], dtype=int8)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.watershed_ift
">>> watershed_ift(input, markers,
...               structure = [[1,1,1], [1,1,1], [1,1,1]])
array([[-1, -1, -1, -1, -1, -1, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1,  2,  2,  2,  2,  2, -1],
       [-1, -1, -1, -1, -1, -1, -1]], dtype=int8)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.watershed_ift
">>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
>>> l, n = label(a)
>>> from scipy.ndimage import find_objects
>>> f = find_objects(l)
>>> a[f[0]]
array([[1, 1],
       [1, 1]])
>>> a[f[1]]
array([[0, 1, 0],
       [1, 1, 1],
       [0, 1, 0]])
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.label scipy.ndimage.find_objects
">>> from scipy.ndimage import find_objects
>>> find_objects([1, 0, 3, 4], max_label = 3)
[(slice(0, 1, None),), None, (slice(2, 3, None),)]
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.find_objects
">>> image = np.arange(4 * 6).reshape(4, 6)
>>> mask = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])
>>> labels = label(mask)[0]
>>> slices = find_objects(labels)
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.label scipy.ndimage.find_objects
"from scipy import ndimage

def transform(output_coordinates, shift):
    input_coordinates = output_coordinates[0] - shift, output_coordinates[1] - shift
    return input_coordinates

im = np.arange(12).reshape(4, 3).astype(np.float64)
shift = 0.5
print(ndimage.geometric_transform(im, transform, extra_arguments=(shift,)))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.ndimage.geometric_transform
"import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

from example import get_transform

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable(get_transform(), ptr)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.LowLevelCallable scipy.ndimage.geometric_transform
"# example.py
import numpy as np
import ctypes
from scipy import ndimage, LowLevelCallable
from numba import cfunc, types, carray

@cfunc(types.intc(types.CPointer(types.intp),
                  types.CPointer(types.double),
                  types.intc,
                  types.intc,
                  types.voidptr))
def transform(output_coordinates_ptr, input_coordinates_ptr,
              output_rank, input_rank, user_data):
    input_coordinates = carray(input_coordinates_ptr, (input_rank,))
    output_coordinates = carray(output_coordinates_ptr, (output_rank,))
    shift = carray(user_data, (1,), types.double)[0]

    for i in range(input_rank):
        input_coordinates[i] = output_coordinates[i] - shift

    return 1

shift = 0.5

# Then call the function
user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable(transform.ctypes, ptr)

im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.LowLevelCallable scipy.ndimage.geometric_transform
"# script.py

import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

import example

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)
callback = LowLevelCallable.from_cython(example, ""transform"", ptr)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.LowLevelCallable.from_cython scipy.ndimage.geometric_transform
"import os
import numpy as np
from scipy import ndimage, LowLevelCallable
import cffi

# Construct the FFI object, and copypaste the function declaration
ffi = cffi.FFI()
ffi.cdef(""""""
int _transform(intptr_t *output_coordinates, double *input_coordinates,
               int output_rank, int input_rank, void *user_data);
"""""")

# Open library
lib = ffi.dlopen(os.path.abspath(""example.so""))

# Do the function call
user_data = ffi.new('double *', 0.5)
callback = LowLevelCallable(lib._transform, user_data)
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.LowLevelCallable scipy.ndimage.geometric_transform
"# script.py

import os
import ctypes
import numpy as np
from scipy import ndimage, LowLevelCallable

lib = ctypes.CDLL(os.path.abspath('example.so'))

shift = 0.5

user_data = ctypes.c_double(shift)
ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)

# Ctypes has no built-in intptr type, so override the signature
# instead of trying to get it via ctypes
callback = LowLevelCallable(lib._transform, ptr,
    ""int _transform(intptr_t *, double *, int, int, void *)"")

# Perform the call
im = np.arange(12).reshape(4, 3).astype(np.float64)
print(ndimage.geometric_transform(im, callback))
",https://docs.scipy.org/doc/scipy/tutorial/ndimage.html, scipy.LowLevelCallable scipy.ndimage.geometric_transform
">>> def rosen(x):
...     """"""The Rosenbrock function""""""
...     return sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.rosen
">>> x0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])
>>> res = minimize(rosen, x0, method='nelder-mead',
...                options={'xatol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 339
         Function evaluations: 571
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> x0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])
>>> res = minimize(rosen_with_args, x0, method='nelder-mead',
...                args=(0.5, 1.), options={'xatol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 1.000000
         Iterations: 319 # may vary
         Function evaluations: 525 # may vary
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def rosen_with_args(x, a, *, b):  # b is a keyword-only argument
...     return sum(a*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0) + b
>>> def wrapped_rosen_without_args(x):
...     return rosen_with_args(x, 0.5, b=1.)  # pass in `a` and `b`
>>> x0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])
>>> res = minimize(wrapped_rosen_without_args, x0, method='nelder-mead',
...                options={'xatol': 1e-8,})
>>> print(res.x)
[1.         1.         1.         1.         0.99999999]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> from functools import partial
>>> partial_rosen = partial(rosen_with_args, a=0.5, b=1.)
>>> res = minimize(partial_rosen, x0, method='nelder-mead',
...                options={'xatol': 1e-8,})
>>> print(res.x)
[1.         1.         1.         1.         0.99999999]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def rosen_der(x):
...     xm = x[1:-1]
...     xm_m1 = x[:-2]
...     xm_p1 = x[2:]
...     der = np.zeros_like(x)
...     der[1:-1] = 200*(xm-xm_m1**2) - 400*(xm_p1 - xm**2)*xm - 2*(1-xm)
...     der[0] = -400*x[0]*(x[1]-x[0]**2) - 2*(1-x[0])
...     der[-1] = 200*(x[-1]-x[-2]**2)
...     return der
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.rosen_der
">>> res = minimize(rosen, x0, method='BFGS', jac=rosen_der,
...                options={'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 25                     # may vary
         Function evaluations: 30
         Gradient evaluations: 30
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def f(x):
...    return -expensive(x[0])**2
>>>
>>> def df(x):
...     return -2 * expensive(x[0]) * dexpensive(x[0])
>>>
>>> def expensive(x):
...     # this function is computationally expensive!
...     expensive.count += 1  # let's keep track of how many times it runs
...     return np.sin(x)
>>> expensive.count = 0
>>>
>>> def dexpensive(x):
...     return np.cos(x)
>>>
>>> res = minimize(f, 0.5, jac=df)
>>> res.fun
-0.9999999999999174
>>> res.nfev, res.njev
6, 6
>>> expensive.count
12
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def f_and_df(x):
...     expensive_value = expensive(x[0])
...     return (-expensive_value**2,  # objective function
...             -2*expensive_value*dexpensive(x[0]))  # gradient
>>>
>>> expensive.count = 0  # reset the counter
>>> res = minimize(f_and_df, 0.5, jac=True)
>>> res.fun
-0.9999999999999174
>>> expensive.count
6
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> from functools import lru_cache
>>> expensive.count = 0  # reset the counter
>>> expensive = lru_cache(expensive)
>>> res = minimize(f, 0.5, jac=df)
>>> res.fun
-0.9999999999999174
>>> expensive.count
6
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def rosen_hess(x):
...     x = np.asarray(x)
...     H = np.diag(-400*x[:-1],1) - np.diag(400*x[:-1],-1)
...     diagonal = np.zeros_like(x)
...     diagonal[0] = 1200*x[0]**2-400*x[1]+2
...     diagonal[-1] = 200
...     diagonal[1:-1] = 202 + 1200*x[1:-1]**2 - 400*x[2:]
...     H = H + np.diag(diagonal)
...     return H
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.rosen_hess
">>> res = minimize(rosen, x0, method='Newton-CG',
...                jac=rosen_der, hess=rosen_hess,
...                options={'xtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 19                       # may vary
         Function evaluations: 22
         Gradient evaluations: 19
         Hessian evaluations: 19
>>> res.x
array([1.,  1.,  1.,  1.,  1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='Newton-CG',
...                jac=rosen_der, hessp=rosen_hess_p,
...                options={'xtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 20                    # may vary
         Function evaluations: 23
         Gradient evaluations: 20
         Hessian evaluations: 44
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-ncg',
...                jac=rosen_der, hess=rosen_hess,
...                options={'gtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 20                    # may vary
         Function evaluations: 21
         Gradient evaluations: 20
         Hessian evaluations: 19
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-ncg',
...                jac=rosen_der, hessp=rosen_hess_p,
...                options={'gtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 20                    # may vary
         Function evaluations: 21
         Gradient evaluations: 20
         Hessian evaluations: 0
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-krylov',
...                jac=rosen_der, hess=rosen_hess,
...                options={'gtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 19                    # may vary
         Function evaluations: 20
         Gradient evaluations: 20
         Hessian evaluations: 18
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-krylov',
...                jac=rosen_der, hessp=rosen_hess_p,
...                options={'gtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 19                    # may vary
         Function evaluations: 20
         Gradient evaluations: 20
         Hessian evaluations: 0
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-exact',
...                jac=rosen_der, hess=rosen_hess,
...                options={'gtol': 1e-8, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 13                    # may vary
         Function evaluations: 14
         Gradient evaluations: 13
         Hessian evaluations: 14
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> from scipy.optimize import Bounds
>>> bounds = Bounds([0, -0.5], [1.0, 2.0])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.Bounds
">>> from scipy.optimize import LinearConstraint
>>> linear_constraint = LinearConstraint([[1, 2], [2, 1]], [-np.inf, 1], [1, 1])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.LinearConstraint
">>> from scipy.sparse import csc_matrix
>>> def cons_H_sparse(x, v):
...     return v[0]*csc_matrix([[2, 0], [0, 0]]) + v[1]*csc_matrix([[2, 0], [0, 0]])
>>> nonlinear_constraint = NonlinearConstraint(cons_f, -np.inf, 1,
...                                            jac=cons_J, hess=cons_H_sparse)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.sparse.csc_matrix
">>> from scipy.sparse.linalg import LinearOperator
>>> def cons_H_linear_operator(x, v):
...     def matvec(p):
...         return np.array([p[0]*2*(v[0]+v[1]), 0])
...     return LinearOperator((2, 2), matvec=matvec)
>>> nonlinear_constraint = NonlinearConstraint(cons_f, -np.inf, 1,
...                                           jac=cons_J, hess=cons_H_linear_operator)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.sparse.linalg.LinearOperator
">>> from scipy.optimize import BFGS
>>> nonlinear_constraint = NonlinearConstraint(cons_f, -np.inf, 1, jac=cons_J, hess=BFGS())
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.BFGS
">>> nonlinear_constraint = NonlinearConstraint(cons_f, -np.inf, 1, jac='2-point', hess=BFGS())
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.BFGS
">>> x0 = np.array([0.5, 0])
>>> res = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hess=rosen_hess,
...                constraints=[linear_constraint, nonlinear_constraint],
...                options={'verbose': 1}, bounds=bounds)
# may vary
`gtol` termination condition is satisfied.
Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.016 s.
>>> print(res.x)
[0.41494531 0.17010937]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> def rosen_hess_linop(x):
...     def matvec(p):
...         return rosen_hess_p(x, p)
...     return LinearOperator((2, 2), matvec=matvec)
>>> res = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hess=rosen_hess_linop,
...                constraints=[linear_constraint, nonlinear_constraint],
...                options={'verbose': 1}, bounds=bounds)
# may vary
`gtol` termination condition is satisfied.
Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s.
>>> print(res.x)
[0.41494531 0.17010937]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.sparse.linalg.LinearOperator scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hessp=rosen_hess_p,
...                constraints=[linear_constraint, nonlinear_constraint],
...                options={'verbose': 1}, bounds=bounds)
# may vary
`gtol` termination condition is satisfied.
Number of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s.
>>> print(res.x)
[0.41494531 0.17010937]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> from scipy.optimize import SR1
>>> res = minimize(rosen, x0, method='trust-constr',  jac=""2-point"", hess=SR1(),
...                constraints=[linear_constraint, nonlinear_constraint],
...                options={'verbose': 1}, bounds=bounds)
# may vary
`gtol` termination condition is satisfied.
Number of iterations: 12, function evaluations: 24, CG iterations: 7, optimality: 4.48e-09, constraint violation: 0.00e+00, execution time: 0.016 s.
>>> print(res.x)
[0.41494531 0.17010937]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize scipy.optimize.SR1
">>> x0 = np.array([0.5, 0])
>>> res = minimize(rosen, x0, method='SLSQP', jac=rosen_der,
...                constraints=[eq_cons, ineq_cons], options={'ftol': 1e-9, 'disp': True},
...                bounds=bounds)
# may vary
Optimization terminated successfully.    (Exit mode 0)
            Current function value: 0.342717574857755
            Iterations: 5
            Function evaluations: 6
            Gradient evaluations: 5
>>> print(res.x)
[0.41494475 0.1701105 ]
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize
">>> from scipy import optimize
>>> results = dict()
>>> results['shgo'] = optimize.shgo(eggholder, bounds)
>>> results['shgo']
     fun: -935.3379515604197  # may vary
    funl: array([-935.33795156])
 message: 'Optimization terminated successfully.'
    nfev: 42
     nit: 2
   nlfev: 37
   nlhev: 0
   nljev: 9
 success: True
       x: array([439.48096952, 453.97740589])
      xl: array([[439.48096952, 453.97740589]])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.shgo
">>> results['DA'] = optimize.dual_annealing(eggholder, bounds)
>>> results['DA']
     fun: -956.9182316237413  # may vary
 message: ['Maximum number of iteration reached']
    nfev: 4091
    nhev: 0
     nit: 1000
    njev: 0
       x: array([482.35324114, 432.87892901])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.dual_annealing
">>> results['DE'] = optimize.differential_evolution(eggholder, bounds)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.differential_evolution
">>> results['shgo_sobol'] = optimize.shgo(eggholder, bounds, n=200, iters=5,
...                                       sampling_method='sobol')
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.shgo
">>> u = np.array([4.0, 2.0, 1.0, 5.0e-1, 2.5e-1, 1.67e-1, 1.25e-1, 1.0e-1,
...               8.33e-2, 7.14e-2, 6.25e-2])
>>> y = np.array([1.957e-1, 1.947e-1, 1.735e-1, 1.6e-1, 8.44e-2, 6.27e-2,
...               4.56e-2, 3.42e-2, 3.23e-2, 2.35e-2, 2.46e-2])
>>> x0 = np.array([2.5, 3.9, 4.15, 3.9])
>>> res = least_squares(fun, x0, jac=jac, bounds=(0, 100), args=(u, y), verbose=1)
# may vary
`ftol` termination condition is satisfied.
Function evaluations 130, initial cost 4.4383e+00, final cost 1.5375e-04, first-order optimality 4.92e-08.
>>> res.x
array([ 0.19280596,  0.19130423,  0.12306063,  0.13607247])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.least_squares
">>> from scipy.optimize import minimize_scalar
>>> f = lambda x: (x - 2) * (x + 1)**2
>>> res = minimize_scalar(f, method='brent')
>>> print(res.x)
1.0
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize_scalar
">>> from scipy.special import j1
>>> res = minimize_scalar(j1, bounds=(4, 7), method='bounded')
>>> res.x
5.33144184241
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.minimize_scalar
">>> from scipy.optimize import OptimizeResult
>>> def custmin(fun, x0, args=(), maxfev=None, stepsize=0.1,
...         maxiter=100, callback=None, **options):
...     bestx = x0
...     besty = fun(x0)
...     funcalls = 1
...     niter = 0
...     improved = True
...     stop = False
...
...     while improved and not stop and niter < maxiter:
...         improved = False
...         niter += 1
...         for dim in range(np.size(x0)):
...             for s in [bestx[dim] - stepsize, bestx[dim] + stepsize]:
...                 testx = np.copy(bestx)
...                 testx[dim] = s
...                 testy = fun(testx, *args)
...                 funcalls += 1
...                 if testy < besty:
...                     besty = testy
...                     bestx = testx
...                     improved = True
...             if callback is not None:
...                 callback(bestx)
...             if maxfev is not None and funcalls >= maxfev:
...                 stop = True
...                 break
...
...     return OptimizeResult(fun=besty, x=bestx, nit=niter,
...                           nfev=funcalls, success=(niter > 1))
>>> x0 = [1.35, 0.9, 0.8, 1.1, 1.2]
>>> res = minimize(rosen, x0, method=custmin, options=dict(stepsize=0.05))
>>> res.x
array([1., 1., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.LowLevelCallable scipy.optimize.OptimizeResult scipy.optimize.minimize
">>> def custmin(fun, bracket, args=(), maxfev=None, stepsize=0.1,
...         maxiter=100, callback=None, **options):
...     bestx = (bracket[1] + bracket[0]) / 2.0
...     besty = fun(bestx)
...     funcalls = 1
...     niter = 0
...     improved = True
...     stop = False
...
...     while improved and not stop and niter < maxiter:
...         improved = False
...         niter += 1
...         for testx in [bestx - stepsize, bestx + stepsize]:
...             testy = fun(testx, *args)
...             funcalls += 1
...             if testy < besty:
...                 besty = testy
...                 bestx = testx
...                 improved = True
...         if callback is not None:
...             callback(bestx)
...         if maxfev is not None and funcalls >= maxfev:
...             stop = True
...             break
...
...     return OptimizeResult(fun=besty, x=bestx, nit=niter,
...                           nfev=funcalls, success=(niter > 1))
>>> def f(x):
...    return (x - 2)**2 * (x + 2)**2
>>> res = minimize_scalar(f, bracket=(-3.5, 0), method=custmin,
...                       options=dict(stepsize = 0.05))
>>> res.x
-2.0
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.LowLevelCallable scipy.optimize.OptimizeResult scipy.optimize.minimize_scalar
">>> import numpy as np
>>> from scipy.optimize import root
>>> def func(x):
...     return x + 2 * np.cos(x)
>>> sol = root(func, 0.3)
>>> sol.x
array([-1.02986653])
>>> sol.fun
array([ -6.66133815e-16])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.root
">>> def func2(x):
...     f = [x[0] * np.cos(x[1]) - 4,
...          x[1]*x[0] - x[1] - 5]
...     df = np.array([[np.cos(x[1]), -x[0] * np.sin(x[1])],
...                    [x[1], x[0] - 1]])
...     return f, df
>>> sol = root(func2, [1, 1], jac=True, method='lm')
>>> sol.x
array([ 6.50409711,  0.90841421])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.root
"import numpy as np
from scipy.optimize import root
from numpy import cosh, zeros_like, mgrid, zeros

# parameters
nx, ny = 75, 75
hx, hy = 1./(nx-1), 1./(ny-1)

P_left, P_right = 0, 0
P_top, P_bottom = 1, 0

def residual(P):
   d2x = zeros_like(P)
   d2y = zeros_like(P)

   d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
   d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
   d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx

   d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
   d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
   d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy

   return d2x + d2y + 5*cosh(P).mean()**2

# solve
guess = zeros((nx, ny), float)
sol = root(residual, guess, method='krylov', options={'disp': True})
#sol = root(residual, guess, method='broyden2', options={'disp': True, 'max_rank': 50})
#sol = root(residual, guess, method='anderson', options={'disp': True, 'M': 10})
print('Residual: %g' % abs(residual(sol.x)).max())

# visualize
import matplotlib.pyplot as plt
x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
plt.pcolormesh(x, y, sol.x, shading='gouraud')
plt.colorbar()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.root
"from scipy.optimize import root
from scipy.sparse import spdiags, kron
from scipy.sparse.linalg import spilu, LinearOperator
from numpy import cosh, zeros_like, mgrid, zeros, eye

# parameters
nx, ny = 75, 75
hx, hy = 1./(nx-1), 1./(ny-1)

P_left, P_right = 0, 0
P_top, P_bottom = 1, 0

def get_preconditioner():
    """"""Compute the preconditioner M""""""
    diags_x = zeros((3, nx))
    diags_x[0,:] = 1/hx/hx
    diags_x[1,:] = -2/hx/hx
    diags_x[2,:] = 1/hx/hx
    Lx = spdiags(diags_x, [-1,0,1], nx, nx)

    diags_y = zeros((3, ny))
    diags_y[0,:] = 1/hy/hy
    diags_y[1,:] = -2/hy/hy
    diags_y[2,:] = 1/hy/hy
    Ly = spdiags(diags_y, [-1,0,1], ny, ny)

    J1 = kron(Lx, eye(ny)) + kron(eye(nx), Ly)

    # Now we have the matrix `J_1`. We need to find its inverse `M` --
    # however, since an approximate inverse is enough, we can use
    # the *incomplete LU* decomposition

    J1_ilu = spilu(J1)

    # This returns an object with a method .solve() that evaluates
    # the corresponding matrix-vector product. We need to wrap it into
    # a LinearOperator before it can be passed to the Krylov methods:

    M = LinearOperator(shape=(nx*ny, nx*ny), matvec=J1_ilu.solve)
    return M

def solve(preconditioning=True):
    """"""Compute the solution""""""
    count = [0]

    def residual(P):
        count[0] += 1

        d2x = zeros_like(P)
        d2y = zeros_like(P)

        d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2])/hx/hx
        d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
        d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx

        d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
        d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
        d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy

        return d2x + d2y + 5*cosh(P).mean()**2

    # preconditioner
    if preconditioning:
        M = get_preconditioner()
    else:
        M = None

    # solve
    guess = zeros((nx, ny), float)

    sol = root(residual, guess, method='krylov',
               options={'disp': True,
                        'jac_options': {'inner_M': M}})
    print('Residual', abs(residual(sol.x)).max())
    print('Evaluations', count[0])

    return sol.x

def main():
    sol = solve(preconditioning=True)

    # visualize
    import matplotlib.pyplot as plt
    x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
    plt.clf()
    plt.pcolor(x, y, sol)
    plt.clim(0, 1)
    plt.colorbar()
    plt.show()


if __name__ == ""__main__"":
    main()
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.sparse.spdiags scipy.sparse.kron scipy.sparse.linalg.spilu scipy.sparse.linalg.LinearOperator scipy.optimize.root
">>> import numpy as np
>>> from scipy.optimize import linprog
>>> c = np.array([-29.0, -45.0, 0.0, 0.0])
>>> A_ub = np.array([[1.0, -1.0, -3.0, 0.0],
...                 [-2.0, 3.0, 7.0, -3.0]])
>>> b_ub = np.array([5.0, -10.0])
>>> A_eq = np.array([[2.0, 8.0, 1.0, 0.0],
...                 [4.0, 4.0, 0.0, 1.0]])
>>> b_eq = np.array([60.0, 60.0])
>>> x0_bounds = (0, None)
>>> x1_bounds = (0, 5.0)
>>> x2_bounds = (-np.inf, 0.5)  # +/- np.inf can be used instead of None
>>> x3_bounds = (-3.0, None)
>>> bounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]
>>> result = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)
>>> print(result.message)
The problem is infeasible. (HiGHS Status 8: model_status is Infeasible; primal_status is At lower/fixed bound)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.linprog
">>> x1_bounds = (0, 6)
>>> bounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]
>>> result = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)
>>> print(result.message)
Optimization terminated successfully. (HiGHS Status 7: Optimal)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.linprog
">>> from scipy.optimize import linear_sum_assignment
>>> row_ind, col_ind = linear_sum_assignment(cost)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.linear_sum_assignment
">>> bounds = optimize.Bounds(0, 1)  # 0 <= x_i <= 1
>>> integrality = np.full_like(values, True)  # x_i are integers
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.Bounds
">>> capacity = 100
>>> constraints = optimize.LinearConstraint(A=sizes, lb=0, ub=capacity)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.LinearConstraint
">>> from scipy.optimize import milp
>>> res = milp(c=-values, constraints=constraints,
...            integrality=integrality, bounds=bounds)
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.milp
">>> from scipy.optimize import milp
>>> res = milp(c=-values, constraints=constraints,
...            integrality=False, bounds=bounds)
>>> res.x
array([1.        , 1.        , 1.        , 1.        ,
       0.55882353, 1.        , 0.        , 0.        ])
",https://docs.scipy.org/doc/scipy/tutorial/optimize.html, scipy.optimize.milp
">>> from scipy.spatial.distance import pdist, squareform
>>> from scipy.sparse import csr_matrix
>>> hamming_dist = pdist(word_bytes, metric='hamming')
>>> # there are three characters in each word
>>> graph = csr_matrix(squareform(hamming_dist < 1.5 / 3))
",https://docs.scipy.org/doc/scipy/tutorial/csgraph.html, scipy.spatial.distance.pdist scipy.sparse.csr_matrix scipy.spatial.distance.squareform
">>> from scipy.sparse.csgraph import dijkstra
>>> distances, predecessors = dijkstra(graph, indices=i1,
...                                    return_predecessors=True)
>>> print(distances[i2])
5.0    # may vary
",https://docs.scipy.org/doc/scipy/tutorial/csgraph.html, scipy.sparse.csgraph.dijkstra
">>> from scipy.sparse.csgraph import connected_components
>>> N_components, component_list = connected_components(graph)
>>> print(N_components)
15    # may vary
",https://docs.scipy.org/doc/scipy/tutorial/csgraph.html, scipy.sparse.csgraph.connected_components
">>> distances, predecessors = dijkstra(graph, return_predecessors=True)
>>> max_distance = np.max(distances[~np.isinf(distances)])
>>> print(max_distance)
13.0    # may vary
",https://docs.scipy.org/doc/scipy/tutorial/csgraph.html, scipy.sparse.csgraph.dijkstra
"linear = Model(f)
",https://docs.scipy.org/doc/scipy/reference/odr.html, scipy.odr.Model
"mydata = Data(x, y, wd=1./power(sx,2), we=1./power(sy,2))
",https://docs.scipy.org/doc/scipy/reference/odr.html, scipy.odr.Data
"mydata = RealData(x, y, sx=sx, sy=sy)
",https://docs.scipy.org/doc/scipy/reference/odr.html, scipy.odr.RealData
"myodr = ODR(mydata, linear, beta0=[1., 2.])
",https://docs.scipy.org/doc/scipy/reference/odr.html, scipy.odr.ODR
"myoutput.pprint()
",https://docs.scipy.org/doc/scipy/reference/odr.html, scipy.odr.Output.pprint
"A = csr_array(eye(3))
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.csr_array
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> np.dot(A.toarray(), v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.csr_array.toarray
">>> A = lil_array((1000, 1000))
>>> A[0, :100] = rand(100)
>>> A[1, 100:200] = A[0, :100]
>>> A.setdiag(rand(1000))
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.lil_array scipy.sparse.lil_array.setdiag
">>> A = A.tocsr()
>>> b = rand(1000)
>>> x = spsolve(A, b)
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.lil_array.tocsr scipy.sparse.linalg.spsolve
">>> x_ = solve(A.toarray(), b)
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.lil_array.toarray
">>> from scipy import sparse
>>> from numpy import array
>>> I = array([0,3,1,0])
>>> J = array([0,3,1,2])
>>> V = array([4,5,7,9])
>>> A = sparse.coo_array((V,(I,J)),shape=(4,4))
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.coo_array
">>> I = array([0,0,1,3,1,0,0])
>>> J = array([0,2,1,3,1,0,0])
>>> V = array([1,1,1,1,1,1,1])
>>> B = sparse.coo_array((V,(I,J)),shape=(4,4)).tocsr()
",https://docs.scipy.org/doc/scipy/reference/sparse.html, scipy.sparse.coo_array
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1,2],[3,4]])
>>> A
array([[1, 2],
      [3, 4]])
>>> linalg.inv(A)
array([[-2. ,  1. ],
      [ 1.5, -0.5]])
>>> b = np.array([[5,6]]) #2D array
>>> b
array([[5, 6]])
>>> b.T
array([[5],
      [6]])
>>> A*b #not matrix multiplication!
array([[ 5, 12],
      [15, 24]])
>>> A.dot(b.T) #matrix multiplication
array([[17],
      [39]])
>>> b = np.array([5,6]) #1D array
>>> b
array([5, 6])
>>> b.T  #not matrix transpose!
array([5, 6])
>>> A.dot(b)  #does not matter for multiplication
array([17, 39])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.inv
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1,3,5],[2,5,1],[2,3,8]])
>>> A
array([[1, 3, 5],
      [2, 5, 1],
      [2, 3, 8]])
>>> linalg.inv(A)
array([[-1.48,  0.36,  0.88],
      [ 0.56,  0.08, -0.36],
      [ 0.16, -0.12,  0.04]])
>>> A.dot(linalg.inv(A)) #double check
array([[  1.00000000e+00,  -1.11022302e-16,  -5.55111512e-17],
      [  3.05311332e-16,   1.00000000e+00,   1.87350135e-16],
      [  2.22044605e-16,  -1.11022302e-16,   1.00000000e+00]])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.inv
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1, 2], [3, 4]])
>>> A
array([[1, 2],
      [3, 4]])
>>> b = np.array([[5], [6]])
>>> b
array([[5],
      [6]])
>>> linalg.inv(A).dot(b)  # slow
array([[-4. ],
      [ 4.5]])
>>> A.dot(linalg.inv(A).dot(b)) - b  # check
array([[  8.88178420e-16],
      [  2.66453526e-15]])
>>> np.linalg.solve(A, b)  # fast
array([[-4. ],
      [ 4.5]])
>>> A.dot(np.linalg.solve(A, b)) - b  # check
array([[ 0.],
      [ 0.]])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.inv
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1,2],[3,4]])
>>> A
array([[1, 2],
      [3, 4]])
>>> linalg.det(A)
-2.0
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.det
">>> import numpy as np
>>> from scipy import linalg
>>> A=np.array([[1,2],[3,4]])
>>> A
array([[1, 2],
      [3, 4]])
>>> linalg.norm(A)
5.4772255750516612
>>> linalg.norm(A,'fro') # frobenius norm is the default
5.4772255750516612
>>> linalg.norm(A,1) # L1 norm (max column sum)
6
>>> linalg.norm(A,-1)
4
>>> linalg.norm(A,np.inf) # L inf norm (max row sum)
7
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.norm
">>> A = np.c_[np.exp(-xi)[:, np.newaxis], xi[:, np.newaxis]]
>>> c, resid, rank, sigma = linalg.lstsq(A, zi)
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.lstsq
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1, 2], [3, 4]])
>>> la, v = linalg.eig(A)
>>> l1, l2 = la
>>> print(l1, l2)   # eigenvalues
(-0.3722813232690143+0j) (5.372281323269014+0j)
>>> print(v[:, 0])   # first eigenvector
[-0.82456484  0.56576746]
>>> print(v[:, 1])   # second eigenvector
[-0.41597356 -0.90937671]
>>> print(np.sum(abs(v**2), axis=0))  # eigenvectors are unitary
[1. 1.]
>>> v1 = np.array(v[:, 0]).T
>>> print(linalg.norm(A.dot(v1) - l1*v1))  # check the computation
3.23682852457e-16
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.eig scipy.linalg.norm
">>> import numpy as np
>>> from scipy import linalg
>>> A = np.array([[1,2,3],[4,5,6]])
>>> A
array([[1, 2, 3],
      [4, 5, 6]])
>>> M,N = A.shape
>>> U,s,Vh = linalg.svd(A)
>>> Sig = linalg.diagsvd(s,M,N)
>>> U, Vh = U, Vh
>>> U
array([[-0.3863177 , -0.92236578],
      [-0.92236578,  0.3863177 ]])
>>> Sig
array([[ 9.508032  ,  0.        ,  0.        ],
      [ 0.        ,  0.77286964,  0.        ]])
>>> Vh
array([[-0.42866713, -0.56630692, -0.7039467 ],
      [ 0.80596391,  0.11238241, -0.58119908],
      [ 0.40824829, -0.81649658,  0.40824829]])
>>> U.dot(Sig.dot(Vh)) #check computation
array([[ 1.,  2.,  3.],
      [ 4.,  5.,  6.]])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.svd scipy.linalg.diagsvd
">>> from scipy import linalg
>>> A = np.asmatrix('[1 3 2; 1 4 5; 2 3 6]')
>>> T, Z = linalg.schur(A)
>>> T1, Z1 = linalg.schur(A, 'complex')
>>> T2, Z2 = linalg.rsf2csf(T, Z)
>>> T
array([[ 9.90012467,  1.78947961, -0.65498528],
       [ 0.        ,  0.54993766, -1.57754789],
       [ 0.        ,  0.51260928,  0.54993766]])
>>> T2
array([[ 9.90012467+0.00000000e+00j, -0.32436598+1.55463542e+00j,
        -0.88619748+5.69027615e-01j],
       [ 0.        +0.00000000e+00j,  0.54993766+8.99258408e-01j,
         1.06493862+3.05311332e-16j],
       [ 0.        +0.00000000e+00j,  0.        +0.00000000e+00j,
         0.54993766-8.99258408e-01j]])
>>> abs(T1 - T2) # different
array([[  1.06604538e-14,   2.06969555e+00,   1.69375747e+00],  # may vary
       [  0.00000000e+00,   1.33688556e-15,   4.74146496e-01],
       [  0.00000000e+00,   0.00000000e+00,   1.13220977e-15]])
>>> abs(Z1 - Z2) # different
array([[ 0.06833781,  0.88091091,  0.79568503],    # may vary
       [ 0.11857169,  0.44491892,  0.99594171],
       [ 0.12624999,  0.60264117,  0.77257633]])
>>> T, Z, T1, Z1, T2, Z2 = map(np.asmatrix,(T,Z,T1,Z1,T2,Z2))
>>> abs(A - Z*T*Z.H)  # same
matrix([[  5.55111512e-16,   1.77635684e-15,   2.22044605e-15],
        [  0.00000000e+00,   3.99680289e-15,   8.88178420e-16],
        [  1.11022302e-15,   4.44089210e-16,   3.55271368e-15]])
>>> abs(A - Z1*T1*Z1.H)  # same
matrix([[  4.26993904e-15,   6.21793362e-15,   8.00007092e-15],
        [  5.77945386e-15,   6.21798014e-15,   1.06653681e-14],
        [  7.16681444e-15,   8.90271058e-15,   1.77635764e-14]])
>>> abs(A - Z2*T2*Z2.H)  # same
matrix([[  6.02594127e-16,   1.77648931e-15,   2.22506907e-15],
        [  2.46275555e-16,   3.99684548e-15,   8.91642616e-16],
        [  8.88225111e-16,   8.88312432e-16,   4.44104848e-15]])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.schur scipy.linalg.rsf2csf
">>> from scipy import special, linalg
>>> rng = np.random.default_rng()
>>> A = rng.random((3, 3))
>>> B = linalg.funm(A, lambda x: special.jv(0, x))
>>> A
array([[0.06369197, 0.90647174, 0.98024544],
       [0.68752227, 0.5604377 , 0.49142032],
       [0.86754578, 0.9746787 , 0.37932682]])
>>> B
array([[ 0.6929219 , -0.29728805, -0.15930896],
       [-0.16226043,  0.71967826, -0.22709386],
       [-0.19945564, -0.33379957,  0.70259022]])
>>> linalg.eigvals(A)
array([ 1.94835336+0.j, -0.72219681+0.j, -0.22270006+0.j])
>>> special.jv(0, linalg.eigvals(A))
array([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j])
>>> linalg.eigvals(B)
array([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j])
",https://docs.scipy.org/doc/scipy/tutorial/linalg.html, scipy.linalg.funm scipy.linalg.eigvals
">>> mat_contents = sio.loadmat('octave_a.mat')
>>> mat_contents
{'a': array([[[  1.,   4.,   7.,  10.],
        [  2.,   5.,   8.,  11.],
        [  3.,   6.,   9.,  12.]]]),
 '__version__': '1.0',
 '__header__': 'MATLAB 5.0 MAT-file, written by
 Octave 3.6.3, 2013-02-17 21:02:11 UTC',
 '__globals__': []}
>>> oct_a = mat_contents['a']
>>> oct_a
array([[[  1.,   4.,   7.,  10.],
        [  2.,   5.,   8.,  11.],
        [  3.,   6.,   9.,  12.]]])
>>> oct_a.shape
(1, 3, 4)
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> import numpy as np
>>> vect = np.arange(10)
>>> vect.shape
(10,)
>>> sio.savemat('np_vector.mat', {'vect':vect})
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.savemat
">>> sio.whosmat('octave_a.mat')
[('a', (1, 3, 4), 'double')]
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.whosmat
">>> mat_contents = sio.loadmat('octave_struct.mat')
>>> mat_contents
{'my_struct': array([[([[1.0]], [[2.0]])]],
      dtype=[('field1', 'O'), ('field2', 'O')]), '__version__': '1.0', '__header__': 'MATLAB 5.0 MAT-file, written by Octave 3.6.3, 2013-02-17 21:23:14 UTC', '__globals__': []}
>>> oct_struct = mat_contents['my_struct']
>>> oct_struct.shape
(1, 1)
>>> val = oct_struct[0,0]
>>> val
([[1.0]], [[2.0]])
>>> val['field1']
array([[ 1.]])
>>> val['field2']
array([[ 2.]])
>>> val.dtype
dtype([('field1', 'O'), ('field2', 'O')])
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> mat_contents = sio.loadmat('octave_struct.mat', squeeze_me=True)
>>> oct_struct = mat_contents['my_struct']
>>> oct_struct.shape
()
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False)
>>> oct_struct = mat_contents['my_struct']
>>> oct_struct[0,0].field1
array([[ 1.]])
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False, squeeze_me=True)
>>> oct_struct = mat_contents['my_struct']
>>> oct_struct.shape # but no - it's a scalar
Traceback (most recent call last):
  File """", line 1, in 
AttributeError: 'mat_struct' object has no attribute 'shape'
>>> type(oct_struct)

>>> oct_struct.field1
1.0
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> a_dict = {'field1': 0.5, 'field2': 'a string'}
>>> sio.savemat('saved_struct.mat', {'a_dict': a_dict})
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.savemat
">>> dt = [('f1', 'f8'), ('f2', 'S10')]
>>> arr = np.zeros((2,), dtype=dt)
>>> arr
array([(0.0, ''), (0.0, '')],
      dtype=[('f1', '
>>> arr[0]['f1'] = 0.5
>>> arr[0]['f2'] = 'python'
>>> arr[1]['f1'] = 99
>>> arr[1]['f2'] = 'not perl'
>>> sio.savemat('np_struct_arr.mat', {'arr': arr})
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.savemat
">>> mat_contents = sio.loadmat('octave_cells.mat')
>>> oct_cells = mat_contents['my_cells']
>>> print(oct_cells.dtype)
object
>>> val = oct_cells[0,0]
>>> val
array([[ 1.]])
>>> print(val.dtype)
float64
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.loadmat
">>> obj_arr = np.zeros((2,), dtype=np.object)
>>> obj_arr[0] = 1
>>> obj_arr[1] = 'a string'
>>> obj_arr
array([1, 'a string'], dtype=object)
>>> sio.savemat('np_cells.mat', {'obj_arr':obj_arr})
",https://docs.scipy.org/doc/scipy/tutorial/io.html, scipy.io.savemat
">>> evals_large, evecs_large = eigsh(X, 3, which='LM')
>>> print(evals_all[-3:])
[29.22435321 30.05590784 30.58591252]
>>> print(evals_large)
[29.22435321 30.05590784 30.58591252]
>>> print(np.dot(evecs_large.T, evecs_all[:,-3:]))
array([[-1.  0.  0.],       # may vary (signs)
       [ 0.  1.  0.],
       [-0.  0. -1.]])
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_small, evecs_small = eigsh(X, 3, which='SM')
Traceback (most recent call last):       # may vary (convergence)
...
scipy.sparse.linalg._eigen.arpack.arpack.ArpackNoConvergence:
ARPACK error -1: No convergence (1001 iterations, 0/3 eigenvectors converged)
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_small, evecs_small = eigsh(X, 3, which='SM', tol=1E-2)
>>> evals_all[:3]
array([0.00053181, 0.00298319, 0.01387821])
>>> evals_small
array([0.00053181, 0.00298319, 0.01387821])
>>> np.dot(evecs_small.T, evecs_all[:,:3])
array([[ 0.99999999  0.00000024 -0.00000049],    # may vary (signs)
       [-0.00000023  0.99999999  0.00000056],
       [ 0.00000031 -0.00000037  0.99999852]])
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_small, evecs_small = eigsh(X, 3, which='SM', maxiter=5000)
>>> evals_all[:3]
array([0.00053181, 0.00298319, 0.01387821])
>>> evals_small
array([0.00053181, 0.00298319, 0.01387821])
>>> np.dot(evecs_small.T, evecs_all[:,:3])
array([[ 1.  0.  0.],           # may vary (signs)
       [-0.  1.  0.],
       [ 0.  0. -1.]])
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_small, evecs_small = eigsh(X, 3, sigma=0, which='LM')
>>> evals_all[:3]
array([0.00053181, 0.00298319, 0.01387821])
>>> evals_small
array([0.00053181, 0.00298319, 0.01387821])
>>> np.dot(evecs_small.T, evecs_all[:,:3])
array([[ 1.  0.  0.],    # may vary (signs)
       [ 0. -1. -0.],
       [-0. -0.  1.]])
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_mid, evecs_mid = eigsh(X, 3, sigma=1, which='LM')
>>> i_sort = np.argsort(abs(1. / (1 - evals_all)))[-3:]
>>> evals_all[i_sort]
array([0.94164107, 1.05464515, 0.99090277])
>>> evals_mid
array([0.94164107, 0.99090277, 1.05464515])
>>> print(np.dot(evecs_mid.T, evecs_all[:,i_sort]))
array([[-0.  1.  0.],     # may vary (signs)
       [-0. -0.  1.],
       [ 1.  0.  0.]]
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_all, evecs_all = eigh(D)
>>> evals_large, evecs_large = eigsh(Dop, 3, which='LA', maxiter=1e3)
>>> evals_all[-3:]
array([1.53092498, 1.77243671, 2.00582508])
>>> evals_large
array([1.53092498, 1.77243671, 2.00582508])
>>> print(np.dot(evecs_large.T, evecs_all[:,-3:]))
array([[-1.  0.  0.],     # may vary (signs)
       [-0. -1.  0.],
       [ 0.  0. -1.]]
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.sparse.linalg.eigsh
">>> evals_all, evecs_all = eig(D)
>>> evals_large, evecs_large = eigs(Dop, 4, which='LI')
>>> evals_all_imag = evals_all.imag
>>> isort_imag = np.argsort(np.abs(evals_all_imag))
>>> evals_all_imag = evals_all_imag[isort_imag]
>>> evals_large_imag = evals_large.imag
>>> isort_imag = np.argsort(np.abs(evals_large_imag))
>>> evals_large_imag = evals_large_imag[isort_imag]
>>> evals_all_imag[-4:]
array([-0.95105652, 0.95105652, -0.98768834, 0.98768834])
>>> evals_large_imag
array([0.95105652, -0.95105652, 0.98768834, -0.98768834]) # may vary
",https://docs.scipy.org/doc/scipy/tutorial/arpack.html, scipy.linalg.eig scipy.sparse.linalg.eigs
">>> import scipy.integrate as integrate
>>> import scipy.special as special
>>> result = integrate.quad(lambda x: special.jv(2.5,x), 0, 4.5)
>>> result
(1.1178179380783249, 7.8663172481899801e-09)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> from scipy.integrate import quad
>>> def integrand(x, a, b):
...     return a*x**2 + b
...
>>> a = 2
>>> b = 1
>>> I = quad(integrand, 0, 1, args=(a,b))
>>> I
(1.6666666666666667, 1.8503717077085944e-14)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> def expint(n, x):
...     return quad(integrand, 1, np.inf, args=(n, x))[0]
...
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> result = quad(lambda x: expint(3, x), 0, np.inf)
>>> print(result)
(0.33333333324560266, 2.8548934485373678e-09)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> def gaussian(x):
...     return np.exp(-x**2)
>>> res = integrate.quad(gaussian, -np.inf, np.inf)
>>> res
(1.7724538509055159, 1.4202636756659625e-08)
>>> np.allclose(res[0], np.sqrt(np.pi))  # compare against theoretical result
True
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.signal.windows.gaussian scipy.integrate.quad
">>> integrate.quad(gaussian, -10000, 10000)
(1.975190562208035e-203, 0.0)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> integrate.quad(gaussian, -15, 15)
(1.772453850905516, 8.476526631214648e-11)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.quad
">>> from scipy.integrate import quad, dblquad
>>> def I(n):
...     return dblquad(lambda t, x: np.exp(-x*t)/t**n, 0, np.inf, lambda x: 1, lambda x: np.inf)
...
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.dblquad
">>> from scipy.integrate import dblquad
>>> area = dblquad(lambda x, y: x*y, 0, 0.5, lambda x: 0, lambda x: 1-2*x)
>>> area
(0.010416666666666668, 1.1564823173178715e-16)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.dblquad
">>> from scipy import integrate
>>> N = 5
>>> def f(t, x):
...    return np.exp(-x*t) / t**N
...
>>> integrate.nquad(f, [[1, np.inf],[0, np.inf]])
(0.20000000000002294, 1.2239614263187945e-08)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.nquad
">>> from scipy import integrate
>>> def f(x, y):
...     return x*y
...
>>> def bounds_y():
...     return [0, 0.5]
...
>>> def bounds_x(y):
...     return [0, 1-2*y]
...
>>> integrate.nquad(f, [bounds_x, bounds_y])
(0.010416666666666668, 4.101620128472366e-16)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.nquad
"import os, ctypes
from scipy import integrate, LowLevelCallable

lib = ctypes.CDLL(os.path.abspath('testlib.so'))
lib.f.restype = ctypes.c_double
lib.f.argtypes = (ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p)

c = ctypes.c_double(1.0)
user_data = ctypes.cast(ctypes.pointer(c), ctypes.c_void_p)

func = LowLevelCallable(lib.f, user_data)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.LowLevelCallable
">>> integrate.nquad(func, [[0, 10], [-10, 0], [-1, 1]])
(1200.0, 1.1102230246251565e-11)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.nquad
">>> from scipy.integrate import solve_ivp
>>> from scipy.special import gamma, airy
>>> y1_0 = +1 / 3**(2/3) / gamma(2/3)
>>> y0_0 = -1 / 3**(1/3) / gamma(1/3)
>>> y0 = [y0_0, y1_0]
>>> def func(t, y):
...     return [t*y[1],y[0]]
...
>>> t_span = [0, 4]
>>> sol1 = solve_ivp(func, t_span, y0)
>>> print(""sol1.t: {}"".format(sol1.t))
sol1.t:    [0.         0.10097672 1.04643602 1.91060117 2.49872472 3.08684827
 3.62692846 4.        ]
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.LowLevelCallable scipy.integrate.solve_ivp
">>> rtol, atol = (1e-8, 1e-8)
>>> sol2 = solve_ivp(func, t_span, y0, rtol=rtol, atol=atol)
>>> print(""sol2.y[1][::6]: {}"".format(sol2.y[1][0::6]))
sol2.y[1][::6]: [0.35502805 0.19145234 0.06368989 0.0205917  0.00554734 0.00106409]
>>> print(""airy(sol2.t)[0][::6]: {}"".format(airy(sol2.t)[0][::6]))
airy(sol2.t)[0][::6]: [0.35502805 0.19145234 0.06368989 0.0205917  0.00554733 0.00106406]
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.solve_ivp
">>> import numpy as np
>>> t = np.linspace(0, 4, 100)
>>> sol3 = solve_ivp(func, t_span, y0, t_eval=t)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.solve_ivp
">>> def gradient(t, y):
...     return [[0,t], [1,0]]
>>> sol4 = solve_ivp(func, t_span, y0, method='Radau', jac=gradient)
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.solve_ivp
"In [38]: %timeit sola = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx))
1 loop, best of 3: 25.2 s per loop
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.odeint
"In [39]: %timeit solb = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx), ml=2, mu=2)
10 loops, best of 3: 191 ms per loop
",https://docs.scipy.org/doc/scipy/tutorial/integrate.html, scipy.integrate.odeint
">>> from scipy.spatial import Delaunay
>>> import numpy as np
>>> points = np.array([[0, 0], [0, 1.1], [1, 0], [1, 1]])
>>> tri = Delaunay(points)
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.Delaunay
">>> points = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [1, 1]])
>>> tri = Delaunay(points)
>>> np.unique(tri.simplices.ravel())
array([0, 1, 2, 3], dtype=int32)
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.Delaunay
">>> tri = Delaunay(points, qhull_options=""QJ Pp"")
>>> points[tri.simplices]
array([[[1, 0],
        [1, 1],
        [0, 0]],
       [[1, 1],
        [1, 1],
        [1, 0]],
       [[1, 1],
        [0, 1],
        [0, 0]],
       [[0, 1],
        [1, 1],
        [1, 1]]])
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.Delaunay
">>> from scipy.spatial import ConvexHull
>>> rng = np.random.default_rng()
>>> points = rng.random((30, 2))   # 30 random points in 2-D
>>> hull = ConvexHull(points)
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.ConvexHull
">>> from scipy.spatial import KDTree
>>> points = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2],
...                    [2, 0], [2, 1], [2, 2]])
>>> tree = KDTree(points)
>>> tree.query([0.1, 0.1])
(0.14142135623730953, 0)
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.KDTree scipy.spatial.KDTree.query
">>> x = np.linspace(-0.5, 2.5, 31)
>>> y = np.linspace(-0.5, 2.5, 33)
>>> xx, yy = np.meshgrid(x, y)
>>> xy = np.c_[xx.ravel(), yy.ravel()]
>>> import matplotlib.pyplot as plt
>>> dx_half, dy_half = np.diff(x[:2])[0] / 2., np.diff(y[:2])[0] / 2.
>>> x_edges = np.concatenate((x - dx_half, [x[-1] + dx_half]))
>>> y_edges = np.concatenate((y - dy_half, [y[-1] + dy_half]))
>>> plt.pcolormesh(x_edges, y_edges, tree.query(xy)[1].reshape(33, 31), shading='flat')
>>> plt.plot(points[:,0], points[:,1], 'ko')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.KDTree.query
">>> from scipy.spatial import Voronoi
>>> vor = Voronoi(points)
>>> vor.vertices
array([[0.5, 0.5],
       [0.5, 1.5],
       [1.5, 0.5],
       [1.5, 1.5]])
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.Voronoi
">>> def mandala(n_iter, n_points, radius):
...     """"""Creates a mandala figure using Voronoi tessellations.
...
...     Parameters
...     ----------
...     n_iter : int
...         Number of iterations, i.e. how many times the equidistant points will
...         be generated.
...     n_points : int
...         Number of points to draw per iteration.
...     radius : scalar
...         The radial expansion factor.
...
...     Returns
...     -------
...     fig : matplotlib.Figure instance
...
...     Notes
...     -----
...     This code is adapted from the work of Audrey Roy Greenfeld [1]_ and Carlos
...     Focil-Espinosa [2]_, who created beautiful mandalas with Python code.  That
...     code in turn was based on Antonio Sánchez Chinchón's R code [3]_.
...
...     References
...     ----------
...     .. [1] https://www.codemakesmehappy.com/2019/09/voronoi-mandalas.html
...
...     .. [2] https://github.com/CarlosFocil/mandalapy
...
...     .. [3] https://github.com/aschinchon/mandalas
...
...     """"""
...     fig = plt.figure(figsize=(10, 10))
...     ax = fig.add_subplot(111)
...     ax.set_axis_off()
...     ax.set_aspect('equal', adjustable='box')
...
...     angles = np.linspace(0, 2*np.pi * (1 - 1/n_points), num=n_points) + np.pi/2
...     # Starting from a single center point, add points iteratively
...     xy = np.array([[0, 0]])
...     for k in range(n_iter):
...         t1 = np.array([])
...         t2 = np.array([])
...         # Add `n_points` new points around each existing point in this iteration
...         for i in range(xy.shape[0]):
...             t1 = np.append(t1, xy[i, 0] + radius**k * np.cos(angles))
...             t2 = np.append(t2, xy[i, 1] + radius**k * np.sin(angles))
...
...         xy = np.column_stack((t1, t2))
...
...     # Create the Mandala figure via a Voronoi plot
...     spatial.voronoi_plot_2d(spatial.Voronoi(xy), ax=ax)
...
...     return fig
",https://docs.scipy.org/doc/scipy/tutorial/spatial.html, scipy.spatial.voronoi_plot_2d scipy.spatial.Voronoi
"tess = Delaunay(points)
hull = ConvexHull(points)
voro = Voronoi(points)

# coordinates of the jth vertex of the ith simplex
tess.points[tess.simplices[i, j], :]        # tessellation element
hull.points[hull.simplices[i, j], :]        # convex hull facet
voro.vertices[voro.ridge_vertices[i, j], :] # ridge between Voronoi cells
",https://docs.scipy.org/doc/scipy/reference/spatial.html, scipy.spatial.Delaunay scipy.spatial.ConvexHull scipy.spatial.Voronoi
">>> from scipy.fft import fft, ifft
>>> import numpy as np
>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5])
>>> y = fft(x)
>>> y
array([ 4.5       +0.j        ,  2.08155948-1.65109876j,
       -1.83155948+1.60822041j, -1.83155948-1.60822041j,
        2.08155948+1.65109876j])
>>> yinv = ifft(y)
>>> yinv
array([ 1.0+0.j,  2.0+0.j,  1.0+0.j, -1.0+0.j,  1.5+0.j])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fft scipy.fft.ifft
">>> from scipy.fft import fft, fftfreq
>>> import numpy as np
>>> # Number of sample points
>>> N = 600
>>> # sample spacing
>>> T = 1.0 / 800.0
>>> x = np.linspace(0.0, N*T, N, endpoint=False)
>>> y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)
>>> yf = fft(y)
>>> xf = fftfreq(N, T)[:N//2]
>>> import matplotlib.pyplot as plt
>>> plt.plot(xf, 2.0/N * np.abs(yf[0:N//2]))
>>> plt.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fft scipy.fft.fftfreq
">>> from scipy.fft import fft, fftfreq
>>> import numpy as np
>>> # Number of sample points
>>> N = 600
>>> # sample spacing
>>> T = 1.0 / 800.0
>>> x = np.linspace(0.0, N*T, N, endpoint=False)
>>> y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)
>>> yf = fft(y)
>>> from scipy.signal.windows import blackman
>>> w = blackman(N)
>>> ywf = fft(y*w)
>>> xf = fftfreq(N, T)[:N//2]
>>> import matplotlib.pyplot as plt
>>> plt.semilogy(xf[1:N//2], 2.0/N * np.abs(yf[1:N//2]), '-b')
>>> plt.semilogy(xf[1:N//2], 2.0/N * np.abs(ywf[1:N//2]), '-r')
>>> plt.legend(['FFT', 'FFT w. window'])
>>> plt.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fft scipy.signal.windows.blackman scipy.fft.fftfreq
">>> from scipy.fft import fftfreq
>>> freq = fftfreq(8, 0.125)
>>> freq
array([ 0., 1., 2., 3., -4., -3., -2., -1.])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fftfreq
">>> from scipy.fft import fftshift
>>> x = np.arange(8)
>>> fftshift(x)
array([4, 5, 6, 7, 0, 1, 2, 3])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fftshift
">>> from scipy.fft import fft, fftfreq, fftshift
>>> import numpy as np
>>> # number of signal points
>>> N = 400
>>> # sample spacing
>>> T = 1.0 / 800.0
>>> x = np.linspace(0.0, N*T, N, endpoint=False)
>>> y = np.exp(50.0 * 1.j * 2.0*np.pi*x) + 0.5*np.exp(-80.0 * 1.j * 2.0*np.pi*x)
>>> yf = fft(y)
>>> xf = fftfreq(N, T)
>>> xf = fftshift(xf)
>>> yplot = fftshift(yf)
>>> import matplotlib.pyplot as plt
>>> plt.plot(xf, 1.0/N * np.abs(yplot))
>>> plt.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fft scipy.fft.fftfreq scipy.fft.fftshift
">>> from scipy.fft import fft, rfft, irfft
>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5, 1.0])
>>> fft(x)
array([ 5.5 +0.j        ,  2.25-0.4330127j , -2.75-1.29903811j,
        1.5 +0.j        , -2.75+1.29903811j,  2.25+0.4330127j ])
>>> yr = rfft(x)
>>> yr
array([ 5.5 +0.j        ,  2.25-0.4330127j , -2.75-1.29903811j,
        1.5 +0.j        ])
>>> irfft(yr)
array([ 1. ,  2. ,  1. , -1. ,  1.5,  1. ])
>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5])
>>> fft(x)
array([ 4.5       +0.j        ,  2.08155948-1.65109876j,
       -1.83155948+1.60822041j, -1.83155948-1.60822041j,
        2.08155948+1.65109876j])
>>> yr = rfft(x)
>>> yr
array([ 4.5       +0.j        ,  2.08155948-1.65109876j,
        -1.83155948+1.60822041j])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.fft scipy.fft.rfft scipy.fft.irfft
">>> irfft(yr)
array([ 1.70788987,  2.40843925, -0.37366961,  0.75734049])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.irfft
">>> irfft(yr, n=len(x))
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.irfft
">>> from scipy.fft import ifftn
>>> import matplotlib.pyplot as plt
>>> import matplotlib.cm as cm
>>> import numpy as np
>>> N = 30
>>> f, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, sharex='col', sharey='row')
>>> xf = np.zeros((N,N))
>>> xf[0, 5] = 1
>>> xf[0, N-5] = 1
>>> Z = ifftn(xf)
>>> ax1.imshow(xf, cmap=cm.Reds)
>>> ax4.imshow(np.real(Z), cmap=cm.gray)
>>> xf = np.zeros((N, N))
>>> xf[5, 0] = 1
>>> xf[N-5, 0] = 1
>>> Z = ifftn(xf)
>>> ax2.imshow(xf, cmap=cm.Reds)
>>> ax5.imshow(np.real(Z), cmap=cm.gray)
>>> xf = np.zeros((N, N))
>>> xf[5, 10] = 1
>>> xf[N-5, N-10] = 1
>>> Z = ifftn(xf)
>>> ax3.imshow(xf, cmap=cm.Reds)
>>> ax6.imshow(np.real(Z), cmap=cm.gray)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.ifftn
">>> dct(dct(x, type=2, norm='ortho'), type=3, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dct
">>> dct(dct(x, type=2), type=3)
array([ 10.,  20.,  10., -10.,  15.])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dct
">>> # Normalized inverse: no scaling factor
>>> idct(dct(x, type=2), type=2)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.idct scipy.fft.dct
">>> dct(dct(x, type=1, norm='ortho'), type=1, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
>>> # Unnormalized round-trip via DCT-I: scaling factor 2*(N-1) = 8
>>> dct(dct(x, type=1), type=1)
array([ 8. ,  16.,  8. , -8. ,  12.])
>>> # Normalized inverse: no scaling factor
>>> idct(dct(x, type=1), type=1)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dct scipy.fft.idct
">>> dct(dct(x, type=4, norm='ortho'), type=4, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
>>> # Unnormalized round-trip via DCT-IV: scaling factor 2*N = 10
>>> dct(dct(x, type=4), type=4)
array([ 10.,  20.,  10., -10.,  15.])
>>> # Normalized inverse: no scaling factor
>>> idct(dct(x, type=4), type=4)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dct scipy.fft.idct
">>> from scipy.fft import dct, idct
>>> import matplotlib.pyplot as plt
>>> N = 100
>>> t = np.linspace(0,20,N, endpoint=False)
>>> x = np.exp(-t/3)*np.cos(2*t)
>>> y = dct(x, norm='ortho')
>>> window = np.zeros(N)
>>> window[:20] = 1
>>> yr = idct(y*window, norm='ortho')
>>> sum(abs(x-yr)**2) / sum(abs(x)**2)
0.0009872817275276098
>>> plt.plot(t, x, '-bx')
>>> plt.plot(t, yr, 'ro')
>>> window = np.zeros(N)
>>> window[:15] = 1
>>> yr = idct(y*window, norm='ortho')
>>> sum(abs(x-yr)**2) / sum(abs(x)**2)
0.06196643004256714
>>> plt.plot(t, yr, 'g+')
>>> plt.legend(['x', '$x_{20}$', '$x_{15}$'])
>>> plt.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dct scipy.fft.idct
">>> dst(dst(x, type=2, norm='ortho'), type=3, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dst
">>> dst(dst(x, type=2), type=3)
array([ 10.,  20.,  10., -10.,  15.])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dst
">>> idst(dst(x, type=2), type=2)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.idst scipy.fft.dst
">>> dst(dst(x, type=1, norm='ortho'), type=1, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
>>>  # scaling factor 2*(N+1) = 12
>>> dst(dst(x, type=1), type=1)
array([ 12.,  24.,  12., -12.,  18.])
>>>  # no scaling factor
>>> idst(dst(x, type=1), type=1)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dst scipy.fft.idst
">>> dst(dst(x, type=4, norm='ortho'), type=4, norm='ortho')
array([ 1. ,  2. ,  1. , -1. ,  1.5])
>>>  # scaling factor 2*N = 10
>>> dst(dst(x, type=4), type=4)
array([ 10.,  20.,  10., -10.,  15.])
>>>  # no scaling factor
>>> idst(dst(x, type=4), type=4)
array([ 1. ,  2. ,  1. , -1. ,  1.5])
",https://docs.scipy.org/doc/scipy/tutorial/fft.html, scipy.fft.dst scipy.fft.idst
">>> from scipy.stats.sampling import TransformedDensityRejection
>>> from math import exp
>>>
>>> class StandardNormal:
...     def pdf(self, x: float) -> float:
...         # note that the normalization constant isn't required
...         return exp(-0.5 * x*x)
...     def dpdf(self, x: float) -> float:
...         return -x * exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>>
>>> urng = np.random.default_rng()
>>> rng = TransformedDensityRejection(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling.html, scipy.stats.sampling.TransformedDensityRejection
">>> rng.rvs()
-1.526829048388144
>>> rng.rvs((5, 3))
array([[ 2.06206883,  0.15205036,  1.11587367],
       [-0.30775562,  0.29879802, -0.61858268],
       [-1.01049115,  0.78853694, -0.23060766],
       [-0.60954752,  0.29071797, -0.57167182],
       [ 0.9331694 , -0.95605208,  1.72195199]])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling.html, scipy.stats.sampling.TransformedDensityRejection.rvs
">>> import matplotlib.pyplot as plt
>>> from scipy.stats import norm
>>> from scipy.stats.sampling import TransformedDensityRejection
>>> from math import exp
>>>
>>> class StandardNormal:
...     def pdf(self, x: float) -> float:
...         # note that the normalization constant isn't required
...         return exp(-0.5 * x*x)
...     def dpdf(self, x: float) -> float:
...         return -x * exp(-0.5 * x*x)
...
>>>
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = TransformedDensityRejection(dist, random_state=urng)
>>> rvs = rng.rvs(size=1000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, num=1000)
>>> fx = norm.pdf(x)
>>> plt.plot(x, fx, 'r-', lw=2, label='true distribution')
>>> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')
>>> plt.xlabel('x')
>>> plt.ylabel('PDF(x)')
>>> plt.title('Transformed Density Rejection Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> from scipy.stats.sampling import norm, TransformedDensityRejection
>>> from copy import copy
>>> dist = StandardNormal()
>>> urng1 = np.random.default_rng()
>>> urng1_copy = copy(urng1)
>>> rng = TransformedDensityRejection(dist, random_state=urng1)
>>> rng.rvs()
-1.526829048388144
>>> norm.rvs(random_state=urng1_copy)
1.3194816698862635
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> rng = TransformedDensityRejection(dist, domain=(-1, 1), random_state=urng)
>>> rng.rvs((5, 3))
array([[-0.99865691,  0.38104014,  0.31633526],
       [ 0.88433909, -0.45181849,  0.78574461],
       [ 0.3337244 ,  0.12924307,  0.40499404],
       [-0.51865761,  0.43252222, -0.6514866 ],
       [-0.82666174,  0.71525582,  0.49006743]])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> import scipy.fft
>>> scipy.fft.fft([0, 1, 0, 0])
array([ 1.+0.j,  0.-1.j, -1.+0.j,  0.+1.j]) # may vary
>>> scipy.fft.rfft([0, 1, 0, 0])
array([ 1.+0.j,  0.-1.j, -1.+0.j]) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfft.html, scipy.fft.fft scipy.fft.rfft
">>> from scipy import fft
>>> fft.get_workers()
1
>>> with fft.set_workers(4):
...     fft.get_workers()
4
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.get_workers.html, scipy.fft.get_workers scipy.fft.set_workers
">>> import numpy as np
>>> from scipy.fft import dctn, idctn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idctn(dctn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.dctn.html, scipy.fft.idctn scipy.fft.dctn
">>> from scipy.fft import ifft, idct
>>> import numpy as np
>>> ifft(np.array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])).real
array([  4.,   3.,   5.,  10.,   5.,   3.])
>>> idct(np.array([ 30.,  -8.,   6.,  -2.]), 1)
array([  4.,   3.,   5.,  10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.idct.html, scipy.fft.ifft scipy.fft.idct
">>> import scipy.fft
>>> import numpy as np
>>> x = np.mgrid[:3, :3, :3][0]
>>> scipy.fft.fftn(x, axes=(1, 2))
array([[[ 0.+0.j,   0.+0.j,   0.+0.j], # may vary
        [ 0.+0.j,   0.+0.j,   0.+0.j],
        [ 0.+0.j,   0.+0.j,   0.+0.j]],
       [[ 9.+0.j,   0.+0.j,   0.+0.j],
        [ 0.+0.j,   0.+0.j,   0.+0.j],
        [ 0.+0.j,   0.+0.j,   0.+0.j]],
       [[18.+0.j,   0.+0.j,   0.+0.j],
        [ 0.+0.j,   0.+0.j,   0.+0.j],
        [ 0.+0.j,   0.+0.j,   0.+0.j]]])
>>> scipy.fft.fftn(x, (2, 2), axes=(0, 1))
array([[[ 2.+0.j,  2.+0.j,  2.+0.j], # may vary
        [ 0.+0.j,  0.+0.j,  0.+0.j]],
       [[-2.+0.j, -2.+0.j, -2.+0.j],
        [ 0.+0.j,  0.+0.j,  0.+0.j]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftn.html, scipy.fft.fftn
">>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> [X, Y] = np.meshgrid(2 * np.pi * np.arange(200) / 12,
...                      2 * np.pi * np.arange(200) / 34)
>>> S = np.sin(X) + np.cos(Y) + rng.uniform(0, 1, X.shape)
>>> FS = scipy.fft.fftn(S)
>>> plt.imshow(np.log(np.abs(scipy.fft.fftshift(FS))**2))

>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftn.html, scipy.fft.fftn scipy.fft.fftshift
">>> import scipy.fft
>>> import numpy as np
>>> x = np.ones((2, 2, 2))
>>> scipy.fft.rfftn(x)
array([[[8.+0.j,  0.+0.j], # may vary
        [0.+0.j,  0.+0.j]],
       [[0.+0.j,  0.+0.j],
        [0.+0.j,  0.+0.j]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftn.html, scipy.fft.rfftn
">>> scipy.fft.rfftn(x, axes=(2, 0))
array([[[4.+0.j,  0.+0.j], # may vary
        [4.+0.j,  0.+0.j]],
       [[0.+0.j,  0.+0.j],
        [0.+0.j,  0.+0.j]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftn.html, scipy.fft.rfftn
">>> import numpy as np
>>> import scipy.fft
>>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5], dtype=float)
>>> fourier = scipy.fft.fft(signal)
>>> n = signal.size
>>> timestep = 0.1
>>> freq = scipy.fft.fftfreq(n, d=timestep)
>>> freq
array([ 0.  ,  1.25,  2.5 , ..., -3.75, -2.5 , -1.25])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fftfreq.html, scipy.fft.fft scipy.fft.fftfreq
">>> import torch
>>> from scipy.cluster.vq import vq
>>> code_book = torch.tensor([[1., 1., 1.],
...                           [2., 2., 2.]])
>>> features  = torch.tensor([[1.9, 2.3, 1.7],
...                           [1.5, 2.5, 2.2],
...                           [0.8, 0.6, 1.7]])
>>> code, dist = vq(features, code_book)
>>> code
tensor([1, 1, 0], dtype=torch.int32)
>>> dist
tensor([0.4359, 0.7348, 0.8307])
",https://docs.scipy.org/doc/scipy/dev/api-dev/array_api.html, scipy.cluster.vq.vq
">>> import numpy as np
>>> from scipy.cluster.vq import vq
>>> code_book = np.array([[1., 1., 1.],
...                       [2., 2., 2.]])
>>> features  = np.array([[1.9, 2.3, 1.7],
...                       [1.5, 2.5, 2.2],
...                       [0.8, 0.6, 1.7]])
>>> vq(features, code_book)
(array([1, 1, 0], dtype=int32), array([0.43588989, 0.73484692, 0.83066239]))

>>> # The above uses numpy arrays; trying to use np.matrix instances or object
>>> # arrays instead will yield an exception with `SCIPY_ARRAY_API=1`:
>>> vq(np.asmatrix(features), code_book)
...
TypeError: 'numpy.matrix' are not supported

>>> vq(np.ma.asarray(features), code_book)
...
TypeError: 'numpy.ma.MaskedArray' are not supported

>>> vq(features.astype(np.object_), code_book)
...
TypeError: object arrays are not supported
",https://docs.scipy.org/doc/scipy/dev/api-dev/array_api.html, scipy.cluster.vq.vq
"def toto(a, b):
    a = np.asarray(a)
    b = np.asarray(b, copy=True)

    c = np.sum(a) - np.prod(b)

    # this is some C or Cython call
    d = cdist(c)

    return d
",https://docs.scipy.org/doc/scipy/dev/api-dev/array_api.html, scipy.spatial.distance.cdist
"def toto(a, b):
    xp = array_namespace(a, b)
    a = xp.asarray(a)
    b = copy(b, xp=xp)  # our custom helper is needed for copy

    c = xp.sum(a) - xp.prod(b)

    # this is some C or Cython call
    c = np.asarray(c)
    d = cdist(c)
    d = xp.asarray(d)

    return d
",https://docs.scipy.org/doc/scipy/dev/api-dev/array_api.html, scipy.spatial.distance.cdist
">>> def func(x, y):
...     return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.LowLevelCallable
">>> rng = np.random.default_rng()
>>> points = rng.random((1000, 2))
>>> values = func(points[:,0], points[:,1])
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.LowLevelCallable
">>> from scipy.interpolate import griddata
>>> grid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')
>>> grid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')
>>> grid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic')
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.interpolate.griddata
">>> import matplotlib.pyplot as plt
>>> plt.subplot(221)
>>> plt.imshow(func(grid_x, grid_y).T, extent=(0, 1, 0, 1), origin='lower')
>>> plt.plot(points[:, 0], points[:, 1], 'k.', ms=1)   # data
>>> plt.title('Original')
>>> plt.subplot(222)
>>> plt.imshow(grid_z0.T, extent=(0, 1, 0, 1), origin='lower')
>>> plt.title('Nearest')
>>> plt.subplot(223)
>>> plt.imshow(grid_z1.T, extent=(0, 1, 0, 1), origin='lower')
>>> plt.title('Linear')
>>> plt.subplot(224)
>>> plt.imshow(grid_z2.T, extent=(0, 1, 0, 1), origin='lower')
>>> plt.title('Cubic')
>>> plt.gcf().set_size_inches(6, 6)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.LowLevelCallable
">>> # use fitpack2 method
>>> ius = InterpolatedUnivariateSpline(x, y)
>>> yi = ius(xi)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.interpolate.InterpolatedUnivariateSpline scipy.interpolate.InterpolatedUnivariateSpline
">>> # use RBF method
>>> rbf = RBFInterpolator(x, y)
>>> fi = rbf(xi)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.interpolate.RBFInterpolator scipy.interpolate.RBFInterpolator
">>> # use RBF
>>> rbf = RBFInterpolator(xy, z, epsilon=2)
>>> z_i = rbf(xy_i)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_unstructured.html, scipy.interpolate.RBFInterpolator scipy.interpolate.RBFInterpolator
">>> from scipy.fft import fft, dct
>>> import numpy as np
>>> fft(np.array([4., 3., 5., 10., 5., 3.])).real
array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])
>>> dct(np.array([4., 3., 5., 10.]), 1)
array([ 30.,  -8.,   6.,  -2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.dct.html, scipy.fft.fft scipy.fft.dct
">>> from scipy import constants
>>> constants.value('elementary charge')
1.602176634e-19
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.value.html, scipy.constants.value
">>> import scipy.fft as fft
>>> with fft.set_backend('scipy', only=True):
...     fft.fft([1])  # Always calls the scipy implementation
array([1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.set_backend.html, scipy.fft.set_backend scipy.fft.fft
">>> from scipy.fft import fft, hfft
>>> import numpy as np
>>> a = 2 * np.pi * np.arange(10) / 10
>>> signal = np.cos(a) + 3j * np.sin(3 * a)
>>> fft(signal).round(10)
array([ -0.+0.j,   5.+0.j,  -0.+0.j,  15.-0.j,   0.+0.j,   0.+0.j,
        -0.+0.j, -15.-0.j,   0.+0.j,   5.+0.j])
>>> hfft(signal[:6]).round(10) # Input first half of signal
array([  0.,   5.,   0.,  15.,  -0.,   0.,   0., -15.,  -0.,   5.])
>>> hfft(signal, 10)  # Input entire signal and truncate
array([  0.,   5.,   0.,  15.,  -0.,   0.,   0., -15.,  -0.,   5.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.hfft.html, scipy.fft.fft scipy.fft.hfft
">>> import scipy.fft
>>> scipy.fft.ifft([1, -1j, -1, 1j])
array([0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]) # may vary
>>> scipy.fft.irfft([1, -1j, -1])
array([0.,  1.,  0.,  0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.irfft.html, scipy.fft.ifft scipy.fft.irfft
">>> from scipy.constants import convert_temperature
>>> import numpy as np
>>> convert_temperature(np.array([-40, 40]), 'Celsius', 'Kelvin')
array([ 233.15,  313.15])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.convert_temperature.html, scipy.constants.convert_temperature
">>> from scipy.fft import fhtoffset
>>> dln = 0.1
>>> mu = 2.0
>>> initial = 0.5
>>> bias = 0.0
>>> offset = fhtoffset(dln, mu, initial, bias)
>>> offset
0.5454581477676637
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fhtoffset.html, scipy.fft.fhtoffset
">>> import scipy.fft
>>> import numpy as np
>>> x = np.ones((3, 2, 2))
>>> scipy.fft.hfftn(x)
array([[[12.,  0.],
        [ 0.,  0.]],
       [[ 0.,  0.],
        [ 0.,  0.]],
       [[ 0.,  0.],
        [ 0.,  0.]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.hfftn.html, scipy.fft.hfftn
">>> from scipy.fft import fft, register_backend, set_global_backend
>>> class NoopBackend:  # Define an invalid Backend
...     __ua_domain__ = ""numpy.scipy.fft""
...     def __ua_function__(self, func, args, kwargs):
...          return NotImplemented
>>> set_global_backend(NoopBackend())  # Set the invalid backend as global
>>> register_backend(""scipy"")  # Register a new backend
# The registered backend is called because
# the global backend returns `NotImplemented`
>>> fft([1])
array([1.+0.j])
>>> set_global_backend(""scipy"")  # Restore global backend to default
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.register_backend.html, scipy.fft.set_global_backend scipy.fft.register_backend scipy.fft.fft
">>> from scipy.constants import lambda2nu, speed_of_light
>>> import numpy as np
>>> lambda2nu(np.array((1, speed_of_light)))
array([  2.99792458e+08,   1.00000000e+00])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.lambda2nu.html, scipy.constants.lambda2nu
">>> find('boltzmann')
['Boltzmann constant',
 'Boltzmann constant in Hz/K',
 'Boltzmann constant in eV/K',
 'Boltzmann constant in inverse meter per kelvin',
 'Stefan-Boltzmann constant']
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.find.html, scipy.constants.find
">>> find('radius')
['Bohr radius',
 'classical electron radius',
 'deuteron rms charge radius',
 'proton rms charge radius']
>>> physical_constants['classical electron radius']
(2.8179403262e-15, 'm', 1.3e-24)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.find.html, scipy.constants.find
">>> from scipy import constants
>>> constants.unit('proton mass')
'kg'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.unit.html, scipy.constants.unit
">>> from scipy.fft import fft, set_global_backend
>>> set_global_backend(""scipy"")  # Sets global backend (default is ""scipy"").
>>> fft([1])  # Calls the global backend
array([1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.set_global_backend.html, scipy.fft.set_global_backend scipy.fft.fft
">>> from scipy import constants
>>> constants.precision('proton mass')
5.1e-37
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.precision.html, scipy.constants.precision
">>> import numpy as np
>>> from scipy import fft, signal
>>> rng = np.random.default_rng()
>>> x = rng.standard_normal((128, 64))
>>> with fft.set_workers(4):
...     y = signal.fftconvolve(x, x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.set_workers.html, scipy.fft.set_workers scipy.signal.fftconvolve
">>> import scipy.fft as fft
>>> fft.fft([1])  # Calls default SciPy backend
array([1.+0.j])
>>> with fft.skip_backend('scipy'):  # We explicitly skip the SciPy backend
...     fft.fft([1])                 # leaving no implementation available
Traceback (most recent call last):
    ...
BackendNotImplementedError: No selected backends had an implementation ...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.skip_backend.html, scipy.fft.fft scipy.fft.skip_backend
">>> import numpy as np
>>> from scipy.fft import dstn, idstn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idstn(dstn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.idstn.html, scipy.fft.idstn scipy.fft.dstn
">>> import scipy.fft
>>> import numpy as np
>>> x = np.eye(4)
>>> scipy.fft.ifftn(scipy.fft.fftn(x, axes=(0,)), axes=(1,))
array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary
       [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],
       [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],
       [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ifftn.html, scipy.fft.ifftn scipy.fft.fftn
">>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> n = np.zeros((200,200), dtype=complex)
>>> n[60:80, 20:40] = np.exp(1j*rng.uniform(0, 2*np.pi, (20, 20)))
>>> im = scipy.fft.ifftn(n).real
>>> plt.imshow(im)

>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ifftn.html, scipy.fft.ifftn
">>> import scipy.fft
>>> import numpy as np
>>> x = 4 * np.eye(4)
>>> scipy.fft.ifft2(x)
array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary
       [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],
       [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],
       [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ifft2.html, scipy.fft.ifft2
">>> from scipy import datasets
>>> ascent_array = datasets.ascent()
>>> ascent_array.shape
(512, 512)
>>> datasets.clear_cache([datasets.ascent])
Cleaning the file ascent.dat for dataset ascent
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.datasets.clear_cache.html, scipy.datasets.ascent scipy.datasets.clear_cache
">>> from scipy.fft import ifft, ihfft
>>> import numpy as np
>>> spectrum = np.array([ 15, -4, 0, -1, 0, -4])
>>> ifft(spectrum)
array([1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  3.+0.j,  2.+0.j]) # may vary
>>> ihfft(spectrum)
array([ 1.-0.j,  2.-0.j,  3.-0.j,  4.-0.j]) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ihfft.html, scipy.fft.ifft scipy.fft.ihfft
">>> import scipy.fft
>>> import numpy as np
>>> x = np.mgrid[:5, :5][0]
>>> scipy.fft.fft2(x)
array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        , # may vary
          0.  +0.j        ,   0.  +0.j        ],
       [-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ,
          0.  +0.j        ,   0.  +0.j        ],
       [-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,
          0.  +0.j        ,   0.  +0.j        ],
       [-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,
          0.  +0.j        ,   0.  +0.j        ],
       [-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ,
          0.  +0.j        ,   0.  +0.j        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft2.html, scipy.fft.fft2
">>> import scipy.fft
>>> import numpy as np
>>> scipy.fft.ifft([0, 4, 0, 0])
array([ 1.+0.j,  0.+1.j, -1.+0.j,  0.-1.j]) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ifft.html, scipy.fft.ifft
">>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> t = np.arange(400)
>>> n = np.zeros((400,), dtype=complex)
>>> n[40:60] = np.exp(1j*rng.uniform(0, 2*np.pi, (20,)))
>>> s = scipy.fft.ifft(n)
>>> plt.plot(t, s.real, 'b-', t, s.imag, 'r--')
[, ]
>>> plt.legend(('real', 'imaginary'))

>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ifft.html, scipy.fft.ifft
">>> import scipy.fft
>>> import numpy as np
>>> scipy.fft.fft(np.exp(2j * np.pi * np.arange(8) / 8))
array([-2.33486982e-16+1.14423775e-17j,  8.00000000e+00-1.25557246e-15j,
        2.33486982e-16+2.33486982e-16j,  0.00000000e+00+1.22464680e-16j,
       -1.14423775e-17+2.33486982e-16j,  0.00000000e+00+5.20784380e-16j,
        1.14423775e-17+1.14423775e-17j,  0.00000000e+00+1.22464680e-16j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html, scipy.fft.fft
">>> from scipy.fft import fft, fftfreq, fftshift
>>> import matplotlib.pyplot as plt
>>> t = np.arange(256)
>>> sp = fftshift(fft(np.sin(t)))
>>> freq = fftshift(fftfreq(t.shape[-1]))
>>> plt.plot(freq, sp.real, freq, sp.imag)
[,
 ]
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fft.html, scipy.fft.fftshift scipy.fft.fft scipy.fft.fftfreq
">>> import scipy.fft
>>> import numpy as np
>>> x = np.ones((2, 2, 2))
>>> scipy.fft.ihfftn(x)
array([[[1.+0.j,  0.+0.j], # may vary
        [0.+0.j,  0.+0.j]],
       [[0.+0.j,  0.+0.j],
        [0.+0.j,  0.+0.j]]])
>>> scipy.fft.ihfftn(x, axes=(2, 0))
array([[[1.+0.j,  0.+0.j], # may vary
        [1.+0.j,  0.+0.j]],
       [[0.+0.j,  0.+0.j],
        [0.+0.j,  0.+0.j]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.ihfftn.html, scipy.fft.ihfftn
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import InterpolatedUnivariateSpline
>>> rng = np.random.default_rng()
>>> x = np.linspace(-3, 3, 50)
>>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50)
>>> spl = InterpolatedUnivariateSpline(x, y)
>>> plt.plot(x, y, 'ro', ms=5)
>>> xs = np.linspace(-3, 3, 1000)
>>> plt.plot(xs, spl(xs), 'g', lw=3, alpha=0.7)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.html, scipy.interpolate.InterpolatedUnivariateSpline scipy.interpolate.InterpolatedUnivariateSpline
">>> spl.get_residual()
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.html, scipy.interpolate.InterpolatedUnivariateSpline.get_residual
">>> from scipy import fft
>>> import numpy as np
>>> rng = np.random.default_rng()
>>> min_len = 93059  # prime length is worst case for speed
>>> a = rng.standard_normal(min_len)
>>> b = fft.fft(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.next_fast_len.html, scipy.fft.fft
">>> fft.next_fast_len(min_len, real=True)
93312
>>> b = fft.fft(a, 93312)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.next_fast_len.html, scipy.fft.next_fast_len scipy.fft.fft
">>> b = fft.fft(a, 131072)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.next_fast_len.html, scipy.fft.fft
">>> import scipy.fft
>>> import numpy as np
>>> x = np.zeros((3, 2, 2))
>>> x[0, 0, 0] = 3 * 2 * 2
>>> scipy.fft.irfftn(x)
array([[[1.,  1.],
        [1.,  1.]],
       [[1.,  1.],
        [1.,  1.]],
       [[1.,  1.],
        [1.,  1.]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.irfftn.html, scipy.fft.irfftn
">>> from scipy.interpolate import splrep, splder, splantider, splev
>>> import numpy as np
>>> x = np.linspace(0, np.pi/2, 70)
>>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)
>>> spl = splrep(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splantider.html, scipy.interpolate.splrep
">>> splev(1.7, spl), splev(1.7, splder(splantider(spl)))
(array(2.1565429877197317), array(2.1565429877201865))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splantider.html, scipy.interpolate.splev scipy.interpolate.splder scipy.interpolate.splantider
">>> ispl = splantider(spl)
>>> splev(np.pi/2, ispl) - splev(0, ispl)
2.2572053588768486
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splantider.html, scipy.interpolate.splantider scipy.interpolate.splev
">>> import numpy as np
>>> import scipy.fft
>>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5, -3, 4], dtype=float)
>>> fourier = scipy.fft.rfft(signal)
>>> n = signal.size
>>> sample_rate = 100
>>> freq = scipy.fft.fftfreq(n, d=1./sample_rate)
>>> freq
array([  0.,  10.,  20., ..., -30., -20., -10.])
>>> freq = scipy.fft.rfftfreq(n, d=1./sample_rate)
>>> freq
array([  0.,  10.,  20.,  30.,  40.,  50.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.rfftfreq.html, scipy.fft.rfft scipy.fft.fftfreq scipy.fft.rfftfreq
">>> mu = 0.0                     # Order mu of Bessel function
>>> r = np.logspace(-7, 1, 128)  # Input evaluation points
>>> dln = np.log(r[1]/r[0])      # Step size
>>> offset = fft.fhtoffset(dln, initial=-6*np.log(10), mu=mu)
>>> k = np.exp(offset)/r[::-1]   # Output evaluation points
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fht.html, scipy.fft.fhtoffset
">>> a_r = f(r, mu)
>>> fht = fft.fht(a_r, dln, mu=mu, offset=offset)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.fht.html, scipy.fft.fht
">>> from scipy.constants import nu2lambda, speed_of_light
>>> import numpy as np
>>> nu2lambda(np.array((1, speed_of_light)))
array([  2.99792458e+08,   1.00000000e+00])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.constants.nu2lambda.html, scipy.constants.nu2lambda
">>> from scipy.interpolate import CubicSpline
>>> spl = CubicSpline([1, 2, 3, 4, 5, 6], [1, 4, 8, 16, 25, 36])
>>> spl(2.5)
5.57
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.CubicSpline scipy.interpolate.CubicSpline
">>> from scipy.interpolate import CubicSpline
>>> x = np.linspace(0, 10, num=11)
>>> y = np.cos(-x**2 / 9.)
>>> spl = CubicSpline(x, y)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.CubicSpline
">>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots(4, 1, figsize=(5, 7))
>>> xnew = np.linspace(0, 10, num=1001)
>>> ax[0].plot(xnew, spl(xnew))
>>> ax[0].plot(x, y, 'o', label='data')
>>> ax[1].plot(xnew, spl(xnew, nu=1), '--', label='1st derivative')
>>> ax[2].plot(xnew, spl(xnew, nu=2), '--', label='2nd derivative')
>>> ax[3].plot(xnew, spl(xnew, nu=3), '--', label='3rd derivative')
>>> for j in range(4):
...     ax[j].legend(loc='best')
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.CubicSpline
">>> import matplotlib.pyplot as plt
>>> xx = np.linspace(1, 8, 51)
>>> plt.plot(xx, CubicSpline(x, y)(xx), '--', label='spline')
>>> plt.plot(xx, Akima1DInterpolator(x, y)(xx), '-', label='Akima1D')
>>> plt.plot(xx, PchipInterpolator(x, y)(xx), '-', label='pchip')
>>> plt.plot(x, y, 'o')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.CubicSpline scipy.interpolate.Akima1DInterpolator scipy.interpolate.PchipInterpolator
">>> from scipy.interpolate import make_interp_spline
>>> bspl = make_interp_spline(x, y, k=3)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.make_interp_spline
">>> from scipy.interpolate import make_interp_spline
>>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots(1, 3, figsize=(8, 3))
>>> parametrizations = ['uniform', 'cord length', 'centripetal']
>>>
>>> for j, u in enumerate([u_unif, u_cord, u_c]):
...    spl = make_interp_spline(u, p, axis=1)    # note p is a 2D array
...
...    uu = np.linspace(u[0], u[-1], 51)
...    xx, yy = spl(uu)
...
...    ax[j].plot(xx, yy, '--')
...    ax[j].plot(p[0, :], p[1, :], 'o')
...    ax[j].set_title(parametrizations[j])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.make_interp_spline scipy.interpolate.CubicSpline
">>> x = np.linspace(0, 10, num=11, endpoint=True)
>>> y = np.cos(-x**2/9.0)
>>> f = interp1d(x, y)
>>> f2 = interp1d(x, y, kind='cubic')
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.interp1d
">>> xnew = np.linspace(0, 10, num=41, endpoint=True)
>>> import matplotlib.pyplot as plt
>>> plt.plot(x, y, 'o', xnew, f(xnew), '-', xnew, f2(xnew), '--')
>>> plt.legend(['data', 'linear', 'cubic'], loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.interp1d scipy.interpolate.interp1d
">>> x = np.linspace(0, 10, num=11, endpoint=True)
>>> y = np.cos(-x**2/9.0)
>>> f1 = interp1d(x, y, kind='nearest')
>>> f2 = interp1d(x, y, kind='previous')
>>> f3 = interp1d(x, y, kind='next')
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.interp1d
">>> xnew = np.linspace(0, 10, num=1001, endpoint=True)
>>> import matplotlib.pyplot as plt
>>> plt.plot(x, y, 'o')
>>> plt.plot(xnew, f1(xnew), '-', xnew, f2(xnew), '--', xnew, f3(xnew), ':')
>>> plt.legend(['data', 'nearest', 'previous', 'next'], loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/1D.html, scipy.interpolate.interp1d scipy.interpolate.interp1d scipy.interpolate.interp1d
">>> from scipy.interpolate import splprep, splev
>>> tck, u = splprep([x, y], s=0)
>>> new_points = splev(u, tck)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splprep.html, scipy.interpolate.splprep scipy.interpolate.splev
">>> lats, lons = np.meshgrid(theta, phi)
>>> knotst, knotsp = theta.copy(), phi.copy()
>>> knotst[0] += .0001
>>> knotst[-1] -= .0001
>>> knotsp[0] += .0001
>>> knotsp[-1] -= .0001
>>> lut = LSQSphereBivariateSpline(lats.ravel(), lons.ravel(),
...                                data.T.ravel(), knotst, knotsp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQSphereBivariateSpline.html, scipy.interpolate.LSQSphereBivariateSpline
">>> data_orig = lut(theta, phi)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQSphereBivariateSpline.html, scipy.interpolate.LSQSphereBivariateSpline
">>> fine_lats = np.linspace(0., np.pi, 70)
>>> fine_lons = np.linspace(0., 2*np.pi, 90)
>>> data_lsq = lut(fine_lats, fine_lons)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQSphereBivariateSpline.html, scipy.interpolate.LSQSphereBivariateSpline
">>> t = [-1, 0, 1]
>>> spl = LSQUnivariateSpline(x, y, t)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.html, scipy.interpolate.LSQUnivariateSpline
">>> xs = np.linspace(-3, 3, 1000)
>>> plt.plot(x, y, 'ro', ms=5)
>>> plt.plot(xs, spl(xs), 'g-', lw=3)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.html, scipy.interpolate.LSQUnivariateSpline
">>> spl.get_knots()
array([-3., -1., 0., 1., 3.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.html, scipy.interpolate.LSQUnivariateSpline.get_knots
">>> x = np.arange(10)
>>> s = UnivariateSpline(x, x, s=0)
>>> s.get_knots()
array([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.])
>>> knt = s.get_knots()
>>> s1 = LSQUnivariateSpline(x, x, knt[1:-1])    # Chop 1st and last knot
>>> s1.get_knots()
array([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.get_knots scipy.interpolate.LSQUnivariateSpline scipy.interpolate.LSQUnivariateSpline.get_knots
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import cspline1d, cspline1d_eval
>>> rng = np.random.default_rng()
>>> sig = np.repeat([0., 1., 0.], 100)
>>> sig += rng.standard_normal(len(sig))*0.05  # add noise
>>> time = np.linspace(0, len(sig))
>>> filtered = cspline1d_eval(cspline1d(sig), time)
>>> plt.plot(sig, label=""signal"")
>>> plt.plot(time, filtered, label=""filtered"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cspline1d_eval.html, scipy.signal.cspline1d_eval scipy.signal.cspline1d
">>> interp = RegularGridInterpolator(fit_points, values)
>>> fig, axes = plt.subplots(2, 3, figsize=(10, 6))
>>> axes = axes.ravel()
>>> fig_index = 0
>>> for method in ['linear', 'nearest', 'slinear', 'cubic', 'quintic']:
...     im = interp(test_points, method=method).reshape(80, 80)
...     axes[fig_index].imshow(im)
...     axes[fig_index].set_title(method)
...     axes[fig_index].axis(""off"")
...     fig_index += 1
>>> axes[fig_index].imshow(true_values)
>>> axes[fig_index].set_title(""True values"")
>>> fig.tight_layout()
>>> fig.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.interpolate.RegularGridInterpolator scipy.interpolate.RegularGridInterpolator
">>> from scipy.interpolate import interpn
>>> rgi = RegularGridInterpolator(fit_points, values)
>>> result_rgi = rgi(test_points)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.interpolate.RegularGridInterpolator scipy.interpolate.RegularGridInterpolator
">>> result_interpn = interpn(fit_points, values, test_points)
>>> np.allclose(result_rgi, result_interpn, atol=1e-15)
True
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.interpolate.interpn
">>> x = np.array([0, 5, 10])
>>> y = np.array([0])
>>> data = np.array([[0], [5], [10]])
>>> rgi = RegularGridInterpolator((x, y), data,
...                               bounds_error=False, fill_value=None)
>>> rgi([(2, 0), (2, 1), (2, -1)])
array([2., 2., 2.]))         # extrapolate the value on the axis
>>> rgi.fill_value = -101
>>> rgi([(2, 0), (2, 1), (2, -1)])
array([2., -101., -101.]))
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.interpolate.RegularGridInterpolator scipy.interpolate.RegularGridInterpolator
"class CartesianGridInterpolator:
    def __init__(self, points, values, method='linear'):
        self.limits = np.array([[min(x), max(x)] for x in points])
        self.values = np.asarray(values, dtype=float)
        self.order = {'linear': 1, 'cubic': 3, 'quintic': 5}[method]

    def __call__(self, xi):
        """"""
        `xi` here is an array-like (an array or a list) of points.

        Each ""point"" is an ndim-dimensional array_like, representing
        the coordinates of a point in ndim-dimensional space.
        """"""
        # transpose the xi array into the ``map_coordinates`` convention
        # which takes coordinates of a point along columns of a 2D array.
        xi = np.asarray(xi).T

        # convert from data coordinates to pixel coordinates
        ns = self.values.shape
        coords = [(n-1)*(val - lo) / (hi - lo)
                  for val, n, (lo, hi) in zip(xi, ns, self.limits)]

        # interpolate
        return map_coordinates(self.values, coords,
                               order=self.order,
                               cval=np.nan)  # fill_value
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.ndimage.map_coordinates
">>> x, y = np.arange(5), np.arange(6)
>>> xx, yy = np.meshgrid(x, y, indexing='ij')
>>> values = xx**3 + yy**3
>>> rgi = RegularGridInterpolator((x, y), values, method='linear')
>>> rgi([[1.5, 1.5], [3.5, 2.6]])
array([ 9. , 64.9])
>>> cgi = CartesianGridInterpolator((x, y), values, method='linear')
array([ 9. , 64.9])
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/ND_regular_grid.html, scipy.interpolate.RegularGridInterpolator scipy.interpolate.RegularGridInterpolator
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

x = np.linspace(0, 1.5*np.pi, 11)
y = np.column_stack((np.cos(x), np.sin(x)))   # y.shape is (11, 2)

func = interp1d(x, y,
                axis=0,  # interpolate along columns
                bounds_error=False,
                kind='linear',
                fill_value=(y[0], y[-1]))
xnew = np.linspace(-np.pi, 2.5*np.pi, 51)
ynew = func(xnew)

fix, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))
ax1.plot(xnew, ynew[:, 0])
ax1.plot(x, y[:, 0], 'o')

ax2.plot(xnew, ynew[:, 1])
ax2.plot(x, y[:, 1], 'o')
plt.tight_layout()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.interp1d scipy.interpolate.interp1d
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline

xs = [1, 2, 3, 4, 5, 6, 7, 8]
ys = [4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7]

notaknot = CubicSpline(xs, ys, bc_type='not-a-knot')
natural = CubicSpline(xs, ys, bc_type='natural')
clamped = CubicSpline(xs, ys, bc_type='clamped')
xnew = np.linspace(min(xs) - 4, max(xs) + 4, 101)

splines = [notaknot, natural, clamped]
titles = ['not-a-knot', 'natural', 'clamped']

fig, axs = plt.subplots(3, 3, figsize=(12, 12))
for i in [0, 1, 2]:
    for j, spline, title in zip(range(3), splines, titles):
        axs[i, j].plot(xs, spline(xs, nu=i),'o')
        axs[i, j].plot(xnew, spline(xnew, nu=i),'-')
        axs[i, j].set_title(f'{title}, deriv={i}')

plt.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.CubicSpline
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline

def add_boundary_knots(spline):
    """"""
    Add knots infinitesimally to the left and right.

    Additional intervals are added to have zero 2nd and 3rd derivatives,
    and to maintain the first derivative from whatever boundary condition
    was selected. The spline is modified in place.
    """"""
    # determine the slope at the left edge
    leftx = spline.x[0]
    lefty = spline(leftx)
    leftslope = spline(leftx, nu=1)

    # add a new breakpoint just to the left and use the
    # known slope to construct the PPoly coefficients.
    leftxnext = np.nextafter(leftx, leftx - 1)
    leftynext = lefty + leftslope*(leftxnext - leftx)
    leftcoeffs = np.array([0, 0, leftslope, leftynext])
    spline.extend(leftcoeffs[..., None], np.r_[leftxnext])

    # repeat with additional knots to the right
    rightx = spline.x[-1]
    righty = spline(rightx)
    rightslope = spline(rightx,nu=1)
    rightxnext = np.nextafter(rightx, rightx + 1)
    rightynext = righty + rightslope * (rightxnext - rightx)
    rightcoeffs = np.array([0, 0, rightslope, rightynext])
    spline.extend(rightcoeffs[..., None], np.r_[rightxnext])

xs = [1, 2, 3, 4, 5, 6, 7, 8]
ys = [4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7]

notaknot = CubicSpline(xs,ys, bc_type='not-a-knot')
# not-a-knot does not require additional intervals

natural = CubicSpline(xs,ys, bc_type='natural')
# extend the natural natural spline with linear extrapolating knots
add_boundary_knots(natural)

clamped = CubicSpline(xs,ys, bc_type='clamped')
# extend the clamped spline with constant extrapolating knots
add_boundary_knots(clamped)

xnew = np.linspace(min(xs) - 5, max(xs) + 5, 201)

fig, axs = plt.subplots(3, 3,figsize=(12,12))

splines = [notaknot, natural, clamped]
titles = ['not-a-knot', 'natural', 'clamped']

for i in [0, 1, 2]:
    for j, spline, title in zip(range(3), splines, titles):
        axs[i, j].plot(xs, spline(xs, nu=i),'o')
        axs[i, j].plot(xnew, spline(xnew, nu=i),'-')
        axs[i, j].set_title(f'{title}, deriv={i}')

plt.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.CubicSpline
"import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import brentq

def f(x, a):
    return a*x - 1/np.tan(x)

a = 3
x0 = brentq(f, 1e-16, np.pi/2, args=(a,))   # here we shift the left edge
                                            # by a machine epsilon to avoid
                                            # a division by zero at x=0
xx = np.linspace(0.2, np.pi/2, 101)
plt.plot(xx, a*xx, '--')
plt.plot(xx, 1/np.tan(xx), '--')
plt.plot(x0, a*x0, 'o', ms=12)
plt.text(0.1, 0.9, fr'$x_0 = {x0:.3f}$',
               transform=plt.gca().transAxes, fontsize=16)
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.interp1d scipy.optimize.brentq
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import BPoly

def f(x, a):
    return a*x - 1/np.tan(x)

xleft, xright = 0.2, np.pi/2
x = np.linspace(xleft, xright, 11)

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

for j, a in enumerate([3, 93]):
    y = f(x, a)
    dydx = a + 1./np.sin(x)**2    # d(ax - 1/tan(x)) / dx
    dxdy = 1 / dydx               # dx/dy = 1 / (dy/dx)

    xdx = np.c_[x, dxdy]
    spl = BPoly.from_derivatives(y, xdx)   # inverse interpolation

    yy = np.linspace(f(xleft, a), f(xright, a), 51)
    ax[j].plot(yy, spl(yy), '--')
    ax[j].plot(y, x, 'o')
    ax[j].set_xlabel(r'$y$')
    ax[j].set_ylabel(r'$x$')
    ax[j].set_title(rf'$a = {a}$')

    ax[j].plot(0, spl(0), 'o', ms=12)
    ax[j].text(0.1, 0.85, fr'$x_0 = {spl(0):.3f}$',
               transform=ax[j].transAxes, fontsize=18)
    ax[j].grid(True)
plt.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.interp1d scipy.interpolate.BPoly.from_derivatives scipy.interpolate.LSQUnivariateSpline
"class RootWithAsymptotics:
   def __init__(self, a):

       # construct the interpolant
       xleft, xright = 0.2, np.pi/2
       x = np.linspace(xleft, xright, 11)

       y = f(x, a)
       dydx = a + 1./np.sin(x)**2    # d(ax - 1/tan(x)) / dx
       dxdy = 1 / dydx               # dx/dy = 1 / (dy/dx)

       # inverse interpolation
       self.spl = BPoly.from_derivatives(y, np.c_[x, dxdy])
       self.a = a

   def root(self):
       out = self.spl(0)
       asympt = 1./np.sqrt(self.a)
       return np.where(spl.x.min() < asympt, out, asympt)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.interp1d scipy.interpolate.BPoly.from_derivatives scipy.optimize.root
">>> r = RootWithAsymptotics(93)
>>> r.root()
array(0.10369517)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.optimize.root
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CloughTocher2DInterpolator as CT

def my_CT(xy, z):
    """"""CT interpolator + nearest-neighbor extrapolation.

    Parameters
    ----------
    xy : ndarray, shape (npoints, ndim)
        Coordinates of data points
    z : ndarray, shape (npoints)
        Values at data points

    Returns
    -------
    func : callable
        A callable object which mirrors the CT behavior,
        with an additional neareast-neighbor extrapolation
        outside of the data range.
    """"""
    x = xy[:, 0]
    y = xy[:, 1]
    f = CT(xy, z)

    # this inner function will be returned to a user
    def new_f(xx, yy):
        # evaluate the CT interpolator. Out-of-bounds values are nan.
        zz = f(xx, yy)
        nans = np.isnan(zz)

        if nans.any():
            # for each nan point, find its nearest neighbor
            inds = np.argmin(
                (x[:, None] - xx[nans])**2 +
                (y[:, None] - yy[nans])**2
                , axis=0)
            # ... and use its value
            zz[nans] = z[inds]
        return zz

    return new_f

# Now illustrate the difference between the original ``CT`` interpolant
# and ``my_CT`` on a small example:

x = np.array([1, 1, 1, 2, 2, 2, 4, 4, 4])
y = np.array([1, 2, 3, 1, 2, 3, 1, 2, 3])
z = np.array([0, 7, 8, 3, 4, 7, 1, 3, 4])

xy = np.c_[x, y]
lut = CT(xy, z)
lut2 = my_CT(xy, z)

X = np.linspace(min(x) - 0.5, max(x) + 0.5, 71)
Y = np.linspace(min(y) - 0.5, max(y) + 0.5, 71)
X, Y = np.meshgrid(X, Y)

fig = plt.figure()
ax = fig.add_subplot(projection='3d')

ax.plot_wireframe(X, Y, lut(X, Y), label='CT')
ax.plot_wireframe(X, Y, lut2(X, Y), color='m',
                  cstride=10, rstride=10, alpha=0.7, label='CT + n.n.')

ax.scatter(x, y, z,  'o', color='k', s=48, label='data')
ax.legend()
plt.tight_layout()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/extrapolation_examples.html, scipy.interpolate.interp1d scipy.interpolate.LSQSphereBivariateSpline
">>> import numpy as np
>>> from scipy.fft import dctn, idctn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idctn(dctn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.idctn.html, scipy.fft.idctn scipy.fft.dctn
">>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]
>>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,
...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,
...      6.520430e-03,  8.170770e-03]
>>> from scipy.interpolate import splrep, sproot, PPoly
>>> tck = splrep(x, y, s=0)
>>> sproot(tck)
array([], dtype=float64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.sproot.html, scipy.interpolate.splrep scipy.interpolate.sproot
">>> ppoly = PPoly.from_spline(tck)
>>> ppoly.roots(extrapolate=False)
array([2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.sproot.html, scipy.interpolate.PPoly.from_spline
">>> import numpy as np
>>> from scipy.fft import dstn, idstn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idstn(dstn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fft.dstn.html, scipy.fft.idstn scipy.fft.dstn
">>> from scipy.interpolate import CubicSpline
>>> x = np.linspace(0, 10, 71)
>>> y = np.sin(x)
>>> spl = CubicSpline(x, y)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.CubicSpline
">>> dspl = spl.derivative()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.CubicSpline.derivative
">>> dspl(1.1), spl(1.1, nu=1)
(0.45361436, 0.45361436)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.CubicSpline
">>> from scipy.interpolate import PchipInterpolator
>>> x = np.linspace(0, np.pi/2, 70)
>>> y = (1 - m*np.sin(x)**2))**(-1/2)
>>> spl = PchipInterpolator(x, y)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.PchipInterpolator
">>> spl = PchipInterpolator(x, y, axis=1)  # the default is axis=0
>>> import matplotlib.pyplot as plt
>>> plt.plot(m, spl.integrate(0, np.pi/2), '--')
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.PchipInterpolator
">>> x = np.linspace(0, 3/2, 7)
>>> y = np.sin(np.pi*x)
>>> from scipy.interpolate import make_interp_spline
>>> bspl = make_interp_spline(x, y, k=3)
>>> print(bspl.t)
[0.  0.  0.  0.        0.5  0.75  1.        1.5  1.5  1.5  1.5 ]
>>> print(x)
[            0.  0.25  0.5  0.75  1.  1.25  1.5 ]
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.make_interp_spline
">>> from scipy.interpolate import BSpline
>>> import matplotlib.pyplot as plt
>>> for j in [-2, -1, 0, 1, 2]:
...     a, b = t[k+j], t[-k+j-1]
...     xx = np.linspace(a, b, 101)
...     bspl = BSpline.basis_element(t[k+j:-k+j])
...     plt.plot(xx, bspl(xx), label=f'j = {j}')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.BSpline.basis_element
">>> c = np.zeros(t.size - k - 1)
>>> c[-2] = 1
>>> b = BSpline(t, c, k)
>>> np.allclose(b(xx), bspl(xx))
True
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.BSpline scipy.interpolate.BSpline
">>> from scipy.interpolate import BSpline
>>> mat = BSpline.design_matrix(xnew, t, k=3)
>>> mat
<3x7 sparse array of type ''
        with 12 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/splines_and_polynomials.html, scipy.interpolate.BSpline.design_matrix
">>> from scipy.interpolate import make_lsq_spline, BSpline
>>> t = [-1, 0, 1]
>>> k = 3
>>> t = np.r_[(x[0],)*(k+1),
...           t,
...           (x[-1],)*(k+1)]
>>> spl = make_lsq_spline(x, y, t, k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_lsq_spline.html, scipy.interpolate.make_lsq_spline
">>> from scipy.interpolate import make_interp_spline
>>> spl_i = make_interp_spline(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_lsq_spline.html, scipy.interpolate.make_interp_spline
">>> xs = np.linspace(-3, 3, 100)
>>> plt.plot(x, y, 'ro', ms=5)
>>> plt.plot(xs, spl(xs), 'g-', lw=3, label='LSQ spline')
>>> plt.plot(xs, spl_i(xs), 'b-', lw=3, alpha=0.7, label='interp spline')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_lsq_spline.html, scipy.interpolate.PchipInterpolator
">>> y[8] = np.nan
>>> w = np.isnan(y)
>>> y[w] = 0.
>>> tck = make_lsq_spline(x, y, t, w=~w)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_lsq_spline.html, scipy.interpolate.make_lsq_spline
">>> tck = splrep(x, y, s=0)
>>> tck_s = splrep(x, y, s=len(x))
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splrep
">>> import matplotlib.pyplot as plt
>>> xnew = np.arange(0, 9/4, 1/50) * np.pi
>>> plt.plot(xnew, np.sin(xnew), '-.', label='sin(x)')
>>> plt.plot(xnew, BSpline(*tck)(xnew), '-', label='s=0')
>>> plt.plot(xnew, BSpline(*tck_s)(xnew), '-', label=f's={len(x)}')
>>> plt.plot(x, y, 'o')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.BSpline
">>> x = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)
>>> y = np.sin(x)
>>> tck = interpolate.splrep(x, y, s=0)
>>> xnew = np.arange(0, 2*np.pi, np.pi/50)
>>> ynew = interpolate.splev(xnew, tck, der=0)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splrep scipy.interpolate.splev
">>> yder = interpolate.splev(xnew, tck, der=1)   # or BSpline(*tck)(xnew, 1)
>>> plt.figure()
>>> plt.plot(xnew, yder, xnew, np.cos(xnew),'--')
>>> plt.legend(['Cubic Spline', 'True'])
>>> plt.axis([-0.05, 6.33, -1.05, 1.05])
>>> plt.title('Derivative estimation from spline')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splev scipy.interpolate.BSpline
">>> yders = interpolate.spalde(xnew, tck)
>>> plt.figure()
>>> for i in range(len(yders[0])):
...    plt.plot(xnew, [d[i] for d in yders], '--', label=f""{i} derivative"")
>>> plt.legend()
>>> plt.axis([-0.05, 6.33, -1.05, 1.05])
>>> plt.title('All derivatives of a B-spline')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.spalde
">>> def integ(x, tck, constant=-1):
...     x = np.atleast_1d(x)
...     out = np.zeros(x.shape, dtype=x.dtype)
...     for n in range(len(out)):
...         out[n] = interpolate.splint(0, x[n], tck)
...     out += constant
...     return out
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splint
">>> interpolate.sproot(tck)
array([3.1416])  # may vary
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.sproot
">>> x = np.linspace(-np.pi/4, 2.*np.pi + np.pi/4, 21)
>>> y = np.sin(x)
>>> tck = interpolate.splrep(x, y, s=0)
>>> interpolate.sproot(tck)
array([0., 3.1416])
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splrep scipy.interpolate.sproot
">>> t = np.arange(0, 1.1, .1)
>>> x = np.sin(2*np.pi*t)
>>> y = np.cos(2*np.pi*t)
>>> tck, u = interpolate.splprep([x, y], s=0)
>>> unew = np.arange(0, 1.01, 0.01)
>>> out = interpolate.splev(unew, tck)
>>> plt.figure()
>>> plt.plot(x, y, 'x', out[0], out[1], np.sin(2*np.pi*unew), np.cos(2*np.pi*unew), x, y, 'b')
>>> plt.legend(['Linear', 'Cubic Spline', 'True'])
>>> plt.axis([-1.05, 1.05, -1.05, 1.05])
>>> plt.title('Spline of parametrically-defined curve')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.splprep scipy.interpolate.splev
">>> tt, cc, k = tck
>>> cc = np.array(cc)
>>> bspl = BSpline(tt, cc.T, k)    # note the transpose
>>> xy = bspl(u)
>>> xx, yy = xy.T   # transpose to unpack into a pair of arrays
>>> np.allclose(x, xx)
True
>>> np.allclose(y, yy)
True
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.BSpline scipy.interpolate.BSpline
">>> x = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)
>>> y = np.sin(x)
>>> s = interpolate.InterpolatedUnivariateSpline(x, y)
>>> xnew = np.arange(0, 2*np.pi, np.pi/50)
>>> ynew = s(xnew)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.InterpolatedUnivariateSpline scipy.interpolate.InterpolatedUnivariateSpline
">>> t = [np.pi/2-.1, np.pi/2+.1, 3*np.pi/2-.1, 3*np.pi/2+.1]
>>> s = interpolate.LSQUnivariateSpline(x, y, t, k=2)
>>> ynew = s(xnew)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.LSQUnivariateSpline scipy.interpolate.LSQUnivariateSpline
">>> xnew_edges, ynew_edges = np.mgrid[-1:1:71j, -1:1:71j]
>>> xnew = xnew_edges[:-1, :-1] + np.diff(xnew_edges[:2, 0])[0] / 2.
>>> ynew = ynew_edges[:-1, :-1] + np.diff(ynew_edges[0, :2])[0] / 2.
>>> tck = interpolate.bisplrep(x, y, z, s=0)
>>> znew = interpolate.bisplev(xnew[:,0], ynew[0,:], tck)
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.bisplrep scipy.interpolate.bisplev
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import SmoothBivariateSpline

import warnings
warnings.simplefilter('ignore')

train_x, train_y = np.meshgrid(np.arange(-5, 5, 0.5), np.arange(-5, 5, 0.5))
train_x = train_x.flatten()
train_y = train_y.flatten()

def z_func(x, y):
    return np.cos(x) + np.sin(y) ** 2 + 0.05 * x + 0.1 * y

train_z = z_func(train_x, train_y)
interp_func = SmoothBivariateSpline(train_x, train_y, train_z, s=0.0)
smth_func = SmoothBivariateSpline(train_x, train_y, train_z)

test_x = np.arange(-9, 9, 0.01)
test_y = np.arange(-9, 9, 0.01)
grid_x, grid_y = np.meshgrid(test_x, test_y)

interp_result = interp_func(test_x, test_y).T
smth_result = smth_func(test_x, test_y).T
perfect_result = z_func(grid_x, grid_y)

fig, axes = plt.subplots(1, 3, figsize=(16, 8))
extent = [test_x[0], test_x[-1], test_y[0], test_y[-1]]
opts = dict(aspect='equal', cmap='nipy_spectral', extent=extent, vmin=-1.5, vmax=2.5)

im = axes[0].imshow(perfect_result, **opts)
fig.colorbar(im, ax=axes[0], orientation='horizontal')
axes[0].plot(train_x, train_y, 'w.')
axes[0].set_title('Perfect result, sampled function', fontsize=21)

im = axes[1].imshow(smth_result, **opts)
axes[1].plot(train_x, train_y, 'w.')
fig.colorbar(im, ax=axes[1], orientation='horizontal')
axes[1].set_title('s=default', fontsize=21)

im = axes[2].imshow(interp_result, **opts)
fig.colorbar(im, ax=axes[2], orientation='horizontal')
axes[2].plot(train_x, train_y, 'w.')
axes[2].set_title('s=0', fontsize=21)

plt.tight_layout()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.SmoothBivariateSpline scipy.interpolate.SmoothBivariateSpline scipy.interpolate.SmoothBivariateSpline
"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import RectBivariateSpline

x = np.arange(-5.01, 5.01, 0.25)        # the grid is an outer product
y = np.arange(-5.01, 7.51, 0.25)        # of x and y arrays

xx, yy = np.meshgrid(x, y, indexing='ij')
z = np.sin(xx**2 + 2.*yy**2)            # z array needs to be 2-D

func = RectBivariateSpline(x, y, z, s=0)

xnew = np.arange(-5.01, 5.01, 1e-2)
ynew = np.arange(-5.01, 7.51, 1e-2)
znew = func(xnew, ynew)

plt.imshow(znew)
plt.colorbar()
plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/interpolate/smoothing_splines.html, scipy.interpolate.RectBivariateSpline scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import pchip_interpolate
>>> x_observed = np.linspace(0.0, 10.0, 11)
>>> y_observed = np.sin(x_observed)
>>> x = np.linspace(min(x_observed), max(x_observed), num=100)
>>> y = pchip_interpolate(x_observed, y_observed, x)
>>> plt.plot(x_observed, y_observed, ""o"", label=""observation"")
>>> plt.plot(x, y, label=""pchip interpolation"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.pchip_interpolate.html, scipy.interpolate.pchip_interpolate
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import barycentric_interpolate
>>> x_observed = np.linspace(0.0, 10.0, 11)
>>> y_observed = np.sin(x_observed)
>>> x = np.linspace(min(x_observed), max(x_observed), num=100)
>>> y = barycentric_interpolate(x_observed, y_observed, x)
>>> plt.plot(x_observed, y_observed, ""o"", label=""observation"")
>>> plt.plot(x, y, label=""barycentric interpolation"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.barycentric_interpolate.html, scipy.interpolate.barycentric_interpolate
">>> import numpy as np
>>> from scipy.interpolate import Rbf
>>> rng = np.random.default_rng()
>>> x, y, z, d = rng.random((4, 50))
>>> rbfi = Rbf(x, y, z, d)  # radial basis function interpolator instance
>>> xi = yi = zi = np.linspace(0, 1, 20)
>>> di = rbfi(xi, yi, zi)   # interpolated values
>>> di.shape
(20,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.Rbf.html, scipy.interpolate.Rbf scipy.interpolate.Rbf
">>> from scipy.interpolate import LinearNDInterpolator
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> x = rng.random(10) - 0.5
>>> y = rng.random(10) - 0.5
>>> z = np.hypot(x, y)
>>> X = np.linspace(min(x), max(x))
>>> Y = np.linspace(min(y), max(y))
>>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation
>>> interp = LinearNDInterpolator(list(zip(x, y)), z)
>>> Z = interp(X, Y)
>>> plt.pcolormesh(X, Y, Z, shading='auto')
>>> plt.plot(x, y, ""ok"", label=""input point"")
>>> plt.legend()
>>> plt.colorbar()
>>> plt.axis(""equal"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LinearNDInterpolator.html, scipy.interpolate.LinearNDInterpolator scipy.interpolate.LinearNDInterpolator
"sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) <= s
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html, scipy.interpolate.PchipInterpolator
"abs(sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) - s) < 0.001 * s
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html, scipy.interpolate.PchipInterpolator
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x, y = np.array([1, 2, 3, 4]), np.array([1, np.nan, 3, 4])
>>> w = np.isnan(y)
>>> y[w] = 0.
>>> spl = UnivariateSpline(x, y, w=~w)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html, scipy.interpolate.UnivariateSpline
">>> spl = UnivariateSpline(x, y)
>>> xs = np.linspace(-3, 3, 1000)
>>> plt.plot(xs, spl(xs), 'g', lw=3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline
">>> spl.set_smoothing_factor(0.5)
>>> plt.plot(xs, spl(xs), 'b', lw=3)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.html, scipy.interpolate.UnivariateSpline.set_smoothing_factor scipy.interpolate.UnivariateSpline
"c[i1, i2, ..., iN] * B(x1; i1, t1) * B(x2; i2, t2) * ... * B(xN; iN, tN)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.NdBSpline.html, scipy.sparse.coo_array
">>> from scipy.interpolate import splrep, insert
>>> import numpy as np
>>> x = np.linspace(0, 10, 5)
>>> y = np.sin(x)
>>> tck = splrep(x, y)
>>> tck[0]
array([ 0.,  0.,  0.,  0.,  5., 10., 10., 10., 10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.insert.html, scipy.interpolate.splrep
">>> tck_inserted = insert(3, tck)
>>> tck_inserted[0]
array([ 0.,  0.,  0.,  0.,  3.,  5., 10., 10., 10., 10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.insert.html, scipy.interpolate.insert
">>> tck_inserted2 = insert(8, tck, m=3)
>>> tck_inserted2[0]
array([ 0.,  0.,  0.,  0.,  5.,  8.,  8.,  8., 10., 10., 10., 10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.insert.html, scipy.interpolate.insert
">>> import numpy as np
>>> from scipy.signal import gauss_spline
>>> knots = np.array([-1.0, 0.0, -1.0])
>>> gauss_spline(knots, 3)
array([0.15418033, 0.6909883, 0.15418033])  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.gauss_spline.html, scipy.signal.gauss_spline
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import approximate_taylor_polynomial
>>> x = np.linspace(-10.0, 10.0, num=100)
>>> plt.plot(x, np.sin(x), label=""sin curve"")
>>> for degree in np.arange(1, 15, step=2):
...     sin_taylor = approximate_taylor_polynomial(np.sin, 0, degree, 1,
...                                                order=degree + 2)
...     plt.plot(x, sin_taylor(x), label=f""degree={degree}"")
>>> plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left',
...            borderaxespad=0.0, shadow=True)
>>> plt.tight_layout()
>>> plt.axis([-10, 10, -10, 10])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.approximate_taylor_polynomial.html, scipy.interpolate.approximate_taylor_polynomial
"S = sum(c[a, i] * b(a, k; x) for a in range(k+1)),
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.html, scipy.interpolate.BSpline
"b(a, k; x) = binom(k, a) * t**a * (1 - t)**(k - a),
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.html, scipy.interpolate.BSpline
">>> from scipy.interpolate import BPoly
>>> x = [0, 1]
>>> c = [[1], [2], [3]]
>>> bp = BPoly(c, x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.html, scipy.interpolate.BPoly
">>> def B(x, k, i, t):
...    if k == 0:
...       return 1.0 if t[i] <= x < t[i+1] else 0.0
...    if t[i+k] == t[i]:
...       c1 = 0.0
...    else:
...       c1 = (x - t[i])/(t[i+k] - t[i]) * B(x, k-1, i, t)
...    if t[i+k+1] == t[i+1]:
...       c2 = 0.0
...    else:
...       c2 = (t[i+k+1] - x)/(t[i+k+1] - t[i+1]) * B(x, k-1, i+1, t)
...    return c1 + c2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.html, scipy.sparse.coo_array
">>> def bspline(x, t, c, k):
...    n = len(t) - k - 1
...    assert (n >= k+1) and (len(c) >= n)
...    return sum(c[i] * B(x, k, i, t) for i in range(n))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.html, scipy.sparse.coo_array
">>> from scipy.interpolate import BSpline
>>> k = 2
>>> t = [0, 1, 2, 3, 4, 5, 6]
>>> c = [-1, 2, 0, -1]
>>> spl = BSpline(t, c, k)
>>> spl(2.5)
array(1.375)
>>> bspline(2.5, t, c, k)
1.375
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.html, scipy.interpolate.BSpline scipy.interpolate.BSpline
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> fig, ax = plt.subplots()
>>> xx = np.linspace(1.5, 4.5, 50)
>>> ax.plot(xx, [bspline(x, t, c ,k) for x in xx], 'r-', lw=3, label='naive')
>>> ax.plot(xx, spl(xx), 'b-', lw=4, alpha=0.7, label='BSpline')
>>> ax.grid(True)
>>> ax.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.html, scipy.interpolate.BSpline
">>> def f(x):
...     return (x**2 - 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brentq.html, scipy.interpolate.interp1d
">>> root = optimize.brentq(f, -2, 0)
>>> root
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brentq.html, scipy.optimize.brentq
">>> root = optimize.brentq(f, 0, 2)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brentq.html, scipy.optimize.brentq
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import krogh_interpolate
>>> x_observed = np.linspace(0.0, 10.0, 11)
>>> y_observed = np.sin(x_observed)
>>> x = np.linspace(min(x_observed), max(x_observed), num=100)
>>> y = krogh_interpolate(x_observed, y_observed, x)
>>> plt.plot(x_observed, y_observed, ""o"", label=""observation"")
>>> plt.plot(x, y, label=""krogh interpolation"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.krogh_interpolate.html, scipy.interpolate.krogh_interpolate
">>> import numpy as np
>>> from scipy.interpolate import pade
>>> e_exp = [1.0, 1.0, 1.0/2.0, 1.0/6.0, 1.0/24.0, 1.0/120.0]
>>> p, q = pade(e_exp, 2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.pade.html, scipy.interpolate.pade
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import qspline1d, qspline1d_eval
>>> rng = np.random.default_rng()
>>> sig = np.repeat([0., 1., 0.], 100)
>>> sig += rng.standard_normal(len(sig))*0.05  # add noise
>>> time = np.linspace(0, len(sig))
>>> filtered = qspline1d_eval(qspline1d(sig), time)
>>> plt.plot(sig, label=""signal"")
>>> plt.plot(time, filtered, label=""filtered"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.qspline1d.html, scipy.signal.qspline1d_eval scipy.signal.qspline1d
">>> point = np.array([2.21, 3.12, 1.15])
>>> print(interpn(points, values, point))
[12.63]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interpn.html, scipy.interpolate.interpn
">>> import numpy as np
>>> from scipy import interpolate
>>> x = np.arange(-5.01, 5.01, 0.25)
>>> y = np.arange(-5.01, 5.01, 0.25)
>>> xx, yy = np.meshgrid(x, y)
>>> z = np.sin(xx**2+yy**2)
>>> f = interpolate.interp2d(x, y, z, kind='cubic')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp2d.html, scipy.interpolate.interp2d
">>> import matplotlib.pyplot as plt
>>> xnew = np.arange(-5.01, 5.01, 1e-2)
>>> ynew = np.arange(-5.01, 5.01, 1e-2)
>>> znew = f(xnew, ynew)
>>> plt.plot(x, z[0, :], 'ro-', xnew, znew[0, :], 'b-')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp2d.html, scipy.interpolate.interp2d
">>> import numpy as np
>>> from scipy.interpolate import lagrange
>>> x = np.array([0, 1, 2])
>>> y = x**3
>>> poly = lagrange(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.lagrange.html, scipy.interpolate.lagrange
">>> import numpy as np
>>> def func(x, y):
...     return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html, scipy.interpolate.RectBivariateSpline
">>> rng = np.random.default_rng()
>>> points = rng.random((1000, 2))
>>> values = func(points[:,0], points[:,1])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html, scipy.interpolate.RectBivariateSpline
">>> from scipy.interpolate import griddata
>>> grid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')
>>> grid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')
>>> grid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html, scipy.interpolate.griddata
">>> import matplotlib.pyplot as plt
>>> plt.subplot(221)
>>> plt.imshow(func(grid_x, grid_y).T, extent=(0,1,0,1), origin='lower')
>>> plt.plot(points[:,0], points[:,1], 'k.', ms=1)
>>> plt.title('Original')
>>> plt.subplot(222)
>>> plt.imshow(grid_z0.T, extent=(0,1,0,1), origin='lower')
>>> plt.title('Nearest')
>>> plt.subplot(223)
>>> plt.imshow(grid_z1.T, extent=(0,1,0,1), origin='lower')
>>> plt.title('Linear')
>>> plt.subplot(224)
>>> plt.imshow(grid_z2.T, extent=(0,1,0,1), origin='lower')
>>> plt.title('Cubic')
>>> plt.gcf().set_size_inches(6, 6)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html, scipy.interpolate.RectBivariateSpline
">>> def f(x):
...     return (x**2 - 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.ridder.html, scipy.interpolate.interp2d
">>> root = optimize.ridder(f, 0, 2)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.ridder.html, scipy.optimize.ridder
">>> root = optimize.ridder(f, -2, 0)
>>> root
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.ridder.html, scipy.optimize.ridder
"dy / dx = f(x, y, p) + S * y / (x - a), a <= x <= b
bc(y(a), y(b), p) = 0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_bvp.html, scipy.interpolate.interp2d
">>> from scipy.integrate import solve_bvp
>>> res_a = solve_bvp(fun, bc, x, y_a)
>>> res_b = solve_bvp(fun, bc, x, y_b)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_bvp.html, scipy.integrate.solve_bvp
">>> sol = solve_bvp(fun, bc, x, y, p=[6])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_bvp.html, scipy.integrate.solve_bvp
">>> x = np.linspace(0, 10, 20, endpoint=False)
>>> y = np.cos(-x**2/6.0)
>>> f = signal.resample(y, 100)
>>> xnew = np.linspace(0, 10, 100, endpoint=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.resample.html, scipy.signal.resample
">>> from scipy.optimize import show_options
>>> show_options(solver=""minimize"")
...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.show_options.html, scipy.optimize.show_options
">>> show_options(solver=""minimize"", method=""Nelder-Mead"")
...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.show_options.html, scipy.optimize.show_options
">>> show_options(solver=""minimize"", method=""Nelder-Mead"", disp=False)
Minimization of scalar function of one or more variables using the ...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.show_options.html, scipy.optimize.show_options
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import qspline1d, qspline1d_eval
>>> rng = np.random.default_rng()
>>> sig = np.repeat([0., 1., 0.], 100)
>>> sig += rng.standard_normal(len(sig))*0.05  # add noise
>>> time = np.linspace(0, len(sig))
>>> filtered = qspline1d_eval(qspline1d(sig), time)
>>> plt.plot(sig, label=""signal"")
>>> plt.plot(time, filtered, label=""filtered"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.qspline1d_eval.html, scipy.signal.qspline1d_eval scipy.signal.qspline1d
">>> lats, lons = np.meshgrid(theta, phi)
>>> from scipy.interpolate import SmoothSphereBivariateSpline
>>> lut = SmoothSphereBivariateSpline(lats.ravel(), lons.ravel(),
...                                   data.T.ravel(), s=3.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.html, scipy.interpolate.SmoothSphereBivariateSpline
">>> data_orig = lut(theta, phi)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.html, scipy.interpolate.SmoothSphereBivariateSpline
">>> data_smth = lut(fine_lats, fine_lons)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.html, scipy.interpolate.SmoothSphereBivariateSpline
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy import interpolate
>>> x = np.arange(0, 10)
>>> y = np.exp(-x/3.0)
>>> f = interpolate.interp1d(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html, scipy.interpolate.interp1d
">>> xnew = np.arange(0, 9, 0.1)
>>> ynew = f(xnew)   # use interpolation function returned by `interp1d`
>>> plt.plot(x, y, 'o', xnew, ynew, '-')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html, scipy.interpolate.interp1d
">>> from scipy.interpolate import splrep, splder, sproot
>>> import numpy as np
>>> x = np.linspace(0, 10, 70)
>>> y = np.sin(x)
>>> spl = splrep(x, y, k=4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splder.html, scipy.interpolate.splrep
">>> dspl = splder(spl)
>>> sproot(dspl) / np.pi
array([ 0.50000001,  1.5       ,  2.49999998])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splder.html, scipy.interpolate.splder scipy.interpolate.sproot
">>> from scipy.interpolate import BSpline, make_interp_spline
>>> b = make_interp_spline(x, y)
>>> np.allclose(b(x), y)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_interp_spline.html, scipy.interpolate.make_interp_spline scipy.interpolate.BSpline
">>> l, r = [(2, 0.0)], [(2, 0.0)]
>>> b_n = make_interp_spline(x, y, bc_type=(l, r))  # or, bc_type=""natural""
>>> np.allclose(b_n(x), y)
True
>>> x0, x1 = x[0], x[-1]
>>> np.allclose([b_n(x0, 2), b_n(x1, 2)], [0, 0])
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_interp_spline.html, scipy.interpolate.make_interp_spline
">>> spl = make_interp_spline(phi, np.c_[x, y])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_interp_spline.html, scipy.interpolate.make_interp_spline
">>> phi_new = np.linspace(0, 2.*np.pi, 100)
>>> x_new, y_new = spl(phi_new).T
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_interp_spline.html, scipy.interpolate.BSpline
">>> ax = plt.axes(projection='3d')
>>> xx = np.linspace(0, 2*np.pi, 100)
>>> bspl = make_interp_spline(x, y, k=5, bc_type='periodic', axis=1)
>>> ax.plot3D(xx, *bspl(xx))
>>> ax.scatter3D(x, *y, color='red')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_interp_spline.html, scipy.interpolate.make_interp_spline scipy.interpolate.BSpline
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import splev, splrep
>>> x = np.linspace(0, 10, 10)
>>> y = np.sin(x)
>>> spl = splrep(x, y)
>>> x2 = np.linspace(0, 10, 200)
>>> y2 = splev(x2, spl)
>>> plt.plot(x, y, 'o', x2, y2)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.splrep.html, scipy.interpolate.splrep scipy.interpolate.splev
">>> rng = np.random.default_rng()
>>> xobs = 2*Halton(2, seed=rng).random(100) - 1
>>> yobs = np.sum(xobs, axis=1)*np.exp(-6*np.sum(xobs**2, axis=1))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RBFInterpolator.html, scipy.stats.qmc.Halton
">>> xgrid = np.mgrid[-1:1:50j, -1:1:50j]
>>> xflat = xgrid.reshape(2, -1).T
>>> yflat = RBFInterpolator(xobs, yobs)(xflat)
>>> ygrid = yflat.reshape(50, 50)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RBFInterpolator.html, scipy.interpolate.RBFInterpolator
">>> import numpy as np
>>> from scipy import integrate
>>> f = lambda y, x: x*y**2
>>> integrate.dblquad(f, 0, 2, 0, 1)
    (0.6666666666666667, 7.401486830834377e-15)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html, scipy.integrate.dblquad
">>> f = lambda y, x: 1
>>> integrate.dblquad(f, 0, np.pi/4, np.sin, np.cos)
    (0.41421356237309503, 1.1083280054755938e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html, scipy.integrate.dblquad
">>> f = lambda y, x, a: a*x*y
>>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(1,))
    (0.33333333333333337, 5.551115123125783e-15)
>>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(3,))
    (0.9999999999999999, 1.6653345369377348e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html, scipy.integrate.dblquad
">>> f = lambda x, y: np.exp(-(x ** 2 + y ** 2))
>>> integrate.dblquad(f, -np.inf, np.inf, -np.inf, np.inf)
    (3.141592653589777, 2.5173086737433208e-08)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html, scipy.integrate.dblquad
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.interpolate import BarycentricInterpolator
>>> rng = np.random.default_rng()
>>> xi = rng.random(6) * np.pi/2
>>> f, f_d1, f_d2, f_d3, f_d4 = np.sin, np.cos, lambda x: -np.sin(x), lambda x: -np.cos(x), np.sin
>>> P = BarycentricInterpolator(xi, f(xi), random_state=rng)
>>> fig, axs = plt.subplots(5, 1, sharex=True, layout='constrained', figsize=(7,10))
>>> x = np.linspace(0, np.pi, 100)
>>> axs[0].plot(x, P(x), 'r:', x, f(x), 'k--', xi, f(xi), 'xk')
>>> axs[1].plot(x, P.derivative(x), 'r:', x, f_d1(x), 'k--', xi, f_d1(xi), 'xk')
>>> axs[2].plot(x, P.derivative(x, 2), 'r:', x, f_d2(x), 'k--', xi, f_d2(xi), 'xk')
>>> axs[3].plot(x, P.derivative(x, 3), 'r:', x, f_d3(x), 'k--', xi, f_d3(xi), 'xk')
>>> axs[4].plot(x, P.derivative(x, 4), 'r:', x, f_d4(x), 'k--', xi, f_d4(xi), 'xk')
>>> axs[0].set_xlim(0, np.pi)
>>> axs[4].set_xlabel(r""$x$"")
>>> axs[4].set_xticks([i * np.pi / 4 for i in range(5)],
...                   [""0"", r""$\frac{\pi}{4}$"", r""$\frac{\pi}{2}$"", r""$\frac{3\pi}{4}$"", r""$\pi$""])
>>> axs[0].set_ylabel(""$f(x)$"")
>>> axs[1].set_ylabel(""$f'(x)$"")
>>> axs[2].set_ylabel(""$f''(x)$"")
>>> axs[3].set_ylabel(""$f^{(3)}(x)$"")
>>> axs[4].set_ylabel(""$f^{(4)}(x)$"")
>>> labels = ['Interpolation nodes', 'True function $f$', 'Barycentric interpolation']
>>> axs[0].legend(axs[0].get_lines()[::-1], labels, bbox_to_anchor=(0., 1.02, 1., .102),
...               loc='lower left', ncols=3, mode=""expand"", borderaxespad=0., frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.html, scipy.interpolate.BarycentricInterpolator scipy.interpolate.interp1d scipy.interpolate.BarycentricInterpolator scipy.interpolate.BarycentricInterpolator.derivative
">>> x = np.linspace(-2, 2, num=20)
>>> y = x
>>> y_int = integrate.cumulative_trapezoid(y, x, initial=0)
>>> plt.plot(x, y_int, 'ro', x, y[0] + 0.5 * x**2, 'b-')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.cumulative_trapezoid.html, scipy.integrate.cumulative_trapezoid
">>> from scipy import integrate
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> x = np.linspace(-2, 2, num=20)
>>> y = x**2
>>> y_int = integrate.cumulative_simpson(y, x=x, initial=0)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, y_int, 'ro', x, x**3/3 - (x[0])**3/3, 'b-')
>>> ax.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.cumulative_simpson.html, scipy.integrate.cumulative_simpson
">>> def cumulative_simpson_reference(y, x):
...     return np.asarray([integrate.simpson(y[:i], x=x[:i])
...                        for i in range(2, len(y) + 1)])
>>>
>>> rng = np.random.default_rng()
>>> x, y = rng.random(size=(2, 10))
>>> x.sort()
>>>
>>> res = integrate.cumulative_simpson(y, x=x)
>>> ref = cumulative_simpson_reference(y, x)
>>> equal = np.abs(res - ref) < 1e-15
>>> equal  # not equal when `simpson` has even number of subintervals
array([False,  True, False,  True, False,  True, False,  True,  True])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.cumulative_simpson.html, scipy.integrate.cumulative_simpson
">>> from scipy.interpolate import RectSphereBivariateSpline
>>> lut = RectSphereBivariateSpline(lats, lons, data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectSphereBivariateSpline.html, scipy.interpolate.RectSphereBivariateSpline
">>> data_interp = lut.ev(new_lats.ravel(),
...                      new_lons.ravel()).reshape((360, 180)).T
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectSphereBivariateSpline.html, scipy.interpolate.RectSphereBivariateSpline.ev
">>> fig2 = plt.figure()
>>> s = [3e9, 2e9, 1e9, 1e8]
>>> for idx, sval in enumerate(s, 1):
...     lut = RectSphereBivariateSpline(lats, lons, data, s=sval)
...     data_interp = lut.ev(new_lats.ravel(),
...                          new_lons.ravel()).reshape((360, 180)).T
...     ax = fig2.add_subplot(2, 2, idx)
...     ax.imshow(data_interp, interpolation='nearest')
...     ax.set_title(f""s = {sval:g}"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectSphereBivariateSpline.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline.ev
">>> from scipy import integrate
>>> import numpy as np
>>> f = lambda x: x**8
>>> integrate.quadrature(f, 0.0, 1.0)
(0.11111111111111106, 4.163336342344337e-17)
>>> print(1/9.0)  # analytical result
0.1111111111111111
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quadrature.html, scipy.integrate.quadrature
">>> integrate.quadrature(np.cos, 0.0, np.pi/2)
(0.9999999999999536, 3.9611425250996035e-11)
>>> np.sin(np.pi/2)-np.sin(0)  # analytical result
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quadrature.html, scipy.integrate.quadrature
"dy / dt = f(t, y)
y(t0) = y0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.interpolate.interp1d
">>> import numpy as np
>>> from scipy.integrate import solve_ivp
>>> def exponential_decay(t, y): return -0.5 * y
>>> sol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8])
>>> print(sol.t)
[ 0.          0.11487653  1.26364188  3.06061781  4.81611105  6.57445806
  8.33328988 10.        ]
>>> print(sol.y)
[[2.         1.88836035 1.06327177 0.43319312 0.18017253 0.07483045
  0.03107158 0.01350781]
 [4.         3.7767207  2.12654355 0.86638624 0.36034507 0.14966091
  0.06214316 0.02701561]
 [8.         7.5534414  4.25308709 1.73277247 0.72069014 0.29932181
  0.12428631 0.05403123]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> sol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8],
...                 t_eval=[0, 1, 2, 4, 10])
>>> print(sol.t)
[ 0  1  2  4 10]
>>> print(sol.y)
[[2.         1.21305369 0.73534021 0.27066736 0.01350938]
 [4.         2.42610739 1.47068043 0.54133472 0.02701876]
 [8.         4.85221478 2.94136085 1.08266944 0.05403753]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> def upward_cannon(t, y): return [y[1], -0.5]
>>> def hit_ground(t, y): return y[0]
>>> hit_ground.terminal = True
>>> hit_ground.direction = -1
>>> sol = solve_ivp(upward_cannon, [0, 100], [0, 10], events=hit_ground)
>>> print(sol.t_events)
[array([40.])]
>>> print(sol.t)
[0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02
 1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> def apex(t, y): return y[1]
>>> sol = solve_ivp(upward_cannon, [0, 100], [0, 10],
...                 events=(hit_ground, apex), dense_output=True)
>>> print(sol.t_events)
[array([40.]), array([20.])]
>>> print(sol.t)
[0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02
 1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]
>>> print(sol.sol(sol.t_events[1][0]))
[100.   0.]
>>> print(sol.y_events)
[array([[-5.68434189e-14, -1.00000000e+01]]),
 array([[1.00000000e+02, 1.77635684e-15]])]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> sol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1),
...                 dense_output=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> def deriv_vec(t, y):
...     return A @ y
>>> result = solve_ivp(deriv_vec, [0, 25],
...                    np.array([10 + 0j, 20 + 0j, 30 + 0j]),
...                    t_eval=np.linspace(0, 25, 101))
>>> print(result.y[:, 0])
[10.+0.j 20.+0.j 30.+0.j]
>>> print(result.y[:, -1])
[18.46291039+45.25653651j 10.01569306+36.23293216j
 -4.98662741+80.07360388j]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> result = solve_ivp(deriv_mat, [0, 25], y0.flatten(),
...                    t_eval=np.linspace(0, 25, 101))
>>> print(result.y[:, 0].reshape(3, 3))
[[ 2.+0.j  3.+0.j  4.+0.j]
 [ 5.+0.j  6.+0.j  7.+0.j]
 [ 9.+0.j 34.+0.j 78.+0.j]]
>>> print(result.y[:, -1].reshape(3, 3))
[[  5.67451179 +12.07938445j  17.2888073  +31.03278837j
    37.83405768 +63.25138759j]
 [  3.39949503 +11.82123994j  21.32530996 +44.88668871j
    53.17531184+103.80400411j]
 [ -2.26105874 +22.19277664j -15.1255713  +70.19616341j
   -38.34616845+153.29039931j]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html, scipy.integrate.solve_ivp
">>> integrate.romb(y)
56.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.romb.html, scipy.integrate.romb
">>> y = np.sin(np.power(x, 2.5))
>>> integrate.romb(y)
-0.742561336672229
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.romb.html, scipy.integrate.romb
">>> integrate.romb(y, show=True)
Richardson Extrapolation Table for Romberg Integration
======================================================
-0.81576
 4.63862  6.45674
-1.10581 -3.02062 -3.65245
-2.57379 -3.06311 -3.06595 -3.05664
-1.34093 -0.92997 -0.78776 -0.75160 -0.74256
======================================================
-0.742561336672229  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.romb.html, scipy.integrate.romb
">>> from scipy.interpolate import KroghInterpolator
>>> KroghInterpolator([0,0,1],[0,2,0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html, scipy.interpolate.KroghInterpolator
">>> import numpy as np
>>> rng = np.random.default_rng()
>>> xi = np.linspace(0, 1, 5)
>>> yi, ypi = rng.random((2, 5))
>>> xi_k, yi_k = np.repeat(xi, 2), np.ravel(np.dstack((yi,ypi)))
>>> KroghInterpolator(xi_k, yi_k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html, scipy.interpolate.KroghInterpolator
">>> KroghInterpolator([0,1],[[2,3],[4,5]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html, scipy.interpolate.KroghInterpolator
">>> y = np.power(x, 3)
>>> integrate.simpson(y, x=x)
1640.5
>>> integrate.quad(lambda x: x**3, 0, 9)[0]
1640.25
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.simpson.html, scipy.integrate.quad
"double func(double x)
double func(double x, void *user_data)
double func(int n, double *xx)
double func(int n, double *xx, void *user_data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.interpolate.RectBivariateSpline
">>> from scipy import integrate
>>> import numpy as np
>>> x2 = lambda x: x**2
>>> integrate.quad(x2, 0, 4)
(21.333333333333332, 2.3684757858670003e-13)
>>> print(4**3 / 3.)  # analytical result
21.3333333333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.integrate.quad
">>> invexp = lambda x: np.exp(-x)
>>> integrate.quad(invexp, 0, np.inf)
(1.0, 5.842605999138044e-11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.integrate.quad
">>> f = lambda x, a: a*x
>>> y, err = integrate.quad(f, 0, 1, args=(1,))
>>> y
0.5
>>> y, err = integrate.quad(f, 0, 1, args=(3,))
>>> y
1.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.integrate.quad
"testlib.c =>
    double func(int n, double args[n]){
        return args[0]*args[0] + args[1]*args[1];}
compile to library testlib.*
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.interpolate.RectBivariateSpline
"from scipy import integrate
import ctypes
lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path
lib.func.restype = ctypes.c_double
lib.func.argtypes = (ctypes.c_int,ctypes.c_double)
integrate.quad(lib.func,0,1,(1))
#(1.3333333333333333, 1.4802973661668752e-14)
print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result
# 1.3333333333333333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.integrate.quad
">>> y = lambda x: 1 if x<=0 else 0
>>> integrate.quad(y, -1, 1)
(1.0, 1.1102230246251565e-14)
>>> integrate.quad(y, -1, 100)
(1.0000000002199108, 1.0189464580163188e-08)
>>> integrate.quad(y, -1, 10000)
(0.0, 0.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html, scipy.integrate.quad
">>> from scipy import integrate
>>> import numpy as np
>>> f = lambda x: x**8
>>> integrate.fixed_quad(f, 0.0, 1.0, n=4)
(0.1110884353741496, None)
>>> integrate.fixed_quad(f, 0.0, 1.0, n=5)
(0.11111111111111102, None)
>>> print(1/9.0)  # analytical result
0.1111111111111111
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.fixed_quad.html, scipy.integrate.fixed_quad
">>> integrate.fixed_quad(np.cos, 0.0, np.pi/2, n=4)
(0.9999999771971152, None)
>>> integrate.fixed_quad(np.cos, 0.0, np.pi/2, n=5)
(1.000000000039565, None)
>>> np.sin(np.pi/2)-np.sin(0)  # analytical result
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.fixed_quad.html, scipy.integrate.fixed_quad
">>> from scipy.interpolate import NearestNDInterpolator
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> x = rng.random(10) - 0.5
>>> y = rng.random(10) - 0.5
>>> z = np.hypot(x, y)
>>> X = np.linspace(min(x), max(x))
>>> Y = np.linspace(min(y), max(y))
>>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation
>>> interp = NearestNDInterpolator(list(zip(x, y)), z)
>>> Z = interp(X, Y)
>>> plt.pcolormesh(X, Y, Z, shading='auto')
>>> plt.plot(x, y, ""ok"", label=""input point"")
>>> plt.legend()
>>> plt.colorbar()
>>> plt.axis(""equal"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.NearestNDInterpolator.html, scipy.interpolate.NearestNDInterpolator scipy.interpolate.NearestNDInterpolator
">>> from scipy.interpolate import RegularGridInterpolator
>>> import numpy as np
>>> def f(x, y, z):
...     return 2 * x**3 + 3 * y**2 - z
>>> x = np.linspace(1, 4, 11)
>>> y = np.linspace(4, 7, 22)
>>> z = np.linspace(7, 9, 33)
>>> xg, yg ,zg = np.meshgrid(x, y, z, indexing='ij', sparse=True)
>>> data = f(xg, yg, zg)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.interp1d
">>> interp = RegularGridInterpolator((x, y, z), data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.RegularGridInterpolator
">>> pts = np.array([[2.1, 6.2, 8.3],
...                 [3.3, 5.2, 7.1]])
>>> interp(pts)
array([ 125.80469388,  146.30069388])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.RegularGridInterpolator
">>> f(2.1, 6.2, 8.3), f(3.3, 5.2, 7.1)
(125.54200000000002, 145.894)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.interp1d
">>> xg, yg = np.meshgrid(x, y, indexing='ij')
>>> data = ff(xg, yg)
>>> interp = RegularGridInterpolator((x, y), data,
...                                  bounds_error=False, fill_value=None)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.RegularGridInterpolator
">>> # interpolator
>>> ax.plot_wireframe(X, Y, interp((X, Y)), rstride=3, cstride=3,
...                   alpha=0.4, color='m', label='linear interp')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html, scipy.interpolate.RegularGridInterpolator
">>> from scipy.integrate import ode
>>>
>>> y0, t0 = [1.0j, 2.0], 0
>>>
>>> def f(t, y, arg1):
...     return [1j*arg1*y[0] + y[1], -arg1*y[1]**2]
>>> def jac(t, y, arg1):
...     return [[1j*arg1, 1], [0, -arg1*2*y[1]]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html, scipy.interpolate.interp1d
">>> r = ode(f, jac).set_integrator('zvode', method='bdf')
>>> r.set_initial_value(y0, t0).set_f_params(2.0).set_jac_params(2.0)
>>> t1 = 10
>>> dt = 1
>>> while r.successful() and r.t < t1:
...     print(r.t+dt, r.integrate(r.t+dt))
1 [-0.71038232+0.23749653j  0.40000271+0.j        ]
2.0 [0.19098503-0.52359246j 0.22222356+0.j        ]
3.0 [0.47153208+0.52701229j 0.15384681+0.j        ]
4.0 [-0.61905937+0.30726255j  0.11764744+0.j        ]
5.0 [0.02340997-0.61418799j 0.09523835+0.j        ]
6.0 [0.58643071+0.339819j 0.08000018+0.j      ]
7.0 [-0.52070105+0.44525141j  0.06896565+0.j        ]
8.0 [-0.15986733-0.61234476j  0.06060616+0.j        ]
9.0 [0.64850462+0.15048982j 0.05405414+0.j        ]
10.0 [-0.38404699+0.56382299j  0.04878055+0.j        ]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html, scipy.integrate.ode scipy.integrate.ode.set_initial_value scipy.integrate.ode.successful scipy.integrate.ode.integrate
">>> from scipy.interpolate import CloughTocher2DInterpolator
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> x = rng.random(10) - 0.5
>>> y = rng.random(10) - 0.5
>>> z = np.hypot(x, y)
>>> X = np.linspace(min(x), max(x))
>>> Y = np.linspace(min(y), max(y))
>>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation
>>> interp = CloughTocher2DInterpolator(list(zip(x, y)), z)
>>> Z = interp(X, Y)
>>> plt.pcolormesh(X, Y, Z, shading='auto')
>>> plt.plot(x, y, ""ok"", label=""input point"")
>>> plt.legend()
>>> plt.colorbar()
>>> plt.axis(""equal"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CloughTocher2DInterpolator.html, scipy.interpolate.CloughTocher2DInterpolator scipy.interpolate.CloughTocher2DInterpolator
">>> t = np.linspace(0, 10, 1500)
>>> w = chirp(t, f0=6, f1=1, t1=10, method='linear')
>>> plt.plot(t, w)
>>> plt.title(""Linear Chirp, f(0)=6, f(10)=1"")
>>> plt.xlabel('t (sec)')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.chirp scipy.interpolate.interp1d
">>> def plot_spectrogram(title, w, fs):
...     ff, tt, Sxx = spectrogram(w, fs=fs, nperseg=256, nfft=576)
...     fig, ax = plt.subplots()
...     ax.pcolormesh(tt, ff[:145], Sxx[:145], cmap='gray_r',
...                   shading='gouraud')
...     ax.set_title(title)
...     ax.set_xlabel('t (sec)')
...     ax.set_ylabel('Frequency (Hz)')
...     ax.grid(True)
...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.spectrogram
">>> w = chirp(t, f0=1500, f1=250, t1=T, method='quadratic')
>>> plot_spectrogram(f'Quadratic Chirp, f(0)=1500, f({T})=250', w, fs)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.chirp scipy.interpolate.interp1d
">>> w = chirp(t, f0=1500, f1=250, t1=T, method='quadratic',
...           vertex_zero=False)
>>> plot_spectrogram(f'Quadratic Chirp, f(0)=1500, f({T})=250\n' +
...                  '(vertex_zero=False)', w, fs)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.chirp scipy.interpolate.interp1d
">>> w = chirp(t, f0=1500, f1=250, t1=T, method='logarithmic')
>>> plot_spectrogram(f'Logarithmic Chirp, f(0)=1500, f({T})=250', w, fs)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.chirp scipy.interpolate.interp1d
">>> w = chirp(t, f0=1500, f1=250, t1=T, method='hyperbolic')
>>> plot_spectrogram(f'Hyperbolic Chirp, f(0)=1500, f({T})=250', w, fs)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.chirp.html, scipy.signal.chirp scipy.interpolate.interp1d
">>> from scipy.integrate import newton_cotes
>>> import numpy as np
>>> def f(x):
...     return np.sin(x)
>>> a = 0
>>> b = np.pi
>>> exact = 2
>>> for N in [2, 4, 6, 8, 10]:
...     x = np.linspace(a, b, N + 1)
...     an, B = newton_cotes(N, 1)
...     dx = (b - a) / N
...     quad = dx * np.sum(an * f(x))
...     error = abs(quad - exact)
...     print('{:2d}  {:10.9f}  {:.5e}'.format(N, quad, error))
...
 2   2.094395102   9.43951e-02
 4   1.998570732   1.42927e-03
 6   2.000017814   1.78136e-05
 8   1.999999835   1.64725e-07
10   2.000000001   1.14677e-09
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.newton_cotes.html, scipy.interpolate.interp1d scipy.integrate.newton_cotes
">>> import numpy as np
>>> from scipy.signal import argrelmax
>>> x = np.array([2, 1, 2, 3, 2, 0, 1, 0])
>>> argrelmax(x)
(array([3, 6]),)
>>> y = np.array([[1, 2, 1, 2],
...               [2, 2, 0, 0],
...               [5, 3, 4, 4]])
...
>>> argrelmax(y, axis=1)
(array([0]), array([1]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.argrelmax.html, scipy.signal.argrelmax
">>> def f(x):
...     return (x**2 - 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brenth.html, scipy.interpolate.interp1d
">>> root = optimize.brenth(f, -2, 0)
>>> root
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brenth.html, scipy.optimize.brenth
">>> root = optimize.brenth(f, 0, 2)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brenth.html, scipy.optimize.brenth
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.datasets import electrocardiogram
>>> from scipy.signal import find_peaks
>>> x = electrocardiogram()[2000:4000]
>>> peaks, _ = find_peaks(x, height=0)
>>> plt.plot(x)
>>> plt.plot(peaks, x[peaks], ""x"")
>>> plt.plot(np.zeros_like(x), ""--"", color=""gray"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html, scipy.datasets.electrocardiogram scipy.signal.find_peaks
">>> border = np.sin(np.linspace(0, 3 * np.pi, x.size))
>>> peaks, _ = find_peaks(x, height=(-border, border))
>>> plt.plot(x)
>>> plt.plot(-border, ""--"", color=""gray"")
>>> plt.plot(border, "":"", color=""gray"")
>>> plt.plot(peaks, x[peaks], ""x"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html, scipy.signal.find_peaks
">>> peaks, _ = find_peaks(x, distance=150)
>>> np.diff(peaks)
array([186, 180, 177, 171, 177, 169, 167, 164, 158, 162, 172])
>>> plt.plot(x)
>>> plt.plot(peaks, x[peaks], ""x"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html, scipy.signal.find_peaks
">>> peaks, properties = find_peaks(x, prominence=(None, 0.6))
>>> properties[""prominences""].max()
0.5049999999999999
>>> plt.plot(x)
>>> plt.plot(peaks, x[peaks], ""x"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html, scipy.signal.find_peaks
">>> x = electrocardiogram()[17000:18000]
>>> peaks, properties = find_peaks(x, prominence=1, width=20)
>>> properties[""prominences""], properties[""widths""]
(array([1.495, 2.3  ]), array([36.93773946, 39.32723577]))
>>> plt.plot(x)
>>> plt.plot(peaks, x[peaks], ""x"")
>>> plt.vlines(x=peaks, ymin=x[peaks] - properties[""prominences""],
...            ymax = x[peaks], color = ""C1"")
>>> plt.hlines(y=properties[""width_heights""], xmin=properties[""left_ips""],
...            xmax=properties[""right_ips""], color = ""C1"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html, scipy.datasets.electrocardiogram scipy.signal.find_peaks
">>> import numpy as np
>>> from scipy.interpolate import CubicSpline
>>> import matplotlib.pyplot as plt
>>> x = np.arange(10)
>>> y = np.sin(x)
>>> cs = CubicSpline(x, y)
>>> xs = np.arange(-0.5, 9.6, 0.1)
>>> fig, ax = plt.subplots(figsize=(6.5, 4))
>>> ax.plot(x, y, 'o', label='data')
>>> ax.plot(xs, np.sin(xs), label='true')
>>> ax.plot(xs, cs(xs), label=""S"")
>>> ax.plot(xs, cs(xs, 1), label=""S'"")
>>> ax.plot(xs, cs(xs, 2), label=""S''"")
>>> ax.plot(xs, cs(xs, 3), label=""S'''"")
>>> ax.set_xlim(-0.5, 9.5)
>>> ax.legend(loc='lower left', ncol=2)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html, scipy.interpolate.CubicSpline scipy.interpolate.CubicSpline
">>> theta = 2 * np.pi * np.linspace(0, 1, 5)
>>> y = np.c_[np.cos(theta), np.sin(theta)]
>>> cs = CubicSpline(theta, y, bc_type='periodic')
>>> print(""ds/dx={:.1f} ds/dy={:.1f}"".format(cs(0, 1)[0], cs(0, 1)[1]))
ds/dx=0.0 ds/dy=1.0
>>> xs = 2 * np.pi * np.linspace(0, 1, 100)
>>> fig, ax = plt.subplots(figsize=(6.5, 4))
>>> ax.plot(y[:, 0], y[:, 1], 'o', label='data')
>>> ax.plot(np.cos(xs), np.sin(xs), label='true')
>>> ax.plot(cs(xs)[:, 0], cs(xs)[:, 1], label='spline')
>>> ax.axes.set_aspect('equal')
>>> ax.legend(loc='center')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html, scipy.interpolate.CubicSpline scipy.interpolate.CubicSpline
">>> cs = CubicSpline([0, 1], [0, 1], bc_type=((1, 0), (1, 3)))
>>> x = np.linspace(0, 1)
>>> np.allclose(x**3, cs(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.CubicSpline.html, scipy.interpolate.CubicSpline scipy.interpolate.CubicSpline
">>> from scipy.ndimage import spline_filter
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> orig_img = np.eye(20)  # create an image
>>> orig_img[10, :] = 1.0
>>> sp_filter = spline_filter(orig_img, order=3)
>>> f, ax = plt.subplots(1, 2, sharex=True)
>>> for ind, data in enumerate([[orig_img, ""original image""],
...                             [sp_filter, ""spline filter""]]):
...     ax[ind].imshow(data[0], cmap='gray_r')
...     ax[ind].set_title(data[1])
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.spline_filter.html, scipy.signal.spline_filter
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import cspline1d, cspline1d_eval
>>> rng = np.random.default_rng()
>>> sig = np.repeat([0., 1., 0.], 100)
>>> sig += rng.standard_normal(len(sig))*0.05  # add noise
>>> time = np.linspace(0, len(sig))
>>> filtered = cspline1d_eval(cspline1d(sig), time)
>>> plt.plot(sig, label=""signal"")
>>> plt.plot(time, filtered, label=""filtered"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cspline1d.html, scipy.signal.cspline1d_eval scipy.signal.cspline1d
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.arange(12.).reshape((4, 3))
>>> a
array([[  0.,   1.,   2.],
       [  3.,   4.,   5.],
       [  6.,   7.,   8.],
       [  9.,  10.,  11.]])
>>> ndimage.map_coordinates(a, [[0.5, 2], [0.5, 1]], order=1)
array([ 2.,  7.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.map_coordinates.html, scipy.ndimage.map_coordinates
">>> inds = np.array([[0.5, 2], [0.5, 4]])
>>> ndimage.map_coordinates(a, inds, order=1, cval=-33.3)
array([  2. , -33.3])
>>> ndimage.map_coordinates(a, inds, order=1, mode='nearest')
array([ 2.,  8.])
>>> ndimage.map_coordinates(a, inds, order=1, cval=0, output=bool)
array([ True, False], dtype=bool)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.map_coordinates.html, scipy.ndimage.map_coordinates
">>> def f(x):
...     return (x**2 - 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.bisect.html, scipy.interpolate.interp1d
">>> root = optimize.bisect(f, 0, 2)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.bisect.html, scipy.optimize.bisect
">>> root = optimize.bisect(f, -2, 0)
>>> root
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.bisect.html, scipy.optimize.bisect
"double func(int n, double *xx)
double func(int n, double *xx, void *user_data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.nquad.html, scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy import integrate
>>> func = lambda x0,x1,x2,x3 : x0**2 + x1*x2 - x3**3 + np.sin(x0) + (
...                                 1 if (x0-.2*x3-.5-.25*x1>0) else 0)
>>> def opts0(*args, **kwargs):
...     return {'points':[0.2*args[2] + 0.5 + 0.25*args[0]]}
>>> integrate.nquad(func, [[0,1], [-1,1], [.13,.8], [-.15,1]],
...                 opts=[opts0,{},{},{}], full_output=True)
(1.5267454070738633, 2.9437360001402324e-14, {'neval': 388962})
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.nquad.html, scipy.integrate.nquad
">>> def func2(x0, x1, x2, t0, t1):
...     return x0*x2**2 + np.sin(x1) + 1 + (1 if x0+t1*x1-t0>0 else 0)
>>> def lim0(x1, x2, t0, t1):
...     return [t0*x1 + t1*x2 - 1, t0*x1 + t1*x2 + 1]
>>> def lim1(x2, t0, t1):
...     return [x2 + t0**2*t1**3 - 1, x2 + t0**2*t1**3 + 1]
>>> def lim2(t0, t1):
...     return [t0 + t1 - 1, t0 + t1 + 1]
>>> def opts0(x1, x2, t0, t1):
...     return {'points' : [t0 - t1*x1]}
>>> def opts1(x2, t0, t1):
...     return {}
>>> def opts2(t0, t1):
...     return {}
>>> integrate.nquad(func2, [lim0, lim1, lim2], args=(0,1),
...                 opts=[opts0, opts1, opts2])
(36.099919226771625, 1.8546948553373528e-07)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.nquad.html, scipy.integrate.nquad
"dy/dt = func(y, t, ...)  [or func(t, y, ...)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html, scipy.interpolate.RectBivariateSpline
">>> from scipy.integrate import odeint
>>> sol = odeint(pend, y0, t, args=(b, c))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html, scipy.integrate.odeint
">>> cutoff = 8000.0    # Desired cutoff frequency, Hz
>>> trans_width = 100  # Width of transition from pass to stop, Hz
>>> numtaps = 325      # Size of the FIR filter.
>>> taps = signal.remez(numtaps, [0, cutoff, cutoff + trans_width, 0.5*fs],
...                     [1, 0], fs=fs)
>>> w, h = signal.freqz(taps, [1], worN=2000, fs=fs)
>>> plot_response(w, h, ""Low-pass Filter"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.remez.html, scipy.signal.freqz
">>> cutoff = 2000.0    # Desired cutoff frequency, Hz
>>> trans_width = 250  # Width of transition from pass to stop, Hz
>>> numtaps = 125      # Size of the FIR filter.
>>> taps = signal.remez(numtaps, [0, cutoff - trans_width, cutoff, 0.5*fs],
...                     [0, 1], fs=fs)
>>> w, h = signal.freqz(taps, [1], worN=2000, fs=fs)
>>> plot_response(w, h, ""High-pass Filter"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.remez.html, scipy.signal.freqz
">>> band = [2000, 5000]  # Desired pass band, Hz
>>> trans_width = 260    # Width of transition from pass to stop, Hz
>>> numtaps = 63         # Size of the FIR filter.
>>> edges = [0, band[0] - trans_width, band[0], band[1],
...          band[1] + trans_width, 0.5*fs]
>>> taps = signal.remez(numtaps, edges, [0, 1, 0], fs=fs)
>>> w, h = signal.freqz(taps, [1], worN=2000, fs=fs)
>>> plot_response(w, h, ""Band-pass Filter"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.remez.html, scipy.signal.freqz
">>> band = [6000, 8000]  # Desired stop band, Hz
>>> trans_width = 200    # Width of transition from pass to stop, Hz
>>> numtaps = 175        # Size of the FIR filter.
>>> edges = [0, band[0] - trans_width, band[0], band[1],
...          band[1] + trans_width, 0.5*fs]
>>> taps = signal.remez(numtaps, edges, [1, 0, 1], fs=fs)
>>> w, h = signal.freqz(taps, [1], worN=2000, fs=fs)
>>> plot_response(w, h, ""Band-stop Filter"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.remez.html, scipy.signal.freqz
">>> import numpy as np
>>> from scipy import integrate
>>> integrate.trapezoid([1, 2, 3])
4.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> integrate.trapezoid([1, 2, 3], x=[4, 6, 8])
8.0
>>> integrate.trapezoid([1, 2, 3], dx=2)
8.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> integrate.trapezoid([1, 2, 3], x=[8, 6, 4])
-8.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> x = np.linspace(0, 1, num=50)
>>> y = x**2
>>> integrate.trapezoid(y, x)
0.33340274885464394
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> theta = np.linspace(0, 2 * np.pi, num=1000, endpoint=True)
>>> integrate.trapezoid(np.cos(theta), x=np.sin(theta))
3.141571941375841
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> a = np.arange(6).reshape(2, 3)
>>> a
array([[0, 1, 2],
       [3, 4, 5]])
>>> integrate.trapezoid(a, axis=0)
array([1.5, 2.5, 3.5])
>>> integrate.trapezoid(a, axis=1)
array([2.,  8.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.trapezoid.html, scipy.integrate.trapezoid
">>> import numpy as np
>>> np.random.seed(1234)
>>> n = 200
>>> def func(x):
...    return x**3 + x**2 * np.sin(4 * x)
>>> x = np.sort(np.random.random_sample(n) * 4 - 2)
>>> y = func(x) + np.random.normal(scale=1.5, size=n)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_smoothing_spline.html, scipy.interpolate.RectBivariateSpline
">>> from scipy.interpolate import make_smoothing_spline
>>> spl = make_smoothing_spline(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_smoothing_spline.html, scipy.interpolate.make_smoothing_spline
">>> import matplotlib.pyplot as plt
>>> grid = np.linspace(x[0], x[-1], 400)
>>> plt.plot(grid, spl(grid), label='Spline')
>>> plt.plot(grid, func(grid), label='Original function')
>>> plt.scatter(x, y, marker='.')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.make_smoothing_spline.html, scipy.interpolate.BSpline scipy.interpolate.RectBivariateSpline
">>> from scipy.signal import kaiser_beta
>>> kaiser_beta(65)
6.20426
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.kaiser_beta.html, scipy.signal.kaiser_beta
">>> lp = signal.lti([1.0], [1.0, 1.0])
>>> hp = signal.lti(*signal.lp2hp(lp.num, lp.den))
>>> w, mag_lp, p_lp = lp.bode()
>>> w, mag_hp, p_hp = hp.bode(w)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2hp.html, scipy.signal.lti scipy.signal.lp2hp
">>> import numpy as np
>>> from scipy.interpolate import Akima1DInterpolator
>>> import matplotlib.pyplot as plt
>>> x = np.linspace(1, 7, 7)
>>> y = np.array([-1, -1, -1, 0, 1, 1, 1])
>>> xs = np.linspace(min(x), max(x), num=100)
>>> y_akima = Akima1DInterpolator(x, y, method=""akima"")(xs)
>>> y_makima = Akima1DInterpolator(x, y, method=""makima"")(xs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.Akima1DInterpolator.html, scipy.interpolate.Akima1DInterpolator
">>> from scipy.integrate import quad_vec
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> alpha = np.linspace(0.0, 2.0, num=30)
>>> f = lambda x: x**alpha
>>> x0, x1 = 0, 2
>>> y, err = quad_vec(f, x0, x1)
>>> plt.plot(alpha, y)
>>> plt.xlabel(r""$\alpha$"")
>>> plt.ylabel(r""$\int_{0}^{2} x^\alpha dx$"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad_vec.html, scipy.integrate.quad_vec
">>> from scipy import integrate
>>> from scipy.special import erf
>>> import numpy as np
>>> gaussian = lambda x: 1/np.sqrt(np.pi) * np.exp(-x**2)
>>> result = integrate.romberg(gaussian, 0, 1, show=True)
Romberg integration of  from [0, 1]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.romberg.html, scipy.integrate.romberg
">>> import numpy as np
>>> from scipy import integrate
>>> f = lambda z, y, x: x*y*z
>>> integrate.tplquad(f, 1, 2, 2, 3, 0, 1)
(1.8749999999999998, 3.3246447942574074e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.tplquad.html, scipy.integrate.tplquad
">>> f = lambda z, y, x: x*y*z
>>> integrate.tplquad(f, 0, 1, 0, lambda x: 1-2*x, 0, lambda x, y: 1-x-2*y)
(0.05416666666666668, 2.1774196738157757e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.tplquad.html, scipy.integrate.tplquad
">>> f = lambda z, y, x, a: a*x*y*z
>>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(1,))
    (0.125, 5.527033708952211e-15)
>>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(3,))
    (0.375, 1.6581101126856635e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.tplquad.html, scipy.integrate.tplquad
">>> f = lambda x, y, z: np.exp(-(x ** 2 + y ** 2 + z ** 2))
>>> integrate.tplquad(f, -np.inf, np.inf, -np.inf, np.inf, -np.inf, np.inf)
    (5.568327996830833, 4.4619078828029765e-08)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.tplquad.html, scipy.integrate.tplquad
">>> import numpy as np
>>> from scipy import stats
>>> dim = 8
>>> mean = np.zeros(dim)
>>> cov = np.eye(dim)
>>> def func(x):
...     # `multivariate_normal` expects the _last_ axis to correspond with
...     # the dimensionality of the space, so `x` must be transposed
...     return stats.multivariate_normal.pdf(x.T, mean, cov)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.qmc_quad.html, scipy.interpolate.RectBivariateSpline
">>> from scipy.integrate import qmc_quad
>>> a = np.zeros(dim)
>>> b = np.ones(dim)
>>> rng = np.random.default_rng()
>>> qrng = stats.qmc.Halton(d=dim, seed=rng)
>>> n_estimates = 8
>>> res = qmc_quad(func, a, b, n_estimates=n_estimates, qrng=qrng)
>>> res.integral, res.standard_error
(0.00018429555666024108, 1.0389431116001344e-07)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.qmc_quad.html, scipy.stats.qmc.Halton scipy.integrate.qmc_quad
">>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> lti = signal.lti([1.0], [1.0, 1.0])
>>> t, y = signal.step(lti)
>>> plt.plot(t, y)
>>> plt.xlabel('Time [s]')
>>> plt.ylabel('Amplitude')
>>> plt.title('Step response for 1. Order Lowpass')
>>> plt.grid()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.step.html, scipy.signal.lti scipy.signal.step
">>> from scipy.signal import tf2zpk
>>> tf2zpk([3, 0, 0], [1, 5, 13])
(   array([ 0.               ,  0.              ]), 
    array([ -2.5+2.59807621j ,  -2.5-2.59807621j]), 
    3.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.tf2zpk.html, scipy.signal.tf2zpk
">>> signal.check_NOLA(signal.windows.boxcar(100), 100, 75)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_NOLA.html, scipy.signal.check_NOLA scipy.signal.windows.boxcar
">>> signal.check_NOLA(signal.windows.boxcar(100), 100, 25)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_NOLA.html, scipy.signal.check_NOLA scipy.signal.windows.boxcar
">>> signal.check_NOLA(signal.windows.hann(120, sym=True), 120, 60)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_NOLA.html, scipy.signal.check_NOLA scipy.signal.windows.hann
">>> w = np.ones(64, dtype=""float"")
>>> w[::2] = 0
>>> signal.check_NOLA(w, 64, 32)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_NOLA.html, scipy.signal.check_NOLA
">>> signal.check_NOLA(signal.windows.hann(64), 64, 0)
False
>>> signal.check_NOLA(signal.windows.hann(64), 64, 1)
False
>>> signal.check_NOLA(signal.windows.hann(64), 64, 2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_NOLA.html, scipy.signal.check_NOLA scipy.signal.windows.hann
">>> from scipy import signal
>>> signal.get_window('triang', 7)
array([ 0.125,  0.375,  0.625,  0.875,  0.875,  0.625,  0.375])
>>> signal.get_window(('kaiser', 4.0), 9)
array([ 0.08848053,  0.29425961,  0.56437221,  0.82160913,  0.97885093,
        0.97885093,  0.82160913,  0.56437221,  0.29425961])
>>> signal.get_window(('exponential', None, 1.), 9)
array([ 0.011109  ,  0.03019738,  0.082085  ,  0.22313016,  0.60653066,
        0.60653066,  0.22313016,  0.082085  ,  0.03019738])
>>> signal.get_window(4.0, 9)
array([ 0.08848053,  0.29425961,  0.56437221,  0.82160913,  0.97885093,
        0.97885093,  0.82160913,  0.56437221,  0.29425961])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.get_window.html, scipy.signal.get_window
">>> import numpy as np
>>> from scipy.signal import spline_filter
>>> import matplotlib.pyplot as plt
>>> orig_img = np.eye(20)  # create an image
>>> orig_img[10, :] = 1.0
>>> sp_filter = spline_filter(orig_img, lmbda=0.1)
>>> f, ax = plt.subplots(1, 2, sharex=True)
>>> for ind, data in enumerate([[orig_img, ""original image""],
...                             [sp_filter, ""spline filter""]]):
...     ax[ind].imshow(data[0], cmap='gray_r')
...     ax[ind].set_title(data[1])
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spline_filter.html, scipy.signal.spline_filter
">>> fs = 200.0  # Sample frequency (Hz)
>>> f0 = 20.0  # Frequency to be removed from signal (Hz)
>>> Q = 30.0  # Quality factor
>>> # Design notching comb filter
>>> b, a = signal.iircomb(f0, Q, ftype='notch', fs=fs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iircomb.html, scipy.signal.iircomb
">>> # Frequency response
>>> freq, h = signal.freqz(b, a, fs=fs)
>>> response = abs(h)
>>> # To avoid divide by zero when graphing
>>> response[response == 0] = 1e-20
>>> # Plot
>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=True)
>>> ax[0].plot(freq, 20*np.log10(abs(response)), color='blue')
>>> ax[0].set_title(""Frequency Response"")
>>> ax[0].set_ylabel(""Amplitude (dB)"", color='blue')
>>> ax[0].set_xlim([0, 100])
>>> ax[0].set_ylim([-30, 10])
>>> ax[0].grid(True)
>>> ax[1].plot(freq, (np.angle(h)*180/np.pi+180)%360 - 180, color='green')
>>> ax[1].set_ylabel(""Angle (degrees)"", color='green')
>>> ax[1].set_xlabel(""Frequency (Hz)"")
>>> ax[1].set_xlim([0, 100])
>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
>>> ax[1].set_ylim([-90, 90])
>>> ax[1].grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iircomb.html, scipy.signal.freqz
">>> fs = 1000.0  # Sample frequency (Hz)
>>> f0 = 250.0  # Frequency to be retained (Hz)
>>> Q = 30.0  # Quality factor
>>> # Design peaking filter
>>> b, a = signal.iircomb(f0, Q, ftype='peak', fs=fs, pass_zero=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iircomb.html, scipy.signal.iircomb
">>> # Frequency response
>>> freq, h = signal.freqz(b, a, fs=fs)
>>> response = abs(h)
>>> # To avoid divide by zero when graphing
>>> response[response == 0] = 1e-20
>>> # Plot
>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=True)
>>> ax[0].plot(freq, 20*np.log10(np.maximum(abs(h), 1e-5)), color='blue')
>>> ax[0].set_title(""Frequency Response"")
>>> ax[0].set_ylabel(""Amplitude (dB)"", color='blue')
>>> ax[0].set_xlim([0, 500])
>>> ax[0].set_ylim([-80, 10])
>>> ax[0].grid(True)
>>> ax[1].plot(freq, (np.angle(h)*180/np.pi+180)%360 - 180, color='green')
>>> ax[1].set_ylabel(""Angle (degrees)"", color='green')
>>> ax[1].set_xlabel(""Frequency (Hz)"")
>>> ax[1].set_xlim([0, 500])
>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
>>> ax[1].set_ylim([-90, 90])
>>> ax[1].grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iircomb.html, scipy.signal.freqz
">>> f, Pxx_den = signal.periodogram(x, fs)
>>> plt.semilogy(f, Pxx_den)
>>> plt.ylim([1e-7, 1e2])
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('PSD [V**2/Hz]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.periodogram.html, scipy.signal.periodogram
">>> f, Pxx_spec = signal.periodogram(x, fs, 'flattop', scaling='spectrum')
>>> plt.figure()
>>> plt.semilogy(f, np.sqrt(Pxx_spec))
>>> plt.ylim([1e-4, 1e1])
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('Linear spectrum [V RMS]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.periodogram.html, scipy.signal.periodogram
">>> sos = butter(4, 0.125, output='sos')
>>> y = sosfiltfilt(sos, x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfiltfilt.html, scipy.signal.butter scipy.signal.sosfiltfilt
">>> from scipy.signal import sosfilt, sosfilt_zi
>>> sos8 = butter(8, 0.125, output='sos')
>>> zi = x[:4].mean() * sosfilt_zi(sos8)
>>> y2, zo = sosfilt(sos8, x, zi=zi)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfiltfilt.html, scipy.signal.butter scipy.signal.sosfilt_zi scipy.signal.sosfilt
">>> peaks, _ = find_peaks(x)
>>> results_half = peak_widths(x, peaks, rel_height=0.5)
>>> results_half[0]  # widths
array([ 64.25172825,  41.29465463,  35.46943289, 104.71586081,
        35.46729324,  41.30429622, 181.93835853,  45.37078546])
>>> results_full = peak_widths(x, peaks, rel_height=1)
>>> results_full[0]  # widths
array([181.9396084 ,  72.99284945,  61.28657872, 373.84622694,
    61.78404617,  72.48822812, 253.09161876,  79.36860878])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_widths.html, scipy.signal.find_peaks scipy.signal.peak_widths
">>> import numpy as np
>>> from scipy import signal
>>> tf = ([1.0,], [1.0, -1.0], 1.0)
>>> t_in = [0.0, 1.0, 2.0, 3.0]
>>> u = np.asarray([0.0, 0.0, 1.0, 1.0])
>>> t_out, y = signal.dlsim(tf, u, t=t_in)
>>> y.T
array([[ 0.,  0.,  0.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlsim.html, scipy.signal.dlsim
"        b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]
H(s) = ------ = ------------------------------------------
        a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.residue.html, scipy.interpolate.BSpline
">>> signal.TransferFunction(num, den)
TransferFunctionContinuous(
array([1., 3., 3.]),
array([1., 2., 1.]),
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.TransferFunction.html, scipy.signal.TransferFunction
">>> signal.TransferFunction(num, den, dt=0.1)
TransferFunctionDiscrete(
array([1., 3., 3.]),
array([1., 2., 1.]),
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.TransferFunction.html, scipy.signal.TransferFunction
">>> fs = 10e3
>>> N = 1e5
>>> amp = 20
>>> freq = 1234.0
>>> noise_power = 0.001 * fs / 2
>>> time = np.arange(N) / fs
>>> b, a = signal.butter(2, 0.25, 'low')
>>> x = rng.normal(scale=np.sqrt(noise_power), size=time.shape)
>>> y = signal.lfilter(b, a, x)
>>> x += amp*np.sin(2*np.pi*freq*time)
>>> y += rng.normal(scale=0.1*np.sqrt(noise_power), size=time.shape)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.csd.html, scipy.signal.butter scipy.signal.lfilter
">>> f, Pxy = signal.csd(x, y, fs, nperseg=1024)
>>> plt.semilogy(f, np.abs(Pxy))
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('CSD [V**2/Hz]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.csd.html, scipy.signal.csd
">>> from scipy.signal import CZT
>>> import numpy as np
>>> a = np.random.rand(7)
>>> b = np.random.rand(7)
>>> c = np.random.rand(7)
>>> czt_7 = CZT(n=7)
>>> A = czt_7(a)
>>> B = czt_7(b)
>>> C = czt_7(c)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.CZT.html, scipy.signal.CZT scipy.signal.CZT
">>> czt_7.points()
array([ 1.00000000+0.j        ,  0.62348980+0.78183148j,
       -0.22252093+0.97492791j, -0.90096887+0.43388374j,
       -0.90096887-0.43388374j, -0.22252093-0.97492791j,
        0.62348980-0.78183148j])
>>> import matplotlib.pyplot as plt
>>> plt.plot(czt_7.points().real, czt_7.points().imag, 'o')
>>> plt.gca().add_patch(plt.Circle((0,0), radius=1, fill=False, alpha=.3))
>>> plt.axis('equal')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.CZT.html, scipy.signal.CZT.points
">>> fs = 10e3
>>> N = 1e5
>>> amp = 20
>>> freq = 1234.0
>>> noise_power = 0.001 * fs / 2
>>> time = np.arange(N) / fs
>>> b, a = signal.butter(2, 0.25, 'low')
>>> x = rng.normal(scale=np.sqrt(noise_power), size=time.shape)
>>> y = signal.lfilter(b, a, x)
>>> x += amp*np.sin(2*np.pi*freq*time)
>>> y += rng.normal(scale=0.1*np.sqrt(noise_power), size=time.shape)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.coherence.html, scipy.signal.butter scipy.signal.lfilter
">>> f, Cxy = signal.coherence(x, y, fs, nperseg=1024)
>>> plt.semilogy(f, Cxy)
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('Coherence')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.coherence.html, scipy.signal.coherence
">>> from scipy.signal import max_len_seq
>>> max_len_seq(4)[0]
array([1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.max_len_seq.html, scipy.signal.max_len_seq
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from numpy.fft import fft, ifft, fftshift, fftfreq
>>> seq = max_len_seq(6)[0]*2-1  # +1 and -1
>>> spec = fft(seq)
>>> N = len(seq)
>>> plt.plot(fftshift(fftfreq(N)), fftshift(np.abs(spec)), '.-')
>>> plt.margins(0.1, 0.1)
>>> plt.grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.max_len_seq.html, scipy.signal.max_len_seq
">>> from scipy.signal import tf2ss
>>> A, B, C, D = tf2ss(num, den)
>>> A
array([[-2., -1.],
       [ 1.,  0.]])
>>> B
array([[ 1.],
       [ 0.]])
>>> C
array([[ 1.,  2.]])
>>> D
array([[ 1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.tf2ss.html, scipy.signal.tf2ss
">>> import numpy as np
>>> from scipy import signal
>>> from scipy import datasets
>>> rng = np.random.default_rng()
>>> face = datasets.face(gray=True) - datasets.face(gray=True).mean()
>>> template = np.copy(face[300:365, 670:750])  # right eye
>>> template -= template.mean()
>>> face = face + rng.standard_normal(face.shape) * 50  # add noise
>>> corr = signal.correlate2d(face, template, boundary='symm', mode='same')
>>> y, x = np.unravel_index(np.argmax(corr), corr.shape)  # find the match
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlate2d.html, scipy.datasets.face scipy.signal.correlate2d
">>> N, Wn = signal.cheb1ord(0.2, 0.3, 3, 40)
>>> b, a = signal.cheby1(N, 3, Wn, 'low')
>>> w, h = signal.freqz(b, a)
>>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))
>>> plt.title('Chebyshev I lowpass filter fit to constraints')
>>> plt.xlabel('Normalized frequency')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.grid(which='both', axis='both')
>>> plt.fill([.01, 0.2, 0.2, .01], [-3, -3, -99, -99], '0.9', lw=0) # stop
>>> plt.fill([0.3, 0.3,   2,   2], [ 9, -40, -40,  9], '0.9', lw=0) # pass
>>> plt.axis([0.08, 1, -60, 3])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheb1ord.html, scipy.signal.cheb1ord scipy.signal.cheby1 scipy.signal.freqz
">>> import numpy as np
>>> from scipy import signal
>>> rng = np.random.default_rng()
>>> sig = rng.standard_normal(100000)
>>> filt = signal.firwin(512, 0.01)
>>> fsig = signal.oaconvolve(sig, filt)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.oaconvolve.html, scipy.signal.oaconvolve
">>> from scipy.fft import rfft, rfftfreq
>>> from scipy.signal import czt, czt_points
>>> plt.plot(rfftfreq(fs, 1/fs), abs(rfft(x)))
>>> plt.margins(0, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/czt-function.html, scipy.fft.rfftfreq scipy.fft.rfft
">>> plt.plot(rfftfreq(fs, 1/fs), abs(rfft(x)))
>>> plt.margins(0, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/czt-function.html, scipy.fft.rfftfreq scipy.fft.rfft
">>> M = fs // 2  # Just positive frequencies, like rfft
>>> a = np.exp(-f1/fs)  # Starting point of the circle, radius < 1
>>> w = np.exp(-1j*np.pi/M)  # ""Step size"" of circle
>>> points = czt_points(M + 1, w, a)  # M + 1 to include Nyquist
>>> plt.plot(points.real, points.imag, '.')
>>> plt.gca().add_patch(plt.Circle((0,0), radius=1, fill=False, alpha=.3))
>>> plt.axis('equal'); plt.axis([-1.05, 1.05, -0.05, 1.05])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/czt-function.html, scipy.signal.czt_points
">>> z_vals = czt(x, M + 1, w, a)  # Include Nyquist for comparison to rfft
>>> freqs = np.angle(points)*fs/(2*np.pi)  # angle = omega, radius = sigma
>>> plt.plot(freqs, abs(z_vals))
>>> plt.margins(0, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/czt-function.html, scipy.signal.czt
">>> sys = signal.TransferFunction([1], [1, 1])
>>> w, mag, phase = signal.bode(sys)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bode.html, scipy.signal.TransferFunction scipy.signal.bode
">>> b, a = signal.butter(4, 100, 'low', analog=True)
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Butterworth filter frequency response')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(100, color='green') # cutoff frequency
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html, scipy.signal.butter scipy.signal.freqs
">>> sos = signal.butter(10, 15, 'hp', fs=1000, output='sos')
>>> filtered = signal.sosfilt(sos, sig)
>>> ax2.plot(t, filtered)
>>> ax2.set_title('After 15 Hz high-pass filter')
>>> ax2.axis([0, 1, -2, 2])
>>> ax2.set_xlabel('Time [seconds]')
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html, scipy.signal.butter scipy.signal.sosfilt
">>> peaks, _ = find_peaks(x)
>>> prominences = peak_prominences(x, peaks)[0]
>>> prominences
array([1.24159486, 0.47840168, 0.28470524, 3.10716793, 0.284603  ,
       0.47822491, 2.48340261, 0.47822491])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_prominences.html, scipy.signal.find_peaks scipy.signal.peak_prominences
">>> peak_prominences(x, peaks)  # -> (prominences, left_bases, right_bases)
(array([3.]), array([2]), array([6]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_prominences.html, scipy.signal.peak_prominences
">>> peak_prominences(x, peaks, wlen=3.1)
(array([2.]), array([4]), array([6]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.peak_prominences.html, scipy.signal.peak_prominences
">>> from scipy import signal
>>> signal.findfreqs([1, 0], [1, 8, 25], N=9)
array([  1.00000000e-02,   3.16227766e-02,   1.00000000e-01,
         3.16227766e-01,   1.00000000e+00,   3.16227766e+00,
         1.00000000e+01,   3.16227766e+01,   1.00000000e+02])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.findfreqs.html, scipy.signal.findfreqs
">>> b, a = iirfilter(4, [1, 10], 1, 60, analog=True, ftype='cheby1')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqs.html, scipy.signal.iirfilter
">>> w, h = freqs(b, a, worN=np.logspace(-1, 2, 1000))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqs.html, scipy.signal.freqs
">>> f, t, Zxx = signal.stft(x, fs, nperseg=1000)
>>> plt.pcolormesh(t, f, np.abs(Zxx), vmin=0, vmax=amp, shading='gouraud')
>>> plt.title('STFT Magnitude')
>>> plt.ylabel('Frequency [Hz]')
>>> plt.xlabel('Time [sec]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.stft.html, scipy.signal.stft
">>> E_x = sum(x**2) / fs  # Energy of x
>>> # Calculate a two-sided STFT with PSD scaling:
>>> f, t, Zxx = signal.stft(x, fs, nperseg=1000, return_onesided=False,
...                         scaling='psd')
>>> # Integrate numerically over abs(Zxx)**2:
>>> df, dt = f[1] - f[0], t[1] - t[0]
>>> E_Zxx = sum(np.sum(Zxx.real**2 + Zxx.imag**2, axis=0) * df) * dt
>>> # The energy is the same, but the numerical errors are quite large:
>>> np.isclose(E_x, E_Zxx, rtol=1e-2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.stft.html, scipy.signal.stft
">>> points = 100
>>> a = 4.0
>>> vec2 = signal.ricker(points, a)
>>> print(len(vec2))
100
>>> plt.plot(vec2)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ricker.html, scipy.signal.ricker
">>> signal.check_COLA(signal.windows.boxcar(100), 100, 75)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.boxcar
">>> signal.check_COLA(signal.windows.boxcar(100), 100, 25)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.boxcar
">>> signal.check_COLA(signal.windows.hann(120, sym=True), 120, 60)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.hann
">>> signal.check_COLA(signal.windows.hann(120, sym=False), 120, 60)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.hann
">>> signal.check_COLA(signal.windows.hann(120, sym=False), 120, 80)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.hann
">>> signal.check_COLA(signal.windows.hann(120, sym=False), 120, 90)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.check_COLA.html, scipy.signal.check_COLA scipy.signal.windows.hann
">>> from scipy import signal
>>> signal.gammatone(440, 'fir', numtaps=16, fs=16000)
(array([ 0.00000000e+00,  2.22196719e-07,  1.64942101e-06,  4.99298227e-06,
    1.01993969e-05,  1.63125770e-05,  2.14648940e-05,  2.29947263e-05,
    1.76776931e-05,  2.04980537e-06, -2.72062858e-05, -7.28455299e-05,
   -1.36651076e-04, -2.19066855e-04, -3.18905076e-04, -4.33156712e-04]),
   [1.0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.gammatone.html, scipy.signal.gammatone
">>> b, a = signal.gammatone(440, 'iir', fs=16000)
>>> w, h = signal.freqz(b, a)
>>> plt.plot(w / ((2 * np.pi) / 16000), 20 * np.log10(abs(h)))
>>> plt.xscale('log')
>>> plt.title('Gammatone filter frequency response')
>>> plt.xlabel('Frequency')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(440, color='green') # cutoff frequency
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.gammatone.html, scipy.signal.gammatone scipy.signal.freqz
">>> import numpy as np
>>> from scipy.signal import ZoomFFT
>>> t = np.linspace(0, 1, 1021)
>>> x = np.cos(2*np.pi*15*t) + np.sin(2*np.pi*17*t)
>>> f1, f2 = 5, 27
>>> transform = ZoomFFT(len(x), [f1, f2], len(x), fs=1021)
>>> X = transform(x)
>>> f = np.linspace(f1, f2, len(x))
>>> import matplotlib.pyplot as plt
>>> plt.plot(f, 20*np.log10(np.abs(X)))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ZoomFFT.html, scipy.signal.ZoomFFT scipy.signal.ZoomFFT
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> t = np.linspace(0, 1, 500, endpoint=False)
>>> plt.plot(t, signal.square(2 * np.pi * 5 * t))
>>> plt.ylim(-2, 2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.square.html, scipy.signal.square
">>> plt.figure()
>>> sig = np.sin(2 * np.pi * t)
>>> pwm = signal.square(2 * np.pi * 30 * t, duty=(sig + 1)/2)
>>> plt.subplot(2, 1, 1)
>>> plt.plot(t, sig)
>>> plt.subplot(2, 1, 2)
>>> plt.plot(t, pwm)
>>> plt.ylim(-1.5, 1.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.square.html, scipy.signal.square
">>> sig = np.repeat([0., 1., 1., 0., 1., 0., 0., 1.], 128)
>>> sig_noise = sig + rng.standard_normal(len(sig))
>>> corr = signal.correlate(sig_noise, np.ones(128), mode='same') / 128
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlate.html, scipy.signal.correlate
">>> clock = np.arange(64, len(sig), 128)
>>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, sharex=True)
>>> ax_orig.plot(sig)
>>> ax_orig.plot(clock, sig[clock], 'ro')
>>> ax_orig.set_title('Original signal')
>>> ax_noise.plot(sig_noise)
>>> ax_noise.set_title('Signal with noise')
>>> ax_corr.plot(corr)
>>> ax_corr.plot(clock, corr[clock], 'ro')
>>> ax_corr.axhline(0.5, ls=':')
>>> ax_corr.set_title('Cross-correlated with rectangular pulse')
>>> ax_orig.margins(0, 0.1)
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlate.html, scipy.stats.contingency.margins
">>> x = np.arange(128) / 128
>>> sig = np.sin(2 * np.pi * x)
>>> sig_noise = sig + rng.standard_normal(len(sig))
>>> corr = signal.correlate(sig_noise, sig)
>>> lags = signal.correlation_lags(len(sig), len(sig_noise))
>>> corr /= np.max(corr)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlate.html, scipy.signal.correlate scipy.signal.correlation_lags
">>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, figsize=(4.8, 4.8))
>>> ax_orig.plot(sig)
>>> ax_orig.set_title('Original signal')
>>> ax_orig.set_xlabel('Sample Number')
>>> ax_noise.plot(sig_noise)
>>> ax_noise.set_title('Signal with noise')
>>> ax_noise.set_xlabel('Sample Number')
>>> ax_corr.plot(lags, corr)
>>> ax_corr.set_title('Cross-correlated signal')
>>> ax_corr.set_xlabel('Lag')
>>> ax_orig.margins(0, 0.1)
>>> ax_noise.margins(0, 0.1)
>>> ax_corr.margins(0, 0.1)
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlate.html, scipy.stats.contingency.margins scipy.stats.contingency.margins scipy.stats.contingency.margins
">>> b, a = signal.butter(4, 100, 'low', analog=True)
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(np.abs(h)), color='silver', ls='dashed')
>>> b, a = signal.bessel(4, 100, 'low', analog=True, norm='phase')
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(np.abs(h)))
>>> plt.title('Bessel filter magnitude response (with Butterworth)')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(100, color='green')  # cutoff frequency
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bessel.html, scipy.signal.butter scipy.signal.freqs scipy.signal.bessel
">>> b, a = signal.bessel(3, 10, 'low', analog=True, norm='mag')
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(np.abs(h)))
>>> plt.axhline(-3, color='red')  # -3 dB magnitude
>>> plt.axvline(10, color='green')  # cutoff frequency
>>> plt.title('Magnitude-normalized Bessel filter frequency response')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bessel.html, scipy.signal.bessel scipy.signal.freqs
">>> b, a = signal.bessel(5, 1/0.1, 'low', analog=True, norm='delay')
>>> w, h = signal.freqs(b, a)
>>> plt.figure()
>>> plt.semilogx(w[1:], -np.diff(np.unwrap(np.angle(h)))/np.diff(w))
>>> plt.axhline(0.1, color='red')  # 0.1 seconds group delay
>>> plt.title('Bessel filter group delay')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Group delay [seconds]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bessel.html, scipy.signal.bessel scipy.signal.freqs
">>> f, t, Zxx = signal.stft(x, fs=fs, nperseg=nperseg)
>>> plt.figure()
>>> plt.pcolormesh(t, f, np.abs(Zxx), vmin=0, vmax=amp, shading='gouraud')
>>> plt.ylim([f[1], f[-1]])
>>> plt.title('STFT Magnitude')
>>> plt.ylabel('Frequency [Hz]')
>>> plt.xlabel('Time [sec]')
>>> plt.yscale('log')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.istft.html, scipy.signal.stft
">>> Zxx = np.where(np.abs(Zxx) >= amp/10, Zxx, 0)
>>> _, xrec = signal.istft(Zxx, fs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.istft.html, scipy.signal.istft
">>> import numpy as np
>>> from scipy.signal import czt_points
>>> points = czt_points(16)
>>> import matplotlib.pyplot as plt
>>> plt.plot(points.real, points.imag, 'o')
>>> plt.gca().add_patch(plt.Circle((0,0), radius=1, fill=False, alpha=.3))
>>> plt.axis('equal')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.czt_points.html, scipy.signal.czt_points
">>> m, w, a = 91, 0.995*np.exp(-1j*np.pi*.05), 0.8*np.exp(1j*np.pi/6)
>>> points = czt_points(m, w, a)
>>> plt.plot(points.real, points.imag, 'o')
>>> plt.gca().add_patch(plt.Circle((0,0), radius=1, fill=False, alpha=.3))
>>> plt.axis('equal')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.czt_points.html, scipy.signal.czt_points
">>> M = 100
>>> s = 4.0
>>> w = 2.0
>>> wavelet = signal.morlet2(M, s, w)
>>> plt.plot(abs(wavelet))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.morlet2.html, scipy.signal.morlet2
">>> t, dt = np.linspace(0, 1, 200, retstep=True)
>>> fs = 1/dt
>>> w = 6.
>>> sig = np.cos(2*np.pi*(50 + 10*t)*t) + np.sin(40*np.pi*t)
>>> freq = np.linspace(1, fs/2, 100)
>>> widths = w*fs / (2*freq*np.pi)
>>> cwtm = signal.cwt(sig, signal.morlet2, widths, w=w)
>>> plt.pcolormesh(t, freq, np.abs(cwtm), cmap='viridis', shading='gouraud')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.morlet2.html, scipy.signal.cwt
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> t = np.linspace(-1, 1, 2 * 100, endpoint=False)
>>> i, q, e = signal.gausspulse(t, fc=5, retquad=True, retenv=True)
>>> plt.plot(t, i, t, q, t, e, '--')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.gausspulse.html, scipy.signal.gausspulse
">>> b, a = bessel(N=5, Wn=2*np.pi*12, btype='lowpass', analog=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lsim.html, scipy.signal.bessel
">>> tout, yout, xout = lsim((b, a), U=u, T=t)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lsim.html, scipy.signal.lsim
">>> from scipy.signal import lti
>>> A = np.array([[0.0, 1.0], [0.0, 0.0]])
>>> B = np.array([[0.0], [1.0]])
>>> C = np.array([[1.0, 0.0]])
>>> D = 0.0
>>> system = lti(A, B, C, D)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lsim.html, scipy.signal.lti
">>> tout, y, x = lsim(system, u, t)
>>> plt.plot(t, y)
>>> plt.grid(alpha=0.3)
>>> plt.xlabel('t')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lsim.html, scipy.signal.lsim
">>> system = signal.iirdesign(wp, ws, gpass, gstop)
>>> w, h = signal.freqz(*system)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html, scipy.signal.iirdesign scipy.signal.freqz
">>> import numpy as np
>>> from scipy import signal
>>> from scipy import datasets
>>> ascent = datasets.ascent()
>>> scharr = np.array([[ -3-3j, 0-10j,  +3 -3j],
...                    [-10+0j, 0+ 0j, +10 +0j],
...                    [ -3+3j, 0+10j,  +3 +3j]]) # Gx + j*Gy
>>> grad = signal.convolve2d(ascent, scharr, boundary='symm', mode='same')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.convolve2d.html, scipy.datasets.ascent scipy.signal.convolve2d
">>> from scipy.datasets import face
>>> from scipy.signal import wiener
>>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> rng = np.random.default_rng()
>>> img = rng.random((40, 40))    #Create a random image
>>> filtered_img = wiener(img, (5, 5))  #Filter the image
>>> f, (plot1, plot2) = plt.subplots(1, 2)
>>> plot1.imshow(img)
>>> plot2.imshow(filtered_img)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.wiener.html, scipy.signal.wiener
">>> b, a = signal.butter(8, 0.125)
>>> y = signal.filtfilt(b, a, x, padlen=150)
>>> np.abs(y - xlow).max()
9.1086182074789912e-06
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html, scipy.signal.butter scipy.signal.filtfilt
">>> b, a = signal.ellip(4, 0.01, 120, 0.125)  # Filter to be applied.
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html, scipy.signal.ellip
">>> fgust = signal.filtfilt(b, a, sig, method=""gust"")
>>> fpad = signal.filtfilt(b, a, sig, padlen=50)
>>> plt.plot(sig, 'k-', label='input')
>>> plt.plot(fgust, 'b-', linewidth=4, label='gust')
>>> plt.plot(fpad, 'c-', linewidth=1.5, label='pad')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html, scipy.signal.filtfilt
">>> z, p, k = signal.tf2zpk(b, a)
>>> eps = 1e-9
>>> r = np.max(np.abs(p))
>>> approx_impulse_len = int(np.ceil(np.log(eps) / np.log(r)))
>>> approx_impulse_len
137
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html, scipy.signal.tf2zpk
">>> x = rng.standard_normal(4000)
>>> y1 = signal.filtfilt(b, a, x, method='gust')
>>> y2 = signal.filtfilt(b, a, x, method='gust', irlen=approx_impulse_len)
>>> print(np.max(np.abs(y1 - y2)))
2.875334415008979e-10
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.filtfilt.html, scipy.signal.filtfilt
">>> from scipy.signal import ss2tf
>>> ss2tf(A, B, C, D)
(array([[1., 3., 3.]]), array([ 1.,  2.,  1.]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ss2tf.html, scipy.signal.ss2tf
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> t = np.linspace(0, 1, 500)
>>> plt.plot(t, signal.sawtooth(2 * np.pi * 5 * t))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sawtooth.html, scipy.signal.sawtooth
">>> fs = 100
>>> bf = 2 * np.pi * np.array([7, 13])
>>> filts = signal.lti(*signal.butter(4, bf, btype='bandpass',
...                                   analog=True))
>>> filtz = signal.lti(*signal.bilinear(filts.num, filts.den, fs))
>>> wz, hz = signal.freqz(filtz.num, filtz.den)
>>> ws, hs = signal.freqs(filts.num, filts.den, worN=fs*wz)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bilinear.html, scipy.signal.lti scipy.signal.butter scipy.signal.bilinear scipy.signal.freqz scipy.signal.freqs
">>> savgol_filter(x, 5, 2)
array([1.66, 3.17, 3.54, 2.86, 0.66, 0.17, 1.  , 4.  , 9.  ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html, scipy.signal.savgol_filter
">>> savgol_filter(x, 5, 2, mode='nearest')
array([1.74, 3.03, 3.54, 2.86, 0.66, 0.17, 1.  , 4.6 , 7.97])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_filter.html, scipy.signal.savgol_filter
"A = scipy.linalg.companion(a).T
B = b[1:] - a[1:]*b[0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter_zi.html, scipy.linalg.companion
">>> from numpy import array, ones
>>> from scipy.signal import lfilter, lfilter_zi, butter
>>> b, a = butter(5, 0.25)
>>> zi = lfilter_zi(b, a)
>>> y, zo = lfilter(b, a, ones(10), zi=zi)
>>> y
array([1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter_zi.html, scipy.signal.butter scipy.signal.lfilter_zi scipy.signal.lfilter
">>> x = array([0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0])
>>> y, zf = lfilter(b, a, x, zi=zi*x[0])
>>> y
array([ 0.5       ,  0.5       ,  0.5       ,  0.49836039,  0.48610528,
    0.44399389,  0.35505241])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter_zi.html, scipy.signal.lfilter
">>> import numpy as np
>>> from scipy.signal import argrelmin
>>> x = np.array([2, 1, 2, 3, 2, 0, 1, 0])
>>> argrelmin(x)
(array([1, 5]),)
>>> y = np.array([[1, 2, 1, 2],
...               [2, 2, 0, 0],
...               [5, 3, 4, 4]])
...
>>> argrelmin(y, axis=1)
(array([0, 2]), array([2, 1]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.argrelmin.html, scipy.signal.argrelmin
"f(t) = 0.025*t**3 - 0.36*t**2 + 1.25*t + 2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sweep_poly.html, scipy.interpolate.interp1d
">>> import numpy as np
>>> from scipy.signal import sweep_poly
>>> p = np.poly1d([0.025, -0.36, 1.25, 2.0])
>>> t = np.linspace(0, 10, 5001)
>>> w = sweep_poly(t, p)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sweep_poly.html, scipy.signal.sweep_poly
">>> import matplotlib.pyplot as plt
>>> plt.subplot(2, 1, 1)
>>> plt.plot(t, w)
>>> plt.title(""Sweep Poly\nwith frequency "" +
...           ""$f(t) = 0.025t^3 - 0.36t^2 + 1.25t + 2$"")
>>> plt.subplot(2, 1, 2)
>>> plt.plot(t, p(t), 'r', label='f(t)')
>>> plt.legend()
>>> plt.xlabel('t')
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sweep_poly.html, scipy.interpolate.interp1d
"        b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)
H(z) = ------ = ------------------------------------------
        a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.invresz.html, scipy.interpolate.BSpline
">>> import numpy as np
>>> from scipy import signal
>>> z, p, k = signal.butter(4, 100, output='zpk', fs=1000)
>>> w, h = signal.freqz_zpk(z, p, k, fs=1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqz_zpk.html, scipy.signal.butter scipy.signal.freqz_zpk
">>> fsf1 = signal.place_poles(A, B, P, method='KNV0')
>>> fsf1.gain_matrix
array([[ 0.20071427, -0.96665799,  0.24066128, -0.10279785],
       [ 0.50587268,  0.57779091,  0.51795763, -0.41991442]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.place_poles.html, scipy.signal.place_poles
">>> fsf2 = signal.place_poles(A, B, P)  # uses YT method
>>> fsf2.computed_poles
array([-8.6659, -5.0566, -0.5   , -0.2   ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.place_poles.html, scipy.signal.place_poles
">>> fsf3 = signal.place_poles(A, B, P, rtol=-1, maxiter=100)
>>> fsf3.X
array([[ 0.52072442+0.j, -0.08409372+0.j, -0.56847937+0.j,  0.74823657+0.j],
       [-0.04977751+0.j, -0.80872954+0.j,  0.13566234+0.j, -0.29322906+0.j],
       [-0.82266932+0.j, -0.19168026+0.j, -0.56348322+0.j, -0.43815060+0.j],
       [ 0.22267347+0.j,  0.54967577+0.j, -0.58387806+0.j, -0.40271926+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.place_poles.html, scipy.signal.place_poles
">>> A = np.array([[ 0,  7/3.,  0,   0   ],
...               [ 0,   0,    0,  7/9. ],
...               [ 0,   0,    0,   0   ],
...               [ 0,   0,    0,   0   ]])
>>> B = np.array([[ 0,  0 ],
...               [ 0,  0 ],
...               [ 1,  0 ],
...               [ 0,  1 ]])
>>> P = np.array([-3, -1, -2-1j, -2+1j]) / 3.
>>> fsf = signal.place_poles(A, B, P, method='YT')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.place_poles.html, scipy.signal.place_poles
">>> from scipy import signal
>>> original = [0, 1, 0, 0, 1, 1, 0, 0]
>>> impulse_response = [2, 1]
>>> recorded = signal.convolve(impulse_response, original)
>>> recorded
array([0, 2, 1, 0, 2, 3, 1, 0, 0])
>>> recovered, remainder = signal.deconvolve(recorded, impulse_response)
>>> recovered
array([ 0.,  1.,  0.,  0.,  1.,  1.,  0.,  0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.deconvolve.html, scipy.signal.convolve scipy.signal.deconvolve
">>> import numpy as np
>>> from scipy import signal
>>> xs = np.arange(0, np.pi, 0.05)
>>> data = np.sin(xs)
>>> peakind = signal.find_peaks_cwt(data, np.arange(1,10))
>>> peakind, xs[peakind], data[peakind]
([32], array([ 1.6]), array([ 0.9995736]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks_cwt.html, scipy.signal.find_peaks_cwt
">>> b, a = signal.iirfilter(17, [2*np.pi*50, 2*np.pi*200], rs=60,
...                         btype='band', analog=True, ftype='cheby2')
>>> w, h = signal.freqs(b, a, 1000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(1, 1, 1)
>>> ax.semilogx(w / (2*np.pi), 20 * np.log10(np.maximum(abs(h), 1e-5)))
>>> ax.set_title('Chebyshev Type II bandpass frequency response')
>>> ax.set_xlabel('Frequency [Hz]')
>>> ax.set_ylabel('Amplitude [dB]')
>>> ax.axis((10, 1000, -100, 10))
>>> ax.grid(which='both', axis='both')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirfilter.html, scipy.signal.iirfilter scipy.signal.freqs
">>> sos = signal.iirfilter(17, [50, 200], rs=60, btype='band',
...                        analog=False, ftype='cheby2', fs=2000,
...                        output='sos')
>>> w, h = signal.sosfreqz(sos, 2000, fs=2000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(1, 1, 1)
>>> ax.semilogx(w, 20 * np.log10(np.maximum(abs(h), 1e-5)))
>>> ax.set_title('Chebyshev Type II bandpass frequency response')
>>> ax.set_xlabel('Frequency [Hz]')
>>> ax.set_ylabel('Amplitude [dB]')
>>> ax.axis((10, 1000, -100, 10))
>>> ax.grid(which='both', axis='both')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirfilter.html, scipy.signal.iirfilter scipy.signal.sosfreqz
">>> imp = signal.unit_impulse(100, 'mid')
>>> b, a = signal.butter(4, 0.2)
>>> response = signal.lfilter(b, a, imp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.unit_impulse.html, scipy.signal.butter scipy.signal.lfilter
">>> f, t, Sxx = signal.spectrogram(x, fs)
>>> plt.pcolormesh(t, f, Sxx, shading='gouraud')
>>> plt.ylabel('Frequency [Hz]')
>>> plt.xlabel('Time [sec]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spectrogram.html, scipy.signal.spectrogram
">>> f, t, Sxx = signal.spectrogram(x, fs, return_onesided=False)
>>> plt.pcolormesh(t, fftshift(f), fftshift(Sxx, axes=0), shading='gouraud')
>>> plt.ylabel('Frequency [Hz]')
>>> plt.xlabel('Time [sec]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.spectrogram.html, scipy.signal.spectrogram scipy.fft.fftshift
">>> M = 100
>>> s = 4.0
>>> w = 2.0
>>> wavelet = signal.morlet(M, s, w)
>>> plt.plot(wavelet.real, label=""real"")
>>> plt.plot(wavelet.imag, label=""imag"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.morlet.html, scipy.signal.morlet
">>> from scipy.signal import sos2tf
>>> from scipy import signal
>>> sos = signal.ellip(1, 0.001, 50, 0.1, output='sos')
>>> sos2tf(sos)
(   array([0.91256522, 0.91256522, 0.        ]),
    array([1.        , 0.82513043, 0.        ]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sos2tf.html, scipy.signal.ellip scipy.signal.sos2tf
">>> signal = chirp(t, 20.0, t[-1], 100.0)
>>> signal *= (1.0 + 0.5 * np.sin(2.0*np.pi*3.0*t) )
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.hilbert.html, scipy.signal.chirp
">>> analytic_signal = hilbert(signal)
>>> amplitude_envelope = np.abs(analytic_signal)
>>> instantaneous_phase = np.unwrap(np.angle(analytic_signal))
>>> instantaneous_frequency = (np.diff(instantaneous_phase) /
...                            (2.0*np.pi) * fs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.hilbert.html, scipy.signal.hilbert
">>> h_min_hom = minimum_phase(h_linear, method='homomorphic')
>>> h_min_hil = minimum_phase(h_linear, method='hilbert')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.minimum_phase.html, scipy.signal.minimum_phase
">>> fig, axs = plt.subplots(4, figsize=(4, 8))
>>> for h, style, color in zip((h_linear, h_min_hom, h_min_hil),
...                            ('-', '-', '--'), ('k', 'r', 'c')):
...     w, H = freqz(h)
...     w, gd = group_delay((h, 1))
...     w /= np.pi
...     axs[0].plot(h, color=color, linestyle=style)
...     axs[1].plot(w, np.abs(H), color=color, linestyle=style)
...     axs[2].plot(w, 20 * np.log10(np.abs(H)), color=color, linestyle=style)
...     axs[3].plot(w, gd, color=color, linestyle=style)
>>> for ax in axs:
...     ax.grid(True, color='0.5')
...     ax.fill_between(freq[1:3], *ax.get_ylim(), color='#ffeeaa', zorder=1)
>>> axs[0].set(xlim=[0, len(h_linear) - 1], ylabel='Amplitude', xlabel='Samples')
>>> axs[1].legend(['Linear', 'Min-Hom', 'Min-Hil'], title='Phase')
>>> for ax, ylim in zip(axs[1:], ([0, 1.1], [-150, 10], [-60, 60])):
...     ax.set(xlim=[0, 1], ylim=ylim, xlabel='Frequency')
>>> axs[1].set(ylabel='Magnitude')
>>> axs[2].set(ylabel='Magnitude (dB)')
>>> axs[3].set(ylabel='Group delay')
>>> plt.tight_layout()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.minimum_phase.html, scipy.signal.freqz scipy.signal.group_delay
">>> from scipy import signal
>>> system = ([1.0], [1.0, 2.0, 1.0])
>>> t, y = signal.impulse(system)
>>> import matplotlib.pyplot as plt
>>> plt.plot(t, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.impulse.html, scipy.signal.impulse
">>> lp = signal.lti([1.0], [1.0, 1.0])
>>> lp2 = signal.lti(*signal.lp2lp(lp.num, lp.den, 2))
>>> w, mag_lp, p_lp = lp.bode()
>>> w, mag_lp2, p_lp2 = lp2.bode(w)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2lp.html, scipy.signal.lti scipy.signal.lp2lp scipy.signal.lti.bode scipy.signal.lti.bode
"length = min(10 * width[ii], len(data))
cwt[ii,:] = signal.convolve(data, np.conj(wavelet(length, width[ii],
                                **kwargs))[::-1], mode='same')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cwt.html, scipy.signal.convolve
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> t = np.linspace(-1, 1, 200, endpoint=False)
>>> sig  = np.cos(2 * np.pi * 7 * t) + signal.gausspulse(t - 0.4, fc=2)
>>> widths = np.arange(1, 31)
>>> cwtmatr = signal.cwt(sig, signal.ricker, widths)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cwt.html, scipy.signal.gausspulse scipy.signal.cwt
">>> sys = signal.StateSpace(a, b, c, d)
>>> print(sys)
StateSpaceContinuous(
array([[0, 1],
       [0, 0]]),
array([[0],
       [1]]),
array([[1, 0]]),
array([[0]]),
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.StateSpace.html, scipy.signal.StateSpace
">>> signal.StateSpace(a, b, c, d, dt=0.1)
StateSpaceDiscrete(
array([[1. , 0.1],
       [0. , 1. ]]),
array([[0.005],
       [0.1  ]]),
array([[1, 0]]),
array([[0]]),
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.StateSpace.html, scipy.signal.StateSpace
">>> from scipy import optimize
>>> sol = optimize.diagbroyden(fun, [0, 0])
>>> sol
array([0.84116403, 0.15883384])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.diagbroyden.html, scipy.optimize.diagbroyden
">>> import numpy as np
>>> from scipy import signal
>>> rng = np.random.default_rng()
>>> sig = rng.standard_normal(1000)
>>> autocorr = signal.fftconvolve(sig, sig[::-1], mode='full')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html, scipy.signal.fftconvolve
">>> from scipy import datasets
>>> face = datasets.face(gray=True)
>>> kernel = np.outer(signal.windows.gaussian(70, 8),
...                   signal.windows.gaussian(70, 8))
>>> blurred = signal.fftconvolve(face, kernel, mode='same')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html, scipy.datasets.face scipy.signal.windows.gaussian scipy.signal.fftconvolve
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> fig, axs = plt.subplots(2)
>>> fs = 10.0  # Hz
>>> desired = (0, 0, 1, 1, 0, 0)
>>> for bi, bands in enumerate(((0, 1, 2, 3, 4, 5), (0, 1, 2, 4, 4.5, 5))):
...     fir_firls = signal.firls(73, bands, desired, fs=fs)
...     fir_remez = signal.remez(73, bands, desired[::2], fs=fs)
...     fir_firwin2 = signal.firwin2(73, bands, desired, fs=fs)
...     hs = list()
...     ax = axs[bi]
...     for fir in (fir_firls, fir_remez, fir_firwin2):
...         freq, response = signal.freqz(fir)
...         hs.append(ax.semilogy(0.5*fs*freq/np.pi, np.abs(response))[0])
...     for band, gains in zip(zip(bands[::2], bands[1::2]),
...                            zip(desired[::2], desired[1::2])):
...         ax.semilogy(band, np.maximum(gains, 1e-7), 'k--', linewidth=2)
...     if bi == 0:
...         ax.legend(hs, ('firls', 'remez', 'firwin2'),
...                   loc='lower center', frameon=False)
...     else:
...         ax.set_xlabel('Frequency (Hz)')
...     ax.grid(True)
...     ax.set(title='Band-pass %d-%d Hz' % bands[2:4], ylabel='Magnitude')
...
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.firls.html, scipy.signal.freqz
">>> import numpy as np
>>> from scipy.signal import savgol_coeffs
>>> savgol_coeffs(5, 2)
array([-0.08571429,  0.34285714,  0.48571429,  0.34285714, -0.08571429])
>>> savgol_coeffs(5, 2, deriv=1)
array([ 2.00000000e-01,  1.00000000e-01,  2.07548111e-16, -1.00000000e-01,
       -2.00000000e-01])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_coeffs.html, scipy.signal.savgol_coeffs
">>> savgol_coeffs(5, 2, pos=3)
array([ 0.25714286,  0.37142857,  0.34285714,  0.17142857, -0.14285714])
>>> savgol_coeffs(5, 2, pos=3, use='dot')
array([-0.14285714,  0.17142857,  0.34285714,  0.37142857,  0.25714286])
>>> savgol_coeffs(4, 2, pos=3, deriv=1, use='dot')
array([0.45,  -0.85,  -0.65,  1.05])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_coeffs.html, scipy.signal.savgol_coeffs
">>> x = np.array([1, 0, 1, 4, 9])
>>> c = savgol_coeffs(5, 2, pos=4, deriv=1, use='dot')
>>> c.dot(x)
6.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.savgol_coeffs.html, scipy.signal.savgol_coeffs
"            jw                 -jw              -jwM
   jw    B(e  )    b[0] + b[1]e    + ... + b[M]e
H(e  ) = ------ = -----------------------------------
            jw                 -jw              -jwN
         A(e  )    a[0] + a[1]e    + ... + a[N]e
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqz.html, scipy.sparse.coo_array scipy.sparse.coo_array
">>> from scipy import signal
>>> import numpy as np
>>> b = signal.firwin(80, 0.5, window=('kaiser', 8))
>>> w, h = signal.freqz(b)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqz.html, scipy.signal.freqz
">>> w, h = signal.freqz(b.T[..., np.newaxis], worN=1024)
>>> w.shape
(1024,)
>>> h.shape
(2, 1024)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqz.html, scipy.signal.freqz
">>> w, h = signal.freqz(b, a[..., np.newaxis], worN=1024)
>>> w.shape
(1024,)
>>> h.shape
(2, 1024)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqz.html, scipy.signal.freqz
">>> N, Wn = signal.ellipord(30, 10, 3, 60, True)
>>> b, a = signal.ellip(N, 3, 60, Wn, 'high', True)
>>> w, h = signal.freqs(b, a, np.logspace(0, 3, 500))
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Elliptical highpass filter fit to constraints')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.grid(which='both', axis='both')
>>> plt.fill([.1, 10,  10,  .1], [1e4, 1e4, -60, -60], '0.9', lw=0) # stop
>>> plt.fill([30, 30, 1e9, 1e9], [-99,  -3,  -3, -99], '0.9', lw=0) # pass
>>> plt.axis([1, 300, -80, 3])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ellipord.html, scipy.signal.ellipord scipy.signal.ellip scipy.signal.freqs
">>> g_std = 8  # standard deviation for Gaussian window in samples
>>> w = gaussian(50, std=g_std, sym=True)  # symmetric Gaussian window
>>> SFT = ShortTimeFFT(w, hop=10, fs=1/T_x, mfft=200, scale_to='magnitude')
>>> Sx = SFT.stft(x)  # perform the STFT
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.windows.gaussian scipy.signal.ShortTimeFFT scipy.signal.ShortTimeFFT.stft
">>> fig1, ax1 = plt.subplots(figsize=(6., 4.))  # enlarge plot a bit
>>> t_lo, t_hi = SFT.extent(N)[:2]  # time range of plot
>>> ax1.set_title(rf""STFT ({SFT.m_num*SFT.T:g}$\,s$ Gaussian window, "" +
...               rf""$\sigma_t={g_std*SFT.T}\,$s)"")
>>> ax1.set(xlabel=f""Time $t$ in seconds ({SFT.p_num(N)} slices, "" +
...                rf""$\Delta t = {SFT.delta_t:g}\,$s)"",
...         ylabel=f""Freq. $f$ in Hz ({SFT.f_pts} bins, "" +
...                rf""$\Delta f = {SFT.delta_f:g}\,$Hz)"",
...         xlim=(t_lo, t_hi))
...
>>> im1 = ax1.imshow(abs(Sx), origin='lower', aspect='auto',
...                  extent=SFT.extent(N), cmap='viridis')
>>> ax1.plot(t_x, f_i, 'r--', alpha=.5, label='$f_i(t)$')
>>> fig1.colorbar(im1, label=""Magnitude $|S_x(t, f)|$"")
...
>>> # Shade areas where window slices stick out to the side:
>>> for t0_, t1_ in [(t_lo, SFT.lower_border_end[0] * SFT.T),
...                  (SFT.upper_border_begin(N)[0] * SFT.T, t_hi)]:
...     ax1.axvspan(t0_, t1_, color='w', linewidth=0, alpha=.2)
>>> for t_ in [0, N * SFT.T]:  # mark signal borders with vertical line:
...     ax1.axvline(t_, color='y', linestyle='--', alpha=0.5)
>>> ax1.legend()
>>> fig1.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.ShortTimeFFT.extent scipy.signal.ShortTimeFFT.p_num scipy.signal.ShortTimeFFT.upper_border_begin
">>> SFT.invertible  # check if invertible
True
>>> x1 = SFT.istft(Sx, k1=N)
>>> np.allclose(x, x1)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.ShortTimeFFT.istft
">>> p_q = SFT.nearest_k_p(N // 2)
>>> Sx0 = SFT.stft(x[:p_q])
>>> Sx1 = SFT.stft(x[p_q:])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.ShortTimeFFT.nearest_k_p scipy.signal.ShortTimeFFT.stft
">>> p0_ub = SFT.upper_border_begin(p_q)[1] - SFT.p_min
>>> p1_le = SFT.lower_border_end[1] - SFT.p_min
>>> Sx01 = np.hstack((Sx0[:, :p0_ub],
...                   Sx0[:, p0_ub:] + Sx1[:, :p1_le],
...                   Sx1[:, p1_le:]))
>>> np.allclose(Sx01, Sx)  # Compare with SFT of complete signal
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.ShortTimeFFT.upper_border_begin
">>> y_p = SFT.istft(Sx, N//3, N//2)
>>> np.allclose(y_p, x[N//3:N//2])
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.html, scipy.signal.ShortTimeFFT.istft
">>> A = np.array([[0, 1],[-10., -3]])
>>> B = np.array([[0],[10.]])
>>> C = np.array([[1., 0]])
>>> D = np.array([[0.]])
>>> l_system = lti(A, B, C, D)
>>> t, x = l_system.step(T=np.linspace(0, 5, 100))
>>> fig, ax = plt.subplots()
>>> ax.plot(t, x, label='Continuous', linewidth=3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cont2discrete.html, scipy.signal.lti scipy.signal.lti.step
">>> dt = 0.1
>>> for method in ['zoh', 'bilinear', 'euler', 'backward_diff', 'foh', 'impulse']:
...    d_system = cont2discrete((A, B, C, D), dt, method=method)
...    s, x_d = dstep(d_system)
...    ax.step(s, np.squeeze(x_d), label=method, where='post')
>>> ax.axis([t[0], t[-1], x[0], 1.4])
>>> ax.legend(loc='best')
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cont2discrete.html, scipy.signal.cont2discrete scipy.signal.dstep
">>> import numpy as np
>>> from scipy import signal
>>> rng = np.random.default_rng()
>>> x = rng.standard_normal(1000)
>>> y = np.concatenate([rng.standard_normal(100), x])
>>> correlation = signal.correlate(x, y, mode=""full"")
>>> lags = signal.correlation_lags(x.size, y.size, mode=""full"")
>>> lag = lags[np.argmax(correlation)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.correlation_lags.html, scipy.signal.correlate scipy.signal.correlation_lags
">>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dfreqresp.html, scipy.signal.TransferFunction
">>> w, H = signal.dfreqresp(sys)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dfreqresp.html, scipy.signal.dfreqresp
">>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dbode.html, scipy.signal.TransferFunction
">>> w, mag, phase = signal.dbode(sys)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dbode.html, scipy.signal.dbode
">>> s1 = signal.ZerosPolesGain([], [1, 1, 1], [5])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqresp.html, scipy.signal.ZerosPolesGain
">>> w, H = signal.freqresp(s1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqresp.html, scipy.signal.freqresp
">>> x = np.linspace(0, 10, 20, endpoint=False)
>>> y = np.cos(-x**2/6.0)
>>> f_fft = signal.resample(y, 100)
>>> f_poly = signal.resample_poly(y, 100, 20)
>>> xnew = np.linspace(0, 10, 100, endpoint=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.resample_poly.html, scipy.signal.resample scipy.signal.resample_poly
">>> y2 = signal.resample_poly(Y, up, 1, padtype='constant')
>>> y3 = signal.resample_poly(Y, up, 1, padtype='mean')
>>> y4 = signal.resample_poly(Y, up, 1, padtype='line')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.resample_poly.html, scipy.signal.resample_poly
">>> signal.lti(1, 2, 3, 4)
StateSpaceContinuous(
array([[1]]),
array([[2]]),
array([[3]]),
array([[4]]),
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lti.html, scipy.signal.lti
">>> signal.lti([1, 2], [3, 4], 5)
ZerosPolesGainContinuous(
array([1, 2]),
array([3, 4]),
5,
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lti.html, scipy.signal.lti
">>> signal.lti([3, 4], [1, 2])
TransferFunctionContinuous(
array([3., 4.]),
array([1., 2.]),
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lti.html, scipy.signal.lti
">>> signal.dlti(1, 2, 3, 4)
StateSpaceDiscrete(
array([[1]]),
array([[2]]),
array([[3]]),
array([[4]]),
dt: True
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlti.html, scipy.signal.dlti
">>> signal.dlti(1, 2, 3, 4, dt=0.1)
StateSpaceDiscrete(
array([[1]]),
array([[2]]),
array([[3]]),
array([[4]]),
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlti.html, scipy.signal.dlti
">>> signal.dlti([1, 2], [3, 4], 5, dt=0.1)
ZerosPolesGainDiscrete(
array([1, 2]),
array([3, 4]),
5,
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlti.html, scipy.signal.dlti
">>> signal.dlti([3, 4], [1, 2], dt=0.1)
TransferFunctionDiscrete(
array([3., 4.]),
array([1., 2.]),
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlti.html, scipy.signal.dlti
">>> from scipy.signal import lp2lp_zpk
>>> z   = [7,   2]
>>> p   = [5,   13]
>>> k   = 0.8
>>> wo  = 0.4
>>> lp2lp_zpk(z, p, k, wo)
(   array([2.8, 0.8]), array([2. , 5.2]), 0.8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2lp_zpk.html, scipy.signal.lp2lp_zpk
">>> N, Wn = signal.buttord([20, 50], [14, 60], 3, 40, True)
>>> b, a = signal.butter(N, Wn, 'band', True)
>>> w, h = signal.freqs(b, a, np.logspace(1, 2, 500))
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Butterworth bandpass filter fit to constraints')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.grid(which='both', axis='both')
>>> plt.fill([1,  14,  14,   1], [-40, -40, 99, 99], '0.9', lw=0) # stop
>>> plt.fill([20, 20,  50,  50], [-99, -3, -3, -99], '0.9', lw=0) # pass
>>> plt.fill([60, 60, 1e9, 1e9], [99, -40, -40, 99], '0.9', lw=0) # stop
>>> plt.axis([10, 100, -60, 3])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.buttord.html, scipy.signal.buttord scipy.signal.butter scipy.signal.freqs
">>> import scipy.signal as signal
>>> pgram = signal.lombscargle(x, y, w, normalize=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lombscargle.html, scipy.signal.lombscargle
">>> import numpy as np
>>> from scipy import signal
>>> sig = np.repeat([0., 1., 0.], 100)
>>> win = signal.windows.hann(50)
>>> filtered = signal.convolve(sig, win, mode='same') / sum(win)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.convolve.html, scipy.signal.windows.hann scipy.signal.convolve
">>> import matplotlib.pyplot as plt
>>> fig, (ax_orig, ax_win, ax_filt) = plt.subplots(3, 1, sharex=True)
>>> ax_orig.plot(sig)
>>> ax_orig.set_title('Original pulse')
>>> ax_orig.margins(0, 0.1)
>>> ax_win.plot(win)
>>> ax_win.set_title('Filter impulse response')
>>> ax_win.margins(0, 0.1)
>>> ax_filt.plot(filtered)
>>> ax_filt.set_title('Filtered signal')
>>> ax_filt.margins(0, 0.1)
>>> fig.tight_layout()
>>> fig.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.convolve.html, scipy.stats.contingency.margins scipy.stats.contingency.margins scipy.stats.contingency.margins
">>> from scipy.stats import qmc
>>> sampler = qmc.LatinHypercube(d=6)
>>> sample = sampler.random(n=50)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html, scipy.stats.qmc.LatinHypercube
">>> l_bounds = [0.000125, 0.01, 0.0025, 0.05, 0.47, 0.7]
>>> u_bounds = [0.000375, 0.03, 0.0075, 0.15, 0.87, 0.9]
>>> sample_scaled = qmc.scale(sample, l_bounds, u_bounds)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html, scipy.stats.qmc.scale
">>> sampler = qmc.LatinHypercube(d=2)
>>> sample = sampler.random(n=5)
>>> qmc.discrepancy(sample)
0.0196...  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html, scipy.stats.qmc.LatinHypercube scipy.stats.qmc.discrepancy
">>> sampler = qmc.LatinHypercube(d=2, optimization=""random-cd"")
>>> sample = sampler.random(n=5)
>>> qmc.discrepancy(sample)
0.0176...  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html, scipy.stats.qmc.LatinHypercube scipy.stats.qmc.discrepancy
">>> sampler = qmc.LatinHypercube(d=2, strength=2)
>>> sample = sampler.random(n=9)
>>> qmc.discrepancy(sample)
0.00526...  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html, scipy.stats.qmc.LatinHypercube scipy.stats.qmc.discrepancy
">>> import numpy as np
>>> from scipy.signal import argrelextrema
>>> x = np.array([2, 1, 2, 3, 2, 0, 1, 0])
>>> argrelextrema(x, np.greater)
(array([3, 6]),)
>>> y = np.array([[1, 2, 1, 2],
...               [2, 2, 0, 0],
...               [5, 3, 4, 4]])
...
>>> argrelextrema(y, np.less, axis=1)
(array([0, 2]), array([2, 1]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.argrelextrema.html, scipy.signal.argrelextrema
">>> b, a = signal.butter(3, 0.05)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter.html, scipy.signal.butter
">>> zi = signal.lfilter_zi(b, a)
>>> z, _ = signal.lfilter(b, a, xn, zi=zi*xn[0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter.html, scipy.signal.lfilter_zi scipy.signal.lfilter
">>> z2, _ = signal.lfilter(b, a, z, zi=zi*z[0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter.html, scipy.signal.lfilter
">>> y = signal.filtfilt(b, a, xn)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lfilter.html, scipy.signal.filtfilt
">>> import numpy as np
>>> from scipy.stats import qmc
>>> space = np.array([[1, 3], [2, 6], [3, 2], [4, 5], [5, 1], [6, 4]])
>>> l_bounds = [0.5, 0.5]
>>> u_bounds = [6.5, 6.5]
>>> space = qmc.scale(space, l_bounds, u_bounds, reverse=True)
>>> space
array([[0.08333333, 0.41666667],
       [0.25      , 0.91666667],
       [0.41666667, 0.25      ],
       [0.58333333, 0.75      ],
       [0.75      , 0.08333333],
       [0.91666667, 0.58333333]])
>>> qmc.discrepancy(space)
0.008142039609053464
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.discrepancy.html, scipy.stats.qmc.scale scipy.stats.qmc.discrepancy
">>> disc_init = qmc.discrepancy(space[:-1], iterative=True)
>>> disc_init
0.04769081147119336
>>> qmc.update_discrepancy(space[-1], space[:-1], disc_init)
0.008142039609053513
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.discrepancy.html, scipy.stats.qmc.discrepancy scipy.stats.qmc.update_discrepancy
">>> b, a = signal.ellip(4, 5, 40, 100, 'low', analog=True)
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Elliptic filter frequency response (rp=5, rs=40)')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(100, color='green') # cutoff frequency
>>> plt.axhline(-40, color='green') # rs
>>> plt.axhline(-5, color='green') # rp
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ellip.html, scipy.signal.ellip scipy.signal.freqs
">>> sos = signal.ellip(8, 1, 100, 17, 'hp', fs=1000, output='sos')
>>> filtered = signal.sosfilt(sos, sig)
>>> ax2.plot(t, filtered)
>>> ax2.set_title('After 17 Hz high-pass filter')
>>> ax2.axis([0, 1, -2, 2])
>>> ax2.set_xlabel('Time [seconds]')
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ellip.html, scipy.signal.ellip scipy.signal.sosfilt
">>> fs = 1000.0  # Sample frequency (Hz)
>>> f0 = 300.0  # Frequency to be retained (Hz)
>>> Q = 30.0  # Quality factor
>>> # Design peak filter
>>> b, a = signal.iirpeak(f0, Q, fs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirpeak.html, scipy.signal.iirpeak
">>> # Frequency response
>>> freq, h = signal.freqz(b, a, fs=fs)
>>> # Plot
>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))
>>> ax[0].plot(freq, 20*np.log10(np.maximum(abs(h), 1e-5)), color='blue')
>>> ax[0].set_title(""Frequency Response"")
>>> ax[0].set_ylabel(""Amplitude (dB)"", color='blue')
>>> ax[0].set_xlim([0, 500])
>>> ax[0].set_ylim([-50, 10])
>>> ax[0].grid(True)
>>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color='green')
>>> ax[1].set_ylabel(""Angle (degrees)"", color='green')
>>> ax[1].set_xlabel(""Frequency (Hz)"")
>>> ax[1].set_xlim([0, 500])
>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
>>> ax[1].set_ylim([-90, 90])
>>> ax[1].grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirpeak.html, scipy.signal.freqz
">>> b, a = signal.cheby1(4, 5, 100, 'low', analog=True)
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Chebyshev Type I frequency response (rp=5)')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(100, color='green') # cutoff frequency
>>> plt.axhline(-5, color='green') # rp
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheby1.html, scipy.signal.cheby1 scipy.signal.freqs
">>> sos = signal.cheby1(10, 1, 15, 'hp', fs=1000, output='sos')
>>> filtered = signal.sosfilt(sos, sig)
>>> ax2.plot(t, filtered)
>>> ax2.set_title('After 15 Hz high-pass filter')
>>> ax2.axis([0, 1, -2, 2])
>>> ax2.set_xlabel('Time [seconds]')
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheby1.html, scipy.signal.cheby1 scipy.signal.sosfilt
">>> N, Wn = signal.cheb2ord([0.1, 0.6], [0.2, 0.5], 3, 60)
>>> b, a = signal.cheby2(N, 60, Wn, 'stop')
>>> w, h = signal.freqz(b, a)
>>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))
>>> plt.title('Chebyshev II bandstop filter fit to constraints')
>>> plt.xlabel('Normalized frequency')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.grid(which='both', axis='both')
>>> plt.fill([.01, .1, .1, .01], [-3,  -3, -99, -99], '0.9', lw=0) # stop
>>> plt.fill([.2,  .2, .5,  .5], [ 9, -60, -60,   9], '0.9', lw=0) # pass
>>> plt.fill([.6,  .6,  2,   2], [-99, -3,  -3, -99], '0.9', lw=0) # stop
>>> plt.axis([0.06, 1, -80, 3])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheb2ord.html, scipy.signal.cheb2ord scipy.signal.cheby2 scipy.signal.freqz
">>> pv = [0.1, 0.3, 0.6]
>>> urng = np.random.default_rng()
>>> rng = DiscreteAliasUrn(pv, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.sampling.DiscreteAliasUrn
">>> rvs = rng.rvs(size=1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> from scipy.stats import chisquare
>>> _, freqs = np.unique(rvs, return_counts=True)
>>> freqs = freqs / np.sum(freqs)
>>> freqs
array([0.092, 0.292, 0.616])
>>> chisquare(freqs, pv).pvalue
0.9993602047563164
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.chisquare
">>> urng = np.random.default_rng()
>>> class Binomial:
...     def __init__(self, n, p):
...         self.n = n
...         self.p = p
...     def pmf(self, x):
...         # note that the pmf doesn't need to be normalized.
...         return self.p**x * (1-self.p)**(self.n-x)
...     def support(self):
...         return (0, self.n)
...
>>> n, p = 10, 0.2
>>> dist = Binomial(n, p)
>>> rng = DiscreteAliasUrn(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.rv_discrete.pmf scipy.stats.sampling.DiscreteAliasUrn
">>> rvs = rng.rvs(1000)
>>> _, freqs = np.unique(rvs, return_counts=True)
>>> freqs = freqs / np.sum(freqs)
>>> obs_freqs = np.zeros(11)  # some frequencies may be zero.
>>> obs_freqs[:freqs.size] = freqs
>>> pv = [dist.pmf(i) for i in range(0, 11)]
>>> pv = np.asarray(pv) / np.sum(pv)
>>> chisquare(obs_freqs, pv).pvalue
0.9999999999999999
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.sampling.DiscreteAliasUrn.rvs scipy.stats.rv_discrete.pmf scipy.stats.chisquare
">>> import matplotlib.pyplot as plt
>>> rvs = rng.rvs(1000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> x = np.arange(0, n+1)
>>> fx = dist.pmf(x)
>>> fx = fx / fx.sum()
>>> ax.plot(x, fx, 'bo', label='true distribution')
>>> ax.vlines(x, 0, fx, lw=2)
>>> ax.hist(rvs, bins=np.r_[x, n+1]-0.5, density=True, alpha=0.5,
...         color='r', label='samples')
>>> ax.set_xlabel('x')
>>> ax.set_ylabel('PMF(x)')
>>> ax.set_title('Discrete Alias Urn Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.sampling.DiscreteAliasUrn.rvs scipy.stats.rv_discrete.pmf
">>> rng = DiscreteAliasUrn(pv, urn_factor=2, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteAliasUrn.html, scipy.stats.sampling.DiscreteAliasUrn
">>> from scipy.signal import lp2bs_zpk
>>> z   = [             ]
>>> p   = [ 0.7 ,    -1 ]
>>> k   = 9
>>> wo  = 0.5
>>> bw  = 10
>>> lp2bs_zpk(z, p, k, wo, bw)
(   array([0.+0.5j, 0.+0.5j, 0.-0.5j, 0.-0.5j]), 
    array([14.2681928 +0.j, -0.02506281+0.j,  0.01752149+0.j, -9.97493719+0.j]), 
    -12.857142857142858)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2bs_zpk.html, scipy.signal.lp2bs_zpk
">>> lp = signal.lti([1.0], [1.0, 1.0])
>>> bp = signal.lti(*signal.lp2bp(lp.num, lp.den))
>>> w, mag_lp, p_lp = lp.bode()
>>> w, mag_bp, p_bp = bp.bode(w)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2bp.html, scipy.signal.lti scipy.signal.lp2bp scipy.signal.lti.bode scipy.signal.lti.bode
">>> from scipy.fftpack import fftn, ifftn
>>> import numpy as np
>>> y = (-np.arange(16), 8 - np.arange(16), np.arange(16))
>>> np.allclose(y, ifftn(fftn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.ifftn.html, scipy.fftpack.ifftn scipy.fftpack.fftn
">>> from scipy.stats import qmc
>>> l_bounds = [-2, 0]
>>> u_bounds = [6, 5]
>>> sample = [[0.5 , 0.75],
...           [0.5 , 0.5],
...           [0.75, 0.25]]
>>> sample_scaled = qmc.scale(sample, l_bounds, u_bounds)
>>> sample_scaled
array([[2.  , 3.75],
       [2.  , 2.5 ],
       [4.  , 1.25]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.scale.html, scipy.stats.qmc.scale
">>> sample_ = qmc.scale(sample_scaled, l_bounds, u_bounds, reverse=True)
>>> sample_
array([[0.5 , 0.75],
       [0.5 , 0.5 ],
       [0.75, 0.25]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.scale.html, scipy.stats.qmc.scale
">>> lp = signal.lti([1.0], [1.0, 1.5])
>>> bs = signal.lti(*signal.lp2bs(lp.num, lp.den))
>>> w, mag_lp, p_lp = lp.bode()
>>> w, mag_bs, p_bs = bs.bode(w)
>>> plt.plot(w, mag_lp, label='Lowpass')
>>> plt.plot(w, mag_bs, label='Bandstop')
>>> plt.semilogx()
>>> plt.grid(True)
>>> plt.xlabel('Frequency [rad/s]')
>>> plt.ylabel('Magnitude [dB]')
>>> plt.legend()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2bs.html, scipy.signal.lti scipy.signal.lp2bs scipy.signal.lti.bode scipy.signal.lti.bode
">>> urng = np.random.default_rng()
>>> dist = StdNorm()
>>> rng = SimpleRatioUniforms(dist, mode=0,
...                           pdf_area=np.sqrt(2*np.pi),
...                           random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.SimpleRatioUniforms.html, scipy.stats.sampling.SimpleRatioUniforms
">>> rvs = rng.rvs(10)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.SimpleRatioUniforms.html, scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> from scipy.stats import norm
>>> rng = SimpleRatioUniforms(dist, mode=0,
...                           pdf_area=np.sqrt(2*np.pi),
...                           cdf_at_mode=norm.cdf(0),
...                           random_state=urng)
>>> rvs = rng.rvs(1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.SimpleRatioUniforms.html, scipy.stats.sampling.SimpleRatioUniforms scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> from scipy.fftpack import fft, rfft
>>> a = [9, -9, 1, 3]
>>> fft(a)
array([  4. +0.j,   8.+12.j,  16. +0.j,   8.-12.j])
>>> rfft(a)
array([  4.,   8.,  12.,  16.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.rfft.html, scipy.fftpack.fft scipy.fftpack.rfft
">>> butter = signal.dlti(*signal.butter(3, 0.5))
>>> t, y = signal.dimpulse(butter, n=25)
>>> plt.step(t, np.squeeze(y))
>>> plt.grid()
>>> plt.xlabel('n [samples]')
>>> plt.ylabel('Amplitude')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dimpulse.html, scipy.signal.dlti scipy.signal.butter scipy.signal.dimpulse
">>> engine = RandomEngine(2)
>>> engine.random(5)
array([[0.22733602, 0.31675834],  # random
       [0.79736546, 0.67625467],
       [0.39110955, 0.33281393],
       [0.59830875, 0.18673419],
       [0.67275604, 0.94180287]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.QMCEngine.html, scipy.stats.qmc.Halton.random
">>> _ = engine.reset()
>>> engine.random(5)
array([[0.22733602, 0.31675834],  # random
       [0.79736546, 0.67625467],
       [0.39110955, 0.33281393],
       [0.59830875, 0.18673419],
       [0.67275604, 0.94180287]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.QMCEngine.html, scipy.stats.qmc.Halton.reset scipy.stats.qmc.Halton.random
">>> import numpy as np
>>> from scipy.fftpack import fft2, ifft2
>>> y = np.mgrid[:5, :5][0]
>>> y
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4]])
>>> np.allclose(y, ifft2(fft2(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft2.html, scipy.fftpack.ifft2 scipy.fftpack.fft2
">>> from scipy.signal import zpk2tf
>>> z   = [2,   6]
>>> p   = [1,   8]
>>> k   = 5
>>> zpk2tf(z, p, k)
(   array([  5., -40.,  60.]), array([ 1., -9.,  8.]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2tf.html, scipy.signal.zpk2tf
">>> sos = signal.butter(9, 0.125, output='sos')
>>> zi = signal.sosfilt_zi(sos)
>>> x = (np.arange(250) < 100).astype(int)
>>> f1 = signal.sosfilt(sos, x)
>>> f2, zo = signal.sosfilt(sos, x, zi=zi)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfilt_zi.html, scipy.signal.butter scipy.signal.sosfilt_zi scipy.signal.sosfilt
">>> from scipy import signal
>>> b, a = signal.iirdesign(0.1, 0.3, 5, 50, ftype='cheby1')
>>> w, gd = signal.group_delay((b, a))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.group_delay.html, scipy.signal.iirdesign scipy.signal.group_delay
">>> urng = np.random.default_rng()
>>> class MyDist:
...     def pdf(self, x):
...         return 1-x*x
...     def dpdf(self, x):
...         return -2*x
...
>>> dist = MyDist()
>>> rng = TransformedDensityRejection(dist, domain=(-1, 1),
...                                   random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.TransformedDensityRejection.html, scipy.stats.sampling.TransformedDensityRejection
">>> class MyDist:
...     def pdf(self, x):
...         return 1-x*x
...     def dpdf(self, x):
...         return -2*x
...     def support(self):
...         return (-1, 1)
...
>>> dist = MyDist()
>>> rng = TransformedDensityRejection(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.TransformedDensityRejection.html, scipy.stats.sampling.TransformedDensityRejection
">>> rvs = rng.rvs(1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.TransformedDensityRejection.html, scipy.stats.sampling.TransformedDensityRejection.rvs
">>> signal.ZerosPolesGain([1, 2], [3, 4], 5)
ZerosPolesGainContinuous(
array([1, 2]),
array([3, 4]),
5,
dt: None
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ZerosPolesGain.html, scipy.signal.ZerosPolesGain
">>> signal.ZerosPolesGain([1, 2], [3, 4], 5, dt=0.1)
ZerosPolesGainDiscrete(
array([1, 2]),
array([3, 4]),
5,
dt: 0.1
)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ZerosPolesGain.html, scipy.signal.ZerosPolesGain
">>> ydem = signal.decimate(y, q)
>>> xnew = np.linspace(0, wave_duration, samples_decimated, endpoint=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.decimate.html, scipy.signal.decimate
">>> b, a = signal.cheby2(4, 40, 100, 'low', analog=True)
>>> w, h = signal.freqs(b, a)
>>> plt.semilogx(w, 20 * np.log10(abs(h)))
>>> plt.title('Chebyshev Type II frequency response (rs=40)')
>>> plt.xlabel('Frequency [radians / second]')
>>> plt.ylabel('Amplitude [dB]')
>>> plt.margins(0, 0.1)
>>> plt.grid(which='both', axis='both')
>>> plt.axvline(100, color='green') # cutoff frequency
>>> plt.axhline(-40, color='green') # rs
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheby2.html, scipy.signal.cheby2 scipy.signal.freqs
">>> sos = signal.cheby2(12, 20, 17, 'hp', fs=1000, output='sos')
>>> filtered = signal.sosfilt(sos, sig)
>>> ax2.plot(t, filtered)
>>> ax2.set_title('After 17 Hz high-pass filter')
>>> ax2.axis([0, 1, -2, 2])
>>> ax2.set_xlabel('Time [seconds]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.cheby2.html, scipy.signal.cheby2 scipy.signal.sosfilt
"abs(A(w) - D(w))) < 10**(-ripple/20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.kaiserord.html, scipy.sparse.coo_array
">>> numtaps, beta = kaiserord(65, width/(0.5*fs))
>>> numtaps
167
>>> beta
6.20426
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.kaiserord.html, scipy.signal.kaiserord
">>> w, h = freqz(taps, worN=8000)
>>> w *= 0.5*fs/np.pi  # Convert w to Hz.
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.kaiserord.html, scipy.signal.freqz
">>> from scipy.fftpack import rfft, irfft
>>> a = [1.0, 2.0, 3.0, 4.0, 5.0]
>>> irfft(a)
array([ 2.6       , -3.16405192,  1.24398433, -1.14955713,  1.46962473])
>>> irfft(rfft(a))
array([1., 2., 3., 4., 5.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.irfft.html, scipy.fftpack.irfft scipy.fftpack.rfft
">>> import matplotlib.pyplot as plt
>>> from scipy.stats import qmc
>>> dist = qmc.MultivariateNormalQMC(mean=[0, 5], cov=[[1, 0], [0, 1]])
>>> sample = dist.random(512)
>>> _ = plt.scatter(sample[:, 0], sample[:, 1])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.MultivariateNormalQMC.html, scipy.stats.qmc.MultivariateNormalQMC
">>> pv = [0.1, 0.3, 0.6]
>>> urng = np.random.default_rng()
>>> rng = DiscreteGuideTable(pv, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable
">>> rvs = rng.rvs(size=1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable.rvs
">>> from scipy.stats import chisquare
>>> _, freqs = np.unique(rvs, return_counts=True)
>>> freqs = freqs / np.sum(freqs)
>>> freqs
array([0.092, 0.355, 0.553])
>>> chisquare(freqs, pv).pvalue
0.9987382966178464
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.chisquare
">>> urng = np.random.default_rng()
>>> from scipy.stats import binom
>>> n, p = 10, 0.2
>>> dist = binom(n, p)
>>> rng = DiscreteGuideTable(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable
">>> rvs = rng.rvs(1000)
>>> _, freqs = np.unique(rvs, return_counts=True)
>>> freqs = freqs / np.sum(freqs)
>>> obs_freqs = np.zeros(11)  # some frequencies may be zero.
>>> obs_freqs[:freqs.size] = freqs
>>> pv = [dist.pmf(i) for i in range(0, 11)]
>>> pv = np.asarray(pv) / np.sum(pv)
>>> chisquare(obs_freqs, pv).pvalue
0.9999999999999989
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable.rvs scipy.stats.chisquare
">>> import matplotlib.pyplot as plt
>>> rvs = rng.rvs(1000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> x = np.arange(0, n+1)
>>> fx = dist.pmf(x)
>>> fx = fx / fx.sum()
>>> ax.plot(x, fx, 'bo', label='true distribution')
>>> ax.vlines(x, 0, fx, lw=2)
>>> ax.hist(rvs, bins=np.r_[x, n+1]-0.5, density=True, alpha=0.5,
...         color='r', label='samples')
>>> ax.set_xlabel('x')
>>> ax.set_ylabel('PMF(x)')
>>> ax.set_title('Discrete Guide Table Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable.rvs
">>> rng = DiscreteGuideTable(pv, guide_factor=1, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable
">>> n, p = 4, 0.1
>>> dist = binom(n, p)
>>> rng = DiscreteGuideTable(dist, random_state=42)
>>> rng.ppf(0.5)
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.DiscreteGuideTable.html, scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.ppf
">>> import numpy as np
>>> from scipy import fftpack
>>> sig = np.array([-2, 8, 6, 4, 1, 0, 3, 5], dtype=float)
>>> sig_fft = fftpack.rfft(sig)
>>> n = sig_fft.size
>>> timestep = 0.1
>>> freq = fftpack.rfftfreq(n, d=timestep)
>>> freq
array([ 0.  ,  1.25,  1.25,  2.5 ,  2.5 ,  3.75,  3.75,  5.  ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.rfftfreq.html, scipy.fftpack.rfft scipy.fftpack.rfftfreq
">>> class StandardNormal:
...     def pdf(self, x):
...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)
...     def cdf(self, x):
...        return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInverseHermite(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng = NumericalInverseHermite(dist)
>>> p = np.linspace(0.01, 0.99, 99) # percentiles from 1% to 99%
>>> np.allclose(rng.ppf(p), norm.ppf(p))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.ppf
">>> dist = genexpon(9, 16, 3)
>>> rng = NumericalInverseHermite(dist)
>>> # `seed` ensures identical random streams are used by each `rvs` method
>>> seed = 500072020
>>> rvs1 = dist.rvs(size=100, random_state=np.random.default_rng(seed))
>>> rvs2 = rng.rvs(size=100, random_state=np.random.default_rng(seed))
>>> np.allclose(rvs1, rvs2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.rvs
">>> import matplotlib.pyplot as plt
>>> dist = StandardNormal()
>>> rng = NumericalInverseHermite(dist)
>>> rvs = rng.rvs(10000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)
>>> fx = norm.pdf(x)
>>> plt.plot(x, fx, 'r-', lw=2, label='true distribution')
>>> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')
>>> plt.xlabel('x')
>>> plt.ylabel('PDF(x)')
>>> plt.title('Numerical Inverse Hermite Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.rvs
">>> class StandardNormal:
...     def pdf(self, x):
...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)
...     def dpdf(self, x):
...        return -1/np.sqrt(2*np.pi) * x * np.exp(-x**2 / 2)
...     def cdf(self, x):
...        return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInverseHermite(dist, order=5, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng3 = NumericalInverseHermite(dist, order=3)
>>> rng5 = NumericalInverseHermite(dist, order=5)
>>> rng3.intervals, rng5.intervals
(3000, 522)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng1 = NumericalInverseHermite(dist, u_resolution=1e-10)
>>> rng1.u_error(sample_size=1000000)  # uses one million samples
UError(max_error=9.53167544892608e-11, mean_absolute_error=2.2450136432146864e-11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.u_error
">>> rng2 = NumericalInverseHermite(dist, u_resolution=1e-13)
>>> rng2.u_error(sample_size=1000000)
UError(max_error=9.32027892364129e-14, mean_absolute_error=1.5194172675685075e-14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.u_error
">>> rng1.intervals
1022
>>> rng2.intervals
5687
>>> from timeit import timeit
>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-10)
>>> timeit(f, number=1)
0.017409582000254886  # may vary
>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-13)
>>> timeit(f, number=1)
0.08671202100003939  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite
">>> import matplotlib.pyplot as plt
>>> u = np.linspace(0.01, 0.99, 1000)
>>> approxppf = rng.ppf(u)
>>> exactppf = norm.ppf(u)
>>> error = np.abs(exactppf - approxppf)
>>> plt.plot(u, error)
>>> plt.xlabel('u')
>>> plt.ylabel('error')
>>> plt.title('Error between exact and approximated PPF (x-error)')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInverseHermite.html, scipy.stats.sampling.NumericalInverseHermite.ppf
">>> import numpy as np
>>> from scipy.signal import upfirdn
>>> upfirdn([1, 1, 1], [1, 1, 1])   # FIR filter
array([ 1.,  2.,  3.,  2.,  1.])
>>> upfirdn([1], [1, 2, 3], 3)  # upsampling with zeros insertion
array([ 1.,  0.,  0.,  2.,  0.,  0.,  3.])
>>> upfirdn([1, 1, 1], [1, 2, 3], 3)  # upsampling with sample-and-hold
array([ 1.,  1.,  1.,  2.,  2.,  2.,  3.,  3.,  3.])
>>> upfirdn([.5, 1, .5], [1, 1, 1], 2)  # linear interpolation
array([ 0.5,  1. ,  1. ,  1. ,  1. ,  1. ,  0.5])
>>> upfirdn([1], np.arange(10), 1, 3)  # decimation by 3
array([ 0.,  3.,  6.,  9.])
>>> upfirdn([.5, 1, .5], np.arange(10), 2, 3)  # linear interp, rate 2/3
array([ 0. ,  1. ,  2.5,  4. ,  5.5,  7. ,  8.5])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.upfirdn.html, scipy.signal.upfirdn
">>> h = [1, 1]
>>> upfirdn(h, x, 2)
array([[ 0.,  0.,  1.,  1.],
       [ 2.,  2.,  3.,  3.],
       [ 4.,  4.,  5.,  5.],
       [ 6.,  6.,  7.,  7.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.upfirdn.html, scipy.signal.upfirdn
">>> upfirdn(h, x, 2, axis=0)
array([[ 0.,  1.],
       [ 0.,  1.],
       [ 2.,  3.],
       [ 2.,  3.],
       [ 4.,  5.],
       [ 4.,  5.],
       [ 6.,  7.],
       [ 6.,  7.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.upfirdn.html, scipy.signal.upfirdn
">>> gamma_frozen = stats.gamma(1.5)
>>> gamma_dist = FastGeneratorInversion(gamma_frozen)
>>> r = gamma_dist.rvs(size=1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion scipy.stats.sampling.FastGeneratorInversion.rvs
">>> r = gamma_dist.qrvs(size=1000)
>>> r.mean()
1.4996639255942914  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion.qrvs
">>> q = [0.001, 0.2, 0.5, 0.8, 0.999]
>>> np.max(np.abs(gamma_frozen.ppf(q) - gamma_dist.ppf(q)))
4.313394796895409e-08
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion.ppf
">>> gamma_dist.evaluate_error()
(7.446320551265581e-11, nan)  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion.evaluate_error
">>> gamma_dist.loc = 2
>>> gamma_dist.scale = 3
>>> r = gamma_dist.rvs(size=1000)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion.rvs
">>> trunc_norm = FastGeneratorInversion(stats.norm(), domain=(3, 4))
>>> r = trunc_norm.rvs(size=1000)
>>> 3 < r.min() < r.max() < 4
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.html, scipy.stats.sampling.FastGeneratorInversion scipy.stats.sampling.FastGeneratorInversion.rvs
">>> b = [3, -2, 5]
>>> a = [2, 3, 1]
>>> normalize(b, a)
(array([ 1.5, -1. ,  2.5]), array([1. , 1.5, 0.5]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.normalize.html, scipy.signal.normalize
">>> import warnings
>>> with warnings.catch_warnings(record=True) as w:
...     num, den = normalize([0, 3, 6], [2, -5, 4])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.normalize.html, scipy.signal.normalize
">>> from scipy.signal import kaiser_atten
>>> kaiser_atten(211, 0.0375)
64.48099630593983
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.kaiser_atten.html, scipy.signal.kaiser_atten
">>> from scipy import signal
>>> import numpy as np
>>> sos = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',
...                    output='sos')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfreqz.html, scipy.signal.ellip
">>> w, h = signal.sosfreqz(sos, worN=1500)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfreqz.html, scipy.signal.sosfreqz
">>> b, a = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',
...                    output='ba')
>>> w, h = signal.freqz(b, a, worN=1500)
>>> plt.subplot(2, 1, 1)
>>> db = 20*np.log10(np.maximum(np.abs(h), 1e-5))
>>> plt.plot(w/np.pi, db)
>>> plt.ylim(-75, 5)
>>> plt.grid(True)
>>> plt.yticks([0, -20, -40, -60])
>>> plt.ylabel('Gain [dB]')
>>> plt.title('Frequency Response')
>>> plt.subplot(2, 1, 2)
>>> plt.plot(w/np.pi, np.angle(h))
>>> plt.grid(True)
>>> plt.yticks([-np.pi, -0.5*np.pi, 0, 0.5*np.pi, np.pi],
...            [r'$-\pi$', r'$-\pi/2$', '0', r'$\pi/2$', r'$\pi$'])
>>> plt.ylabel('Phase [rad]')
>>> plt.xlabel('Normalized frequency (1.0 = Nyquist)')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfreqz.html, scipy.signal.ellip scipy.signal.freqz
">>> from scipy import fftpack
>>> import numpy as np
>>> rng = np.random.default_rng()
>>> min_len = 10007  # prime length is worst case for speed
>>> a = rng.standard_normal(min_len)
>>> b = fftpack.fft(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.next_fast_len.html, scipy.fftpack.fft
">>> fftpack.next_fast_len(min_len)
10125
>>> b = fftpack.fft(a, 10125)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.next_fast_len.html, scipy.fftpack.next_fast_len scipy.fftpack.fft
">>> b = fftpack.fft(a, 16384)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.next_fast_len.html, scipy.fftpack.fft
"        b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]
H(s) = ------ = ------------------------------------------
        a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.invres.html, scipy.interpolate.BSpline
">>> from scipy import signal
>>> vals = [0, 1.3, 1.31, 2.8, 1.25, 2.2, 10.3]
>>> uniq, mult = signal.unique_roots(vals, tol=2e-2, rtype='avg')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.unique_roots.html, scipy.signal.unique_roots
">>> from scipy.signal import tf2sos
>>> tf2sos([1, -3.5, -2], [1, 3, -15, -19, 30], analog=True)
array([[  0. ,   0. ,   1. ,   1. ,   2. , -15. ],
       [  1. ,  -3.5,  -2. ,   1. ,   1. ,  -2. ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.tf2sos.html, scipy.signal.tf2sos
">>> f = lambda x: np.exp(-x**2 / 2)
>>> v = np.sqrt(f(np.sqrt(2))) * np.sqrt(2)
>>> umax = np.sqrt(f(0))
>>> gen = RatioUniforms(f, umax=umax, vmin=-v, vmax=v, random_state=rng)
>>> r = gen.rvs(size=2500)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.RatioUniforms.html, scipy.interpolate.interp1d scipy.stats.sampling.RatioUniforms scipy.stats.sampling.RatioUniforms.rvs
">>> stats.kstest(r, 'norm')[1]
0.250634764150542
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.RatioUniforms.html, scipy.stats.kstest
">>> gen = RatioUniforms(lambda x: np.exp(-x), umax=1, vmin=0,
...                     vmax=2*np.exp(-1), random_state=rng)
>>> r = gen.rvs(1000)
>>> stats.kstest(r, 'expon')[1]
0.21121052054580314
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.RatioUniforms.html, scipy.stats.sampling.RatioUniforms scipy.stats.sampling.RatioUniforms.rvs scipy.stats.kstest
">>> from scipy.fftpack import fft, ifft
>>> import numpy as np
>>> x = np.arange(5)
>>> np.allclose(ifft(fft(x)), x, atol=1e-15)  # within numerical accuracy.
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.ifft.html, scipy.fftpack.ifft scipy.fftpack.fft
">>> import matplotlib.pyplot as plt
>>> from scipy.stats import qmc
>>> dist = qmc.MultinomialQMC(
...     pvals=[0.2, 0.4, 0.4], n_trials=10, engine=qmc.Halton(d=1)
... )
>>> sample = dist.random(64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.MultinomialQMC.html, scipy.stats.qmc.MultinomialQMC scipy.stats.qmc.Halton
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from matplotlib.collections import PatchCollection
>>> from scipy.stats import qmc
>>>
>>> rng = np.random.default_rng()
>>> radius = 0.2
>>> engine = qmc.PoissonDisk(d=2, radius=radius, seed=rng)
>>> sample = engine.random(20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.PoissonDisk.html, scipy.stats.qmc.PoissonDisk
">>> butter = signal.dlti(*signal.butter(3, 0.5))
>>> t, y = signal.dstep(butter, n=25)
>>> plt.step(t, np.squeeze(y))
>>> plt.grid()
>>> plt.xlabel('n [samples]')
>>> plt.ylabel('Amplitude')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dstep.html, scipy.signal.dlti scipy.signal.butter scipy.signal.dstep
">>> z, p, k = iirfilter(4, [1, 10], 1, 60, analog=True, ftype='cheby1',
...                     output='zpk')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqs_zpk.html, scipy.signal.iirfilter
">>> w, h = freqs_zpk(z, p, k, worN=np.logspace(-1, 2, 1000))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.freqs_zpk.html, scipy.signal.freqs_zpk
">>> from scipy.fftpack import ifft, idct
>>> import numpy as np
>>> ifft(np.array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])).real
array([  4.,   3.,   5.,  10.,   5.,   3.])
>>> idct(np.array([ 30.,  -8.,   6.,  -2.]), 1) / 6
array([  4.,   3.,   5.,  10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.idct.html, scipy.fftpack.ifft scipy.fftpack.idct
"        b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)
H(z) = ------ = ------------------------------------------
        a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.residuez.html, scipy.interpolate.BSpline
">>> signal.medfilt2d(x, kernel_size=5)
array([[ 0,  0,  2,  0,  0],
       [ 0,  3,  7,  4,  0],
       [ 2,  8, 12,  9,  4],
       [ 0,  8, 12,  9,  0],
       [ 0,  0, 12,  0,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.medfilt2d.html, scipy.signal.medfilt2d
">>> signal.medfilt2d(x)
array([[ 0,  1,  2,  3,  0],
       [ 1,  6,  7,  8,  4],
       [ 6, 11, 12, 13,  9],
       [11, 16, 17, 18, 14],
       [ 0, 16, 17, 18,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.medfilt2d.html, scipy.signal.medfilt2d
">>> signal.medfilt2d(x, kernel_size=[5,3])
array([[ 0,  1,  2,  3,  0],
       [ 0,  6,  7,  8,  3],
       [ 5, 11, 12, 13,  8],
       [ 5, 11, 12, 13,  8],
       [ 0, 11, 12, 13,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.medfilt2d.html, scipy.signal.medfilt2d
">>> signal.medfilt2d(x, kernel_size=[3,5])
array([[ 0,  0,  2,  1,  0],
       [ 1,  5,  7,  6,  3],
       [ 6, 10, 12, 11,  8],
       [11, 15, 17, 16, 13],
       [ 0, 15, 17, 16,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.medfilt2d.html, scipy.signal.medfilt2d
">>> import numpy as np
>>> from scipy.fftpack import fftn, ifftn
>>> y = (-np.arange(16), 8 - np.arange(16), np.arange(16))
>>> np.allclose(y, fftn(ifftn(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fftn.html, scipy.fftpack.fftn scipy.fftpack.ifftn
">>> class StandardNormal:
...    def pdf(self, x):
...        return np.exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial
">>> rng.rvs()
-1.5244996276336318
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial.rvs
">>> import matplotlib.pyplot as plt
>>> rvs = rng.rvs(10000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)
>>> fx = norm.pdf(x)
>>> plt.plot(x, fx, 'r-', lw=2, label='true distribution')
>>> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')
>>> plt.xlabel('x')
>>> plt.ylabel('PDF(x)')
>>> plt.title('Numerical Inverse Polynomial Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial.rvs
">>> from scipy.special import ndtr
>>> class StandardNormal:
...    def pdf(self, x):
...        return np.exp(-0.5 * x*x)
...    def cdf(self, x):
...        return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial
">>> rng.u_error(sample_size=1000000)  # uses one million samples
UError(max_error=8.785994154436594e-11, mean_absolute_error=2.930890027826552e-11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial.u_error
">>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, u_resolution=1.e-12, random_state=urng)
>>> rng.u_error(sample_size=1000000)
UError(max_error=9.07496300328603e-13, mean_absolute_error=3.5255644517257716e-13)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial scipy.stats.sampling.NumericalInversePolynomial.u_error
">>> rng.ppf(0.975)
1.9599639857012559
>>> norm.ppf(0.975)
1.959963984540054
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial.ppf
">>> import matplotlib.pyplot as plt
>>> u = np.linspace(0.01, 0.99, 1000)
>>> approxppf = rng.ppf(u)
>>> exactppf = norm.ppf(u)
>>> error = np.abs(exactppf - approxppf)
>>> plt.plot(u, error)
>>> plt.xlabel('u')
>>> plt.ylabel('error')
>>> plt.title('Error between exact and approximated PPF (x-error)')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.NumericalInversePolynomial.html, scipy.stats.sampling.NumericalInversePolynomial.ppf
">>> import matplotlib.pyplot as plt
>>> from scipy import signal
>>> b, a = signal.ellip(13, 0.009, 80, 0.05, output='ba')
>>> sos = signal.ellip(13, 0.009, 80, 0.05, output='sos')
>>> x = signal.unit_impulse(700)
>>> y_tf = signal.lfilter(b, a, x)
>>> y_sos = signal.sosfilt(sos, x)
>>> plt.plot(y_tf, 'r', label='TF')
>>> plt.plot(y_sos, 'k', label='SOS')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.sosfilt.html, scipy.signal.ellip scipy.signal.lfilter scipy.signal.sosfilt
">>> f, Pxx_den = signal.welch(x, fs, nperseg=1024)
>>> plt.semilogy(f, Pxx_den)
>>> plt.ylim([0.5e-3, 1])
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('PSD [V**2/Hz]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.welch.html, scipy.signal.welch
">>> f, Pxx_spec = signal.welch(x, fs, 'flattop', 1024, scaling='spectrum')
>>> plt.figure()
>>> plt.semilogy(f, np.sqrt(Pxx_spec))
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('Linear spectrum [V RMS]')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.welch.html, scipy.signal.welch
">>> x[int(N//2):int(N//2)+10] *= 50.
>>> f, Pxx_den = signal.welch(x, fs, nperseg=1024)
>>> f_med, Pxx_den_med = signal.welch(x, fs, nperseg=1024, average='median')
>>> plt.semilogy(f, Pxx_den, label='mean')
>>> plt.semilogy(f_med, Pxx_den_med, label='median')
>>> plt.ylim([0.5e-3, 1])
>>> plt.xlabel('frequency [Hz]')
>>> plt.ylabel('PSD [V**2/Hz]')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.welch.html, scipy.signal.welch
">>> import numpy as np
>>> from scipy.stats import qmc
>>> rng = np.random.default_rng()
>>> sample = qmc.LatinHypercube(d=2, seed=rng).random(50)
>>> qmc.geometric_discrepancy(sample)
0.03708161435687876
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.geometric_discrepancy.html, scipy.stats.qmc.LatinHypercube scipy.stats.qmc.geometric_discrepancy
">>> qmc.geometric_discrepancy(sample, method='mst')
0.1105149978798376
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.geometric_discrepancy.html, scipy.stats.qmc.geometric_discrepancy
">>> import matplotlib.pyplot as plt
>>> from matplotlib.lines import Line2D
>>> from scipy.sparse.csgraph import minimum_spanning_tree
>>> from scipy.spatial.distance import pdist, squareform
>>> dist = pdist(sample)
>>> mst = minimum_spanning_tree(squareform(dist))
>>> edges = np.where(mst.toarray() > 0)
>>> edges = np.asarray(edges).T
>>> min_dist = np.min(dist)
>>> min_idx = np.argwhere(squareform(dist) == min_dist)[0]
>>> fig, ax = plt.subplots(figsize=(10, 5))
>>> _ = ax.set(aspect='equal', xlabel=r'$x_1$', ylabel=r'$x_2$',
...            xlim=[0, 1], ylim=[0, 1])
>>> for edge in edges:
...     ax.plot(sample[edge, 0], sample[edge, 1], c='k')
>>> ax.scatter(sample[:, 0], sample[:, 1])
>>> ax.add_patch(plt.Circle(sample[min_idx[0]], min_dist, color='red', fill=False))
>>> markers = [
...     Line2D([0], [0], marker='o', lw=0, label='Sample points'),
...     Line2D([0], [0], color='k', label='Minimum spanning tree'),
...     Line2D([0], [0], marker='o', lw=0, markerfacecolor='w', markeredgecolor='r',
...            label='Minimum point-to-point distance'),
... ]
>>> ax.legend(handles=markers, loc='center left', bbox_to_anchor=(1, 0.5));
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.geometric_discrepancy.html, scipy.spatial.distance.pdist scipy.sparse.csgraph.minimum_spanning_tree scipy.spatial.distance.squareform
">>> fs = 200.0  # Sample frequency (Hz)
>>> f0 = 60.0  # Frequency to be removed from signal (Hz)
>>> Q = 30.0  # Quality factor
>>> # Design notch filter
>>> b, a = signal.iirnotch(f0, Q, fs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirnotch.html, scipy.signal.iirnotch
">>> # Frequency response
>>> freq, h = signal.freqz(b, a, fs=fs)
>>> # Plot
>>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))
>>> ax[0].plot(freq, 20*np.log10(abs(h)), color='blue')
>>> ax[0].set_title(""Frequency Response"")
>>> ax[0].set_ylabel(""Amplitude (dB)"", color='blue')
>>> ax[0].set_xlim([0, 100])
>>> ax[0].set_ylim([-25, 10])
>>> ax[0].grid(True)
>>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color='green')
>>> ax[1].set_ylabel(""Angle (degrees)"", color='green')
>>> ax[1].set_xlabel(""Frequency (Hz)"")
>>> ax[1].set_xlim([0, 100])
>>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
>>> ax[1].set_ylim([-90, 90])
>>> ax[1].grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirnotch.html, scipy.signal.freqz
">>> from scipy.signal import lp2bp_zpk
>>> z   = [ 5 + 2j ,  5 - 2j ]
>>> p   = [ 7      ,  -16    ]
>>> k   = 0.8
>>> wo  = 0.62
>>> bw  = 15
>>> lp2bp_zpk(z, p, k, wo, bw)
(   array([7.49955815e+01+3.00017676e+01j, 7.49955815e+01-3.00017676e+01j,
           4.41850748e-03-1.76761126e-03j, 4.41850748e-03+1.76761126e-03j]), 
    array([1.04996339e+02+0.j, -1.60167736e-03+0.j,  3.66108003e-03+0.j,
           -2.39998398e+02+0.j]), 0.8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2bp_zpk.html, scipy.signal.lp2bp_zpk
">>> import numpy as np
>>> from scipy.fftpack import dctn, idctn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idctn(dctn(y, norm='ortho'), norm='ortho'))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.idctn.html, scipy.fftpack.idctn scipy.fftpack.dctn
">>> from scipy.signal import lp2hp_zpk
>>> z   = [ -2 + 3j ,  -0.5 - 0.8j ]
>>> p   = [ -1      ,  -4          ]
>>> k   = 10
>>> wo  = 0.6
>>> lp2hp_zpk(z, p, k, wo)
(   array([-0.09230769-0.13846154j, -0.33707865+0.53932584j]),
    array([-0.6 , -0.15]),
    8.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lp2hp_zpk.html, scipy.signal.lp2hp_zpk
">>> fs = 100
>>> bf = 2 * np.pi * np.array([7, 13])
>>> filts = signal.lti(*signal.butter(4, bf, btype='bandpass', analog=True,
...                                   output='zpk'))
>>> filtz = signal.lti(*signal.bilinear_zpk(filts.zeros, filts.poles,
...                                         filts.gain, fs))
>>> wz, hz = signal.freqz_zpk(filtz.zeros, filtz.poles, filtz.gain)
>>> ws, hs = signal.freqs_zpk(filts.zeros, filts.poles, filts.gain,
...                           worN=fs*wz)
>>> plt.semilogx(wz*fs/(2*np.pi), 20*np.log10(np.abs(hz).clip(1e-15)),
...              label=r'$|H_z(e^{j \omega})|$')
>>> plt.semilogx(wz*fs/(2*np.pi), 20*np.log10(np.abs(hs).clip(1e-15)),
...              label=r'$|H(j \omega)|$')
>>> plt.legend()
>>> plt.xlabel('Frequency [Hz]')
>>> plt.ylabel('Magnitude [dB]')
>>> plt.grid(True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.bilinear_zpk.html, scipy.signal.lti scipy.signal.butter scipy.signal.bilinear_zpk scipy.signal.freqz_zpk scipy.signal.freqs_zpk
">>> import numpy as np
>>> from scipy.fftpack import dstn, idstn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idstn(dstn(y, norm='ortho'), norm='ortho'))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.idstn.html, scipy.fftpack.idstn scipy.fftpack.dstn
">>> import numpy as np
>>> from scipy import signal
>>> rng = np.random.default_rng()
>>> img = rng.random((32, 32))
>>> filter = rng.random((8, 8))
>>> method = signal.choose_conv_method(img, filter, mode='same')
>>> method
'fft'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.choose_conv_method.html, scipy.signal.choose_conv_method
">>> img2 = rng.random((32, 32))
>>> filter2 = rng.random((8, 8))
>>> corr2 = signal.correlate(img2, filter2, mode='same', method=method)
>>> conv2 = signal.convolve(img2, filter2, mode='same', method=method)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.choose_conv_method.html, scipy.signal.correlate scipy.signal.convolve
">>> from scipy.stats import energy_distance
>>> energy_distance([0], [2])
2.0000000000000004
>>> energy_distance([0, 8], [0, 8], [3, 1], [2, 2])
1.0000000000000002
>>> energy_distance([0.7, 7.4, 2.4, 6.8], [1.4, 8. ],
...                 [2.1, 4.2, 7.4, 8. ], [7.6, 8.8])
0.88003340976158217
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.energy_distance.html, scipy.stats.energy_distance
">>> import numpy as np
>>> from scipy.fftpack import dctn, idctn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idctn(dctn(y, norm='ortho'), norm='ortho'))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.dctn.html, scipy.fftpack.idctn scipy.fftpack.dctn
">>> import numpy as np
>>> from scipy.fftpack import fft2, ifft2
>>> y = np.mgrid[:5, :5][0]
>>> y
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [2, 2, 2, 2, 2],
       [3, 3, 3, 3, 3],
       [4, 4, 4, 4, 4]])
>>> np.allclose(y, fft2(ifft2(y)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.ifft2.html, scipy.fftpack.fft2 scipy.fftpack.ifft2
">>> import numpy as np
>>> from scipy import signal
>>> rng = np.random.default_rng()
>>> npoints = 1000
>>> noise = rng.standard_normal(npoints)
>>> x = 3 + 2*np.linspace(0, 1, npoints) + noise
>>> (signal.detrend(x) - noise).max()
0.06  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.detrend.html, scipy.signal.detrend
"plot(linspace(f1, f2, m, endpoint=False), abs(zoom_fft(x, [f1, f2], m)))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zoom_fft.html, scipy.signal.zoom_fft
">>> import numpy as np
>>> from scipy.signal import zoom_fft
>>> t = np.linspace(0, 1, 1021)
>>> x = np.cos(2*np.pi*15*t) + np.sin(2*np.pi*17*t)
>>> f1, f2 = 5, 27
>>> X = zoom_fft(x, [f1, f2], len(x), fs=1021)
>>> f = np.linspace(f1, f2, len(x))
>>> import matplotlib.pyplot as plt
>>> plt.plot(f, 20*np.log10(np.abs(X)))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zoom_fft.html, scipy.signal.zoom_fft
">>> import numpy as np
>>> from scipy.fftpack import fft, ifft
>>> x = np.arange(5)
>>> np.allclose(fft(ifft(x)), x, atol=1e-15)  # within numerical accuracy.
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.fft.html, scipy.fftpack.fft scipy.fftpack.ifft
">>> from scipy.stats import qmc
>>> sampler = qmc.Sobol(d=2, scramble=False)
>>> sample = sampler.random_base2(m=3)
>>> sample
array([[0.   , 0.   ],
       [0.5  , 0.5  ],
       [0.75 , 0.25 ],
       [0.25 , 0.75 ],
       [0.375, 0.375],
       [0.875, 0.875],
       [0.625, 0.125],
       [0.125, 0.625]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Sobol.html, scipy.stats.qmc.Sobol
">>> qmc.discrepancy(sample)
0.013882107204860938
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Sobol.html, scipy.stats.qmc.discrepancy
">>> l_bounds = [0, 2]
>>> u_bounds = [10, 5]
>>> qmc.scale(sample_continued, l_bounds, u_bounds)
array([[3.75 , 3.125],
       [8.75 , 4.625],
       [6.25 , 2.375],
       [1.25 , 3.875]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Sobol.html, scipy.stats.qmc.scale
">>> import numpy as np
>>> from scipy.fftpack import dstn, idstn
>>> rng = np.random.default_rng()
>>> y = rng.standard_normal((16, 16))
>>> np.allclose(y, idstn(dstn(y, norm='ortho'), norm='ortho'))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.dstn.html, scipy.fftpack.idstn scipy.fftpack.dstn
">>> from scipy import signal
>>> import numpy as np
>>> z, p, k = signal.ellip(6, 0.087, 90, 1000/(0.5*8000), output='zpk')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2sos.html, scipy.signal.ellip
">>> sos = signal.zpk2sos(z, p, k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2sos.html, scipy.signal.zpk2sos
">>> signal.zpk2sos(z1, p1, 1)
array([[ 1.  ,  1.  ,  0.5 ,  1.  , -0.75,  0.  ],
       [ 1.  ,  1.  ,  0.  ,  1.  , -1.6 ,  0.65]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2sos.html, scipy.signal.zpk2sos
">>> signal.zpk2sos(z1, p1, 1, pairing='keep_odd')
array([[ 1.  ,  1.  ,  0.  ,  1.  , -0.75,  0.  ],
       [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2sos.html, scipy.signal.zpk2sos
">>> signal.zpk2sos(z1, p1, 1, pairing='minimal')
array([[ 0.  ,  1.  ,  1.  ,  0.  ,  1.  , -0.75],
       [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.zpk2sos.html, scipy.signal.zpk2sos
">>> import numpy as np
>>> from scipy.stats import qmc
>>> space = np.array([[1, 3], [2, 6], [3, 2], [4, 5], [5, 1], [6, 4]])
>>> l_bounds = [0.5, 0.5]
>>> u_bounds = [6.5, 6.5]
>>> space = qmc.scale(space, l_bounds, u_bounds, reverse=True)
>>> disc_init = qmc.discrepancy(space[:-1], iterative=True)
>>> disc_init
0.04769081147119336
>>> qmc.update_discrepancy(space[-1], space[:-1], disc_init)
0.008142039609053513
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.update_discrepancy.html, scipy.stats.qmc.scale scipy.stats.qmc.discrepancy scipy.stats.qmc.update_discrepancy
">>> from scipy import stats
>>> stats.false_discovery_control(ps)
array([0.0015    , 0.003     , 0.0095    , 0.035625  , 0.0603    ,
       0.06385714, 0.06385714, 0.0645    , 0.0765    , 0.486     ,
       0.58118182, 0.714875  , 0.75323077, 0.81321429, 1.        ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.false_discovery_control.html, scipy.stats.false_discovery_control
">>> from scipy.stats import qmc
>>> sampler = qmc.Halton(d=2, scramble=False)
>>> sample = sampler.random(n=5)
>>> sample
array([[0.        , 0.        ],
       [0.5       , 0.33333333],
       [0.25      , 0.66666667],
       [0.75      , 0.11111111],
       [0.125     , 0.44444444]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Halton.html, scipy.stats.qmc.Halton scipy.stats.qmc.Halton.random
">>> qmc.discrepancy(sample)
0.088893711419753
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Halton.html, scipy.stats.qmc.discrepancy
">>> _ = sampler.fast_forward(5)
>>> sample_continued = sampler.random(n=5)
>>> sample_continued
array([[0.3125    , 0.37037037],
       [0.8125    , 0.7037037 ],
       [0.1875    , 0.14814815],
       [0.6875    , 0.48148148],
       [0.4375    , 0.81481481]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Halton.html, scipy.stats.qmc.Halton.fast_forward scipy.stats.qmc.Halton.random
">>> l_bounds = [0, 2]
>>> u_bounds = [10, 5]
>>> qmc.scale(sample_continued, l_bounds, u_bounds)
array([[3.125     , 3.11111111],
       [8.125     , 4.11111111],
       [1.875     , 2.44444444],
       [6.875     , 3.44444444],
       [4.375     , 4.44444444]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.Halton.html, scipy.stats.qmc.scale
">>> import numpy as np
>>> from scipy import signal
>>> x = np.arange(25).reshape(5, 5)
>>> domain = np.identity(3)
>>> x
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
>>> signal.order_filter(x, domain, 0)
array([[  0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   1.,   2.,   0.],
       [  0.,   5.,   6.,   7.,   0.],
       [  0.,  10.,  11.,  12.,   0.],
       [  0.,   0.,   0.,   0.,   0.]])
>>> signal.order_filter(x, domain, 2)
array([[  6.,   7.,   8.,   9.,   4.],
       [ 11.,  12.,  13.,  14.,   9.],
       [ 16.,  17.,  18.,  19.,  14.],
       [ 21.,  22.,  23.,  24.,  19.],
       [ 20.,  21.,  22.,  23.,  24.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.order_filter.html, scipy.signal.order_filter
"P = numpy.hstack([numpy.eye(proj.shape[0]), proj])[:,numpy.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.reconstruct_interp_matrix.html, scipy.sparse.hstack
">>> from scipy.fftpack import fft, dct
>>> import numpy as np
>>> fft(np.array([4., 3., 5., 10., 5., 3.])).real
array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])
>>> dct(np.array([4., 3., 5., 10.]), 1)
array([ 30.,  -8.,   6.,  -2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.dct.html, scipy.fftpack.fft scipy.fftpack.dct
">>> import numpy as np
>>> from scipy.stats import mstats
>>> a = np.array([[6, 8, 3, 0],
...               [3, 9, 1, 2],
...               [8, 7, 8, 2],
...               [5, 6, 0, 2],
...               [4, 5, 5, 2]])
...
...
>>> mstats.tmax(a, 4)
masked_array(data=[4, --, 3, 2],
             mask=[False,  True, False, False],
       fill_value=999999)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.tmax.html, scipy.stats.mstats.tmax
">>> from scipy import stats
>>> a = [1, 2, 3, 4, 5, 6, 7]
>>> b = [8, 9, 10, 11, 12, 13, 14]
>>> stats.mstats.compare_medians_ms(a, b, axis=None)
1.0693225866553746e-05
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.compare_medians_ms.html, scipy.stats.mstats.compare_medians_ms
">>> import numpy as np
>>> rng = np.random.default_rng()
>>> x = rng.random(size=(3, 7))
>>> y = rng.random(size=(3, 8))
>>> stats.mstats.compare_medians_ms(x, y, axis=1)
array([0.36908985, 0.36092538, 0.2765313 ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.compare_medians_ms.html, scipy.stats.mstats.compare_medians_ms
">>> from scipy import stats
>>> intra_slope, inter_slope = stats.mstats.sen_seasonal_slopes(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.sen_seasonal_slopes.html, scipy.stats.mstats.sen_seasonal_slopes
">>> from scipy.stats import gmean
>>> gmean([1, 4])
2.0
>>> gmean([1, 2, 3, 4, 5, 6, 7])
3.3800151591412964
>>> gmean([1, 4, 7], weights=[3, 1, 3])
2.80668351922014
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.gmean.html, scipy.stats.gmean
">>> winsorize(a, limits=[0.1, 0.2])
masked_array(data=[8, 4, 8, 8, 5, 3, 7, 2, 2, 6],
             mask=False,
       fill_value=999999)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.winsorize.html, scipy.stats.mstats.winsorize
">>> graph = [
... [0, 1, 1, 0, 0],
... [0, 0, 1, 0, 0],
... [0, 0, 0, 0, 0],
... [0, 0, 0, 0, 1],
... [0, 0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    1
  (1, 2)    1
  (3, 4)    1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.connected_components.html, scipy.sparse.csr_matrix
">>> n_components, labels = connected_components(csgraph=graph, directed=False, return_labels=True)
>>> n_components
2
>>> labels
array([0, 0, 0, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.connected_components.html, scipy.sparse.csgraph.connected_components
">>> import numpy as np
>>> from scipy.stats.mstats import variation
>>> a = np.array([2,8,4])
>>> variation(a)
0.5345224838248487
>>> b = np.array([2,8,3,4])
>>> c = np.ma.masked_array(b, mask=[0,0,1,0])
>>> variation(c)
0.5345224838248487
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.variation.html, scipy.stats.mstats.variation
">>> import scipy.misc
>>> ascent = scipy.misc.ascent()
>>> ascent.shape
(512, 512)
>>> ascent.max()
255
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.ascent.html, scipy.misc.ascent
">>> import numpy as np
>>> from scipy.stats.mstats import hdquantiles
>>>
>>> # Sample data
>>> data = np.array([1.2, 2.5, 3.7, 4.0, 5.1, 6.3, 7.0, 8.2, 9.4])
>>>
>>> # Probabilities at which to compute quantiles
>>> probabilities = [0.25, 0.5, 0.75]
>>>
>>> # Compute Harrell-Davis quantile estimates
>>> quantile_estimates = hdquantiles(data, prob=probabilities)
>>>
>>> # Display the quantile estimates
>>> for i, quantile in enumerate(probabilities):
...     print(f""{int(quantile * 100)}th percentile: {quantile_estimates[i]}"")
25th percentile: 3.1505820231763066 # may vary
50th percentile: 5.194344084883956
75th percentile: 7.430626414674935
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.hdquantiles.html, scipy.stats.mstats.hdquantiles
">>> from scipy.stats import zmap
>>> a = [0.5, 2.0, 2.5, 3]
>>> b = [0, 1, 2, 3, 4]
>>> zmap(a, b)
array([-1.06066017,  0.        ,  0.35355339,  0.70710678])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.zmap.html, scipy.stats.zmap
"numpy.hstack([B, numpy.dot(B, proj)])[:,numpy.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.reconstruct_skel_matrix.html, scipy.sparse.hstack
">>> import numpy as np
>>> from scipy.stats import mstats
>>> a = np.array([[6, 8, 3, 0],
...               [3, 9, 1, 2],
...               [8, 7, 8, 2],
...               [5, 6, 0, 2],
...               [4, 5, 5, 2]])
...
...
>>> mstats.tmean(a, (2,5))
3.3
>>> mstats.tmean(a, (2,5), axis=0)
masked_array(data=[4.0, 5.0, 4.0, 2.0],
             mask=[False, False, False, False],
       fill_value=1e+20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.tmean.html, scipy.stats.mstats.tmean
">>> from scipy.misc import derivative
>>> def f(x):
...     return x**3 + x**2
>>> derivative(f, 1.0, dx=1e-6)
4.9999999999217337
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.derivative.html, scipy.interpolate.interp1d scipy.misc.derivative
">>> kruskal(a, b, c)
KruskalResult(statistic=7.113812154696133, pvalue=0.028526948491942164)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.kruskal.html, scipy.stats.mstats.kruskal
">>> import numpy as np
>>> from scipy.stats import mstats
>>> a = np.array([[6, 8, 3, 0],
...               [3, 2, 1, 2],
...               [8, 1, 8, 2],
...               [5, 3, 0, 2],
...               [4, 7, 5, 2]])
...
>>> mstats.tmin(a, 5)
masked_array(data=[5, 7, 5, --],
             mask=[False, False, False,  True],
       fill_value=999999)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.tmin.html, scipy.stats.mstats.tmin
">>> a = np.arange(12).reshape(2, 6)
>>> a
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11]])
>>> m0, m1 = margins(a)
>>> m0
array([[15],
       [51]])
>>> m1
array([[ 6,  8, 10, 12, 14, 16]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.margins.html, scipy.stats.contingency.margins
">>> b = np.arange(24).reshape(2,3,4)
>>> m0, m1, m2 = margins(b)
>>> m0
array([[[ 66]],
       [[210]]])
>>> m1
array([[[ 60],
        [ 92],
        [124]]])
>>> m2
array([[[60, 66, 72, 78]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.margins.html, scipy.stats.contingency.margins
">>> from scipy.sparse import csr_matrix
>>> from scipy.sparse.csgraph import breadth_first_tree
>>> X = csr_matrix([[0, 8, 0, 3],
...                 [0, 0, 2, 5],
...                 [0, 0, 0, 6],
...                 [0, 0, 0, 0]])
>>> Tcsr = breadth_first_tree(X, 0, directed=False)
>>> Tcsr.toarray().astype(int)
array([[0, 8, 0, 3],
       [0, 0, 2, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.breadth_first_tree.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.breadth_first_tree
"numpy.hstack([A[:,idx[:k]],
                            numpy.dot(A[:,idx[:k]], proj)]
                        )[:,numpy.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.interp_decomp.html, scipy.sparse.hstack
"numpy.dot(A[:,idx[:k]],
                    numpy.hstack([numpy.eye(k), proj])
                  )[:,np.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.interp_decomp.html, scipy.sparse.hstack
"P = numpy.hstack([numpy.eye(k), proj])[:,np.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.interp_decomp.html, scipy.sparse.hstack
"k, idx, proj = interp_decomp(A, eps_or_k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.interp_decomp.html, scipy.linalg.interpolative.interp_decomp
"idx, proj = interp_decomp(A, eps_or_k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.interp_decomp.html, scipy.linalg.interpolative.interp_decomp
">>> import scipy.misc
>>> face = scipy.misc.face()
>>> face.shape
(768, 1024, 3)
>>> face.max()
255
>>> face.dtype
dtype('uint8')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.face.html, scipy.misc.face
">>> from scipy.stats import chisquare
>>> chisquare(f_obs=f_obs, f_exp=f_exp)
Power_divergenceResult(statistic=228.23515947653874, pvalue=3.3295585338846486e-49)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12])
Power_divergenceResult(statistic=2.0, pvalue=0.84914503608460956)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], f_exp=[16, 16, 16, 16, 16, 8])
Power_divergenceResult(statistic=3.5, pvalue=0.62338762774958223)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T
>>> obs.shape
(6, 2)
>>> chisquare(obs)
Power_divergenceResult(statistic=array([2.        , 6.66666667]), pvalue=array([0.84914504, 0.24663415]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare(obs, axis=None)
Power_divergenceResult(statistic=23.31034482758621, pvalue=0.015975692534127565)
>>> chisquare(obs.ravel())
Power_divergenceResult(statistic=23.310344827586206, pvalue=0.01597569253412758)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], ddof=1)
Power_divergenceResult(statistic=2.0, pvalue=0.7357588823428847)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], ddof=[0,1,2])
Power_divergenceResult(statistic=2.0, pvalue=array([0.84914504, 0.73575888, 0.5724067 ]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12],
...           f_exp=[[16, 16, 16, 16, 16, 8], [8, 20, 20, 16, 12, 12]],
...           axis=1)
Power_divergenceResult(statistic=array([3.5 , 9.25]), pvalue=array([0.62338763, 0.09949846]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.chisquare.html, scipy.stats.chisquare
"U, S, V = id_to_svd(B, idx, proj)
A = numpy.dot(U, numpy.dot(numpy.diag(S), V.conj().T))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.id_to_svd.html, scipy.linalg.interpolative.id_to_svd
"numpy.hstack([B, numpy.dot(B, proj)])[:,numpy.argsort(idx)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.interpolative.reconstruct_matrix_from_id.html, scipy.sparse.hstack
">>> import numpy as np
>>> from scipy.sparse.linalg import LinearOperator
>>> def mv(v):
...     return np.array([2*v[0], 3*v[1]])
...
>>> A = LinearOperator((2,2), matvec=mv)
>>> A
<2x2 _CustomLinearOperator with dtype=float64>
>>> A.matvec(np.ones(2))
array([ 2.,  3.])
>>> A * np.ones(2)
array([ 2.,  3.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LinearOperator.html, scipy.sparse.linalg.LinearOperator scipy.sparse.linalg.LinearOperator.matvec
">>> import numpy as np
>>> from scipy.sparse.linalg import aslinearoperator
>>> M = np.array([[1,2,3],[4,5,6]], dtype=np.int32)
>>> aslinearoperator(M)
<2x3 MatrixLinearOperator with dtype=int32>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.aslinearoperator.html, scipy.sparse.linalg.aslinearoperator
">>> from scipy.stats.mstats import argstoarray
>>> argstoarray([1, 2, 3], [4, 5, 6])
masked_array(
 data=[[1.0, 2.0, 3.0],
       [4.0, 5.0, 6.0]],
 mask=[[False, False, False],
       [False, False, False]],
 fill_value=1e+20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.argstoarray.html, scipy.stats.mstats.argstoarray
">>> argstoarray([1, 3], [4, 5, 6])
masked_array(
 data=[[1.0, 3.0, --],
       [4.0, 5.0, 6.0]],
 mask=[[False, False,  True],
       [False, False, False]],
 fill_value=1e+20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.argstoarray.html, scipy.stats.mstats.argstoarray
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [0, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.construct_dist_matrix.html, scipy.sparse.csr_matrix
">>> construct_dist_matrix(graph=graph, predecessors=pred, directed=False)
array([[0., 1., 2., 5.],
       [1., 0., 3., 1.],
       [2., 3., 0., 3.],
       [2., 1., 3., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.construct_dist_matrix.html, scipy.sparse.csgraph.construct_dist_matrix
">>> from scipy.misc import central_diff_weights
>>> def f(x):
...     return 2 * x**2 + 3
>>> x = 3.0 # derivative point
>>> h = 0.1 # differential step
>>> Np = 3 # point number for central derivative
>>> weights = central_diff_weights(Np) # weights for first derivative
>>> vals = [f(x + (i - Np/2) * h) for i in range(Np)]
>>> sum(w * v for (w, v) in zip(weights, vals))/h
11.79999999999998
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.central_diff_weights.html, scipy.interpolate.interp1d scipy.misc.central_diff_weights
">>> from scipy.stats import mstats
>>> mstats.find_repeats([2, 1, 2, 3, 2, 2, 5])
(array([2.]), array([4]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.find_repeats.html, scipy.stats.mstats.find_repeats
">>> mstats.find_repeats([[10, 20, 1, 2], [5, 5, 4, 4]])
(array([4., 5.]), array([2, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.find_repeats.html, scipy.stats.mstats.find_repeats
">>> import numpy as np
>>> from scipy.stats.mstats import mquantiles
>>> a = np.array([6., 47., 49., 15., 42., 41., 7., 39., 43., 40., 36.])
>>> mquantiles(a)
array([ 19.2,  40. ,  42.8])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.mquantiles.html, scipy.stats.mstats.mquantiles
">>> data = np.array([[   6.,    7.,    1.],
...                  [  47.,   15.,    2.],
...                  [  49.,   36.,    3.],
...                  [  15.,   39.,    4.],
...                  [  42.,   40., -999.],
...                  [  41.,   41., -999.],
...                  [   7., -999., -999.],
...                  [  39., -999., -999.],
...                  [  43., -999., -999.],
...                  [  40., -999., -999.],
...                  [  36., -999., -999.]])
>>> print(mquantiles(data, axis=0, limit=(0, 50)))
[[19.2  14.6   1.45]
 [40.   37.5   2.5 ]
 [42.8  40.05  3.55]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.mquantiles.html, scipy.stats.mstats.mquantiles
">>> data[:, 2] = -999.
>>> print(mquantiles(data, axis=0, limit=(0, 50)))
[[19.200000000000003 14.6 --]
 [40.0 37.5 --]
 [42.800000000000004 40.05 --]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.mquantiles.html, scipy.stats.mstats.mquantiles
">>> from scipy.stats.mstats import brunnermunzel
>>> import numpy as np
>>> x1 = [1, 2, np.nan, np.nan, 1, 1, 1, 1, 1, 1, 2, 4, 1, 1]
>>> x2 = [3, 3, 4, 3, 1, 2, 3, 1, 1, 5, 4]
>>> brunnermunzel(x1, x2)
BrunnerMunzelResult(statistic=1.4723186918922935, pvalue=0.15479415300426624)  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.brunnermunzel.html, scipy.stats.mstats.brunnermunzel
">>> from scipy.stats import mstats
>>> import numpy as np
>>> z = [0, 0, 0, 2, 2, 2, 3, 3, 4, 5, 6]
>>> mstats.count_tied_groups(z)
{2: 1, 3: 2}
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.count_tied_groups.html, scipy.stats.mstats.count_tied_groups
">>> z = np.ma.array([0, 0, 1, 2, 2, 2, 3, 3, 4, 5, 6])
>>> mstats.count_tied_groups(z)
{2: 2, 3: 1}
>>> z[[1,-1]] = np.ma.masked
>>> mstats.count_tied_groups(z, use_missing=True)
{2: 2, 3: 1}
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.count_tied_groups.html, scipy.stats.mstats.count_tied_groups
">>> from scipy.misc import electrocardiogram
>>> ecg = electrocardiogram()
>>> ecg
array([-0.245, -0.215, -0.185, ..., -0.405, -0.395, -0.385])
>>> ecg.shape, ecg.mean(), ecg.std()
((108000,), -0.16510875, 0.5992473991177294)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html, scipy.misc.electrocardiogram
">>> from scipy.signal import welch
>>> f, Pxx = welch(ecg, fs=fs, nperseg=2048, scaling=""spectrum"")
>>> plt.semilogy(f, Pxx)
>>> plt.xlabel(""Frequency in Hz"")
>>> plt.ylabel(""Power spectrum of the ECG in mV**2"")
>>> plt.xlim(f[[0, -1]])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.electrocardiogram.html, scipy.signal.welch
">>> from scipy.stats import hmean
>>> hmean([1, 4])
1.6000000000000001
>>> hmean([1, 2, 3, 4, 5, 6, 7])
2.6997245179063363
>>> hmean([1, 4, 7], weights=[3, 1, 3])
1.9029126213592233
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.hmean.html, scipy.stats.hmean
">>> import numpy as np
>>> import scipy.linalg.blas as bla
>>> rng = np.random.default_rng()
>>> a = rng.random((10,15))
>>> b = np.asfortranarray(a)  # Change the memory layout order
>>> bla.find_best_blas_type((a,))
('d', dtype('float64'), False)
>>> bla.find_best_blas_type((a*1j,))
('z', dtype('complex128'), False)
>>> bla.find_best_blas_type((b,))
('d', dtype('float64'), True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.find_best_blas_type.html, scipy.linalg.blas.find_best_blas_type
">>> kruskal(a, b, c)
KruskalResult(statistic=7.113812154696133, pvalue=0.028526948491942164)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.kruskalwallis.html, scipy.stats.mstats.kruskal
">>> import numpy as np
>>> from scipy import stats
>>> from scipy.stats import mstats
>>> m_arr = np.ma.array([1, 1, 0, 0, 0, 0], mask=[0, 0, 1, 1, 1, 0])
>>> mstats.mode(m_arr)  # note that most zeros are masked
ModeResult(mode=array([1.]), count=array([2.]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.mode.html, scipy.stats.mstats.mode
">>> trima(a, limits=(2, 8), inclusive=(True, False))
masked_array(data=[--, --, 2, 3, 4, 5, 6, 7, --, --],
             mask=[ True,  True, False, False, False, False, False, False,
                    True,  True],
       fill_value=999999)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.trima.html, scipy.stats.mstats.trima
">>> graph = [
... [0, 1 ,2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.bellman_ford.html, scipy.sparse.csr_matrix
">>> dist_matrix, predecessors = bellman_ford(csgraph=graph, directed=False, indices=0, return_predecessors=True)
>>> dist_matrix
array([0., 1., 2., 2.])
>>> predecessors
array([-9999,     0,     0,     1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.bellman_ford.html, scipy.sparse.csgraph.bellman_ford
">>> from scipy.stats.mstats import trim
>>> z = [ 1, 2, 3, 4, 5, 6, 7, 8, 9,10]
>>> print(trim(z,(3,8)))
[-- -- 3 4 5 6 7 8 -- --]
>>> print(trim(z,(0.1,0.2),relative=True))
[-- 2 3 4 5 6 7 8 -- --]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.trim.html, scipy.stats.mstats.trim
">>> import numpy as np
>>> from scipy.stats.mstats import describe
>>> ma = np.ma.array(range(6), mask=[0, 0, 0, 1, 1, 1])
>>> describe(ma)
DescribeResult(nobs=3, minmax=(masked_array(data=0,
             mask=False,
       fill_value=999999), masked_array(data=2,
             mask=False,
       fill_value=999999)), mean=1.0, variance=0.6666666666666666,
       skewness=masked_array(data=0., mask=False, fill_value=1e+20),
        kurtosis=-1.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.describe.html, scipy.stats.mstats.describe
">>> import numpy as np
>>> from scipy import stats
>>> from scipy.stats import mstats
>>> mstats.pearsonr([1, 2, 3, 4, 5], [10, 9, 2.5, 6, 4])
(-0.7426106572325057, 0.1505558088534455)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.pearsonr.html, scipy.stats.mstats.pearsonr
">>> s = 0.5
>>> x = stats.norm.rvs(size=500)
>>> e = stats.norm.rvs(scale=s, size=500)
>>> y = x + e
>>> mstats.pearsonr(x, y)
(0.9029601878969703, 8.428978827629898e-185) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.pearsonr.html, scipy.stats.mstats.pearsonr
">>> y = np.abs(x)
>>> mstats.pearsonr(x, y)
(-0.016172891856853524, 0.7182823678751942) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.pearsonr.html, scipy.stats.mstats.pearsonr
">>> y = np.where(x < 0, x, 0)
>>> mstats.pearsonr(x, y)
(0.8537091583771509, 3.183461621422181e-143) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.pearsonr.html, scipy.stats.mstats.pearsonr
">>> import numpy as np
>>> from scipy import stats
>>> a = np.arange(20).reshape(5,4)
>>> print(stats.mstats.sem(a))
[2.8284271247461903 2.8284271247461903 2.8284271247461903
 2.8284271247461903]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.sem.html, scipy.stats.mstats.sem
">>> print(stats.mstats.sem(a, axis=None, ddof=0))
1.2893796958227628
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.sem.html, scipy.stats.mstats.sem
">>> import numpy as np
>>> a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091,
...                0.1954,  0.6307,  0.6599,  0.1065,  0.0508])
>>> from scipy import stats
>>> stats.zscore(a)
array([ 1.1273, -1.247 , -0.0552,  1.0923,  1.1664, -0.8559,  0.5786,
        0.6748, -1.1488, -1.3324])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.zscore.html, scipy.stats.zscore
">>> b = np.array([[ 0.3148,  0.0478,  0.6243,  0.4608],
...               [ 0.7149,  0.0775,  0.6072,  0.9656],
...               [ 0.6341,  0.1403,  0.9759,  0.4064],
...               [ 0.5918,  0.6948,  0.904 ,  0.3721],
...               [ 0.0921,  0.2481,  0.1188,  0.1366]])
>>> stats.zscore(b, axis=1, ddof=1)
array([[-0.19264823, -1.28415119,  1.07259584,  0.40420358],
       [ 0.33048416, -1.37380874,  0.04251374,  1.00081084],
       [ 0.26796377, -1.12598418,  1.23283094, -0.37481053],
       [-0.22095197,  0.24468594,  1.19042819, -1.21416216],
       [-0.82780366,  1.4457416 , -0.43867764, -0.1792603 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.zscore.html, scipy.stats.zscore
">>> x = np.array([[25.11, 30.10, np.nan, 32.02, 43.15],
...               [14.95, 16.06, 121.25, 94.35, 29.81]])
>>> stats.zscore(x, axis=1, nan_policy='omit')
array([[-1.13490897, -0.37830299,         nan, -0.08718406,  1.60039602],
       [-0.91611681, -0.89090508,  1.4983032 ,  0.88731639, -0.5785977 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mstats.zscore.html, scipy.stats.zscore
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.johnson.html, scipy.sparse.csr_matrix
">>> dist_matrix, predecessors = johnson(csgraph=graph, directed=False, indices=0, return_predecessors=True)
>>> dist_matrix
array([0., 1., 2., 2.])
>>> predecessors
array([-9999,     0,     0,     1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.johnson.html, scipy.sparse.csgraph.johnson
">>> graph = csr_matrix([[0, 0, 1], [1, 1, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_bipartite_matching.html, scipy.sparse.csr_matrix
">>> print(maximum_bipartite_matching(graph, perm_type='column'))
[2 0]
>>> print(maximum_bipartite_matching(graph, perm_type='row'))
[ 1 -1  0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_bipartite_matching.html, scipy.sparse.csgraph.maximum_bipartite_matching
">>> data = [0, 0, 0]
>>> indices = [2, 0, 1]
>>> indptr = [0, 1, 3]
>>> graph = csr_matrix((data, indices, indptr))
>>> print(maximum_bipartite_matching(graph, perm_type='column'))
[2 0]
>>> print(maximum_bipartite_matching(graph, perm_type='row'))
[ 1 -1  0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_bipartite_matching
">>> graph = csr_matrix((2, 0))
>>> print(maximum_bipartite_matching(graph, perm_type='column'))
[-1 -1]
>>> print(maximum_bipartite_matching(graph, perm_type='row'))
[]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_bipartite_matching
">>> a = [[0, 1, 2, 0], [1, 0, 0, 1], [2, 0, 0, 3], [0, 1, 3, 0]]
>>> graph = csr_matrix(a)
>>> perm = maximum_bipartite_matching(graph, perm_type='row')
>>> print(graph[perm].toarray())
[[1 0 0 1]
 [0 1 2 0]
 [0 1 3 0]
 [2 0 0 3]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_bipartite_matching
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.floyd_warshall.html, scipy.sparse.csr_matrix
">>> dist_matrix, predecessors = floyd_warshall(csgraph=graph, directed=False, return_predecessors=True)
>>> dist_matrix
array([[0., 1., 2., 2.],
       [1., 0., 3., 1.],
       [2., 3., 0., 3.],
       [2., 1., 3., 0.]])
>>> predecessors
array([[-9999,     0,     0,     1],
       [    1, -9999,     0,     1],
       [    2,     0, -9999,     2],
       [    1,     3,     3, -9999]], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.floyd_warshall.html, scipy.sparse.csgraph.floyd_warshall
">>> csgraph_from_dense(graph)
<4x4 sparse matrix of type ''
    with 4 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_from_dense.html, scipy.sparse.csgraph.csgraph_from_dense
">>> csgraph_from_masked(graph_masked)
<4x4 sparse matrix of type ''
    with 4 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_from_masked.html, scipy.sparse.csgraph.csgraph_from_masked
">>> graph = csr_matrix( [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [0, 0, 0, 3],
... [0, 0, 0, 0]
... ])
>>> graph
<4x4 sparse matrix of type ''
    with 4 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_masked.html, scipy.sparse.csr_matrix
">>> csgraph_to_masked(graph)
masked_array(
  data=[[ --, 1.0, 2.0,  --],
        [ --,  --,  --, 1.0],
        [ --,  --,  --, 3.0],
        [ --,  --,  --,  --]],
  mask=[[ True, False, False,  True],
        [ True,  True,  True, False],
        [ True,  True,  True, False],
        [ True,  True,  True,  True]],
  fill_value=1e+20)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_masked.html, scipy.sparse.csgraph.csgraph_to_masked
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.shortest_path.html, scipy.sparse.csr_matrix
">>> dist_matrix, predecessors = shortest_path(csgraph=graph, directed=False, indices=0, return_predecessors=True)
>>> dist_matrix
array([0., 1., 2., 2.])
>>> predecessors
array([-9999,     0,     0,     1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.shortest_path.html, scipy.sparse.csgraph.shortest_path
">>> import numpy as np
>>> from scipy.sparse import csr_matrix
>>> from scipy.sparse.csgraph import maximum_flow
>>> graph = csr_matrix([[0, 5], [0, 0]])
>>> maximum_flow(graph, 0, 1).flow_value
5
>>> maximum_flow(graph, 0, 1, method='edmonds_karp').flow_value
5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_flow.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_flow
">>> graph = csr_matrix([[0, 5, 0], [0, 0, 3], [0, 0, 0]])
>>> maximum_flow(graph, 0, 2).flow_value
3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_flow.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_flow
">>> graph = csr_matrix([[0, 16, 13,  0,  0,  0],
...                     [0,  0, 10, 12,  0,  0],
...                     [0,  4,  0,  0, 14,  0],
...                     [0,  0,  9,  0,  0, 20],
...                     [0,  0,  0,  7,  0,  4],
...                     [0,  0,  0,  0,  0,  0]])
>>> maximum_flow(graph, 0, 5).flow_value
23
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_flow.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_flow
">>> graph = csr_matrix([[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 1, 0]])
>>> print(graph.toarray())
[[0 1 0 1]
 [1 0 1 0]
 [0 1 1 0]]
>>> i, j = graph.shape
>>> n = graph.nnz
>>> indptr = np.concatenate([[0],
...                          graph.indptr + i,
...                          np.arange(n + i + 1, n + i + j + 1),
...                          [n + i + j]])
>>> indices = np.concatenate([np.arange(1, i + 1),
...                           graph.indices + i + 1,
...                           np.repeat(i + j + 1, j)])
>>> data = np.ones(n + i + j, dtype=int)
>>>
>>> graph_flow = csr_matrix((data, indices, indptr))
>>> print(graph_flow.toarray())
[[0 1 1 1 0 0 0 0 0]
 [0 0 0 0 0 1 0 1 0]
 [0 0 0 0 1 0 1 0 0]
 [0 0 0 0 0 1 1 0 0]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_flow.html, scipy.sparse.csr_matrix scipy.sparse.csr_matrix.toarray scipy.sparse.csr_matrix.toarray
">>> result = maximum_flow(graph_flow, 0, i+j+1, method='dinic')
>>> matching = result.flow[1:i+1, i+1:i+j+1]
>>> print(matching.toarray())
[[0 1 0 0]
 [1 0 0 0]
 [0 0 1 0]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.maximum_flow.html, scipy.sparse.csgraph.maximum_flow
">>> from scipy.sparse import csr_matrix
>>> from scipy.sparse.csgraph import minimum_spanning_tree
>>> X = csr_matrix([[0, 8, 0, 3],
...                 [0, 0, 2, 5],
...                 [0, 0, 0, 6],
...                 [0, 0, 0, 0]])
>>> Tcsr = minimum_spanning_tree(X)
>>> Tcsr.toarray().astype(int)
array([[0, 0, 0, 3],
       [0, 0, 2, 5],
       [0, 0, 0, 0],
       [0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.minimum_spanning_tree.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.minimum_spanning_tree
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [0, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.reconstruct_path.html, scipy.sparse.csr_matrix
">>> cstree = reconstruct_path(csgraph=graph, predecessors=pred, directed=False)
>>> cstree.todense()
matrix([[0., 1., 2., 0.],
        [0., 0., 0., 1.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.reconstruct_path.html, scipy.sparse.csgraph.reconstruct_path
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [0, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.dijkstra.html, scipy.sparse.csr_matrix
">>> dist_matrix, predecessors = dijkstra(csgraph=graph, directed=False, indices=0, return_predecessors=True)
>>> dist_matrix
array([0., 1., 2., 2.])
>>> predecessors
array([-9999,     0,     0,     1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.dijkstra.html, scipy.sparse.csgraph.dijkstra
">>> graph = [
... [0, 1, 2, 0],
... [1, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 1, 3, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 0)    1
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
  (3, 1)    1
  (3, 2)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.structural_rank.html, scipy.sparse.csr_matrix
">>> structural_rank(graph)
4
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.structural_rank.html, scipy.sparse.csgraph.structural_rank
">>> csgraph_masked_from_dense(graph)
masked_array(
  data=[[--,  1,  2, --],
        [--, --, --,  1],
        [--, --, --,  3],
        [--, --, --, --]],
  mask=[[ True, False, False,  True],
        [ True,  True,  True, False],
        [ True,  True,  True, False],
        [ True,  True,  True,  True]],
  fill_value=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_masked_from_dense.html, scipy.sparse.csgraph.csgraph_masked_from_dense
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.reverse_cuthill_mckee.html, scipy.sparse.csr_matrix
">>> reverse_cuthill_mckee(graph)
array([3, 2, 1, 0], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.reverse_cuthill_mckee.html, scipy.sparse.csgraph.reverse_cuthill_mckee
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.depth_first_order.html, scipy.sparse.csr_matrix
">>> depth_first_order(graph,0)
(array([0, 1, 3, 2], dtype=int32), array([-9999,     0,     0,     1], dtype=int32))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.depth_first_order.html, scipy.sparse.csgraph.depth_first_order
">>> from scipy.sparse import csr_matrix, csgraph
>>> import numpy as np
>>> data = np.array([2, 3])
>>> indices = np.array([1, 1])
>>> indptr = np.array([0, 2, 2])
>>> M = csr_matrix((data, indices, indptr), shape=(2, 2))
>>> M.toarray()
array([[0, 5],
       [0, 0]])
>>> csgraph.csgraph_to_dense(M)
array([[0., 2.],
       [0., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_dense.html, scipy.sparse.csr_matrix scipy.sparse.csr_matrix.toarray scipy.sparse.csgraph.csgraph_to_dense
">>> from scipy.sparse import csr_matrix, csgraph
>>> data = np.array([0.0])
>>> indices = np.array([1])
>>> indptr = np.array([0, 1, 1])
>>> M = csr_matrix((data, indices, indptr), shape=(2, 2))
>>> M.toarray()
array([[0, 0],
       [0, 0]])
>>> csgraph.csgraph_to_dense(M, np.inf)
array([[inf,  0.],
       [inf, inf]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_dense.html, scipy.sparse.csr_matrix scipy.sparse.csr_matrix.toarray scipy.sparse.csgraph.csgraph_to_dense
">>> graph = csr_matrix( [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [0, 0, 0, 3],
... [0, 0, 0, 0]
... ])
>>> graph
<4x4 sparse matrix of type ''
    with 4 stored elements in Compressed Sparse Row format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_dense.html, scipy.sparse.csr_matrix
">>> csgraph_to_dense(graph)
array([[0., 1., 2., 0.],
       [0., 0., 0., 1.],
       [0., 0., 0., 3.],
       [0., 0., 0., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.csgraph_to_dense.html, scipy.sparse.csgraph.csgraph_to_dense
">>> csgraph.laplacian(G)
array([[ 0,  0,  0,  0],
       [ 0,  5, -2, -3],
       [ 0, -2,  8, -6],
       [ 0, -3, -6,  9]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> L_in_degree = csgraph.laplacian(G)
>>> L_in_degree
array([[ 9, -1, -2],
       [-3,  8, -5],
       [-6, -7,  7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> L_out_degree = csgraph.laplacian(G, use_out_degree=True)
>>> L_out_degree
array([[ 3, -1, -2],
       [-3,  8, -5],
       [-6, -7, 13]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> csgraph.laplacian(G, symmetrized=True)
array([[ 12,  -4,  -8],
       [ -4,  16, -12],
       [ -8, -12,  20]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> csgraph.laplacian(G + G.T)
array([[ 12,  -4,  -8],
       [ -4,  16, -12],
       [ -8, -12,  20]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> G = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])
>>> L, d = csgraph.laplacian(G, return_diag=True)
>>> L
array([[ 2, -1, -1],
       [-1,  2, -1],
       [-1, -1,  2]])
>>> d
array([2, 2, 2])
>>> scaling = np.sqrt(d)
>>> scaling
array([1.41421356, 1.41421356, 1.41421356])
>>> (1/scaling)*L*(1/scaling)
array([[ 1. , -0.5, -0.5],
       [-0.5,  1. , -0.5],
       [-0.5, -0.5,  1. ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> L, d = csgraph.laplacian(G, return_diag=True, normed=True)
>>> L
array([[ 1. , -0.5, -0.5],
       [-0.5,  1. , -0.5],
       [-0.5, -0.5,  1. ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> G = np.array([[0, 0, 0], [0, 0, 1], [0, 1, 0]])
>>> G
array([[0, 0, 0],
       [0, 0, 1],
       [0, 1, 0]])
>>> L, d = csgraph.laplacian(G, return_diag=True, normed=True)
>>> L
array([[ 0., -0., -0.],
       [-0.,  1., -1.],
       [-0., -1.,  1.]])
>>> d
array([1., 1., 1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> G = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]]).astype(np.float32)
>>> G
array([[0., 1., 1.],
       [1., 0., 1.],
       [1., 1., 0.]], dtype=float32)
>>> csgraph.laplacian(G)
array([[ 2., -1., -1.],
       [-1.,  2., -1.],
       [-1., -1.,  2.]], dtype=float32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> L = csgraph.laplacian(G, form=""lo"")
>>> L
<3x3 _CustomLinearOperator with dtype=float32>
>>> L(np.eye(3))
array([[ 2., -1., -1.],
       [-1.,  2., -1.],
       [-1., -1.,  2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> L = csgraph.laplacian(G, form=""function"")
>>> L
. at 0x0000012AE6F5A598>
>>> L(np.eye(3))
array([[ 2., -1., -1.],
       [-1.,  2., -1.],
       [-1., -1.,  2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian
">>> N = 35
>>> G = diags(np.ones(N-1), 1, format=""csr"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.diags
">>> rng = np.random.default_rng()
>>> G += 1e-2 * random(N, N, density=0.1, random_state=rng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.random
">>> for cut in [""max"", ""min""]:
...     G = -G  # 1.
...     L = csgraph.laplacian(G, symmetrized=True, form=""lo"")  # 2.
...     _, eves = lobpcg(L, X, Y=Y, largest=False, tol=1e-3)  # 3.
...     eves *= np.sign(eves[0, 0])  # 4.
...     print(cut + ""-cut labels:\n"", 1 * (eves[:, 0]>0))  # 5.
max-cut labels:
[1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
min-cut labels:
[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.laplacian.html, scipy.sparse.csgraph.laplacian scipy.sparse.linalg.lobpcg
">>> graph = [
... [0, 1, 2, 0],
... [0, 0, 0, 1],
... [2, 0, 0, 3],
... [0, 0, 0, 0]
... ]
>>> graph = csr_matrix(graph)
>>> print(graph)
  (0, 1)    1
  (0, 2)    2
  (1, 3)    1
  (2, 0)    2
  (2, 3)    3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.breadth_first_order.html, scipy.sparse.csr_matrix
">>> breadth_first_order(graph,0)
(array([0, 1, 2, 3], dtype=int32), array([-9999,     0,     0,     1], dtype=int32))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.breadth_first_order.html, scipy.sparse.csgraph.breadth_first_order
">>> import scipy.datasets
>>> face = scipy.datasets.face()
>>> face.shape
(768, 1024, 3)
>>> face.max()
255
>>> face.dtype
dtype('uint8')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.datasets.face.html, scipy.datasets.face
">>> biadjacency_matrix = csr_matrix([[1, 1, 1], [1, 0, 0], [0, 1, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csr_matrix
">>> print(min_weight_full_bipartite_matching(biadjacency_matrix)[1])
[2 0 1]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csgraph.min_weight_full_bipartite_matching
">>> from scipy.sparse.csgraph import maximum_bipartite_matching
>>> biadjacency = csr_matrix([[1, 1, 1], [1, 0, 0], [0, 1, 0]])
>>> print(maximum_bipartite_matching(biadjacency, perm_type='column'))
[2 0 1]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.maximum_bipartite_matching
">>> biadjacency = csr_matrix([[3, 3, 6], [4, 3, 5], [10, 1, 8]])
>>> row_ind, col_ind = min_weight_full_bipartite_matching(biadjacency)
>>> print(col_ind)
[0 2 1]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.min_weight_full_bipartite_matching
">>> biadjacency = csr_matrix([[0, 1, 1], [0, 2, 3]])
>>> row_ind, col_ind = min_weight_full_bipartite_matching(biadjacency)
>>> print(row_ind, col_ind)
[0 1] [2 1]
>>> biadjacency = csr_matrix([[0, 1], [3, 1], [1, 4]])
>>> row_ind, col_ind = min_weight_full_bipartite_matching(biadjacency)
>>> print(row_ind, col_ind)
[0 2] [1 0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.min_weight_full_bipartite_matching
">>> biadjacency = csr_matrix((2, 0))
>>> row_ind, col_ind = min_weight_full_bipartite_matching(biadjacency)
>>> print(row_ind, col_ind)
[] []
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.min_weight_full_bipartite_matching
">>> import numpy as np
>>> from scipy.sparse import random
>>> from scipy.optimize import linear_sum_assignment
>>> sparse = random(10, 10, random_state=42, density=.5, format='coo') * 10
>>> sparse.data = np.ceil(sparse.data)
>>> dense = sparse.toarray()
>>> dense = np.full(sparse.shape, np.inf)
>>> dense[sparse.row, sparse.col] = sparse.data
>>> sparse = sparse.tocsr()
>>> row_ind, col_ind = linear_sum_assignment(dense)
>>> print(dense[row_ind, col_ind].sum())
28.0
>>> row_ind, col_ind = min_weight_full_bipartite_matching(sparse)
>>> print(sparse[row_ind, col_ind].sum())
28.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html, scipy.sparse.random scipy.optimize.linear_sum_assignment scipy.sparse.csgraph.min_weight_full_bipartite_matching
">>> from scipy.datasets import electrocardiogram
>>> ecg = electrocardiogram()
>>> ecg
array([-0.245, -0.215, -0.185, ..., -0.405, -0.395, -0.385])
>>> ecg.shape, ecg.mean(), ecg.std()
((108000,), -0.16510875, 0.5992473991177294)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.datasets.electrocardiogram.html, scipy.datasets.electrocardiogram
">>> from scipy.signal import welch
>>> f, Pxx = welch(ecg, fs=fs, nperseg=2048, scaling=""spectrum"")
>>> plt.semilogy(f, Pxx)
>>> plt.xlabel(""Frequency in Hz"")
>>> plt.ylabel(""Power spectrum of the ECG in mV**2"")
>>> plt.xlim(f[[0, -1]])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.datasets.electrocardiogram.html, scipy.signal.welch
">>> import scipy.datasets
>>> ascent = scipy.datasets.ascent()
>>> ascent.shape
(512, 512)
>>> ascent.max()
255
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.datasets.ascent.html, scipy.datasets.ascent
">>> A = spdiags(vals, 0, n, n)
>>> A = A.astype(np.int16)
>>> A.toarray()
array([[  1,   0,   0, ...,   0,   0,   0],
       [  0,   2,   0, ...,   0,   0,   0],
       [  0,   0,   3, ...,   0,   0,   0],
       ...,
       [  0,   0,   0, ...,  98,   0,   0],
       [  0,   0,   0, ...,   0,  99,   0],
       [  0,   0,   0, ...,   0,   0, 100]], dtype=int16)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.spdiags
">>> k = 1
>>> rng = np.random.default_rng()
>>> X = rng.normal(size=(n, k))
>>> X = X.astype(np.float32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.csr_matrix.astype
">>> eigenvalues, _ = lobpcg(A, X, maxiter=60)
>>> eigenvalues
array([100.])
>>> eigenvalues.dtype
dtype('float32')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> eigenvalues, _ = lobpcg(A_lambda, X, maxiter=60)
>>> eigenvalues
array([100.])
>>> eigenvalues, _ = lobpcg(A_matmat, X, maxiter=60)
>>> eigenvalues
array([100.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> A_lo = LinearOperator((n, n), matvec=A_matmat, matmat=A_matmat, dtype=np.int16)
>>> eigenvalues, _ = lobpcg(A_lo, X, maxiter=80)
>>> eigenvalues
array([100.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.LinearOperator scipy.sparse.linalg.lobpcg
">>> eigenvalues, _ = lobpcg(aslinearoperator(A), X, maxiter=80)
>>> eigenvalues
array([100.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg scipy.sparse.linalg.aslinearoperator
">>> eigenvalues, _ = lobpcg(A, X, largest=False, maxiter=80)
>>> print(eigenvalues)  
[1. 2. 3.]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> eigenvalues, _ = lobpcg(A_matmat, X, Y=Y, largest=False, maxiter=80)
>>> eigenvalues
array([4., 5., 6.])
>>> eigenvalues.dtype
dtype('float64')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> eigenvalues, _ = lobpcg(A_matmat, X, Y=Y, M=M, largest=False, maxiter=20)
>>> eigenvalues
array([4., 5., 6.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> vals = vals - 50
>>> X = rng.normal(size=(n, k))
>>> eigenvalues, _ = lobpcg(A_matmat, X, largest=False, maxiter=99)
>>> eigenvalues
array([-49., -48., -47.])
>>> eigenvalues, _ = lobpcg(A_matmat, X, largest=True, maxiter=99)
>>> eigenvalues
array([50., 49., 48.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lobpcg.html, scipy.sparse.linalg.lobpcg
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import bicgstab
>>> R = np.array([[4, 2, 0, 1],
...               [3, 0, 0, 2],
...               [0, 1, 1, 1],
...               [0, 2, 1, 0]])
>>> A = csc_matrix(R)
>>> b = np.array([-1, -0.5, -1, 2])
>>> x, exit_code = bicgstab(A, b, atol=1e-5)
>>> print(exit_code)  # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.bicgstab.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import splu
>>> A = csc_matrix([[1,2,0,4], [1,0,0,1], [1,0,2,1], [2,2,1,0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.SuperLU.html, scipy.sparse.csc_matrix
">>> lu = splu(A)
>>> b = np.array([1, 2, 3, 4])
>>> x = lu.solve(b)
>>> A.dot(x)
array([ 1.,  2.,  3.,  4.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.SuperLU.html, scipy.sparse.linalg.splu scipy.sparse.csc_matrix.dot
">>> Pr = csc_matrix((np.ones(4), (lu.perm_r, np.arange(4))))
>>> Pc = csc_matrix((np.ones(4), (np.arange(4), lu.perm_c)))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.SuperLU.html, scipy.sparse.csc_matrix
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import lsqr
>>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsqr.html, scipy.sparse.csc_matrix
">>> b = np.array([0., 0., 0.], dtype=float)
>>> x, istop, itn, normr = lsqr(A, b)[:4]
>>> istop
0
>>> x
array([ 0.,  0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsqr.html, scipy.sparse.linalg.lsqr
">>> b = np.array([1., 0., -1.], dtype=float)
>>> x, istop, itn, r1norm = lsqr(A, b)[:4]
>>> istop
1
>>> x
array([ 1., -1.])
>>> itn
1
>>> r1norm
4.440892098500627e-16
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsqr.html, scipy.sparse.linalg.lsqr
">>> b = np.array([1., 0.01, -1.], dtype=float)
>>> x, istop, itn, r1norm = lsqr(A, b)[:4]
>>> istop
2
>>> x
array([ 1.00333333, -0.99666667])
>>> A.dot(x)-b
array([ 0.00333333, -0.00333333,  0.00333333])
>>> r1norm
0.005773502691896255
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsqr.html, scipy.sparse.linalg.lsqr scipy.sparse.csc_matrix.dot
"# Construct a linear operator that computes P^-1 @ x.
import scipy.sparse.linalg as spla
M_x = lambda x: spla.spsolve(P, x)
M = spla.LinearOperator((n, n), M_x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.gmres.html, scipy.sparse.linalg.spsolve scipy.sparse.linalg.LinearOperator
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import gmres
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1]], dtype=float)
>>> b = np.array([2, 4, -1], dtype=float)
>>> x, exitCode = gmres(A, b, atol=1e-5)
>>> print(exitCode)            # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.gmres.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse.linalg import factorized
>>> from scipy.sparse import csc_matrix
>>> A = np.array([[ 3. ,  2. , -1. ],
...               [ 2. , -2. ,  4. ],
...               [-1. ,  0.5, -1. ]])
>>> solve = factorized(csc_matrix(A)) # Makes LU decomposition.
>>> rhs1 = np.array([1, -2, 0])
>>> solve(rhs1) # Uses the LU factors.
array([ 1., -2., -2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.factorized.html, scipy.sparse.linalg.factorized scipy.sparse.csc_matrix
">>> b = csr_matrix(b)
>>> norm(b)
7.745966692414834
>>> norm(b, 'fro')
7.745966692414834
>>> norm(b, np.inf)
9
>>> norm(b, -np.inf)
2
>>> norm(b, 1)
7
>>> norm(b, -1)
6
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.norm.html, scipy.sparse.csr_matrix scipy.sparse.linalg.norm
">>> b = diags([-1, 1], [0, 1], shape=(9, 10))
>>> norm(b, 2)
1.9753...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.norm.html, scipy.sparse.diags scipy.sparse.linalg.norm
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import cg
>>> P = np.array([[4, 0, 1, 0],
...               [0, 5, 0, 0],
...               [1, 0, 3, 2],
...               [0, 0, 2, 4]])
>>> A = csc_matrix(P)
>>> b = np.array([-1, -0.5, -1, 2])
>>> x, exit_code = cg(A, b, atol=1e-5)
>>> print(exit_code)    # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.cg.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import lgmres
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1]], dtype=float)
>>> b = np.array([2, 4, -1], dtype=float)
>>> x, exitCode = lgmres(A, b, atol=1e-5)
>>> print(exitCode)            # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lgmres.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import expm, expm_multiply
>>> A = csc_matrix([[1, 0], [0, 1]])
>>> A.toarray()
array([[1, 0],
       [0, 1]], dtype=int64)
>>> B = np.array([np.exp(-1.), np.exp(-2.)])
>>> B
array([ 0.36787944,  0.13533528])
>>> expm_multiply(A, B, start=1, stop=2, num=3, endpoint=True)
array([[ 1.        ,  0.36787944],
       [ 1.64872127,  0.60653066],
       [ 2.71828183,  1.        ]])
>>> expm(A).dot(B)                  # Verify 1st timestep
array([ 1.        ,  0.36787944])
>>> expm(1.5*A).dot(B)              # Verify 2nd timestep
array([ 1.64872127,  0.60653066])
>>> expm(2*A).dot(B)                # Verify 3rd timestep
array([ 2.71828183,  1.        ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.expm_multiply.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.toarray scipy.sparse.linalg.expm_multiply scipy.sparse.linalg.expm
">>> from scipy.sparse import csr_matrix
>>> from scipy.sparse.csgraph import depth_first_tree
>>> X = csr_matrix([[0, 8, 0, 3],
...                 [0, 0, 2, 5],
...                 [0, 0, 0, 6],
...                 [0, 0, 0, 0]])
>>> Tcsr = depth_first_tree(X, 0, directed=False)
>>> Tcsr.toarray().astype(int)
array([[0, 8, 0, 0],
       [0, 0, 2, 0],
       [0, 0, 0, 6],
       [0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csgraph.depth_first_tree.html, scipy.sparse.csr_matrix scipy.sparse.csgraph.depth_first_tree
">>> n = 6
>>> G = diags(np.ones(n - 1), 1, format='csr')
>>> Lf = csgraph.laplacian(G, symmetrized=True, form='function')
>>> grid_shape = (n, )
>>> lap = LaplacianNd(grid_shape, boundary_conditions='neumann')
>>> np.array_equal(lap.matmat(np.eye(n)), -Lf(np.eye(n)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LaplacianNd.html, scipy.sparse.diags scipy.sparse.csgraph.laplacian scipy.sparse.linalg.LaplacianNd
">>> lap = LaplacianNd(grid_shape, boundary_conditions='periodic')
>>> lap.eigenvalues()
array([-4., -3., -3., -1., -1.,  0.])
>>> lap.eigenvalues()[-2:]
array([-1.,  0.])
>>> lap.eigenvalues(2)
array([-1.,  0.])
>>> lap.eigenvectors(1)
array([[0.40824829],
       [0.40824829],
       [0.40824829],
       [0.40824829],
       [0.40824829],
       [0.40824829]])
>>> lap.eigenvectors(2)
array([[ 0.5       ,  0.40824829],
       [ 0.        ,  0.40824829],
       [-0.5       ,  0.40824829],
       [-0.5       ,  0.40824829],
       [ 0.        ,  0.40824829],
       [ 0.5       ,  0.40824829]])
>>> lap.eigenvectors()
array([[ 0.40824829,  0.28867513,  0.28867513,  0.5       ,  0.5       ,
         0.40824829],
       [-0.40824829, -0.57735027, -0.57735027,  0.        ,  0.        ,
         0.40824829],
       [ 0.40824829,  0.28867513,  0.28867513, -0.5       , -0.5       ,
         0.40824829],
       [-0.40824829,  0.28867513,  0.28867513, -0.5       , -0.5       ,
         0.40824829],
       [ 0.40824829, -0.57735027, -0.57735027,  0.        ,  0.        ,
         0.40824829],
       [-0.40824829,  0.28867513,  0.28867513,  0.5       ,  0.5       ,
         0.40824829]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LaplacianNd.html, scipy.sparse.linalg.LaplacianNd
">>> lap = LaplacianNd(grid_shape, boundary_conditions='dirichlet')
>>> lap.tosparse()
<6x6 sparse array of type ''
    with 20 stored elements in Compressed Sparse Row format>
>>> lap.toarray()
array([[-4,  1,  0,  1,  0,  0],
       [ 1, -4,  1,  0,  1,  0],
       [ 0,  1, -4,  0,  0,  1],
       [ 1,  0,  0, -4,  1,  0],
       [ 0,  1,  0,  1, -4,  1],
       [ 0,  0,  1,  0,  1, -4]], dtype=int8)
>>> np.array_equal(lap.matmat(np.eye(n)), lap.toarray())
True
>>> np.array_equal(lap.tosparse().toarray(), lap.toarray())
True
>>> lap.eigenvalues()
array([-6.41421356, -5.        , -4.41421356, -3.58578644, -3.        ,
       -1.58578644])
>>> eigvals = eigvalsh(lap.toarray().astype(np.float64))
>>> np.allclose(lap.eigenvalues(), eigvals)
True
>>> np.allclose(lap.toarray() @ lap.eigenvectors(),
...             lap.eigenvectors() @ np.diag(lap.eigenvalues()))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LaplacianNd.html, scipy.sparse.linalg.LaplacianNd
">>> lap = LaplacianNd(grid_shape, boundary_conditions='periodic')
>>> lap.tosparse()
<6x6 sparse array of type ''
    with 24 stored elements in Compressed Sparse Row format>
>>> lap.toarray()
    array([[-4,  1,  1,  2,  0,  0],
           [ 1, -4,  1,  0,  2,  0],
           [ 1,  1, -4,  0,  0,  2],
           [ 2,  0,  0, -4,  1,  1],
           [ 0,  2,  0,  1, -4,  1],
           [ 0,  0,  2,  1,  1, -4]], dtype=int8)
>>> np.array_equal(lap.matmat(np.eye(n)), lap.toarray())
True
>>> np.array_equal(lap.tosparse().toarray(), lap.toarray())
True
>>> lap.eigenvalues()
array([-7., -7., -4., -3., -3.,  0.])
>>> eigvals = eigvalsh(lap.toarray().astype(np.float64))
>>> np.allclose(lap.eigenvalues(), eigvals)
True
>>> np.allclose(lap.toarray() @ lap.eigenvectors(),
...             lap.eigenvectors() @ np.diag(lap.eigenvalues()))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LaplacianNd.html, scipy.sparse.linalg.LaplacianNd
">>> lap = LaplacianNd(grid_shape, boundary_conditions='neumann')
>>> lap.tosparse()
<6x6 sparse array of type ''
    with 20 stored elements in Compressed Sparse Row format>
>>> lap.toarray()
array([[-2,  1,  0,  1,  0,  0],
       [ 1, -3,  1,  0,  1,  0],
       [ 0,  1, -2,  0,  0,  1],
       [ 1,  0,  0, -2,  1,  0],
       [ 0,  1,  0,  1, -3,  1],
       [ 0,  0,  1,  0,  1, -2]])
>>> np.array_equal(lap.matmat(np.eye(n)), lap.toarray())
True
>>> np.array_equal(lap.tosparse().toarray(), lap.toarray())
True
>>> lap.eigenvalues()
array([-5., -3., -3., -2., -1.,  0.])
>>> eigvals = eigvalsh(lap.toarray().astype(np.float64))
>>> np.allclose(lap.eigenvalues(), eigvals)
True
>>> np.allclose(lap.toarray() @ lap.eigenvectors(),
...             lap.eigenvectors() @ np.diag(lap.eigenvalues()))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LaplacianNd.html, scipy.sparse.linalg.LaplacianNd
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import splu
>>> A = csc_matrix([[1., 0., 0.], [5., 0., 2.], [0., -1., 0.]], dtype=float)
>>> B = splu(A)
>>> x = np.array([1., 2., 3.], dtype=float)
>>> B.solve(x)
array([ 1. , -3. , -1.5])
>>> A.dot(B.solve(x))
array([ 1.,  2.,  3.])
>>> B.solve(A.dot(x))
array([ 1.,  2.,  3.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.splu.html, scipy.sparse.csc_matrix scipy.sparse.linalg.splu scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.stats import ortho_group
>>> from scipy.sparse import csc_matrix, diags
>>> from scipy.sparse.linalg import svds
>>> rng = np.random.default_rng()
>>> orthogonal = csc_matrix(ortho_group.rvs(10, random_state=rng))
>>> s = [0.0001, 0.001, 3, 4, 5]  # singular values
>>> u = orthogonal[:, :5]         # left singular vectors
>>> vT = orthogonal[:, 5:].T      # right singular vectors
>>> A = u @ diags(s) @ vT
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-propack.html, scipy.sparse.csc_matrix scipy.sparse.diags
">>> u2, s2, vT2 = svds(A, k=3, solver='propack')
>>> A2 = u2 @ np.diag(s2) @ vT2
>>> np.allclose(A2, A.todense(), atol=1e-3)
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-propack.html, scipy.sparse.linalg.svds scipy.sparse.csc_matrix.todense
">>> u3, s3, vT3 = svds(A, k=5, solver='propack')
>>> A3 = u3 @ np.diag(s3) @ vT3
>>> np.allclose(A3, A.todense())
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-propack.html, scipy.sparse.linalg.svds scipy.sparse.csc_matrix.todense
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import cgs
>>> R = np.array([[4, 2, 0, 1],
...               [3, 0, 0, 2],
...               [0, 1, 1, 1],
...               [0, 2, 1, 0]])
>>> A = csc_matrix(R)
>>> b = np.array([-1, -0.5, -1, 2])
>>> x, exit_code = cgs(A, b)
>>> print(exit_code)  # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.cgs.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import spsolve
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1]], dtype=float)
>>> B = csc_matrix([[2, 0], [-1, 0], [2, 0]], dtype=float)
>>> x = spsolve(A, B)
>>> np.allclose(A.dot(x).toarray(), B.toarray())
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spsolve.html, scipy.sparse.csc_matrix scipy.sparse.linalg.spsolve scipy.sparse.csc_matrix.dot scipy.sparse.csc_matrix.toarray
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import spilu
>>> A = csc_matrix([[1., 0., 0.], [5., 0., 2.], [0., -1., 0.]], dtype=float)
>>> B = spilu(A)
>>> x = np.array([1., 2., 3.], dtype=float)
>>> B.solve(x)
array([ 1. , -3. , -1.5])
>>> A.dot(B.solve(x))
array([ 1.,  2.,  3.])
>>> B.solve(A.dot(x))
array([ 1.,  2.,  3.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spilu.html, scipy.sparse.csc_matrix scipy.sparse.linalg.spilu scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import onenormest
>>> A = csc_matrix([[1., 0., 0.], [5., 8., 2.], [0., -1., 0.]], dtype=float)
>>> A.toarray()
array([[ 1.,  0.,  0.],
       [ 5.,  8.,  2.],
       [ 0., -1.,  0.]])
>>> onenormest(A)
9.0
>>> np.linalg.norm(A.toarray(), ord=1)
9.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.onenormest.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.toarray scipy.sparse.linalg.onenormest
">>> centroid, label = kmeans2(z, 3, minit='points')
>>> centroid
array([[ 2.22274463, -0.61666946],  # may vary
       [ 0.54069047,  5.86541444],
       [ 6.73846769,  4.01991898]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans2.html, scipy.cluster.vq.kmeans2
">>> import numpy as np
>>> from scipy.cluster.vq import whiten
>>> features  = np.array([[1.9, 2.3, 1.7],
...                       [1.5, 2.5, 2.2],
...                       [0.8, 0.6, 1.7,]])
>>> whiten(features)
array([[ 4.17944278,  2.69811351,  7.21248917],
       [ 3.29956009,  2.93273208,  9.33380951],
       [ 1.75976538,  0.7038557 ,  7.21248917]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.whiten.html, scipy.cluster.vq.whiten
">>> import numpy as np
>>> from scipy.cluster.vq import vq
>>> code_book = np.array([[1., 1., 1.],
...                       [2., 2., 2.]])
>>> features  = np.array([[1.9, 2.3, 1.7],
...                       [1.5, 2.5, 2.2],
...                       [0.8, 0.6, 1.7]])
>>> vq(features, code_book)
(array([1, 1, 0], dtype=int32), array([0.43588989, 0.73484692, 0.83066239]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.vq.html, scipy.cluster.vq.vq
">>> sav_data = readsav(sav_fname)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.readsav.html, scipy.io.readsav
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import bicg
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1.]])
>>> b = np.array([2., 4., -1.])
>>> x, exitCode = bicg(A, b, atol=1e-5)
>>> print(exitCode)  # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.bicg.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.cluster.vq import vq, kmeans, whiten
>>> import matplotlib.pyplot as plt
>>> features  = np.array([[ 1.9,2.3],
...                       [ 1.5,2.5],
...                       [ 0.8,0.6],
...                       [ 0.4,1.8],
...                       [ 0.1,0.1],
...                       [ 0.2,1.8],
...                       [ 2.0,0.5],
...                       [ 0.3,1.5],
...                       [ 1.0,1.0]])
>>> whitened = whiten(features)
>>> book = np.array((whitened[0],whitened[2]))
>>> kmeans(whitened,book)
(array([[ 2.3110306 ,  2.86287398],    # random
       [ 0.93218041,  1.24398691]]), 0.85684700941625547)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans.html, scipy.cluster.vq.whiten scipy.cluster.vq.kmeans
">>> codes = 3
>>> kmeans(whitened,codes)
(array([[ 2.3110306 ,  2.86287398],    # random
       [ 1.32544402,  0.65607529],
       [ 0.40782893,  2.02786907]]), 0.5196582527686241)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans.html, scipy.cluster.vq.kmeans
">>> # Create 50 datapoints in two clusters a and b
>>> pts = 50
>>> rng = np.random.default_rng()
>>> a = rng.multivariate_normal([0, 0], [[4, 1], [1, 4]], size=pts)
>>> b = rng.multivariate_normal([30, 10],
...                             [[10, 2], [2, 1]],
...                             size=pts)
>>> features = np.concatenate((a, b))
>>> # Whiten data
>>> whitened = whiten(features)
>>> # Find 2 clusters in the data
>>> codebook, distortion = kmeans(whitened, 2)
>>> # Plot whitened data and cluster centers in red
>>> plt.scatter(whitened[:, 0], whitened[:, 1])
>>> plt.scatter(codebook[:, 0], codebook[:, 1], c='r')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans.html, scipy.cluster.vq.whiten scipy.cluster.vq.kmeans
">>> import numpy as np
>>> from scipy.sparse import csr_matrix
>>> from scipy.sparse.linalg import spsolve_triangular
>>> A = csr_matrix([[3, 0, 0], [1, -1, 0], [2, 0, 1]], dtype=float)
>>> B = np.array([[2, 0], [-1, 0], [2, 0]], dtype=float)
>>> x = spsolve_triangular(A, B)
>>> np.allclose(A.dot(x), B)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spsolve_triangular.html, scipy.sparse.csr_matrix scipy.sparse.linalg.spsolve_triangular scipy.sparse.csr_matrix.dot
">>> import numpy as np
>>> from scipy.stats import ortho_group
>>> from scipy.sparse import csc_matrix, diags
>>> from scipy.sparse.linalg import svds
>>> rng = np.random.default_rng()
>>> orthogonal = csc_matrix(ortho_group.rvs(10, random_state=rng))
>>> s = [0.0001, 0.001, 3, 4, 5]  # singular values
>>> u = orthogonal[:, :5]         # left singular vectors
>>> vT = orthogonal[:, 5:].T      # right singular vectors
>>> A = u @ diags(s) @ vT
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-lobpcg.html, scipy.sparse.csc_matrix scipy.sparse.diags
">>> u2, s2, vT2 = svds(A, k=3, solver='lobpcg')
>>> A2 = u2 @ np.diag(s2) @ vT2
>>> np.allclose(A2, A.toarray(), atol=1e-3)
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-lobpcg.html, scipy.sparse.linalg.svds scipy.sparse.csr_matrix.toarray
">>> u3, s3, vT3 = svds(A, k=5, solver='lobpcg')
>>> A3 = u3 @ np.diag(s3) @ vT3
>>> np.allclose(A3, A.toarray())
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-lobpcg.html, scipy.sparse.linalg.svds scipy.sparse.csr_matrix.toarray
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import minres
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1]], dtype=float)
>>> A = A + A.T
>>> b = np.array([2, 4, -1], dtype=float)
>>> x, exitCode = minres(A, b)
>>> print(exitCode)            # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.minres.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> mat_contents = sio.loadmat(mat_fname)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.loadmat.html, scipy.io.loadmat
">>> matstruct_fname = pjoin(data_dir, 'teststruct_7.4_GLNX86.mat')
>>> matstruct_contents = sio.loadmat(matstruct_fname)
>>> teststruct = matstruct_contents['teststruct']
>>> teststruct.dtype
dtype([('stringfield', 'O'), ('doublefield', 'O'), ('complexfield', 'O')])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.loadmat.html, scipy.io.loadmat
">>> matstruct_squeezed = sio.loadmat(matstruct_fname, squeeze_me=True)
>>> matstruct_squeezed['teststruct'].shape
()
>>> matstruct_squeezed['teststruct']['complexfield'].shape
()
>>> matstruct_squeezed['teststruct']['complexfield'].item()
array([ 1.41421356+1.41421356j,  2.71828183+2.71828183j,
    3.14159265+3.14159265j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.loadmat.html, scipy.io.loadmat
">>> import numpy as np
>>> from scipy.sparse.linalg import eigs
>>> id = np.eye(13)
>>> vals, vecs = eigs(id, k=6)
>>> vals
array([ 1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j,  1.+0.j])
>>> vecs.shape
(13, 6)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.eigs.html, scipy.sparse.linalg.eigs
">>> from scipy.io import arff
>>> from io import StringIO
>>> content = """"""
... @relation foo
... @attribute width  numeric
... @attribute height numeric
... @attribute color  {red,green,blue,yellow,black}
... @data
... 5.0,3.25,blue
... 4.5,3.75,green
... 3.0,4.00,red
... """"""
>>> f = StringIO(content)
>>> data, meta = arff.loadarff(f)
>>> data
array([(5.0, 3.25, 'blue'), (4.5, 3.75, 'green'), (3.0, 4.0, 'red')],
      dtype=[('width', '
>>> meta
Dataset: foo
    width's type is numeric
    height's type is numeric
    color's type is nominal, range is ('red', 'green', 'blue', 'yellow', 'black')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.arff.loadarff.html, scipy.io.arff.loadarff
">>> from scipy.io import hb_read, hb_write
>>> from scipy.sparse import csr_matrix, eye
>>> data = csr_matrix(eye(3))  # create a sparse matrix
>>> hb_write(""data.hb"", data)  # write a hb file
>>> print(hb_read(""data.hb""))  # read a hb file
  (0, 0)    1.0
  (1, 1)    1.0
  (2, 2)    1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.hb_read.html, scipy.sparse.csr_matrix scipy.io.hb_write scipy.io.hb_read
">>> u4, s4, vT4 = svds(A, k=4)
>>> A4 = u4 @ np.diag(s4) @ vT4
>>> np.allclose(A4, A, atol=1e-3)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.linalg.svds
">>> u5, s5, vT5 = svds(A, k=5)
>>> A5 = u5 @ np.diag(s5) @ vT5
>>> np.allclose(A5, A)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.linalg.svds
">>> rng = np.random.default_rng()
>>> s = [1, 1 + 1e-6]  # non-zero singular values
>>> u, _ = np.linalg.qr(rng.standard_normal((99, 2)))
>>> v, _ = np.linalg.qr(rng.standard_normal((99, 2)))
>>> vT = v.T
>>> A = u @ np.diag(s) @ vT
>>> A = A.astype(np.float32)
>>> u2, s2, vT2 = svds(A, k=2, random_state=rng)
>>> np.allclose(s2, s)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.csc_matrix.astype scipy.sparse.linalg.svds
">>> (linalg.subspace_angles(u2[:, :1], u[:, :1]) +
...  linalg.subspace_angles(u2[:, 1:], u[:, 1:]))
array([0.06562513])  # may vary
>>> (linalg.subspace_angles(vT2[:1, :].T, vT[:1, :].T) +
...  linalg.subspace_angles(vT2[1:, :].T, vT[1:, :].T))
array([0.06562507])  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.linalg.subspace_angles
">>> linalg.subspace_angles(u2, u).sum() < 1e-6
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.linalg.subspace_angles
">>> linalg.subspace_angles(vT2.T, vT.T).sum() < 1e-6
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.linalg.subspace_angles
">>> rng = np.random.RandomState(0)
>>> X_dense = rng.random(size=(100, 100))
>>> X_dense[:, 2 * np.arange(50)] = 0
>>> X = sparse.csr_matrix(X_dense)
>>> _, singular_values, _ = svds(X, k=5, random_state=rng)
>>> print(singular_values)
[ 4.3293...  4.4491...  4.5420...  4.5987... 35.2410...]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.csr_matrix scipy.sparse.linalg.svds
">>> rng = np.random.default_rng()
>>> G = sparse.rand(8, 9, density=0.5, random_state=rng)
>>> Glo = aslinearoperator(G)
>>> _, singular_values_svds, _ = svds(Glo, k=5, random_state=rng)
>>> _, singular_values_svd, _ = linalg.svd(G.toarray())
>>> np.allclose(singular_values_svds, singular_values_svd[-4::-1])
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.rand scipy.sparse.linalg.aslinearoperator scipy.sparse.linalg.svds scipy.linalg.svd
">>> def diff0_func_aslo_def(n):
...     return LinearOperator(matvec=diff0,
...                           matmat=diff0,
...                           rmatvec=diff0t,
...                           rmatmat=diff0t,
...                           shape=(n - 1, n))
>>> diff0_func_aslo = diff0_func_aslo_def(n)
>>> diff0_matrix_aslo = aslinearoperator(M_from_diff0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.linalg.LinearOperator scipy.sparse.linalg.aslinearoperator
">>> n = 100
>>> diff0_func_aslo = diff0_func_aslo_def(n)
>>> u, s, vT = svds(diff0_func_aslo, k=3, which='SM')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html, scipy.sparse.linalg.svds
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import qmr
>>> A = csc_matrix([[3., 2., 0.], [1., -1., 0.], [0., 5., 1.]])
>>> b = np.array([2., 4., -1.])
>>> x, exitCode = qmr(A, b, atol=1e-5)
>>> print(exitCode)            # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.qmr.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse.linalg import use_solver, spsolve
>>> from scipy.sparse import csc_matrix
>>> R = np.random.randn(5, 5)
>>> A = csc_matrix(R)
>>> b = np.random.randn(5)
>>> use_solver(useUmfpack=False) # enforce superLU over UMFPACK
>>> x = spsolve(A, b)
>>> np.allclose(A.dot(x), b)
True
>>> use_solver(useUmfpack=True) # reset umfPack usage to default
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.use_solver.html, scipy.sparse.csc_matrix scipy.sparse.linalg.use_solver scipy.sparse.linalg.spsolve scipy.sparse.csc_matrix.dot
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import lsmr
>>> A = csc_matrix([[1., 0.], [1., 1.], [0., 1.]], dtype=float)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html, scipy.sparse.csc_matrix
">>> b = np.array([0., 0., 0.], dtype=float)
>>> x, istop, itn, normr = lsmr(A, b)[:4]
>>> istop
0
>>> x
array([0., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html, scipy.sparse.linalg.lsmr
">>> b = np.array([1., 0., -1.], dtype=float)
>>> x, istop, itn, normr = lsmr(A, b)[:4]
>>> istop
1
>>> x
array([ 1., -1.])
>>> itn
1
>>> normr
4.440892098500627e-16
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html, scipy.sparse.linalg.lsmr
">>> b = np.array([1., 0.01, -1.], dtype=float)
>>> x, istop, itn, normr = lsmr(A, b)[:4]
>>> istop
2
>>> x
array([ 1.00333333, -0.99666667])
>>> A.dot(x)-b
array([ 0.00333333, -0.00333333,  0.00333333])
>>> normr
0.005773502691896255
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html, scipy.sparse.linalg.lsmr scipy.sparse.csc_matrix.dot
"data, meta = loadarff('iris.arff')
# This will print the attributes names of the iris.arff dataset
for i in meta:
    print(i)
# This works too
meta.names()
# Getting attribute type
types = meta.types()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.arff.MetaData.html, scipy.io.arff.loadarff scipy.io.arff.MetaData.names scipy.io.arff.MetaData.types
">>> a = np.array([[1.0, 0, 0, 0], [0, 2.5, 0, 6.25]])
>>> target = BytesIO()
>>> mmwrite(target, a)
>>> print(target.getvalue().decode('latin1'))
%%MatrixMarket matrix array real general
%
2 4
1
0
0
2.5
0
0
0
6.25
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmwrite.html, scipy.io.mmwrite
">>> target = BytesIO()
>>> mmwrite(target, a, comment='\n Some test data.\n', precision=3)
>>> print(target.getvalue().decode('latin1'))
%%MatrixMarket matrix array real general
%
% Some test data.
%
2 4
1.00e+00
0.00e+00
0.00e+00
2.50e+00
0.00e+00
0.00e+00
0.00e+00
6.25e+00
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmwrite.html, scipy.io.mmwrite
">>> target = BytesIO()
>>> mmwrite(target, coo_matrix(a), precision=3)
>>> print(target.getvalue().decode('latin1'))
%%MatrixMarket matrix coordinate real general
%
2 4 3
1 1 1.00e+00
2 2 2.50e+00
2 4 6.25e+00
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmwrite.html, scipy.io.mmwrite scipy.sparse.coo_matrix
">>> target = BytesIO()
>>> mmwrite(target, z, precision=2)
>>> print(target.getvalue().decode('latin1'))
%%MatrixMarket matrix array complex hermitian
%
3 3
3.0e+00 0.0e+00
1.0e+00 -2.0e+00
4.0e+00 3.0e+00
1.0e+00 0.0e+00
0.0e+00 5.0e+00
2.5e+00 0.0e+00
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmwrite.html, scipy.io.mmwrite
">>> import threadpoolctl
>>>
>>> target = BytesIO()
>>> with threadpoolctl.threadpool_limits(limits=2):
...     mmwrite(target, a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmwrite.html, scipy.io.mmwrite
">>> from scipy.io import netcdf_file
>>> import numpy as np
>>> f = netcdf_file('simple.nc', 'w')
>>> f.history = 'Created for a test'
>>> f.createDimension('time', 10)
>>> time = f.createVariable('time', 'i', ('time',))
>>> time[:] = np.arange(10)
>>> time.units = 'days since 2008-01-01'
>>> f.close()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.netcdf_file.html, scipy.io.netcdf_file scipy.io.netcdf_file.createDimension scipy.io.netcdf_file.createVariable scipy.io.netcdf_file.close
">>> from scipy.io import netcdf_file
>>> f = netcdf_file('simple.nc', 'r')
>>> print(f.history)
b'Created for a test'
>>> time = f.variables['time']
>>> print(time.units)
b'days since 2008-01-01'
>>> print(time.shape)
(10,)
>>> print(time[-1])
9
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.netcdf_file.html, scipy.io.netcdf_file
">>> data = time[:].copy()
>>> del time
>>> f.close()
>>> data.mean()
4.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.netcdf_file.html, scipy.io.netcdf_file.close scipy.sparse.csr_matrix.mean
">>> from scipy.io import netcdf_file
>>> with netcdf_file('simple.nc', 'r') as f:
...     print(f.history)
b'Created for a test'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.netcdf_file.html, scipy.io.netcdf_file
">>> from scipy import sparse
>>> A = sparse.csc_array([[0,1,0],[1,0,1],[0,1,0]])
>>> A.todense()
array([[0, 1, 0],
       [1, 0, 1],
       [0, 1, 0]])
>>> (A @ A).todense()
array([[1, 0, 1],
       [0, 2, 0],
       [1, 0, 1]])
>>> A2 = sparse.linalg.matrix_power(A, 2)
>>> A2.todense()
array([[1, 0, 1],
       [0, 2, 0],
       [1, 0, 1]])
>>> A4 = sparse.linalg.matrix_power(A, 4)
>>> A4.todense()
array([[2, 0, 2],
       [0, 4, 0],
       [2, 0, 2]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.matrix_power.html, scipy.sparse.csc_array scipy.sparse.linalg.matrix_power
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import tfqmr
>>> A = csc_matrix([[3, 2, 0], [1, -1, 0], [0, 5, 1]], dtype=float)
>>> b = np.array([2, 4, -1], dtype=float)
>>> x, exitCode = tfqmr(A, b)
>>> print(exitCode)            # 0 indicates successful convergence
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.tfqmr.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> a = np.array([[10, 20, 30], [11, 21, 31]], dtype=np.int32)
>>> b = np.geomspace(1, 10, 5)
>>> f = BytesIO()
>>> savemat(f, {'a': a, 'b': b})
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.whosmat.html, scipy.io.savemat
">>> whosmat(f)
[('a', (2, 3), 'int32'), ('b', (1, 5), 'double')]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.whosmat.html, scipy.io.whosmat
">>> samplerate, data = wavfile.read(wav_fname)
>>> print(f""number of channels = {data.shape[1]}"")
number of channels = 2
>>> length = data.shape[0] / samplerate
>>> print(f""length = {length}s"")
length = 0.01s
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html, scipy.io.wavfile.read
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import gcrotmk
>>> R = np.random.randn(5, 5)
>>> A = csc_matrix(R)
>>> b = np.random.randn(5)
>>> x, exit_code = gcrotmk(A, b, atol=1e-5)
>>> print(exit_code)
0
>>> np.allclose(A.dot(x), b)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.gcrotmk.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.dot
">>> m = mmread(StringIO(text))
>>> m
<5x5 sparse matrix of type ''
with 7 stored elements in COOrdinate format>
>>> m.A
array([[0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 2., 3.],
       [4., 5., 6., 7., 0.],
       [0., 0., 0., 0., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmread.html, scipy.io.mmread
">>> import threadpoolctl
>>>
>>> with threadpoolctl.threadpool_limits(limits=2):
...     m = mmread(StringIO(text))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mmread.html, scipy.io.mmread
">>> from scipy.io import FortranFile
>>> import numpy as np
>>> f = FortranFile('test.unf', 'w')
>>> f.write_record(np.array([1,2,3,4,5], dtype=np.int32))
>>> f.write_record(np.linspace(0,1,20).reshape((5,4)).T)
>>> f.close()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.html, scipy.io.netcdf_file.close
">>> f = FortranFile('test.unf', 'r')
>>> print(f.read_ints(np.int32))
[1 2 3 4 5]
>>> print(f.read_reals(float).reshape((5,4), order=""F""))
[[0.         0.05263158 0.10526316 0.15789474]
 [0.21052632 0.26315789 0.31578947 0.36842105]
 [0.42105263 0.47368421 0.52631579 0.57894737]
 [0.63157895 0.68421053 0.73684211 0.78947368]
 [0.84210526 0.89473684 0.94736842 1.        ]]
>>> f.close()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.html, scipy.io.netcdf_file.close
"integer :: a(5), i
double precision :: b(5,4)
open(1, file='test.unf', form='unformatted')
read(1) a
read(1) b
close(1)
write(*,*) a
do i = 1, 5
    write(*,*) b(i,:)
end do
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.html, scipy.sparse.csr_matrix scipy.io.wavfile.read scipy.io.wavfile.write
">>> from scipy.io.wavfile import write
>>> import numpy as np
>>> samplerate = 44100; fs = 100
>>> t = np.linspace(0., 1., samplerate)
>>> amplitude = np.iinfo(np.int16).max
>>> data = amplitude * np.sin(2. * np.pi * fs * t)
>>> write(""example.wav"", samplerate, data.astype(np.int16))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.write.html, scipy.io.wavfile.write scipy.sparse.csr_matrix.astype
">>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import expm
>>> A = csc_matrix([[1, 0, 0], [0, 2, 0], [0, 0, 3]])
>>> A.toarray()
array([[1, 0, 0],
       [0, 2, 0],
       [0, 0, 3]], dtype=int64)
>>> Aexp = expm(A)
>>> Aexp
<3x3 sparse matrix of type ''
    with 3 stored elements in Compressed Sparse Column format>
>>> Aexp.toarray()
array([[  2.71828183,   0.        ,   0.        ],
       [  0.        ,   7.3890561 ,   0.        ],
       [  0.        ,   0.        ,  20.08553692]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.expm.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.toarray scipy.sparse.linalg.expm
">>> import numpy as np
>>> from scipy.sparse.linalg import eigsh
>>> identity = np.eye(13)
>>> eigenvalues, eigenvectors = eigsh(identity, k=6)
>>> eigenvalues
array([1., 1., 1., 1., 1., 1.])
>>> eigenvectors.shape
(13, 6)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.eigsh.html, scipy.sparse.linalg.eigsh
">>> import numpy as np
>>> from scipy.stats import ortho_group
>>> from scipy.sparse import csc_matrix, diags
>>> from scipy.sparse.linalg import svds
>>> rng = np.random.default_rng()
>>> orthogonal = csc_matrix(ortho_group.rvs(10, random_state=rng))
>>> s = [0.0001, 0.001, 3, 4, 5]  # singular values
>>> u = orthogonal[:, :5]         # left singular vectors
>>> vT = orthogonal[:, 5:].T      # right singular vectors
>>> A = u @ diags(s) @ vT
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-arpack.html, scipy.sparse.csc_matrix scipy.sparse.diags
">>> u2, s2, vT2 = svds(A, k=3, solver='arpack')
>>> A2 = u2 @ np.diag(s2) @ vT2
>>> np.allclose(A2, A.toarray(), atol=1e-3)
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-arpack.html, scipy.sparse.linalg.svds scipy.sparse.csc_matrix.toarray
">>> u3, s3, vT3 = svds(A, k=5, solver='arpack')
>>> A3 = u3 @ np.diag(s3) @ vT3
>>> np.allclose(A3, A.toarray())
True
",https://docs.scipy.org/doc/scipy/reference/sparse.linalg.svds-arpack.html, scipy.sparse.linalg.svds scipy.sparse.csc_matrix.toarray
">>> from scipy.sparse import csc_matrix
>>> from scipy.sparse.linalg import inv
>>> A = csc_matrix([[1., 0.], [1., 2.]])
>>> Ainv = inv(A)
>>> Ainv
<2x2 sparse matrix of type ''
    with 3 stored elements in Compressed Sparse Column format>
>>> A.dot(Ainv)
<2x2 sparse matrix of type ''
    with 2 stored elements in Compressed Sparse Column format>
>>> A.dot(Ainv).toarray()
array([[ 1.,  0.],
       [ 0.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.inv.html, scipy.sparse.csc_matrix scipy.sparse.linalg.inv scipy.sparse.csc_matrix.dot
">>> from scipy.io import savemat
>>> import numpy as np
>>> a = np.arange(20)
>>> mdic = {""a"": a, ""label"": ""experiment""}
>>> mdic
{'a': array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19]),
'label': 'experiment'}
>>> savemat(""matlab_matrix.mat"", mdic)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html, scipy.io.savemat
"MR = maxRstat(Z, R, 3)
fcluster(Z, t=0.8, criterion='monocrit', monocrit=MR)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.maxRstat scipy.cluster.hierarchy.fcluster
"MI = maxinconsts(Z, R)
fcluster(Z, t=3, criterion='maxclust_monocrit', monocrit=MI)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.maxinconsts scipy.cluster.hierarchy.fcluster
">>> Z = ward(pdist(X))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist
">>> fcluster(Z, t=0.9, criterion='distance')
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.fcluster
">>> fcluster(Z, t=1.1, criterion='distance')
array([1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.fcluster
">>> fcluster(Z, t=3, criterion='distance')
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.fcluster
">>> fcluster(Z, t=9, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fcluster.html, scipy.cluster.hierarchy.fcluster
">>> Z = ward(pdist(X))
>>> R = inconsistent(Z)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
>>> R
array([[1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.14549722, 0.20576415, 2.        , 0.70710678],
       [1.14549722, 0.20576415, 2.        , 0.70710678],
       [1.14549722, 0.20576415, 2.        , 0.70710678],
       [1.14549722, 0.20576415, 2.        , 0.70710678],
       [2.78516386, 2.58797734, 3.        , 1.15470054],
       [2.78516386, 2.58797734, 3.        , 1.15470054],
       [6.57065706, 1.38071187, 3.        , 1.15470054]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_valid_im.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist scipy.cluster.hierarchy.inconsistent
">>> is_valid_im(R)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_valid_im.html, scipy.cluster.hierarchy.is_valid_im
">>> R[-1,1] = R[-1,1] * -1
>>> is_valid_im(R)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_valid_im.html, scipy.cluster.hierarchy.is_valid_im
">>> from scipy.io import hb_read, hb_write
>>> from scipy.sparse import csr_matrix, eye
>>> data = csr_matrix(eye(3))  # create a sparse matrix
>>> hb_write(""data.hb"", data)  # write a hb file
>>> print(hb_read(""data.hb""))  # read a hb file
  (0, 0)    1.0
  (1, 1)    1.0
  (2, 2)    1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.hb_write.html, scipy.sparse.csr_matrix scipy.io.hb_write scipy.io.hb_read
">>> import numpy as np
>>> from scipy.cluster import hierarchy
>>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,
...                    400., 754., 564., 138., 219., 869., 669.])
>>> Z = hierarchy.linkage(ytdist, 'single')
>>> dn = hierarchy.dendrogram(Z, no_plot=True)
>>> dn['color_list']
['C1', 'C0', 'C0', 'C0', 'C0']
>>> hierarchy.set_link_color_palette(['c', 'm', 'y', 'k'])
>>> dn = hierarchy.dendrogram(Z, no_plot=True, above_threshold_color='b')
>>> dn['color_list']
['c', 'b', 'b', 'b', 'b']
>>> dn = hierarchy.dendrogram(Z, no_plot=True, color_threshold=267,
...                           above_threshold_color='k')
>>> dn['color_list']
['c', 'm', 'm', 'k', 'k']
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.set_link_color_palette.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.dendrogram scipy.cluster.hierarchy.set_link_color_palette
">>> hierarchy.set_link_color_palette(None)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.set_link_color_palette.html, scipy.cluster.hierarchy.set_link_color_palette
">>> Z = linkage(X, 'ward')
>>> fig = plt.figure(figsize=(25, 10))
>>> dn = dendrogram(Z)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.dendrogram
">>> Z = linkage(X, 'single')
>>> fig = plt.figure(figsize=(25, 10))
>>> dn = dendrogram(Z)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.dendrogram
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.single.html, scipy.spatial.distance.pdist
">>> Z = single(y)
>>> Z
array([[ 0.,  1.,  1.,  2.],
       [ 2., 12.,  1.,  3.],
       [ 3.,  4.,  1.,  2.],
       [ 5., 14.,  1.,  3.],
       [ 6.,  7.,  1.,  2.],
       [ 8., 16.,  1.,  3.],
       [ 9., 10.,  1.,  2.],
       [11., 18.,  1.,  3.],
       [13., 15.,  2.,  6.],
       [17., 20.,  2.,  9.],
       [19., 21.,  2., 12.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.single.html, scipy.cluster.hierarchy.single
">>> fcluster(Z, 0.9, criterion='distance')
array([ 7,  8,  9, 10, 11, 12,  4,  5,  6,  1,  2,  3], dtype=int32)
>>> fcluster(Z, 1, criterion='distance')
array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)
>>> fcluster(Z, 2, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.single.html, scipy.cluster.hierarchy.fcluster
">>> Z = single(pdist(X))
>>> Z
array([[ 0.,  1.,  1.,  2.],
       [ 2., 12.,  1.,  3.],
       [ 3.,  4.,  1.,  2.],
       [ 5., 14.,  1.,  3.],
       [ 6.,  7.,  1.,  2.],
       [ 8., 16.,  1.,  3.],
       [ 9., 10.,  1.,  2.],
       [11., 18.,  1.,  3.],
       [13., 15.,  2.,  6.],
       [17., 20.,  2.,  9.],
       [19., 21.,  2., 12.]])
>>> cophenet(Z)
array([1., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 1., 2., 2.,
       2., 2., 2., 2., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       1., 1., 2., 2., 2., 1., 2., 2., 2., 2., 2., 2., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.cophenet.html, scipy.cluster.hierarchy.single scipy.spatial.distance.pdist scipy.cluster.hierarchy.cophenet
">>> squareform(cophenet(Z))
array([[0., 1., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [1., 0., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [1., 1., 0., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 0., 1., 1., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 1., 0., 1., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 1., 1., 0., 2., 2., 2., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 0., 1., 1., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 1., 0., 1., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 1., 1., 0., 2., 2., 2.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 0., 1., 1.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 0., 1.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 1., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.cophenet.html, scipy.spatial.distance.squareform scipy.cluster.hierarchy.cophenet
">>> mminfo(StringIO(text))
(5, 5, 7, 'coordinate', 'real', 'general')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.mminfo.html, scipy.io.mminfo
">>> Z = ward(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaders.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist
">>> T = fcluster(Z, 3, criterion='distance')
>>> T
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaders.html, scipy.cluster.hierarchy.fcluster
">>> L, M = leaders(Z, T)
>>> L
array([16, 17, 18, 19], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaders.html, scipy.cluster.hierarchy.leaders
">>> expm(np.zeros((3, 2, 2)))
array([[[1., 0.],
        [0., 1.]],

       [[1., 0.],
        [0., 1.]],

       [[1., 0.],
        [0., 1.]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.expm.html, scipy.linalg.expm
">>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])
>>> expm(1j*a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
>>> cosm(a) + 1j*sinm(a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.expm.html, scipy.linalg.expm scipy.linalg.cosm scipy.linalg.sinm
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.complete.html, scipy.spatial.distance.pdist
">>> Z = complete(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.41421356,  3.        ],
       [ 5.        , 13.        ,  1.41421356,  3.        ],
       [ 8.        , 14.        ,  1.41421356,  3.        ],
       [11.        , 15.        ,  1.41421356,  3.        ],
       [16.        , 17.        ,  4.12310563,  6.        ],
       [18.        , 19.        ,  4.12310563,  6.        ],
       [20.        , 21.        ,  5.65685425, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.complete.html, scipy.cluster.hierarchy.complete
">>> fcluster(Z, 0.9, criterion='distance')
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)
>>> fcluster(Z, 1.5, criterion='distance')
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
>>> fcluster(Z, 4.5, criterion='distance')
array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=int32)
>>> fcluster(Z, 6, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.complete.html, scipy.cluster.hierarchy.fcluster
">>> Z = ward(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
>>> is_monotonic(Z)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_monotonic.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist scipy.cluster.hierarchy.is_monotonic
">>> Z = median(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.11803399,  3.        ],
       [ 5.        , 13.        ,  1.11803399,  3.        ],
       [ 8.        , 15.        ,  1.11803399,  3.        ],
       [11.        , 14.        ,  1.11803399,  3.        ],
       [18.        , 19.        ,  3.        ,  6.        ],
       [16.        , 17.        ,  3.5       ,  6.        ],
       [20.        , 21.        ,  3.25      , 12.        ]])
>>> is_monotonic(Z)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_monotonic.html, scipy.cluster.hierarchy.median scipy.spatial.distance.pdist scipy.cluster.hierarchy.is_monotonic
">>> import numpy as np
>>> from scipy.linalg import cho_factor
>>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])
>>> c, low = cho_factor(A)
>>> c
array([[3.        , 1.        , 0.33333333, 1.66666667],
       [3.        , 2.44948974, 1.90515869, -0.27216553],
       [1.        , 5.        , 2.29330749, 0.8559528 ],
       [5.        , 1.        , 2.        , 1.55418563]])
>>> np.allclose(np.triu(c).T @ np. triu(c) - A, np.zeros((4, 4)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cho_factor.html, scipy.linalg.cho_factor scipy.sparse.triu
">>> import numpy as np
>>> from scipy.linalg import fiedler_companion, eigvals
>>> p = np.poly(np.arange(1, 9, 2))  # [1., -16., 86., -176., 105.]
>>> fc = fiedler_companion(p)
>>> fc
array([[  16.,  -86.,    1.,    0.],
       [   1.,    0.,    0.,    0.],
       [   0.,  176.,    0., -105.],
       [   0.,    1.,    0.,    0.]])
>>> eigvals(fc)
array([7.+0.j, 5.+0.j, 3.+0.j, 1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.fiedler_companion.html, scipy.linalg.fiedler_companion scipy.linalg.eigvals
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.centroid.html, scipy.spatial.distance.pdist
">>> Z = centroid(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.11803399,  3.        ],
       [ 5.        , 13.        ,  1.11803399,  3.        ],
       [ 8.        , 15.        ,  1.11803399,  3.        ],
       [11.        , 14.        ,  1.11803399,  3.        ],
       [18.        , 19.        ,  3.33333333,  6.        ],
       [16.        , 17.        ,  3.33333333,  6.        ],
       [20.        , 21.        ,  3.33333333, 12.        ]]) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.centroid.html, scipy.cluster.hierarchy.centroid
">>> fcluster(Z, 0.9, criterion='distance')
array([ 7,  8,  9, 10, 11, 12,  1,  2,  3,  4,  5,  6], dtype=int32) # may vary
>>> fcluster(Z, 1.1, criterion='distance')
array([5, 5, 6, 7, 7, 8, 1, 1, 2, 3, 3, 4], dtype=int32) # may vary
>>> fcluster(Z, 2, criterion='distance')
array([3, 3, 3, 4, 4, 4, 1, 1, 1, 2, 2, 2], dtype=int32) # may vary
>>> fcluster(Z, 4, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.centroid.html, scipy.cluster.hierarchy.fcluster
">>> import numpy as np
>>> from scipy import linalg
>>> rng = np.random.default_rng()
>>> m, n = 9, 6
>>> a = rng.standard_normal((m, n)) + 1.j*rng.standard_normal((m, n))
>>> U, s, Vh = linalg.svd(a)
>>> U.shape,  s.shape, Vh.shape
((9, 9), (6,), (6, 6))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svd.html, scipy.linalg.svd
">>> U, s, Vh = linalg.svd(a, full_matrices=False)
>>> U.shape, s.shape, Vh.shape
((9, 6), (6,), (6, 6))
>>> S = np.diag(s)
>>> np.allclose(a, np.dot(U, np.dot(S, Vh)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svd.html, scipy.linalg.svd
">>> s2 = linalg.svd(a, compute_uv=False)
>>> np.allclose(s, s2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svd.html, scipy.linalg.svd
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.weighted.html, scipy.spatial.distance.pdist
">>> Z = weighted(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 11.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.20710678,  3.        ],
       [ 8.        , 13.        ,  1.20710678,  3.        ],
       [ 5.        , 14.        ,  1.20710678,  3.        ],
       [10.        , 15.        ,  1.20710678,  3.        ],
       [18.        , 19.        ,  3.05595762,  6.        ],
       [16.        , 17.        ,  3.32379407,  6.        ],
       [20.        , 21.        ,  4.06357713, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.weighted.html, scipy.cluster.hierarchy.weighted
">>> fcluster(Z, 0.9, criterion='distance')
array([ 7,  8,  9,  1,  2,  3, 10, 11, 12,  4,  6,  5], dtype=int32)
>>> fcluster(Z, 1.5, criterion='distance')
array([3, 3, 3, 1, 1, 1, 4, 4, 4, 2, 2, 2], dtype=int32)
>>> fcluster(Z, 4, criterion='distance')
array([2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1], dtype=int32)
>>> fcluster(Z, 6, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.weighted.html, scipy.cluster.hierarchy.fcluster
">>> import numpy as np
>>> from scipy.cluster import hierarchy
>>> rng = np.random.default_rng()
>>> X = rng.standard_normal((10, 10))
>>> Z = hierarchy.ward(X)
>>> hierarchy.leaves_list(Z)
array([0, 3, 1, 9, 2, 5, 7, 4, 6, 8], dtype=int32)
>>> hierarchy.leaves_list(hierarchy.optimal_leaf_ordering(Z, X))
array([3, 0, 2, 5, 7, 4, 8, 6, 9, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.optimal_leaf_ordering.html, scipy.cluster.hierarchy.ward scipy.cluster.hierarchy.leaves_list scipy.cluster.hierarchy.optimal_leaf_ordering
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.median.html, scipy.spatial.distance.pdist
">>> Z = median(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.11803399,  3.        ],
       [ 5.        , 13.        ,  1.11803399,  3.        ],
       [ 8.        , 15.        ,  1.11803399,  3.        ],
       [11.        , 14.        ,  1.11803399,  3.        ],
       [18.        , 19.        ,  3.        ,  6.        ],
       [16.        , 17.        ,  3.5       ,  6.        ],
       [20.        , 21.        ,  3.25      , 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.median.html, scipy.cluster.hierarchy.median
">>> fcluster(Z, 0.9, criterion='distance')
array([ 7,  8,  9, 10, 11, 12,  1,  2,  3,  4,  5,  6], dtype=int32)
>>> fcluster(Z, 1.1, criterion='distance')
array([5, 5, 6, 7, 7, 8, 1, 1, 2, 3, 3, 4], dtype=int32)
>>> fcluster(Z, 2, criterion='distance')
array([3, 3, 3, 4, 4, 4, 1, 1, 1, 2, 2, 2], dtype=int32)
>>> fcluster(Z, 4, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.median.html, scipy.cluster.hierarchy.fcluster
">>> Z = single(pdist(X))
>>> T = fcluster(Z, 1, criterion='distance')
>>> T
array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_isomorphic.html, scipy.cluster.hierarchy.single scipy.spatial.distance.pdist scipy.cluster.hierarchy.fcluster
">>> Z = complete(pdist(X))
>>> T_ = fcluster(Z, 1.5, criterion='distance')
>>> T_
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_isomorphic.html, scipy.cluster.hierarchy.complete scipy.spatial.distance.pdist scipy.cluster.hierarchy.fcluster
">>> is_isomorphic(T, T_)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_isomorphic.html, scipy.cluster.hierarchy.is_isomorphic
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[4, 3], [-4.5, -3.5]])
>>> b = np.array([[1], [-1]])
>>> q = np.array([[9, 6], [6, 4.]])
>>> r = 1
>>> x = linalg.solve_continuous_are(a, b, q, r)
>>> x
array([[ 21.72792206,  14.48528137],
       [ 14.48528137,   9.65685425]])
>>> np.allclose(a.T.dot(x) + x.dot(a)-x.dot(b).dot(b.T).dot(x), -q)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_continuous_are.html, scipy.linalg.solve_continuous_are
">>> import numpy as np
>>> from scipy.linalg import orth
>>> A = np.array([[2, 0, 0], [0, 5, 0]])  # rank 2 array
>>> orth(A)
array([[0., 1.],
       [1., 0.]])
>>> orth(A.T)
array([[0., 1.],
       [1., 0.],
       [0., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.orth.html, scipy.linalg.orth
">>> R, sca = orthogonal_procrustes(A, np.fliplr(A))
>>> R
array([[-5.34384992e-17,  0.00000000e+00,  1.00000000e+00],
       [ 0.00000000e+00,  1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  0.00000000e+00, -7.85941422e-17]])
>>> sca
9.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.orthogonal_procrustes.html, scipy.linalg.orthogonal_procrustes
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[-3, -2, 0], [-1, -1, 3], [3, -5, -1]])
>>> b = np.array([[1]])
>>> q = np.array([[1],[2],[3]])
>>> x = linalg.solve_sylvester(a, b, q)
>>> x
array([[ 0.0625],
       [-0.5625],
       [ 0.6875]])
>>> np.allclose(a.dot(x) + x.dot(b), q)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_sylvester.html, scipy.linalg.solve_sylvester
">>> import numpy as np
>>> from scipy.cluster import hierarchy
>>> rng = np.random.default_rng()
>>> x = rng.random((5, 2))
>>> Z = hierarchy.linkage(x)
>>> hierarchy.to_tree(Z)

>>> rootnode, nodelist = hierarchy.to_tree(Z, rd=True)
>>> rootnode

>>> len(nodelist)
9
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.to_tree.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.to_tree
">>> from scipy.linalg import pascal
>>> pascal(4)
array([[ 1,  1,  1,  1],
       [ 1,  2,  3,  4],
       [ 1,  3,  6, 10],
       [ 1,  4, 10, 20]], dtype=uint64)
>>> pascal(4, kind='lower')
array([[1, 0, 0, 0],
       [1, 1, 0, 0],
       [1, 2, 1, 0],
       [1, 3, 3, 1]], dtype=uint64)
>>> pascal(50)[-1, -1]
25477612258980856902730428600
>>> from scipy.special import comb
>>> comb(98, 49, exact=True)
25477612258980856902730428600
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.pascal.html, scipy.linalg.pascal
">>> from scipy.cluster.hierarchy import inconsistent, linkage
>>> from matplotlib import pyplot as plt
>>> X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]
>>> Z = linkage(X, 'ward')
>>> print(Z)
[[ 5.          6.          0.          2.        ]
 [ 2.          7.          0.          2.        ]
 [ 0.          4.          1.          2.        ]
 [ 1.          8.          1.15470054  3.        ]
 [ 9.         10.          2.12132034  4.        ]
 [ 3.         12.          4.11096096  5.        ]
 [11.         13.         14.07183949  8.        ]]
>>> inconsistent(Z)
array([[ 0.        ,  0.        ,  1.        ,  0.        ],
       [ 0.        ,  0.        ,  1.        ,  0.        ],
       [ 1.        ,  0.        ,  1.        ,  0.        ],
       [ 0.57735027,  0.81649658,  2.        ,  0.70710678],
       [ 1.04044011,  1.06123822,  3.        ,  1.01850858],
       [ 3.11614065,  1.40688837,  2.        ,  0.70710678],
       [ 6.44583366,  6.76770586,  3.        ,  1.12682288]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.inconsistent.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.inconsistent
">>> import numpy as np
>>> from scipy.linalg import eigh_tridiagonal
>>> d = 3*np.ones(4)
>>> e = -1*np.ones(3)
>>> w, v = eigh_tridiagonal(d, e)
>>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)
>>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigh_tridiagonal.html, scipy.linalg.eigh_tridiagonal
">>> Z = from_mlab_linkage(mZ)
>>> Z
array([[  0.        ,   1.        ,   1.        ,   2.        ],
       [  3.        ,   4.        ,   1.        ,   2.        ],
       [  6.        ,   7.        ,   1.        ,   2.        ],
       [  9.        ,  10.        ,   1.        ,   2.        ],
       [  2.        ,  12.        ,   1.29099445,   3.        ],
       [  5.        ,  13.        ,   1.29099445,   3.        ],
       [  8.        ,  14.        ,   1.29099445,   3.        ],
       [ 11.        ,  15.        ,   1.29099445,   3.        ],
       [ 16.        ,  17.        ,   5.77350269,   6.        ],
       [ 18.        ,  19.        ,   5.77350269,   6.        ],
       [ 20.        ,  21.        ,   8.16496581,  12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.from_mlab_linkage.html, scipy.cluster.hierarchy.from_mlab_linkage
">>> Z = median(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.11803399,  3.        ],
       [ 5.        , 13.        ,  1.11803399,  3.        ],
       [ 8.        , 15.        ,  1.11803399,  3.        ],
       [11.        , 14.        ,  1.11803399,  3.        ],
       [18.        , 19.        ,  3.        ,  6.        ],
       [16.        , 17.        ,  3.5       ,  6.        ],
       [20.        , 21.        ,  3.25      , 12.        ]])
>>> maxdists(Z)
array([1.        , 1.        , 1.        , 1.        , 1.11803399,
       1.11803399, 1.11803399, 1.11803399, 3.        , 3.5       ,
       3.5       ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.maxdists.html, scipy.cluster.hierarchy.median scipy.spatial.distance.pdist scipy.cluster.hierarchy.maxdists
">>> Z = ward(pdist(X))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.num_obs_linkage.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist
">>> num_obs_linkage(Z)
12
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.num_obs_linkage.html, scipy.cluster.hierarchy.num_obs_linkage
">>> import numpy as np
>>> from scipy.linalg import lu_factor, lu_solve
>>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])
>>> b = np.array([1, 1, 1, 1])
>>> lu, piv = lu_factor(A)
>>> x = lu_solve((lu, piv), b)
>>> np.allclose(A @ x - b, np.zeros((4,)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lu_solve.html, scipy.linalg.lu_factor scipy.linalg.lu_solve
">>> Z = ward(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.to_mlab_linkage.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist
">>> mZ = to_mlab_linkage(Z)
>>> mZ
array([[  1.        ,   2.        ,   1.        ],
       [  4.        ,   5.        ,   1.        ],
       [  7.        ,   8.        ,   1.        ],
       [ 10.        ,  11.        ,   1.        ],
       [  3.        ,  13.        ,   1.29099445],
       [  6.        ,  14.        ,   1.29099445],
       [  9.        ,  15.        ,   1.29099445],
       [ 12.        ,  16.        ,   1.29099445],
       [ 17.        ,  18.        ,   5.77350269],
       [ 19.        ,  20.        ,   5.77350269],
       [ 21.        ,  22.        ,   8.16496581]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.to_mlab_linkage.html, scipy.cluster.hierarchy.to_mlab_linkage
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.ward.html, scipy.spatial.distance.pdist
">>> Z = ward(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.ward.html, scipy.cluster.hierarchy.ward
">>> fcluster(Z, 0.9, criterion='distance')
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)
>>> fcluster(Z, 1.1, criterion='distance')
array([1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8], dtype=int32)
>>> fcluster(Z, 3, criterion='distance')
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
>>> fcluster(Z, 9, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.ward.html, scipy.cluster.hierarchy.fcluster
">>> X = [[0, 0], [0, 1], [1, 0],
...      [0, 4], [0, 3], [1, 4],
...      [4, 0], [3, 0], [4, 1],
...      [4, 4], [3, 4], [4, 3]]
>>> X_condensed = pdist(X)
>>> Z = ward(X_condensed)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.correspond.html, scipy.spatial.distance.pdist scipy.cluster.hierarchy.ward
">>> correspond(Z, X_condensed)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.correspond.html, scipy.cluster.hierarchy.correspond
">>> import numpy as np
>>> from scipy.linalg import null_space
>>> A = np.array([[1, 1], [1, 1]])
>>> ns = null_space(A)
>>> ns * np.copysign(1, ns[0,0])  # Remove the sign ambiguity of the vector
array([[ 0.70710678],
       [-0.70710678]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.null_space.html, scipy.linalg.null_space
">>> from numpy.random import default_rng
>>> rng = default_rng()
>>> B = rng.random((3, 5))
>>> Z = null_space(B)
>>> Z.shape
(5, 2)
>>> np.allclose(B.dot(Z), 0)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.null_space.html, scipy.linalg.null_space scipy.sparse.csc_matrix.dot
">>> p, res, rnk, s = lstsq(M, y)
>>> p
array([ 0.20925829,  0.12013861])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html, scipy.linalg.lstsq
">>> from scipy.linalg import invpascal, pascal
>>> invp = invpascal(5)
>>> invp
array([[  5, -10,  10,  -5,   1],
       [-10,  30, -35,  19,  -4],
       [ 10, -35,  46, -27,   6],
       [ -5,  19, -27,  17,  -4],
       [  1,  -4,   6,  -4,   1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.invpascal.html, scipy.linalg.invpascal
">>> p = pascal(5)
>>> p.dot(invp)
array([[ 1.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  0.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.invpascal.html, scipy.linalg.pascal
">>> invpascal(5, kind='lower', exact=False)
array([[ 1., -0.,  0., -0.,  0.],
       [-1.,  1., -0.,  0., -0.],
       [ 1., -2.,  1., -0.,  0.],
       [-1.,  3., -3.,  1., -0.],
       [ 1., -4.,  6., -4.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.invpascal.html, scipy.linalg.invpascal
">>> import numpy as np
>>> from scipy.linalg import det, inv, fiedler
>>> a = [1, 4, 12, 45, 77]
>>> n = len(a)
>>> A = fiedler(a)
>>> A
array([[ 0,  3, 11, 44, 76],
       [ 3,  0,  8, 41, 73],
       [11,  8,  0, 33, 65],
       [44, 41, 33,  0, 32],
       [76, 73, 65, 32,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.fiedler.html, scipy.linalg.fiedler
">>> Ai = inv(A)
>>> Ai[np.abs(Ai) < 1e-12] = 0.  # cleanup the numerical noise for display
>>> Ai
array([[-0.16008772,  0.16666667,  0.        ,  0.        ,  0.00657895],
       [ 0.16666667, -0.22916667,  0.0625    ,  0.        ,  0.        ],
       [ 0.        ,  0.0625    , -0.07765152,  0.01515152,  0.        ],
       [ 0.        ,  0.        ,  0.01515152, -0.03077652,  0.015625  ],
       [ 0.00657895,  0.        ,  0.        ,  0.015625  , -0.00904605]])
>>> det(A)
15409151.999999998
>>> (-1)**(n-1) * 2**(n-2) * np.diff(a).prod() * (a[-1] - a[0])
15409152
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.fiedler.html, scipy.linalg.inv scipy.linalg.det
">>> from scipy.linalg import toeplitz, matmul_toeplitz
>>> matmul_toeplitz((c, r), x)
array([[-20., -80.],
       [ -7.,  -8.],
       [  9.,  85.],
       [ 33., 218.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.matmul_toeplitz.html, scipy.linalg.matmul_toeplitz
">>> toeplitz(c, r) @ x
array([[-20, -80],
       [ -7,  -8],
       [  9,  85],
       [ 33, 218]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.matmul_toeplitz.html, scipy.linalg.toeplitz
">>> n = 1000000
>>> matmul_toeplitz([1] + [0]*(n-1), np.ones(n))
array([1., 1., 1., ..., 1., 1., 1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.matmul_toeplitz.html, scipy.linalg.matmul_toeplitz
"# First define the leaf label function.
def llf(id):
    if id < n:
        return str(id)
    else:
        return '[%d %d %1.2f]' % (id, count, R[n-id,3])

# The text for the leaf nodes is going to be big so force
# a rotation of 90 degrees.
dendrogram(Z, leaf_label_func=llf, leaf_rotation=90)

# leaf_label_func can also be used together with ``truncate_mode``,
# in which case you will get your leaves labeled after truncation:
dendrogram(Z, leaf_label_func=llf, leaf_rotation=90,
           truncate_mode='level', p=2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.dendrogram.html, scipy.cluster.hierarchy.dendrogram
"dendrogram(Z, link_color_func=lambda k: colors[k])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.dendrogram.html, scipy.cluster.hierarchy.dendrogram
">>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,
...                    400., 754., 564., 138., 219., 869., 669.])
>>> Z = hierarchy.linkage(ytdist, 'single')
>>> plt.figure()
>>> dn = hierarchy.dendrogram(Z)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.dendrogram.html, scipy.cluster.hierarchy.linkage scipy.cluster.hierarchy.dendrogram
">>> hierarchy.set_link_color_palette(['m', 'c', 'y', 'k'])
>>> fig, axes = plt.subplots(1, 2, figsize=(8, 3))
>>> dn1 = hierarchy.dendrogram(Z, ax=axes[0], above_threshold_color='y',
...                            orientation='top')
>>> dn2 = hierarchy.dendrogram(Z, ax=axes[1],
...                            above_threshold_color='#bcbddc',
...                            orientation='right')
>>> hierarchy.set_link_color_palette(None)  # reset to default after use
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.dendrogram.html, scipy.cluster.hierarchy.set_link_color_palette scipy.cluster.hierarchy.dendrogram
">>> disjoint_set = DisjointSet([1, 2, 3, 'a', 'b'])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet
">>> disjoint_set.merge(1, 2)
True
>>> disjoint_set.merge(3, 'a')
True
>>> disjoint_set.merge('a', 'b')
True
>>> disjoint_set.merge('b', 'b')
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet.merge
">>> disjoint_set.connected(1, 2)
True
>>> disjoint_set.connected(1, 'b')
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet.connected
">>> disjoint_set.subset('a')
{'a', 3, 'b'}
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet.subset
">>> disjoint_set.subset_size('a')
3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet.subset_size
">>> disjoint_set.subsets()
[{1, 2}, {'a', 3, 'b'}]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.DisjointSet.html, scipy.cluster.hierarchy.DisjointSet.subsets
">>> y = pdist(X)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.average.html, scipy.spatial.distance.pdist
">>> Z = average(y)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.20710678,  3.        ],
       [ 5.        , 13.        ,  1.20710678,  3.        ],
       [ 8.        , 14.        ,  1.20710678,  3.        ],
       [11.        , 15.        ,  1.20710678,  3.        ],
       [16.        , 17.        ,  3.39675184,  6.        ],
       [18.        , 19.        ,  3.39675184,  6.        ],
       [20.        , 21.        ,  4.09206523, 12.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.average.html, scipy.cluster.hierarchy.average
">>> fcluster(Z, 0.9, criterion='distance')
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)
>>> fcluster(Z, 1.5, criterion='distance')
array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)
>>> fcluster(Z, 4, criterion='distance')
array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=int32)
>>> fcluster(Z, 6, criterion='distance')
array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.average.html, scipy.cluster.hierarchy.fcluster
">>> q, r = linalg.qr(a)
>>> np.allclose(a, np.dot(q, r))
True
>>> q.shape, r.shape
((9, 9), (9, 6))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html, scipy.linalg.qr
">>> r2 = linalg.qr(a, mode='r')
>>> np.allclose(r, r2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html, scipy.linalg.qr
">>> q3, r3 = linalg.qr(a, mode='economic')
>>> q3.shape, r3.shape
((9, 6), (6, 6))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html, scipy.linalg.qr
">>> q4, r4, p4 = linalg.qr(a, pivoting=True)
>>> d = np.abs(np.diag(r4))
>>> np.all(d[1:] <= d[:-1])
True
>>> np.allclose(a[:, p4], np.dot(q4, r4))
True
>>> q4.shape, r4.shape, p4.shape
((9, 9), (9, 6), (6,))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html, scipy.linalg.qr
">>> q5, r5, p5 = linalg.qr(a, mode='economic', pivoting=True)
>>> q5.shape, r5.shape, p5.shape
((9, 6), (6, 6), (6,))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr.html, scipy.linalg.qr
">>> import numpy as np
>>> from scipy.linalg import block_diag
>>> A = [[1, 0],
...      [0, 1]]
>>> B = [[3, 4, 5],
...      [6, 7, 8]]
>>> C = [[7]]
>>> P = np.zeros((2, 0), dtype='int32')
>>> block_diag(A, B, C)
array([[1, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 3, 4, 5, 0],
       [0, 0, 6, 7, 8, 0],
       [0, 0, 0, 0, 0, 7]])
>>> block_diag(A, P, B, C)
array([[1, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 3, 4, 5, 0],
       [0, 0, 6, 7, 8, 0],
       [0, 0, 0, 0, 0, 7]])
>>> block_diag(1.0, [2, 3], [[4, 5], [6, 7]])
array([[ 1.,  0.,  0.,  0.,  0.],
       [ 0.,  2.,  3.,  0.,  0.],
       [ 0.,  0.,  0.,  4.,  5.],
       [ 0.,  0.,  0.,  6.,  7.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.block_diag.html, scipy.linalg.block_diag
">>> import numpy as np
>>> from scipy.linalg import tanhm, sinhm, coshm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> t = tanhm(a)
>>> t
array([[ 0.3428582 ,  0.51987926],
       [ 0.17329309,  0.86273746]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.tanhm.html, scipy.linalg.tanhm
">>> s = sinhm(a)
>>> c = coshm(a)
>>> t - s.dot(np.linalg.inv(c))
array([[  2.72004641e-15,   4.55191440e-15],
       [  0.00000000e+00,  -5.55111512e-16]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.tanhm.html, scipy.linalg.sinhm scipy.linalg.coshm
">>> y, permscale = linalg.matrix_balance(x)
>>> np.abs(x).sum(axis=0) / np.abs(x).sum(axis=1)
array([ 3.66666667,  0.4995005 ,  0.91312162])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.matrix_balance.html, scipy.linalg.matrix_balance
">>> import numpy as np
>>> from scipy.linalg import diagsvd
>>> vals = np.array([1, 2, 3])  # The array representing the computed svd
>>> diagsvd(vals, 3, 4)
array([[1, 0, 0, 0],
       [0, 2, 0, 0],
       [0, 0, 3, 0]])
>>> diagsvd(vals, 4, 3)
array([[1, 0, 0],
       [0, 2, 0],
       [0, 0, 3],
       [0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.diagsvd.html, scipy.linalg.diagsvd
">>> from scipy.linalg import toeplitz
>>> toeplitz([1,2,3], [1,4,5,6])
array([[1, 4, 5, 6],
       [2, 1, 4, 5],
       [3, 2, 1, 4]])
>>> toeplitz([1.0, 2+3j, 4-1j])
array([[ 1.+0.j,  2.-3.j,  4.+1.j],
       [ 2.+3.j,  1.+0.j,  2.-3.j],
       [ 4.-1.j,  2.+3.j,  1.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.toeplitz.html, scipy.linalg.toeplitz
">>> import numpy as np
>>> from scipy import linalg as la
>>> a = np.array([[0, 1], [0, -1]])
>>> b = np.array([[1, 0], [2, 1]])
>>> q = np.array([[-4, -4], [-4, 7]])
>>> r = np.array([[9, 3], [3, 1]])
>>> x = la.solve_discrete_are(a, b, q, r)
>>> x
array([[-4., -4.],
       [-4.,  7.]])
>>> R = la.solve(r + b.T.dot(x).dot(b), b.T.dot(x).dot(a))
>>> np.allclose(a.T.dot(x).dot(a) - x - a.T.dot(x).dot(b).dot(R), -q)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_discrete_are.html, scipy.linalg.solve_discrete_are
">>> import numpy as np
>>> from scipy.linalg import solve_triangular
>>> a = np.array([[3, 0, 0, 0], [2, 1, 0, 0], [1, 0, 1, 0], [1, 1, 1, 1]])
>>> b = np.array([4, 2, 4, 2])
>>> x = solve_triangular(a, b, lower=True)
>>> x
array([ 1.33333333, -0.66666667,  2.66666667, -1.33333333])
>>> a.dot(x)  # Check the result
array([ 4.,  2.,  4.,  2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_triangular.html, scipy.linalg.solve_triangular
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[0., -1.], [1., 0.]])
>>> linalg.eigvals(a)
array([0.+1.j, 0.-1.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigvals.html, scipy.linalg.eigvals
">>> b = np.array([[0., 1.], [1., 1.]])
>>> linalg.eigvals(a, b)
array([ 1.+0.j, -1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigvals.html, scipy.linalg.eigvals
">>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])
>>> linalg.eigvals(a, homogeneous_eigvals=True)
array([[3.+0.j, 8.+0.j, 7.+0.j],
       [1.+0.j, 1.+0.j, 1.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigvals.html, scipy.linalg.eigvals
">>> import numpy as np
>>> from scipy.linalg import tanhm, sinhm, coshm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> c = coshm(a)
>>> c
array([[ 11.24592233,  38.76236492],
       [ 12.92078831,  50.00828725]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.coshm.html, scipy.linalg.coshm
">>> t = tanhm(a)
>>> s = sinhm(a)
>>> t - s.dot(np.linalg.inv(c))
array([[  2.72004641e-15,   4.55191440e-15],
       [  0.00000000e+00,  -5.55111512e-16]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.coshm.html, scipy.linalg.tanhm scipy.linalg.sinhm
">>> import numpy as np
>>> from scipy.linalg import sqrtm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> r = sqrtm(a)
>>> r
array([[ 0.75592895,  1.13389342],
       [ 0.37796447,  1.88982237]])
>>> r.dot(r)
array([[ 1.,  3.],
       [ 1.,  4.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.sqrtm.html, scipy.linalg.sqrtm
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[  3.,  -2.,  -2.],
...               [  6.,  -7.,   4.],
...               [  7.,   8.,  -6.]])
>>> q, r = linalg.qr(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_insert.html, scipy.linalg.qr
">>> u = np.array([[  6.,  -9.,  -3.],
...               [ -3.,  10.,   1.]])
>>> q1, r1 = linalg.qr_insert(q, r, u, 2, 'row')
>>> q1
array([[-0.25445668,  0.02246245,  0.18146236, -0.72798806,  0.60979671],  # may vary (signs)
       [-0.50891336,  0.23226178, -0.82836478, -0.02837033, -0.00828114],
       [-0.50891336,  0.35715302,  0.38937158,  0.58110733,  0.35235345],
       [ 0.25445668, -0.52202743, -0.32165498,  0.36263239,  0.65404509],
       [-0.59373225, -0.73856549,  0.16065817, -0.0063658 , -0.27595554]])
>>> r1
array([[-11.78982612,   6.44623587,   3.81685018],  # may vary (signs)
       [  0.        , -16.01393278,   3.72202865],
       [  0.        ,   0.        ,  -6.13010256],
       [  0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_insert.html, scipy.linalg.qr_insert
">>> a1 = np.insert(a, 2, u, 0)
>>> a1
array([[  3.,  -2.,  -2.],
       [  6.,  -7.,   4.],
       [  6.,  -9.,  -3.],
       [ -3.,  10.,   1.],
       [  7.,   8.,  -6.]])
>>> q_direct, r_direct = linalg.qr(a1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_insert.html, scipy.linalg.qr
">>> import numpy as np
>>> from scipy.linalg import cho_factor, cho_solve
>>> A = np.array([[9, 3, 1, 5], [3, 7, 5, 1], [1, 5, 9, 2], [5, 1, 2, 6]])
>>> c, low = cho_factor(A)
>>> x = cho_solve((c, low), [1, 1, 1, 1])
>>> np.allclose(A @ x - [1, 1, 1, 1], np.zeros(4))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cho_solve.html, scipy.linalg.cho_factor scipy.linalg.cho_solve
">>> from scipy.linalg import companion
>>> companion([1, -10, 31, -30])
array([[ 10., -31.,  30.],
       [  1.,   0.,   0.],
       [  0.,   1.,   0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.companion.html, scipy.linalg.companion
">>> import numpy as np
>>> a = np.array([[3, 2, 0], [1, -1, 0], [0, 5, 1]])
>>> b = np.array([2, 4, -1])
>>> from scipy import linalg
>>> x = linalg.solve(a, b)
>>> x
array([ 2., -2.,  9.])
>>> np.dot(a, x) == b
array([ True,  True,  True], dtype=bool)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve.html, scipy.linalg.solve
">>> import numpy as np
>>> from scipy.linalg import cossin
>>> from scipy.stats import unitary_group
>>> x = unitary_group.rvs(4)
>>> u, cs, vdh = cossin(x, p=2, q=2)
>>> np.allclose(x, u @ cs @ vdh)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cossin.html, scipy.linalg.cossin
">>> ue, cs, vdh = cossin((x[:2, :2], x[:2, 2:], x[2:, :2], x[2:, 2:]),
...                      compute_u=False)
>>> print(ue)
[]
>>> np.allclose(x, u @ cs @ vdh)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cossin.html, scipy.linalg.cossin
">>> from scipy import cluster
>>> import numpy as np
>>> from numpy.random import default_rng
>>> rng = default_rng()
>>> X = rng.random((50, 4))
>>> Z = cluster.hierarchy.ward(X)
>>> cutree = cluster.hierarchy.cut_tree(Z, n_clusters=[5, 10])
>>> cutree[:10]
array([[0, 0],
       [1, 1],
       [2, 2],
       [3, 3],
       [3, 4],
       [2, 2],
       [0, 0],
       [1, 5],
       [3, 6],
       [4, 7]])  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.cut_tree.html, scipy.cluster.hierarchy.ward scipy.cluster.hierarchy.cut_tree
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[0.2, 0.5],[0.7, -0.9]])
>>> q = np.eye(2)
>>> x = linalg.solve_discrete_lyapunov(a, q)
>>> x
array([[ 0.70872893,  1.43518822],
       [ 1.43518822, -2.4266315 ]])
>>> np.allclose(a.dot(x).dot(a.T)-x, -q)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_discrete_lyapunov.html, scipy.linalg.solve_discrete_lyapunov
">>> import numpy as np
>>> from scipy.linalg import eigvals_banded
>>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])
>>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])
>>> w = eigvals_banded(Ab, lower=True)
>>> w
array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigvals_banded.html, scipy.linalg.eigvals_banded
">>> import numpy as np
>>> from scipy import linalg
>>> from scipy import sparse
>>> rng = np.random.default_rng()
>>> n_rows, n_columns, density, sketch_n_rows = 15000, 100, 0.01, 200
>>> A = sparse.rand(n_rows, n_columns, density=density, format='csc')
>>> B = sparse.rand(n_rows, n_columns, density=density, format='csr')
>>> C = sparse.rand(n_rows, n_columns, density=density, format='coo')
>>> D = rng.standard_normal((n_rows, n_columns))
>>> SA = linalg.clarkson_woodruff_transform(A, sketch_n_rows) # fastest
>>> SB = linalg.clarkson_woodruff_transform(B, sketch_n_rows) # fast
>>> SC = linalg.clarkson_woodruff_transform(C, sketch_n_rows) # slower
>>> SD = linalg.clarkson_woodruff_transform(D, sketch_n_rows) # slowest
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.clarkson_woodruff_transform.html, scipy.sparse.rand scipy.linalg.clarkson_woodruff_transform
">>> sketch_n_rows = 200
>>> sketch = linalg.clarkson_woodruff_transform(A, sketch_n_rows, seed=rng)
>>> sketch.shape
(200, 100)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.clarkson_woodruff_transform.html, scipy.linalg.clarkson_woodruff_transform
">>> linalg.norm(A)
1224.2812927123198
>>> linalg.norm(sketch)
1226.518328407333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.clarkson_woodruff_transform.html, scipy.linalg.norm
">>> b = rng.standard_normal(n_rows)
>>> x = linalg.lstsq(A, b)[0]
>>> Ab = np.hstack((A, b.reshape(-1, 1)))
>>> SAb = linalg.clarkson_woodruff_transform(Ab, sketch_n_rows, seed=rng)
>>> SA, Sb = SAb[:, :-1], SAb[:, -1]
>>> x_sketched = linalg.lstsq(SA, Sb)[0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.clarkson_woodruff_transform.html, scipy.linalg.lstsq scipy.sparse.csr_matrix.reshape scipy.linalg.clarkson_woodruff_transform
">>> linalg.norm(A @ x - b)
122.83242365433877
>>> linalg.norm(A @ x_sketched - b)
166.58473879945151
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.clarkson_woodruff_transform.html, scipy.linalg.norm
">>> Z = median(pdist(X))
>>> R = inconsistent(Z)
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.11803399,  3.        ],
       [ 5.        , 13.        ,  1.11803399,  3.        ],
       [ 8.        , 15.        ,  1.11803399,  3.        ],
       [11.        , 14.        ,  1.11803399,  3.        ],
       [18.        , 19.        ,  3.        ,  6.        ],
       [16.        , 17.        ,  3.5       ,  6.        ],
       [20.        , 21.        ,  3.25      , 12.        ]])
>>> R
array([[1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.74535599, 1.08655358, 3.        , 1.15470054],
       [1.91202266, 1.37522872, 3.        , 1.15470054],
       [3.25      , 0.25      , 3.        , 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.maxinconsts.html, scipy.cluster.hierarchy.median scipy.spatial.distance.pdist scipy.cluster.hierarchy.inconsistent
">>> maxinconsts(Z, R)
array([0.        , 0.        , 0.        , 0.        , 0.70710678,
       0.70710678, 0.70710678, 0.70710678, 1.15470054, 1.15470054,
       1.15470054])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.maxinconsts.html, scipy.cluster.hierarchy.maxinconsts
">>> import numpy as np
>>> from scipy.linalg import polar
>>> a = np.array([[1, -1], [2, 4]])
>>> u, p = polar(a)
>>> u
array([[ 0.85749293, -0.51449576],
       [ 0.51449576,  0.85749293]])
>>> p
array([[ 1.88648444,  1.2004901 ],
       [ 1.2004901 ,  3.94446746]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.polar.html, scipy.linalg.polar
">>> b = np.array([[0.5, 1, 2], [1.5, 3, 4]])
>>> u, p = polar(b)
>>> u
array([[-0.21196618, -0.42393237,  0.88054056],
       [ 0.39378971,  0.78757942,  0.4739708 ]])
>>> p
array([[ 0.48470147,  0.96940295,  1.15122648],
       [ 0.96940295,  1.9388059 ,  2.30245295],
       [ 1.15122648,  2.30245295,  3.65696431]])
>>> u.dot(p)   # Verify the decomposition.
array([[ 0.5,  1. ,  2. ],
       [ 1.5,  3. ,  4. ]])
>>> u.dot(u.T)   # The rows of u are orthonormal.
array([[  1.00000000e+00,  -2.07353665e-17],
       [ -2.07353665e-17,   1.00000000e+00]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.polar.html, scipy.linalg.polar
">>> c = b.T
>>> u, p = polar(c)
>>> u
array([[-0.21196618,  0.39378971],
       [-0.42393237,  0.78757942],
       [ 0.88054056,  0.4739708 ]])
>>> p
array([[ 1.23116567,  1.93241587],
       [ 1.93241587,  4.84930602]])
>>> u.dot(p)   # Verify the decomposition.
array([[ 0.5,  1.5],
       [ 1. ,  3. ],
       [ 2. ,  4. ]])
>>> u.T.dot(u)  # The columns of u are orthonormal.
array([[  1.00000000e+00,  -1.26363763e-16],
       [ -1.26363763e-16,   1.00000000e+00]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.polar.html, scipy.linalg.polar
">>> import numpy as np
>>> from scipy.linalg import tanm, sinm, cosm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> t = tanm(a)
>>> t
array([[ -2.00876993,  -8.41880636],
       [ -2.80626879, -10.42757629]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.tanm.html, scipy.linalg.tanm
">>> s = sinm(a)
>>> c = cosm(a)
>>> s.dot(np.linalg.inv(c))
array([[ -2.00876993,  -8.41880636],
       [ -2.80626879, -10.42757629]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.tanm.html, scipy.linalg.sinm scipy.linalg.cosm
">>> fclusterdata(X, t=1)
array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.fclusterdata.html, scipy.cluster.hierarchy.fclusterdata
">>> Z = median(pdist(X))
>>> R = inconsistent(Z)
>>> R
array([[1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.        , 0.        , 1.        , 0.        ],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.05901699, 0.08346263, 2.        , 0.70710678],
       [1.74535599, 1.08655358, 3.        , 1.15470054],
       [1.91202266, 1.37522872, 3.        , 1.15470054],
       [3.25      , 0.25      , 3.        , 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.maxRstat.html, scipy.cluster.hierarchy.median scipy.spatial.distance.pdist scipy.cluster.hierarchy.inconsistent
">>> maxRstat(Z, R, 0)
array([1.        , 1.        , 1.        , 1.        , 1.05901699,
       1.05901699, 1.05901699, 1.05901699, 1.74535599, 1.91202266,
       3.25      ])
>>> maxRstat(Z, R, 1)
array([0.        , 0.        , 0.        , 0.        , 0.08346263,
       0.08346263, 0.08346263, 0.08346263, 1.08655358, 1.37522872,
       1.37522872])
>>> maxRstat(Z, R, 3)
array([0.        , 0.        , 0.        , 0.        , 0.70710678,
       0.70710678, 0.70710678, 0.70710678, 1.15470054, 1.15470054,
       1.15470054])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.maxRstat.html, scipy.cluster.hierarchy.maxRstat
">>> import numpy as np
>>> from scipy.linalg import pinvh
>>> rng = np.random.default_rng()
>>> a = rng.standard_normal((9, 6))
>>> a = np.dot(a, a.T)
>>> B = pinvh(a)
>>> np.allclose(a, a @ B @ a)
True
>>> np.allclose(B, B @ a @ B)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.pinvh.html, scipy.linalg.pinvh
">>> import numpy as np
>>> from scipy.linalg import issymmetric
>>> A = np.arange(9).reshape(3, 3)
>>> A = A + A.T
>>> issymmetric(A)
True
>>> Ac = np.array([[1. + 1.j, 3.j], [3.j, 2.]])
>>> issymmetric(Ac)  # not Hermitian but symmetric
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.issymmetric.html, scipy.linalg.issymmetric
">>> norm(a)
7.745966692414834
>>> norm(b)
7.745966692414834
>>> norm(b, 'fro')
7.745966692414834
>>> norm(a, np.inf)
4
>>> norm(b, np.inf)
9
>>> norm(a, -np.inf)
0
>>> norm(b, -np.inf)
2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html, scipy.linalg.norm
">>> norm(a, 1)
20
>>> norm(b, 1)
7
>>> norm(a, -1)
-4.6566128774142013e-010
>>> norm(b, -1)
6
>>> norm(a, 2)
7.745966692414834
>>> norm(b, 2)
7.3484692283495345
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html, scipy.linalg.norm
">>> norm(a, -2)
0
>>> norm(b, -2)
1.8570331885190563e-016
>>> norm(a, 3)
5.8480354764257312
>>> norm(a, -3)
0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.norm.html, scipy.linalg.norm
">>> Z = ward(pdist(X))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaves_list.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist
">>> leaves_list(Z)
array([ 2,  0,  1,  5,  3,  4,  8,  6,  7, 11,  9, 10], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaves_list.html, scipy.cluster.hierarchy.leaves_list
">>> fig = plt.figure(figsize=(25, 10))
>>> dn = dendrogram(Z)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.leaves_list.html, scipy.cluster.hierarchy.dendrogram
">>> import numpy as np
>>> a = np.empty((0, 2))
>>> from scipy.linalg import svdvals
>>> svdvals(a)
array([], dtype=float64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svdvals.html, scipy.linalg.svdvals
">>> import numpy as np
>>> from scipy.linalg import svdvals
>>> m = np.array([[1.0, 0.0],
...               [2.0, 3.0],
...               [1.0, 1.0],
...               [0.0, 2.0],
...               [1.0, 0.0]])
>>> svdvals(m)
array([ 4.28091555,  1.63516424])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svdvals.html, scipy.linalg.svdvals
">>> v = np.array([0.1, 0.3, 0.9, 0.3])
>>> p = np.outer(v, v)
>>> svdvals(p)
array([  1.00000000e+00,   2.02021698e-17,   1.56692500e-17,
         8.15115104e-34])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svdvals.html, scipy.linalg.svdvals
">>> from scipy.stats import ortho_group
>>> orth = ortho_group.rvs(4)
>>> svdvals(orth)
array([ 1.,  1.,  1.,  1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.svdvals.html, scipy.linalg.svdvals
">>> Z = ward(pdist(X))
>>> Z
array([[ 0.        ,  1.        ,  1.        ,  2.        ],
       [ 3.        ,  4.        ,  1.        ,  2.        ],
       [ 6.        ,  7.        ,  1.        ,  2.        ],
       [ 9.        , 10.        ,  1.        ,  2.        ],
       [ 2.        , 12.        ,  1.29099445,  3.        ],
       [ 5.        , 13.        ,  1.29099445,  3.        ],
       [ 8.        , 14.        ,  1.29099445,  3.        ],
       [11.        , 15.        ,  1.29099445,  3.        ],
       [16.        , 17.        ,  5.77350269,  6.        ],
       [18.        , 19.        ,  5.77350269,  6.        ],
       [20.        , 21.        ,  8.16496581, 12.        ]])
>>> is_valid_linkage(Z)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_valid_linkage.html, scipy.cluster.hierarchy.ward scipy.spatial.distance.pdist scipy.cluster.hierarchy.is_valid_linkage
">>> Z[3][1] = 20    # the cluster number 20 is not defined at this point
>>> is_valid_linkage(Z)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.is_valid_linkage.html, scipy.cluster.hierarchy.is_valid_linkage
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[1., 2.], [3., 4.]])
>>> linalg.inv(a)
array([[-2. ,  1. ],
       [ 1.5, -0.5]])
>>> np.dot(a, linalg.inv(a))
array([[ 1.,  0.],
       [ 0.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.inv.html, scipy.linalg.inv
">>> from scipy.linalg import signm, eigvals
>>> a = [[1,2,3], [1,2,1], [1,1,1]]
>>> eigvals(a)
array([ 4.12488542+0.j, -0.76155718+0.j,  0.63667176+0.j])
>>> eigvals(signm(a))
array([-1.+0.j,  1.+0.j,  1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.signm.html, scipy.linalg.eigvals scipy.linalg.signm
">>> import numpy as np
>>> from scipy import linalg
>>> rng = np.random.default_rng()
>>> a = rng.standard_normal((6, 9))
>>> r, q = linalg.rq(a)
>>> np.allclose(a, r @ q)
True
>>> r.shape, q.shape
((6, 9), (9, 9))
>>> r2 = linalg.rq(a, mode='r')
>>> np.allclose(r, r2)
True
>>> r3, q3 = linalg.rq(a, mode='economic')
>>> r3.shape, q3.shape
((6, 6), (6, 9))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.rq.html, scipy.linalg.rq
">>> import numpy as np
>>> from scipy.linalg import lu
>>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])
>>> p, l, u = lu(A)
>>> np.allclose(A, p @ l @ u)
True
>>> p  # Permutation matrix
array([[0., 1., 0., 0.],  # Row index 1
       [0., 0., 0., 1.],  # Row index 3
       [1., 0., 0., 0.],  # Row index 0
       [0., 0., 1., 0.]]) # Row index 2
>>> p, _, _ = lu(A, p_indices=True)
>>> p
array([1, 3, 0, 2])  # as given by row indices above
>>> np.allclose(A, l[p, :] @ u)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lu.html, scipy.linalg.lu
">>> rng = np.random.default_rng()
>>> A = rng.uniform(low=-4, high=4, size=[3, 2, 4, 8])
>>> p, l, u = lu(A)
>>> p.shape, l.shape, u.shape
((3, 2, 4, 4), (3, 2, 4, 4), (3, 2, 4, 8))
>>> np.allclose(A, p @ l @ u)
True
>>> PL, U = lu(A, permute_l=True)
>>> np.allclose(A, PL @ U)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lu.html, scipy.linalg.lu
">>> import numpy as np
>>> from scipy.linalg import hadamard, subspace_angles
>>> rng = np.random.default_rng()
>>> H = hadamard(4)
>>> print(H)
[[ 1  1  1  1]
 [ 1 -1  1 -1]
 [ 1  1 -1 -1]
 [ 1 -1 -1  1]]
>>> np.rad2deg(subspace_angles(H[:, :2], H[:, 2:]))
array([ 90.,  90.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.subspace_angles.html, scipy.linalg.subspace_angles
">>> subspace_angles(H[:, :2], H[:, :2]) <= 2 * np.finfo(float).eps
array([ True,  True], dtype=bool)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.subspace_angles.html, scipy.linalg.subspace_angles
">>> x = rng.standard_normal((4, 3))
>>> np.rad2deg(subspace_angles(x[:, :2], x[:, [2]]))
array([ 55.832])  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.subspace_angles.html, scipy.linalg.subspace_angles
">>> from numpy import linalg as LA
>>> LA.inv(np.zeros((2,2)))
Traceback (most recent call last):
  File """", line 1, in 
  File ""...linalg.py"", line 350,
    in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))
  File ""...linalg.py"", line 249,
    in solve
    raise LinAlgError('Singular matrix')
numpy.linalg.LinAlgError: Singular matrix
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.LinAlgError.html, scipy.linalg.LinAlgError
">>> from scipy.linalg import solve_toeplitz, toeplitz
>>> x = solve_toeplitz((c, r), b)
>>> x
array([ 1.66666667, -1.        , -2.66666667,  2.33333333])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_toeplitz.html, scipy.linalg.solve_toeplitz
">>> T = toeplitz(c, r)
>>> T.dot(x)
array([ 1.,  2.,  2.,  5.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_toeplitz.html, scipy.linalg.toeplitz
">>> import numpy as np
>>> from scipy.linalg import cholesky
>>> a = np.array([[1,-2j],[2j,5]])
>>> L = cholesky(a, lower=True)
>>> L
array([[ 1.+0.j,  0.+0.j],
       [ 0.+2.j,  1.+0.j]])
>>> L @ L.T.conj()
array([[ 1.+0.j,  0.-2.j],
       [ 0.+2.j,  5.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cholesky.html, scipy.linalg.cholesky
">>> from scipy.linalg import helmert
>>> helmert(5, full=True)
array([[ 0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ,  0.4472136 ],
       [ 0.70710678, -0.70710678,  0.        ,  0.        ,  0.        ],
       [ 0.40824829,  0.40824829, -0.81649658,  0.        ,  0.        ],
       [ 0.28867513,  0.28867513,  0.28867513, -0.8660254 ,  0.        ],
       [ 0.2236068 ,  0.2236068 ,  0.2236068 ,  0.2236068 , -0.89442719]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.helmert.html, scipy.linalg.helmert
">>> from scipy.linalg import hilbert
>>> hilbert(3)
array([[ 1.        ,  0.5       ,  0.33333333],
       [ 0.5       ,  0.33333333,  0.25      ],
       [ 0.33333333,  0.25      ,  0.2       ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hilbert.html, scipy.linalg.hilbert
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[-3, -2, 0], [-1, -1, 0], [0, -5, -1]])
>>> b = np.array([2, 4, -1])
>>> q = np.eye(3)
>>> x = linalg.solve_continuous_lyapunov(a, q)
>>> x
array([[ -0.75  ,   0.875 ,  -3.75  ],
       [  0.875 ,  -1.375 ,   5.3125],
       [ -3.75  ,   5.3125, -27.0625]])
>>> np.allclose(a.dot(x) + x.dot(a.T), q)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_continuous_lyapunov.html, scipy.linalg.solve_continuous_lyapunov
">>> import numpy as np
>>> from scipy.linalg import schur, eigvals
>>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])
>>> T, Z = schur(A)
>>> T
array([[ 2.65896708,  1.42440458, -1.92933439],
       [ 0.        , -0.32948354, -0.49063704],
       [ 0.        ,  1.31178921, -0.32948354]])
>>> Z
array([[0.72711591, -0.60156188, 0.33079564],
       [0.52839428, 0.79801892, 0.28976765],
       [0.43829436, 0.03590414, -0.89811411]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.schur.html, scipy.linalg.schur
">>> T2, Z2 = schur(A, output='complex')
>>> T2
array([[ 2.65896708, -1.22839825+1.32378589j,  0.42590089+1.51937378j], # may vary
       [ 0.        , -0.32948354+0.80225456j, -0.59877807+0.56192146j],
       [ 0.        ,  0.                    , -0.32948354-0.80225456j]])
>>> eigvals(T2)
array([2.65896708, -0.32948354+0.80225456j, -0.32948354-0.80225456j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.schur.html, scipy.linalg.schur scipy.linalg.eigvals
">>> T3, Z3, sdim = schur(A, output='complex', sort=lambda x: x.imag > 0)
>>> sdim
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.schur.html, scipy.linalg.schur
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[  3.,  -2.,  -2.],
...               [  6.,  -9.,  -3.],
...               [ -3.,  10.,   1.],
...               [  6.,  -7.,   4.],
...               [  7.,   8.,  -6.]])
>>> q, r = linalg.qr(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_delete.html, scipy.linalg.qr
">>> a1 = np.delete(a, slice(2,4), 0)
>>> a1
array([[ 3., -2., -2.],
       [ 6., -9., -3.],
       [ 7.,  8., -6.]])
>>> q_direct, r_direct = linalg.qr(a1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_delete.html, scipy.linalg.qr
">>> from scipy.linalg import leslie
>>> leslie([0.1, 2.0, 1.0, 0.1], [0.2, 0.8, 0.7])
array([[ 0.1,  2. ,  1. ,  0.1],
       [ 0.2,  0. ,  0. ,  0. ],
       [ 0. ,  0.8,  0. ,  0. ],
       [ 0. ,  0. ,  0.7,  0. ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.leslie.html, scipy.linalg.leslie
"type 1 and 3 :      v.conj().T @ a @ v = w
type 2       : inv(v).conj().T @ a @ inv(v) = w

type 1 or 2  :      v.conj().T @ b @ v  = I
type 3       : v.conj().T @ inv(b) @ v  = I
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigh.html, scipy.linalg.inv
">>> import numpy as np
>>> from scipy.linalg import tanhm, sinhm, coshm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> s = sinhm(a)
>>> s
array([[ 10.57300653,  39.28826594],
       [ 13.09608865,  49.86127247]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.sinhm.html, scipy.linalg.sinhm
">>> t = tanhm(a)
>>> c = coshm(a)
>>> t - s.dot(np.linalg.inv(c))
array([[  2.72004641e-15,   4.55191440e-15],
       [  0.00000000e+00,  -5.55111512e-16]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.sinhm.html, scipy.linalg.tanhm scipy.linalg.coshm
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[1, 2, 3], [4, 5, 6]])
>>> b = np.array([[3, 4, 5], [6, 7, 8], [2, 3, 9]])
>>> linalg.khatri_rao(a, b)
array([[ 3,  8, 15],
       [ 6, 14, 24],
       [ 2,  6, 27],
       [12, 20, 30],
       [24, 35, 48],
       [ 8, 15, 54]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.khatri_rao.html, scipy.linalg.khatri_rao
">>> import numpy as np
>>> from scipy.linalg import solve_banded
>>> ab = np.array([[0,  0, -1, -1, -1],
...                [0,  2,  2,  2,  2],
...                [5,  4,  3,  2,  1],
...                [1,  1,  1,  1,  0]])
>>> b = np.array([0, 1, 2, 2, 3])
>>> x = solve_banded((1, 2), ab, b)
>>> x
array([-2.37288136,  3.93220339, -4.        ,  4.3559322 , -1.3559322 ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_banded.html, scipy.linalg.solve_banded
">>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])
>>> expm(1j*a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
>>> cosm(a) + 1j*sinm(a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cosm.html, scipy.linalg.expm scipy.linalg.cosm scipy.linalg.sinm
">>> import numpy as np
>>> from scipy.linalg import fractional_matrix_power
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> b = fractional_matrix_power(a, 0.5)
>>> b
array([[ 0.75592895,  1.13389342],
       [ 0.37796447,  1.88982237]])
>>> np.dot(b, b)      # Verify square root
array([[ 1.,  3.],
       [ 1.,  4.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.fractional_matrix_power.html, scipy.linalg.fractional_matrix_power
">>> A = rng.standard_normal((3, 3))
>>> E = rng.standard_normal((3, 3))
>>> expm_A, expm_frechet_AE = linalg.expm_frechet(A, E)
>>> expm_A.shape, expm_frechet_AE.shape
((3, 3), (3, 3))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.expm_frechet.html, scipy.linalg.expm_frechet
">>> expm_M = linalg.expm(M)
>>> np.allclose(expm_A, expm_M[:3, :3])
True
>>> np.allclose(expm_frechet_AE, expm_M[:3, 3:])
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.expm_frechet.html, scipy.linalg.expm
">>> from scipy.linalg import hankel
>>> hankel([1, 17, 99])
array([[ 1, 17, 99],
       [17, 99,  0],
       [99,  0,  0]])
>>> hankel([1,2,3,4], [4,7,7,8,9])
array([[1, 2, 3, 4, 7],
       [2, 3, 4, 7, 7],
       [3, 4, 7, 7, 8],
       [4, 7, 7, 8, 9]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hankel.html, scipy.linalg.hankel
">>> import numpy as np
>>> from scipy.linalg import eig_banded
>>> A = np.array([[1, 5, 2, 0], [5, 2, 5, 2], [2, 5, 3, 5], [0, 2, 5, 4]])
>>> Ab = np.array([[1, 2, 3, 4], [5, 5, 5, 0], [2, 2, 0, 0]])
>>> w, v = eig_banded(Ab, lower=True)
>>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))
True
>>> w = eig_banded(Ab, lower=True, eigvals_only=True)
>>> w
array([-4.26200532, -2.22987175,  3.95222349, 12.53965359])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig_banded.html, scipy.linalg.eig_banded
">>> w, v = eig_banded(Ab, lower=True, select='v', select_range=[-3, 4])
>>> w
array([-2.22987175,  3.95222349])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig_banded.html, scipy.linalg.eig_banded
"func([1.0, 3.0, np.nan, 5.0], nan_policy='omit')
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func([1.0, 3.0, 5.0])
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"y = func(a, nan_policy='omit')
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"nan_mask = np.isnan(a)
y = np.empty(a.shape, dtype=np.float64)
y[~nan_mask] = func(a[~nan_mask])
y[nan_mask] = np.nan
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func(a, b, nan_policy='omit')
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func(a[~np.isnan(a)], b[~np.isnan(b)])
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"y = func(a, b, nan_policy='omit')
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"hasnan = np.isnan(a) | np.isnan(b)  # Union of the isnan masks.
y = func(a[~hasnan], b[~hasnan])
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func([1, 3, 4])     -> 10.0
func([2, -3, 8, 2]) ->  4.2
func([7, 8])        ->  9.5
func([])            -> -inf
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func([[  1, nan,   3,   4],
      [  2,  -3,   8,   2],
      [nan,   7, nan,   8],
      [nan, nan, nan, nan]], nan_policy='omit', axis=-1)
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func([nan, nan, nan], nan_policy='omit')
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
"func([])
",https://docs.scipy.org/doc/scipy/dev/api-dev/nan_policy.html, scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy.linalg import hessenberg
>>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])
>>> H, Q = hessenberg(A, calc_q=True)
>>> H
array([[  2.        , -11.65843866,   1.42005301,   0.25349066],
       [ -9.94987437,  14.53535354,  -5.31022304,   2.43081618],
       [  0.        ,  -1.83299243,   0.38969961,  -0.51527034],
       [  0.        ,   0.        ,  -3.83189513,   1.07494686]])
>>> np.allclose(Q @ H @ Q.conj().T - A, np.zeros((4, 4)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hessenberg.html, scipy.linalg.hessenberg
">>> import numpy as np
>>> from scipy.linalg import ishermitian
>>> A = np.arange(9).reshape(3, 3)
>>> A = A + A.T
>>> ishermitian(A)
True
>>> A = np.array([[1., 2. + 3.j], [2. - 3.j, 4.]])
>>> ishermitian(A)
True
>>> Ac = np.array([[1. + 1.j, 3.j], [3.j, 2.]])
>>> ishermitian(Ac)  # not Hermitian but symmetric
False
>>> Af = np.array([[0, 1 + 1j], [1 - (1+1e-12)*1j, 0]])
>>> ishermitian(Af)
False
>>> ishermitian(Af, atol=5e-11) # almost hermitian with atol
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.ishermitian.html, scipy.linalg.ishermitian
">>> import numpy as np
>>> from scipy.linalg import cholesky_banded
>>> from numpy import allclose, zeros, diag
>>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])
>>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)
>>> A = A + A.conj().T + np.diag(Ab[2, :])
>>> c = cholesky_banded(Ab)
>>> C = np.diag(c[0, 2:], k=2) + np.diag(c[1, 1:], k=1) + np.diag(c[2, :])
>>> np.allclose(C.conj().T @ C - A, np.zeros((5, 5)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cholesky_banded.html, scipy.sparse.csc_matrix.conj scipy.linalg.cholesky_banded
">>> import numpy as np
>>> from scipy.linalg import bandwidth
>>> A = np.array([[3., 0., 0., 0., 0.],
...               [0., 4., 0., 0., 0.],
...               [0., 0., 5., 1., 0.],
...               [8., 0., 0., 6., 2.],
...               [0., 9., 0., 0., 7.]])
>>> bandwidth(A)
(3, 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.bandwidth.html, scipy.linalg.bandwidth
">>> AA, BB, Q, Z = qz(A, B)
>>> AA
array([[-1.36949157, -4.05459025,  7.44389431],
       [ 0.        ,  7.65653432,  5.13476017],
       [ 0.        , -0.65978437,  2.4186015 ]])  # may vary
>>> BB
array([[ 1.71890633, -1.64723705, -0.72696385],
       [ 0.        ,  8.6965692 , -0.        ],
       [ 0.        ,  0.        ,  2.27446233]])  # may vary
>>> Q
array([[-0.37048362,  0.1903278 ,  0.90912992],
       [-0.90073232,  0.16534124, -0.40167593],
       [ 0.22676676,  0.96769706, -0.11017818]])  # may vary
>>> Z
array([[-0.67660785,  0.63528924, -0.37230283],
       [ 0.70243299,  0.70853819, -0.06753907],
       [ 0.22088393, -0.30721526, -0.92565062]])  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qz.html, scipy.linalg.qz
">>> AA, BB, Q, Z = qz(A, B, output='complex')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qz.html, scipy.linalg.qz
">>> from scipy import linalg
>>> w, v = linalg.eig(X)
>>> w
array([ 1.+0.j,  4.+5.j,  4.-5.j])
>>> v
array([[ 1.00000+0.j     , -0.01906-0.40016j, -0.01906+0.40016j],
       [ 0.00000+0.j     ,  0.00000-0.64788j,  0.00000+0.64788j],
       [ 0.00000+0.j     ,  0.64788+0.j     ,  0.64788-0.j     ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cdf2rdf.html, scipy.linalg.eig
">>> wr, vr = linalg.cdf2rdf(w, v)
>>> wr
array([[ 1.,  0.,  0.],
       [ 0.,  4.,  5.],
       [ 0., -5.,  4.]])
>>> vr
array([[ 1.     ,  0.40016, -0.01906],
       [ 0.     ,  0.64788,  0.     ],
       [ 0.     ,  0.     ,  0.64788]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cdf2rdf.html, scipy.linalg.cdf2rdf
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[0., -1.], [1., 0.]])
>>> linalg.eigvals(a)
array([0.+1.j, 0.-1.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html, scipy.linalg.eigvals
">>> b = np.array([[0., 1.], [1., 1.]])
>>> linalg.eigvals(a, b)
array([ 1.+0.j, -1.+0.j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html, scipy.linalg.eigvals
">>> a = np.array([[3., 0., 0.], [0., 8., 0.], [0., 0., 7.]])
>>> linalg.eigvals(a, homogeneous_eigvals=True)
array([[3.+0.j, 8.+0.j, 7.+0.j],
       [1.+0.j, 1.+0.j, 1.+0.j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html, scipy.linalg.eigvals
">>> a = np.array([[0., -1.], [1., 0.]])
>>> linalg.eigvals(a) == linalg.eig(a)[0]
array([ True,  True])
>>> linalg.eig(a, left=True, right=False)[1] # normalized left eigenvector
array([[-0.70710678+0.j        , -0.70710678-0.j        ],
       [-0.        +0.70710678j, -0.        -0.70710678j]])
>>> linalg.eig(a, left=False, right=True)[1] # normalized right eigenvector
array([[0.70710678+0.j        , 0.70710678-0.j        ],
       [0.        -0.70710678j, 0.        +0.70710678j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eig.html, scipy.linalg.eigvals scipy.linalg.eig
">>> import numpy as np
>>> import scipy.linalg as LA
>>> rng = np.random.default_rng()
>>> a = rng.random((3,2))
>>> x_gemv = LA.get_blas_funcs('gemv', (a,))
>>> x_gemv.typecode
'd'
>>> x_gemv = LA.get_blas_funcs('gemv',(a*1j,))
>>> x_gemv.typecode
'z'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.get_blas_funcs.html, scipy.linalg.get_blas_funcs
">>> from numpy import array
>>> from scipy.linalg import kron
>>> kron(array([[1,2],[3,4]]), array([[1,1,1]]))
array([[1, 1, 1, 2, 2, 2],
       [3, 3, 3, 4, 4, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.kron.html, scipy.linalg.kron
">>> import numpy as np
>>> from scipy.linalg import ldl
>>> a = np.array([[2, -1, 3], [0, 2, 0], [0, 0, 1]])
>>> lu, d, perm = ldl(a, lower=0) # Use the upper part
>>> lu
array([[ 0. ,  0. ,  1. ],
       [ 0. ,  1. , -0.5],
       [ 1. ,  1. ,  1.5]])
>>> d
array([[-5. ,  0. ,  0. ],
       [ 0. ,  1.5,  0. ],
       [ 0. ,  0. ,  2. ]])
>>> perm
array([2, 1, 0])
>>> lu[perm, :]
array([[ 1. ,  1. ,  1.5],
       [ 0. ,  1. , -0.5],
       [ 0. ,  0. ,  1. ]])
>>> lu.dot(d).dot(lu.T)
array([[ 2., -1.,  3.],
       [-1.,  2.,  0.],
       [ 3.,  0.,  1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.ldl.html, scipy.linalg.ldl
">>> import numpy as np
>>> from scipy.linalg import cholesky_banded, cho_solve_banded
>>> Ab = np.array([[0, 0, 1j, 2, 3j], [0, -1, -2, 3, 4], [9, 8, 7, 6, 9]])
>>> A = np.diag(Ab[0,2:], k=2) + np.diag(Ab[1,1:], k=1)
>>> A = A + A.conj().T + np.diag(Ab[2, :])
>>> c = cholesky_banded(Ab)
>>> x = cho_solve_banded((c, False), np.ones(5))
>>> np.allclose(A @ x - np.ones(5), np.zeros(5))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.cho_solve_banded.html, scipy.sparse.csc_matrix.conj scipy.linalg.cholesky_banded scipy.linalg.cho_solve_banded
">>> from scipy.linalg import circulant
>>> circulant([1, 2, 3])
array([[1, 3, 2],
       [2, 1, 3],
       [3, 2, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.circulant.html, scipy.linalg.circulant
">>> from scipy.linalg import eigh
>>> def funm_herm(a, func, check_finite=False):
...     w, v = eigh(a, check_finite=check_finite)
...     ## if you further know that your matrix is positive semidefinite,
...     ## you can optionally guard against precision errors by doing
...     # w = np.maximum(w, 0)
...     w = func(w)
...     return (v * w).dot(v.conj().T)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.funm.html, scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy.linalg import funm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> funm(a, lambda x: x*x)
array([[  4.,  15.],
       [  5.,  19.]])
>>> a.dot(a)
array([[  4.,  15.],
       [  5.,  19.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.funm.html, scipy.linalg.funm
">>> import numpy as np
>>> from scipy.linalg import ordqz
>>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])
>>> B = np.array([[0, 6, 0, 0], [5, 0, 2, 1], [5, 2, 6, 6], [4, 7, 7, 7]])
>>> AA, BB, alpha, beta, Q, Z = ordqz(A, B, sort='lhp')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.ordqz.html, scipy.linalg.ordqz
">>> import numpy as np
>>> from scipy.linalg import lu_factor
>>> A = np.array([[2, 5, 8, 7], [5, 2, 2, 8], [7, 5, 6, 6], [5, 4, 4, 8]])
>>> lu, piv = lu_factor(A)
>>> piv
array([2, 2, 3, 3], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lu_factor.html, scipy.linalg.lu_factor
">>> import numpy as np
>>> from scipy.linalg import eigvalsh_tridiagonal, eigvalsh
>>> d = 3*np.ones(4)
>>> e = -1*np.ones(3)
>>> w = eigvalsh_tridiagonal(d, e)
>>> A = np.diag(d) + np.diag(e, k=1) + np.diag(e, k=-1)
>>> w2 = eigvalsh(A)  # Verify with other eigenvalue routines
>>> np.allclose(w - w2, np.zeros(4))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.eigvalsh_tridiagonal.html, scipy.linalg.eigvalsh_tridiagonal
">>> a = rng.random((3,2))
>>> x_lange = LA.get_lapack_funcs('lange', (a,))
>>> x_lange.typecode
'd'
>>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))
>>> x_lange.typecode
'z'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.get_lapack_funcs.html, scipy.linalg.get_lapack_funcs
">>> a = rng.random((1000, 1000))
>>> b = rng.random((1000, 1)) * 1j
>>> # We pick up zsysv and zsysv_lwork due to b array
... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))
>>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix
>>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.get_lapack_funcs.html, scipy.linalg.get_lapack_funcs
">>> import numpy as np
>>> from scipy.linalg import expm_cond
>>> A = np.array([[-0.3, 0.2, 0.6], [0.6, 0.3, -0.1], [-0.7, 1.2, 0.9]])
>>> k = expm_cond(A)
>>> k
1.7787805864469866
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.expm_cond.html, scipy.linalg.expm_cond
">>> import numpy as np
>>> from scipy.linalg import dft
>>> np.set_printoptions(precision=2, suppress=True)  # for compact output
>>> m = dft(5)
>>> m
array([[ 1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ,  1.  +0.j  ],
       [ 1.  +0.j  ,  0.31-0.95j, -0.81-0.59j, -0.81+0.59j,  0.31+0.95j],
       [ 1.  +0.j  , -0.81-0.59j,  0.31+0.95j,  0.31-0.95j, -0.81+0.59j],
       [ 1.  +0.j  , -0.81+0.59j,  0.31-0.95j,  0.31+0.95j, -0.81-0.59j],
       [ 1.  +0.j  ,  0.31+0.95j, -0.81+0.59j, -0.81-0.59j,  0.31-0.95j]])
>>> x = np.array([1, 2, 3, 0, 3])
>>> m @ x  # Compute the DFT of x
array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.dft.html, scipy.linalg.dft
">>> from scipy.fft import fft
>>> fft(x)     # Same result as m @ x
array([ 9.  +0.j  ,  0.12-0.81j, -2.12+3.44j, -2.12-3.44j,  0.12+0.81j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.dft.html, scipy.fft.fft
">>> import numpy as np
>>> from scipy.linalg import schur, rsf2csf
>>> A = np.array([[0, 2, 2], [0, 1, 2], [1, 0, 1]])
>>> T, Z = schur(A)
>>> T
array([[ 2.65896708,  1.42440458, -1.92933439],
       [ 0.        , -0.32948354, -0.49063704],
       [ 0.        ,  1.31178921, -0.32948354]])
>>> Z
array([[0.72711591, -0.60156188, 0.33079564],
       [0.52839428, 0.79801892, 0.28976765],
       [0.43829436, 0.03590414, -0.89811411]])
>>> T2 , Z2 = rsf2csf(T, Z)
>>> T2
array([[2.65896708+0.j, -1.64592781+0.743164187j, -1.21516887+1.00660462j],
       [0.+0.j , -0.32948354+8.02254558e-01j, -0.82115218-2.77555756e-17j],
       [0.+0.j , 0.+0.j, -0.32948354-0.802254558j]])
>>> Z2
array([[0.72711591+0.j,  0.28220393-0.31385693j,  0.51319638-0.17258824j],
       [0.52839428+0.j,  0.24720268+0.41635578j, -0.68079517-0.15118243j],
       [0.43829436+0.j, -0.76618703+0.01873251j, -0.03063006+0.46857912j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.rsf2csf.html, scipy.linalg.schur scipy.linalg.rsf2csf
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[1,2,3], [4,5,6], [7,8,9]])  # A singular matrix
>>> linalg.det(a)
0.0
>>> b = np.array([[0,2,3], [4,5,6], [7,8,9]])
>>> linalg.det(b)
3.0
>>> # An array with the shape (3, 2, 2, 2)
>>> c = np.array([[[[1., 2.], [3., 4.]],
...                [[5., 6.], [7., 8.]]],
...               [[[9., 10.], [11., 12.]],
...                [[13., 14.], [15., 16.]]],
...               [[[17., 18.], [19., 20.]],
...                [[21., 22.], [23., 24.]]]])
>>> linalg.det(c)  # The resulting shape is (3, 2)
array([[-2., -2.],
       [-2., -2.],
       [-2., -2.]])
>>> linalg.det(c[0, 0])  # Confirm the (0, 0) slice, [[1, 2], [3, 4]]
-2.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.det.html, scipy.linalg.det
"x = ifft(fft(b) / fft(c))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.fftpack.ifft scipy.fft.fft
">>> c = np.array([2, 2, 4])
>>> b = np.array([1, 2, 3])
>>> solve_circulant(c, b)
array([ 0.75, -0.25,  0.25])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.solve_circulant
">>> solve(circulant(c), b)
array([ 0.75, -0.25,  0.25])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.solve scipy.linalg.circulant
">>> solve_circulant(c, b, singular='lstsq')
array([ 0.25,  1.25,  2.25,  1.25])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.solve_circulant
">>> x, resid, rnk, s = lstsq(circulant(c), b)
>>> x
array([ 0.25,  1.25,  2.25,  1.25])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.lstsq scipy.linalg.circulant
">>> x = solve_circulant(c[:, np.newaxis, :], b, baxis=-1, outaxis=-1)
>>> x.shape
(2, 3, 5)
>>> np.set_printoptions(precision=3)  # For compact output of numbers.
>>> x
array([[[-0.118,  0.22 ,  1.277, -0.142,  0.302],
        [ 0.651,  0.989,  2.046,  0.627,  1.072],
        [ 1.42 ,  1.758,  2.816,  1.396,  1.841]],
       [[ 0.401,  0.304,  0.694, -0.867,  0.377],
        [ 0.856,  0.758,  1.149, -0.412,  0.831],
        [ 1.31 ,  1.213,  1.603,  0.042,  1.286]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.solve_circulant
">>> solve_circulant(c[1], b[1, :])
array([ 0.856,  0.758,  1.149, -0.412,  0.831])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solve_circulant.html, scipy.linalg.solve_circulant
"A = convolution_matrix(a, n, mode)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.convolution_matrix.html, scipy.linalg.convolution_matrix
">>> import numpy as np
>>> from scipy.linalg import convolution_matrix
>>> A = convolution_matrix([-1, 4, -2], 5, mode='same')
>>> A
array([[ 4, -1,  0,  0,  0],
       [-2,  4, -1,  0,  0],
       [ 0, -2,  4, -1,  0],
       [ 0,  0, -2,  4, -1],
       [ 0,  0,  0, -2,  4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.convolution_matrix.html, scipy.linalg.convolution_matrix
">>> convolution_matrix([-1, 4, -2], 5, mode='full')
array([[-1,  0,  0,  0,  0],
       [ 4, -1,  0,  0,  0],
       [-2,  4, -1,  0,  0],
       [ 0, -2,  4, -1,  0],
       [ 0,  0, -2,  4, -1],
       [ 0,  0,  0, -2,  4],
       [ 0,  0,  0,  0, -2]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.convolution_matrix.html, scipy.linalg.convolution_matrix
">>> convolution_matrix([-1, 4, -2], 5, mode='valid')
array([[-2,  4, -1,  0,  0],
       [ 0, -2,  4, -1,  0],
       [ 0,  0, -2,  4, -1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.convolution_matrix.html, scipy.linalg.convolution_matrix
">>> import numpy as np
>>> from scipy import linalg
>>> a = np.array([[  3.,  -2.,  -2.],
...               [  6.,  -9.,  -3.],
...               [ -3.,  10.,   1.],
...               [  6.,  -7.,   4.],
...               [  7.,   8.,  -6.]])
>>> q, r = linalg.qr(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_update.html, scipy.linalg.qr
">>> u = np.array([7., -2., 4., 3., 5.])
>>> v = np.array([1., 3., -5.])
>>> q_up, r_up = linalg.qr_update(q, r, u, v, False)
>>> q_up
array([[ 0.54073807,  0.18645997,  0.81707661, -0.02136616,  0.06902409],  # may vary (signs)
       [ 0.21629523, -0.63257324,  0.06567893,  0.34125904, -0.65749222],
       [ 0.05407381,  0.64757787, -0.12781284, -0.20031219, -0.72198188],
       [ 0.48666426, -0.30466718, -0.27487277, -0.77079214,  0.0256951 ],
       [ 0.64888568,  0.23001   , -0.4859845 ,  0.49883891,  0.20253783]])
>>> r_up
array([[ 18.49324201,  24.11691794, -44.98940746],  # may vary (signs)
       [  0.        ,  31.95894662, -27.40998201],
       [  0.        ,   0.        ,  -9.25451794],
       [  0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_update.html, scipy.linalg.qr_update
">>> a_up = a + np.outer(u, v)
>>> q_direct, r_direct = linalg.qr(a_up)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_update.html, scipy.linalg.qr
">>> qe, re = linalg.qr(a, mode='economic')
>>> qe_up, re_up = linalg.qr_update(qe, re, u, v, False)
>>> qe_up
array([[ 0.54073807,  0.18645997,  0.81707661],  # may vary (signs)
       [ 0.21629523, -0.63257324,  0.06567893],
       [ 0.05407381,  0.64757787, -0.12781284],
       [ 0.48666426, -0.30466718, -0.27487277],
       [ 0.64888568,  0.23001   , -0.4859845 ]])
>>> re_up
array([[ 18.49324201,  24.11691794, -44.98940746],  # may vary (signs)
       [  0.        ,  31.95894662, -27.40998201],
       [  0.        ,   0.        ,  -9.25451794]])
>>> np.allclose(np.dot(qe_up, re_up), a_up)
True
>>> np.allclose(np.dot(qe_up.T, qe_up), np.eye(3))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_update.html, scipy.linalg.qr scipy.linalg.qr_update
">>> u2 = np.array([[ 7., -1,],
...                [-2.,  4.],
...                [ 4.,  2.],
...                [ 3., -6.],
...                [ 5.,  3.]])
>>> v2 = np.array([[ 1., 2.],
...                [ 3., 4.],
...                [-5., 2]])
>>> q_up2, r_up2 = linalg.qr_update(q, r, u2, v2, False)
>>> q_up2
array([[-0.33626508, -0.03477253,  0.61956287, -0.64352987, -0.29618884],  # may vary (signs)
       [-0.50439762,  0.58319694, -0.43010077, -0.33395279,  0.33008064],
       [-0.21016568, -0.63123106,  0.0582249 , -0.13675572,  0.73163206],
       [ 0.12609941,  0.49694436,  0.64590024,  0.31191919,  0.47187344],
       [-0.75659643, -0.11517748,  0.10284903,  0.5986227 , -0.21299983]])
>>> r_up2
array([[-23.79075451, -41.1084062 ,  24.71548348],  # may vary (signs)
       [  0.        , -33.83931057,  11.02226551],
       [  0.        ,   0.        ,  48.91476811],
       [  0.        ,   0.        ,   0.        ],
       [  0.        ,   0.        ,   0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_update.html, scipy.linalg.qr_update
">>> ab = np.array([[ 4,  5,  6,  7, 8, 9],
...                [ 2,  2,  2,  2, 2, 0],
...                [-1, -1, -1, -1, 0, 0]])
>>> b = np.array([1, 2, 2, 3, 3, 3])
>>> x = solveh_banded(ab, b, lower=True)
>>> x
array([ 0.03431373,  0.45938375,  0.05602241,  0.47759104,  0.17577031,
        0.34733894])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solveh_banded.html, scipy.linalg.solveh_banded
">>> hb = np.array([[0, 2-1j, 1j, -2-1j],
...                [8,  5,    9,   6  ]])
>>> b = np.array([1, 1+1j, 1-2j, 0])
>>> x = solveh_banded(hb, b)
>>> x
array([ 0.07318536-0.02939412j,  0.11877624+0.17696461j,
        0.10077984-0.23035393j, -0.00479904-0.09358128j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.solveh_banded.html, scipy.linalg.solveh_banded
">>> from scipy.linalg import invhilbert
>>> invhilbert(4)
array([[   16.,  -120.,   240.,  -140.],
       [ -120.,  1200., -2700.,  1680.],
       [  240., -2700.,  6480., -4200.],
       [ -140.,  1680., -4200.,  2800.]])
>>> invhilbert(4, exact=True)
array([[   16,  -120,   240,  -140],
       [ -120,  1200, -2700,  1680],
       [  240, -2700,  6480, -4200],
       [ -140,  1680, -4200,  2800]], dtype=int64)
>>> invhilbert(16)[7,7]
4.2475099528537506e+19
>>> invhilbert(16, exact=True)[7,7]
42475099528537378560
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.invhilbert.html, scipy.linalg.invhilbert
">>> a = np.array([[1.0, 2.0], [-1.0, 3.0]])
>>> expm(1j*a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
>>> cosm(a) + 1j*sinm(a)
array([[ 0.42645930+1.89217551j, -2.13721484-0.97811252j],
       [ 1.06860742+0.48905626j, -1.71075555+0.91406299j]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.sinm.html, scipy.linalg.expm scipy.linalg.cosm scipy.linalg.sinm
">>> import numpy as np
>>> from scipy.linalg import logm, expm
>>> a = np.array([[1.0, 3.0], [1.0, 4.0]])
>>> b = logm(a)
>>> b
array([[-1.02571087,  2.05142174],
       [ 0.68380725,  1.02571087]])
>>> expm(b)         # Verify expm(logm(a)) returns a
array([[ 1.,  3.],
       [ 1.,  4.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.logm.html, scipy.linalg.logm scipy.linalg.expm
">>> import numpy as np
>>> from scipy.linalg import qr_multiply, qr
>>> A = np.array([[1, 3, 3], [2, 3, 2], [2, 3, 3], [1, 3, 2]])
>>> qc, r1, piv1 = qr_multiply(A, 2*np.eye(4), pivoting=1)
>>> qc
array([[-1.,  1., -1.],
       [-1., -1.,  1.],
       [-1., -1., -1.],
       [-1.,  1.,  1.]])
>>> r1
array([[-6., -3., -5.            ],
       [ 0., -1., -1.11022302e-16],
       [ 0.,  0., -1.            ]])
>>> piv1
array([1, 0, 2], dtype=int32)
>>> q2, r2, piv2 = qr(A, mode='economic', pivoting=1)
>>> np.allclose(2*q2 - qc, np.zeros((4, 3)))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.qr_multiply.html, scipy.linalg.qr_multiply scipy.linalg.qr
">>> a = rng.random((3,2))
>>> x_lange = LA.get_lapack_funcs('lange', (a,))
>>> x_lange.typecode
'd'
>>> x_lange = LA.get_lapack_funcs('lange',(a*1j,))
>>> x_lange.typecode
'z'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lapack.get_lapack_funcs.html, scipy.linalg.get_lapack_funcs
">>> a = rng.random((1000, 1000))
>>> b = rng.random((1000, 1)) * 1j
>>> # We pick up zsysv and zsysv_lwork due to b array
... xsysv, xlwork = LA.get_lapack_funcs(('sysv', 'sysv_lwork'), (a, b))
>>> opt_lwork, _ = xlwork(a.shape[0])  # returns a complex for 'z' prefix
>>> udut, ipiv, x, info = xsysv(a, b, lwork=int(opt_lwork.real))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lapack.get_lapack_funcs.html, scipy.linalg.get_lapack_funcs
">>> window = signal.windows.hamming(51)
>>> plt.plot(window)
>>> plt.title(""Hamming window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.hamming.html, scipy.signal.windows.hamming
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Hamming window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.hamming.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.boxcar(51)
>>> plt.plot(window)
>>> plt.title(""Boxcar window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.boxcar.html, scipy.signal.windows.boxcar
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the boxcar window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.boxcar.html, scipy.fft.fft scipy.fft.fftshift
">>> import numpy as np
>>> from scipy.signal.windows import lanczos
>>> from scipy.fft import fft, fftshift
>>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots(1)
>>> window = lanczos(51)
>>> ax.plot(window)
>>> ax.set_title(""Lanczos window"")
>>> ax.set_ylabel(""Amplitude"")
>>> ax.set_xlabel(""Sample"")
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.lanczos.html, scipy.signal.windows.lanczos
">>> fig, ax = plt.subplots(1)
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> ax.plot(freq, response)
>>> ax.set_xlim(-0.5, 0.5)
>>> ax.set_ylim(-120, 0)
>>> ax.set_title(""Frequency response of the lanczos window"")
>>> ax.set_ylabel(""Normalized magnitude [dB]"")
>>> ax.set_xlabel(""Normalized frequency [cycles per sample]"")
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.lanczos.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.parzen(51)
>>> plt.plot(window)
>>> plt.title(""Parzen window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.parzen.html, scipy.signal.windows.parzen
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Parzen window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.parzen.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.taylor(51, nbar=20, sll=100, norm=False)
>>> plt.plot(window)
>>> plt.title(""Taylor window (100 dB)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.taylor.html, scipy.signal.windows.taylor
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Taylor window (100 dB)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.taylor.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.general_gaussian(51, p=1.5, sig=7)
>>> plt.plot(window)
>>> plt.title(r""Generalized Gaussian window (p=1.5, $\sigma$=7)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.general_gaussian.html, scipy.signal.windows.general_gaussian
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(r""Freq. resp. of the gen. Gaussian ""
...           r""window (p=1.5, $\sigma$=7)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.general_gaussian.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.tukey(51)
>>> plt.plot(window)
>>> plt.title(""Tukey window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
>>> plt.ylim([0, 1.1])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.tukey.html, scipy.signal.windows.tukey
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Tukey window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.tukey.html, scipy.fft.fft scipy.fft.fftshift
">>> window = general_cosine(1000, HFT90D, sym=False)
>>> plt.plot(window)
>>> plt.title(""HFT90D window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.general_cosine.html, scipy.signal.windows.general_cosine
">>> plt.figure()
>>> A = fft(window, 10000) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = np.abs(fftshift(A / abs(A).max()))
>>> response = 20 * np.log10(np.maximum(response, 1e-10))
>>> plt.plot(freq, response)
>>> plt.axis([-50/1000, 50/1000, -140, 0])
>>> plt.title(""Frequency response of the HFT90D window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
>>> plt.axhline(-90.2, color='red')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.general_cosine.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.nuttall(51)
>>> plt.plot(window)
>>> plt.title(""Nuttall window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.nuttall.html, scipy.signal.windows.nuttall
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Nuttall window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.nuttall.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.barthann(51)
>>> plt.plot(window)
>>> plt.title(""Bartlett-Hann window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.barthann.html, scipy.signal.windows.barthann
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Bartlett-Hann window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.barthann.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.cosine(51)
>>> plt.plot(window)
>>> plt.title(""Cosine window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.cosine.html, scipy.signal.windows.cosine
">>> plt.figure()
>>> A = fft(window, 2047) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the cosine window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.cosine.html, scipy.fft.fft scipy.fft.fftshift
">>> for alpha in [0.75, 0.7, 0.52]:
...     window = general_hamming(41, alpha)
...     spatial_plot.plot(window, label=""{:.2f}"".format(alpha))
...     A = fft(window, 2048) / (len(window)/2.0)
...     freq = np.linspace(-0.5, 0.5, len(A))
...     response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
...     freq_plot.plot(freq, response, label=""{:.2f}"".format(alpha))
>>> freq_plot.legend(loc=""upper right"")
>>> spatial_plot.legend(loc=""upper right"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.general_hamming.html, scipy.signal.windows.general_hamming scipy.fft.fft scipy.fft.fftshift
">>> from scipy import signal
>>> signal.get_window('triang', 7)
array([ 0.125,  0.375,  0.625,  0.875,  0.875,  0.625,  0.375])
>>> signal.get_window(('kaiser', 4.0), 9)
array([ 0.08848053,  0.29425961,  0.56437221,  0.82160913,  0.97885093,
        0.97885093,  0.82160913,  0.56437221,  0.29425961])
>>> signal.get_window(('exponential', None, 1.), 9)
array([ 0.011109  ,  0.03019738,  0.082085  ,  0.22313016,  0.60653066,
        0.60653066,  0.22313016,  0.082085  ,  0.03019738])
>>> signal.get_window(4.0, 9)
array([ 0.08848053,  0.29425961,  0.56437221,  0.82160913,  0.97885093,
        0.97885093,  0.82160913,  0.56437221,  0.29425961])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.get_window.html, scipy.signal.get_window
">>> window = signal.windows.kaiser(51, beta=14)
>>> plt.plot(window)
>>> plt.title(r""Kaiser window ($\beta$=14)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.kaiser.html, scipy.signal.windows.kaiser
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(r""Frequency response of the Kaiser window ($\beta$=14)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.kaiser.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.flattop(51)
>>> plt.plot(window)
>>> plt.title(""Flat top window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.flattop.html, scipy.signal.windows.flattop
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the flat top window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.flattop.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.bartlett(51)
>>> plt.plot(window)
>>> plt.title(""Bartlett window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.bartlett.html, scipy.signal.windows.bartlett
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Bartlett window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.bartlett.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.hann(51)
>>> plt.plot(window)
>>> plt.title(""Hann window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.hann.html, scipy.signal.windows.hann
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = np.abs(fftshift(A / abs(A).max()))
>>> response = 20 * np.log10(np.maximum(response, 1e-10))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Hann window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.hann.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.triang(51)
>>> plt.plot(window)
>>> plt.title(""Triangular window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.triang.html, scipy.signal.windows.triang
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = np.abs(fftshift(A / abs(A).max()))
>>> response = 20 * np.log10(np.maximum(response, 1e-10))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the triangular window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.triang.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.bohman(51)
>>> plt.plot(window)
>>> plt.title(""Bohman window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.bohman.html, scipy.signal.windows.bohman
">>> plt.figure()
>>> A = fft(window, 2047) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Bohman window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.bohman.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.chebwin(51, at=100)
>>> plt.plot(window)
>>> plt.title(""Dolph-Chebyshev window (100 dB)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.chebwin.html, scipy.signal.windows.chebwin
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Dolph-Chebyshev window (100 dB)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.chebwin.html, scipy.fft.fft scipy.fft.fftshift
">>> mat_contents = sio.loadmat(mat_fname)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.loadmat.html, scipy.io.loadmat
">>> matstruct_fname = pjoin(data_dir, 'teststruct_7.4_GLNX86.mat')
>>> matstruct_contents = sio.loadmat(matstruct_fname)
>>> teststruct = matstruct_contents['teststruct']
>>> teststruct.dtype
dtype([('stringfield', 'O'), ('doublefield', 'O'), ('complexfield', 'O')])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.loadmat.html, scipy.io.loadmat
">>> matstruct_squeezed = sio.loadmat(matstruct_fname, squeeze_me=True)
>>> matstruct_squeezed['teststruct'].shape
()
>>> matstruct_squeezed['teststruct']['complexfield'].shape
()
>>> matstruct_squeezed['teststruct']['complexfield'].item()
array([ 1.41421356+1.41421356j,  2.71828183+2.71828183j,
    3.14159265+3.14159265j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.loadmat.html, scipy.io.loadmat
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import windows, freqz
>>> M = 51
>>> fig, axes = plt.subplots(3, 2, figsize=(5, 7))
>>> for ai, alpha in enumerate((1, 3, 5)):
...     win_dpss = windows.dpss(M, alpha)
...     beta = alpha*np.pi
...     win_kaiser = windows.kaiser(M, beta)
...     for win, c in ((win_dpss, 'k'), (win_kaiser, 'r')):
...         win /= win.sum()
...         axes[ai, 0].plot(win, color=c, lw=1.)
...         axes[ai, 0].set(xlim=[0, M-1], title=r'$\alpha$ = %s' % alpha,
...                         ylabel='Amplitude')
...         w, h = freqz(win)
...         axes[ai, 1].plot(w, 20 * np.log10(np.abs(h)), color=c, lw=1.)
...         axes[ai, 1].set(xlim=[0, np.pi],
...                         title=r'$\beta$ = %0.2f' % beta,
...                         ylabel='Magnitude (dB)')
>>> for ax in axes.ravel():
...     ax.grid(True)
>>> axes[2, 1].legend(['DPSS', 'Kaiser'])
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.dpss.html, scipy.signal.windows.dpss scipy.signal.windows.kaiser scipy.signal.freqz
">>> M = 512
>>> NW = 2.5
>>> win, eigvals = windows.dpss(M, NW, 4, return_ratios=True)
>>> fig, ax = plt.subplots(1)
>>> ax.plot(win.T, linewidth=1.)
>>> ax.set(xlim=[0, M-1], ylim=[-0.1, 0.1], xlabel='Samples',
...        title='DPSS, M=%d, NW=%0.1f' % (M, NW))
>>> ax.legend(['win[%d] (%0.4f)' % (ii, ratio)
...            for ii, ratio in enumerate(eigvals)])
>>> fig.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.dpss.html, scipy.signal.windows.dpss
">>> Ms = np.arange(1, 41)
>>> factors = (50, 20, 10, 5, 2.0001)
>>> energy = np.empty((3, len(Ms), len(factors)))
>>> for mi, M in enumerate(Ms):
...     for fi, factor in enumerate(factors):
...         NW = M / float(factor)
...         # Corrected using empirical approximation (default)
...         win = windows.dpss(M, NW)
...         energy[0, mi, fi] = np.sum(win ** 2) / np.sqrt(M)
...         # Corrected using subsample shifting
...         win = windows.dpss(M, NW, norm='subsample')
...         energy[1, mi, fi] = np.sum(win ** 2) / np.sqrt(M)
...         # Uncorrected (using l-infinity norm)
...         win /= win.max()
...         energy[2, mi, fi] = np.sum(win ** 2) / np.sqrt(M)
>>> fig, ax = plt.subplots(1)
>>> hs = ax.plot(Ms, energy[2], '-o', markersize=4,
...              markeredgecolor='none')
>>> leg = [hs[-1]]
>>> for hi, hh in enumerate(hs):
...     h1 = ax.plot(Ms, energy[0, :, hi], '-o', markersize=4,
...                  color=hh.get_color(), markeredgecolor='none',
...                  alpha=0.66)
...     h2 = ax.plot(Ms, energy[1, :, hi], '-o', markersize=4,
...                  color=hh.get_color(), markeredgecolor='none',
...                  alpha=0.33)
...     if hi == len(hs) - 1:
...         leg.insert(0, h1[0])
...         leg.insert(0, h2[0])
>>> ax.set(xlabel='M (samples)', ylabel=r'Power / $\sqrt{M}$')
>>> ax.legend(leg, ['Uncorrected', r'Corrected: $\frac{M^2}{M^2+NW}$',
...                 'Corrected (subsample)'])
>>> fig.tight_layout()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.dpss.html, scipy.signal.windows.dpss scipy.interpolate.insert
">>> import numpy as np
>>> from scipy import signal
>>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots()
>>> N = 50
>>> for alpha in [0.64, 2.55, 7.64, 31.83]:
...     ax.plot(signal.windows.kaiser_bessel_derived(2*N, np.pi*alpha),
...             label=f""{alpha=}"")
>>> ax.grid(True)
>>> ax.set_title(""Kaiser-Bessel derived window"")
>>> ax.set_ylabel(""Amplitude"")
>>> ax.set_xlabel(""Sample"")
>>> ax.set_xticks([0, N, 2*N-1])
>>> ax.set_xticklabels([""0"", ""N"", ""2N+1""])  
>>> ax.set_yticks([0.0, 0.2, 0.4, 0.6, 0.707, 0.8, 1.0])
>>> fig.legend(loc=""center"")
>>> fig.tight_layout()
>>> fig.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.kaiser_bessel_derived.html, scipy.signal.windows.kaiser_bessel_derived
">>> window = signal.windows.gaussian(51, std=7)
>>> plt.plot(window)
>>> plt.title(r""Gaussian window ($\sigma$=7)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.gaussian.html, scipy.signal.windows.gaussian
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(r""Frequency response of the Gaussian window ($\sigma$=7)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.gaussian.html, scipy.fft.fft scipy.fft.fftshift
">>> window = signal.windows.blackman(51)
>>> plt.plot(window)
>>> plt.title(""Blackman window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.blackman.html, scipy.signal.windows.blackman
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = np.abs(fftshift(A / abs(A).max()))
>>> response = 20 * np.log10(np.maximum(response, 1e-10))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Blackman window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.blackman.html, scipy.fft.fft scipy.fft.fftshift
">>> M = 51
>>> tau = 3.0
>>> window = signal.windows.exponential(M, tau=tau)
>>> plt.plot(window)
>>> plt.title(""Exponential Window (tau=3.0)"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.exponential.html, scipy.signal.windows.exponential
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -35, 0])
>>> plt.title(""Frequency response of the Exponential window (tau=3.0)"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.exponential.html, scipy.fft.fft scipy.fft.fftshift
">>> tau2 = -(M-1) / np.log(0.01)
>>> window2 = signal.windows.exponential(M, 0, tau2, False)
>>> plt.figure()
>>> plt.plot(window2)
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.exponential.html, scipy.signal.windows.exponential
">>> window = signal.windows.blackmanharris(51)
>>> plt.plot(window)
>>> plt.title(""Blackman-Harris window"")
>>> plt.ylabel(""Amplitude"")
>>> plt.xlabel(""Sample"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.blackmanharris.html, scipy.signal.windows.blackmanharris
">>> plt.figure()
>>> A = fft(window, 2048) / (len(window)/2.0)
>>> freq = np.linspace(-0.5, 0.5, len(A))
>>> response = 20 * np.log10(np.abs(fftshift(A / abs(A).max())))
>>> plt.plot(freq, response)
>>> plt.axis([-0.5, 0.5, -120, 0])
>>> plt.title(""Frequency response of the Blackman-Harris window"")
>>> plt.ylabel(""Normalized magnitude [dB]"")
>>> plt.xlabel(""Normalized frequency [cycles per sample]"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.windows.blackmanharris.html, scipy.fft.fft scipy.fft.fftshift
">>> from scipy.io import savemat
>>> import numpy as np
>>> a = np.arange(20)
>>> mdic = {""a"": a, ""label"": ""experiment""}
>>> mdic
{'a': array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19]),
'label': 'experiment'}
>>> savemat(""matlab_matrix.mat"", mdic)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.savemat.html, scipy.io.savemat
">>> a = np.array([[10, 20, 30], [11, 21, 31]], dtype=np.int32)
>>> b = np.geomspace(1, 10, 5)
>>> f = BytesIO()
>>> savemat(f, {'a': a, 'b': b})
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.whosmat.html, scipy.io.savemat
">>> whosmat(f)
[('a', (2, 3), 'int32'), ('b', (1, 5), 'double')]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.matlab.whosmat.html, scipy.io.whosmat
">>> import numpy as np
>>> import scipy.linalg.blas as bla
>>> rng = np.random.default_rng()
>>> a = rng.random((10,15))
>>> b = np.asfortranarray(a)  # Change the memory layout order
>>> bla.find_best_blas_type((a,))
('d', dtype('float64'), False)
>>> bla.find_best_blas_type((a*1j,))
('z', dtype('complex128'), False)
>>> bla.find_best_blas_type((b,))
('d', dtype('float64'), True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.blas.find_best_blas_type.html, scipy.linalg.blas.find_best_blas_type
">>> import numpy as np
>>> import scipy.linalg as LA
>>> rng = np.random.default_rng()
>>> a = rng.random((3,2))
>>> x_gemv = LA.get_blas_funcs('gemv', (a,))
>>> x_gemv.typecode
'd'
>>> x_gemv = LA.get_blas_funcs('gemv',(a*1j,))
>>> x_gemv.typecode
'z'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.blas.get_blas_funcs.html, scipy.linalg.get_blas_funcs
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy import odr
>>> x = np.linspace(0.0, 5.0)
>>> y = np.sin(x)
>>> poly_model = odr.polynomial(3)  # using third order polynomial model
>>> data = odr.Data(x, y)
>>> odr_obj = odr.ODR(data, poly_model)
>>> output = odr_obj.run()  # running ODR fitting
>>> poly = np.poly1d(output.beta[::-1])
>>> poly_y = poly(x)
>>> plt.plot(x, y, label=""input data"")
>>> plt.plot(x, poly_y, label=""polynomial ODR"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.odr.polynomial.html, scipy.odr.polynomial scipy.odr.Data scipy.odr.ODR
">>> import numpy as np
>>> from scipy.sparse import bsr_matrix
>>> bsr_matrix((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.html, scipy.sparse.bsr_matrix
">>> row = np.array([0, 0, 1, 2, 2, 2])
>>> col = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3 ,4, 5, 6])
>>> bsr_matrix((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.html, scipy.sparse.bsr_matrix
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6]).repeat(4).reshape(6, 2, 2)
>>> bsr_matrix((data,indices,indptr), shape=(6, 6)).toarray()
array([[1, 1, 0, 0, 2, 2],
       [1, 1, 0, 0, 2, 2],
       [0, 0, 0, 0, 3, 3],
       [0, 0, 0, 0, 3, 3],
       [4, 4, 5, 5, 6, 6],
       [4, 4, 5, 5, 6, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.html, scipy.sparse.bsr_matrix
">>> from scipy import odr
>>> import numpy as np
>>> x = np.linspace(0.0, 5.0)
>>> y = 1.0 * x + 2.0
>>> data = odr.Data(x, y)
>>> odr_obj = odr.ODR(data, odr.unilinear)
>>> output = odr_obj.run()
>>> print(output.beta)
[1. 2.]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.odr.unilinear.html, scipy.odr.Data scipy.odr.ODR
">>> import numpy as np
>>> from scipy.sparse import bsr_array
>>> bsr_array((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.html, scipy.sparse.bsr_array
">>> row = np.array([0, 0, 1, 2, 2, 2])
>>> col = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3 ,4, 5, 6])
>>> bsr_array((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.html, scipy.sparse.bsr_array
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6]).repeat(4).reshape(6, 2, 2)
>>> bsr_array((data,indices,indptr), shape=(6, 6)).toarray()
array([[1, 1, 0, 0, 2, 2],
       [1, 1, 0, 0, 2, 2],
       [0, 0, 0, 0, 3, 3],
       [0, 0, 0, 0, 3, 3],
       [4, 4, 5, 5, 6, 6],
       [4, 4, 5, 5, 6, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.html, scipy.sparse.bsr_array
">>> from scipy.sparse import coo_array, block_array
>>> A = coo_array([[1, 2], [3, 4]])
>>> B = coo_array([[5], [6]])
>>> C = coo_array([[7]])
>>> block_array([[A, B], [None, C]]).toarray()
array([[1, 2, 5],
       [3, 4, 6],
       [0, 0, 7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.block_array.html, scipy.sparse.coo_array scipy.sparse.block_array
">>> block_array([[A, None], [None, C]]).toarray()
array([[1, 2, 0],
       [3, 4, 0],
       [0, 0, 7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.block_array.html, scipy.sparse.block_array
">>> import numpy as np
>>> from scipy.sparse import csc_array
>>> csc_array((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.html, scipy.sparse.csc_array
">>> row = np.array([0, 2, 2, 0, 1, 2])
>>> col = np.array([0, 0, 1, 2, 2, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csc_array((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 4],
       [0, 0, 5],
       [2, 3, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.html, scipy.sparse.csc_array
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csc_array((data, indices, indptr), shape=(3, 3)).toarray()
array([[1, 0, 4],
       [0, 0, 5],
       [2, 3, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.html, scipy.sparse.csc_array
">>> import numpy as np
>>> from scipy.sparse import dok_matrix
>>> S = dok_matrix((5, 5), dtype=np.float32)
>>> for i in range(5):
...     for j in range(5):
...         S[i, j] = i + j    # Update element
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_matrix.html, scipy.sparse.dok_matrix
">>> from scipy.sparse import diags
>>> diagonals = [[1, 2, 3, 4], [1, 2, 3], [1, 2]]
>>> diags(diagonals, [0, -1, 2]).toarray()
array([[1, 0, 1, 0],
       [1, 2, 0, 2],
       [0, 2, 3, 0],
       [0, 0, 3, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.diags.html, scipy.sparse.diags
">>> diags([1, -2, 1], [-1, 0, 1], shape=(4, 4)).toarray()
array([[-2.,  1.,  0.,  0.],
       [ 1., -2.,  1.,  0.],
       [ 0.,  1., -2.,  1.],
       [ 0.,  0.,  1., -2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.diags.html, scipy.sparse.diags
">>> diags([1, 2, 3], 1).toarray()
array([[ 0.,  1.,  0.,  0.],
       [ 0.,  0.,  2.,  0.],
       [ 0.,  0.,  0.,  3.],
       [ 0.,  0.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.diags.html, scipy.sparse.diags
">>> from scipy.sparse import csr_array, triu
>>> A = csr_array([[1, 2, 0, 0, 3], [4, 5, 0, 6, 7], [0, 0, 8, 9, 0]],
...                dtype='int32')
>>> A.toarray()
array([[1, 2, 0, 0, 3],
       [4, 5, 0, 6, 7],
       [0, 0, 8, 9, 0]])
>>> triu(A).toarray()
array([[1, 2, 0, 0, 3],
       [0, 5, 0, 6, 7],
       [0, 0, 8, 9, 0]])
>>> triu(A).nnz
8
>>> triu(A, k=1).toarray()
array([[0, 2, 0, 0, 3],
       [0, 0, 0, 6, 7],
       [0, 0, 0, 9, 0]])
>>> triu(A, k=-1).toarray()
array([[1, 2, 0, 0, 3],
       [4, 5, 0, 6, 7],
       [0, 0, 8, 9, 0]])
>>> triu(A, format='csc')
<3x5 sparse array of type ''
        with 8 stored elements in Compressed Sparse Column format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.triu.html, scipy.sparse.csr_array scipy.sparse.csr_array.toarray scipy.sparse.triu
">>> import numpy as np
>>> from scipy.sparse import dia_matrix
>>> dia_matrix((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.html, scipy.sparse.dia_matrix
">>> data = np.array([[1, 2, 3, 4]]).repeat(3, axis=0)
>>> offsets = np.array([0, -1, 2])
>>> dia_matrix((data, offsets), shape=(4, 4)).toarray()
array([[1, 0, 3, 0],
       [1, 2, 0, 4],
       [0, 2, 3, 0],
       [0, 0, 3, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.html, scipy.sparse.dia_matrix
">>> from scipy.sparse import dia_matrix
>>> n = 10
>>> ex = np.ones(n)
>>> data = np.array([ex, 2 * ex, ex])
>>> offsets = np.array([-1, 0, 1])
>>> dia_matrix((data, offsets), shape=(n, n)).toarray()
array([[2., 1., 0., ..., 0., 0., 0.],
       [1., 2., 1., ..., 0., 0., 0.],
       [0., 1., 2., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 2., 1., 0.],
       [0., 0., 0., ..., 1., 2., 1.],
       [0., 0., 0., ..., 0., 1., 2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.html, scipy.sparse.dia_matrix
">>> from scipy.sparse import csr_array, csr_matrix, coo_matrix, isspmatrix_csr
>>> isspmatrix_csr(csr_matrix([[5]]))
True
>>> isspmatrix_csr(csr_array([[5]]))
False
>>> isspmatrix_csr(coo_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_csr.html, scipy.sparse.isspmatrix_csr scipy.sparse.csr_matrix scipy.sparse.csr_array scipy.sparse.coo_matrix
">>> from scipy.sparse import csc_array, csc_matrix, coo_matrix, isspmatrix_csc
>>> isspmatrix_csc(csc_matrix([[5]]))
True
>>> isspmatrix_csc(csc_array([[5]]))
False
>>> isspmatrix_csc(coo_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_csc.html, scipy.sparse.isspmatrix_csc scipy.sparse.csc_matrix scipy.sparse.csc_array scipy.sparse.coo_matrix
">>> from scipy.sparse import coo_array, vstack
>>> A = coo_array([[1, 2], [3, 4]])
>>> B = coo_array([[5, 6]])
>>> vstack([A, B]).toarray()
array([[1, 2],
       [3, 4],
       [5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.vstack.html, scipy.sparse.coo_array scipy.sparse.vstack
">>> import scipy as sp
>>> import numpy as np
>>> rng = np.random.default_rng()
>>> S = sp.sparse.random(3, 4, density=0.25, random_state=rng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random.html, scipy.sparse.random
">>> rvs = sp.stats.poisson(25, loc=10).rvs
>>> S = sp.sparse.random(3, 4, density=0.25, random_state=rng, data_rvs=rvs)
>>> S.toarray()
array([[ 36.,   0.,  33.,   0.],   # random
       [  0.,   0.,   0.,   0.],
       [  0.,   0.,  36.,   0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random.html, scipy.sparse.random scipy.sparse.dok_matrix.toarray
">>> def np_normal_squared(size=None, random_state=rng):
...     return random_state.standard_normal(size) ** 2
>>> S = sp.sparse.random(3, 4, density=0.25, random_state=rng,
...                      data_rvs=np_normal_squared)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random.html, scipy.sparse.random
">>> def sp_stats_normal_squared(size=None, random_state=rng):
...     std_normal = sp.stats.distributions.norm_gen().rvs
...     return std_normal(size=size, random_state=random_state) ** 2
>>> S = sp.sparse.random(3, 4, density=0.25, random_state=rng,
...                      data_rvs=sp_stats_normal_squared)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random.html, scipy.sparse.random
">>> class NormalSquared(sp.stats.rv_continuous):
...     def _rvs(self,  size=None, random_state=rng):
...         return random_state.standard_normal(size) ** 2
>>> X = NormalSquared()
>>> Y = X()  # get a frozen version of the distribution
>>> S = sp.sparse.random(3, 4, density=0.25, random_state=rng, data_rvs=Y.rvs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random.html, scipy.sparse.csr_matrix scipy.sparse.random
">>> from scipy.sparse import csr_array, tril
>>> A = csr_array([[1, 2, 0, 0, 3], [4, 5, 0, 6, 7], [0, 0, 8, 9, 0]],
...               dtype='int32')
>>> A.toarray()
array([[1, 2, 0, 0, 3],
       [4, 5, 0, 6, 7],
       [0, 0, 8, 9, 0]])
>>> tril(A).toarray()
array([[1, 0, 0, 0, 0],
       [4, 5, 0, 0, 0],
       [0, 0, 8, 0, 0]])
>>> tril(A).nnz
4
>>> tril(A, k=1).toarray()
array([[1, 2, 0, 0, 0],
       [4, 5, 0, 0, 0],
       [0, 0, 8, 9, 0]])
>>> tril(A, k=-1).toarray()
array([[0, 0, 0, 0, 0],
       [4, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])
>>> tril(A, format='csc')
<3x5 sparse array of type ''
        with 4 stored elements in Compressed Sparse Column format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.tril.html, scipy.sparse.csr_array scipy.sparse.csr_array.toarray scipy.sparse.tril
">>> import numpy as np
>>> from scipy.sparse import csc_matrix
>>> csc_matrix((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html, scipy.sparse.csc_matrix
">>> row = np.array([0, 2, 2, 0, 1, 2])
>>> col = np.array([0, 0, 1, 2, 2, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csc_matrix((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 4],
       [0, 0, 5],
       [2, 3, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html, scipy.sparse.csc_matrix
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csc_matrix((data, indices, indptr), shape=(3, 3)).toarray()
array([[1, 0, 4],
       [0, 0, 5],
       [2, 3, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.html, scipy.sparse.csc_matrix
">>> import numpy as np
>>> import scipy as sp
>>> sparse_matrix = sp.sparse.csc_matrix([[0, 0, 3], [4, 0, 0]])
>>> sparse_matrix
<2x3 sparse matrix of type ''
   with 2 stored elements in Compressed Sparse Column format>
>>> sparse_matrix.toarray()
array([[0, 0, 3],
       [4, 0, 0]], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.save_npz.html, scipy.sparse.csc_matrix scipy.sparse.csc_matrix.toarray
">>> sp.sparse.save_npz('/tmp/sparse_matrix.npz', sparse_matrix)
>>> sparse_matrix = sp.sparse.load_npz('/tmp/sparse_matrix.npz')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.save_npz.html, scipy.sparse.save_npz scipy.sparse.load_npz
">>> sparse_matrix
<2x3 sparse matrix of type ''
   with 2 stored elements in Compressed Sparse Column format>
>>> sparse_matrix.toarray()
array([[0, 0, 3],
       [4, 0, 0]], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.save_npz.html, scipy.sparse.csc_matrix.toarray
">>> # Constructing an empty sparse array
>>> import numpy as np
>>> from scipy.sparse import coo_array
>>> coo_array((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.html, scipy.sparse.coo_array
">>> # Constructing a sparse array using ijv format
>>> row  = np.array([0, 3, 1, 0])
>>> col  = np.array([0, 3, 1, 2])
>>> data = np.array([4, 5, 7, 9])
>>> coo_array((data, (row, col)), shape=(4, 4)).toarray()
array([[4, 0, 9, 0],
       [0, 7, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 5]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.html, scipy.sparse.coo_array
">>> # Constructing a sparse array with duplicate coordinates
>>> row  = np.array([0, 0, 1, 3, 1, 0, 0])
>>> col  = np.array([0, 2, 1, 3, 1, 0, 0])
>>> data = np.array([1, 1, 1, 1, 1, 1, 1])
>>> coo = coo_array((data, (row, col)), shape=(4, 4))
>>> # Duplicate coordinates are maintained until implicitly or explicitly summed
>>> np.max(coo.data)
1
>>> coo.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.html, scipy.sparse.coo_array scipy.sparse.coo_array.toarray
">>> from scipy.spatial import distance
>>> distance.kulczynski1([1, 0, 0], [0, 1, 0])
0.0
>>> distance.kulczynski1([True, False, False], [True, True, False])
1.0
>>> distance.kulczynski1([True, False, False], [True])
0.5
>>> distance.kulczynski1([1, 0, 0], [3, 1, 0])
-3.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.kulczynski1.html, scipy.spatial.distance.kulczynski1
">>> from scipy.sparse import coo_matrix, hstack
>>> A = coo_matrix([[1, 2], [3, 4]])
>>> B = coo_matrix([[5], [6]])
>>> hstack([A,B]).toarray()
array([[1, 2, 5],
       [3, 4, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.hstack.html, scipy.sparse.coo_matrix scipy.sparse.hstack
">>> # Constructing an empty matrix
>>> import numpy as np
>>> from scipy.sparse import coo_matrix
>>> coo_matrix((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html, scipy.sparse.coo_matrix
">>> # Constructing a matrix using ijv format
>>> row  = np.array([0, 3, 1, 0])
>>> col  = np.array([0, 3, 1, 2])
>>> data = np.array([4, 5, 7, 9])
>>> coo_matrix((data, (row, col)), shape=(4, 4)).toarray()
array([[4, 0, 9, 0],
       [0, 7, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 5]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html, scipy.sparse.coo_matrix
">>> # Constructing a matrix with duplicate coordinates
>>> row  = np.array([0, 0, 1, 3, 1, 0, 0])
>>> col  = np.array([0, 2, 1, 3, 1, 0, 0])
>>> data = np.array([1, 1, 1, 1, 1, 1, 1])
>>> coo = coo_matrix((data, (row, col)), shape=(4, 4))
>>> # Duplicate coordinates are maintained until implicitly or explicitly summed
>>> np.max(coo.data)
1
>>> coo.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.html, scipy.sparse.coo_matrix scipy.sparse.coo_matrix.toarray
">>> import numpy as np
>>> from scipy.sparse import csr_array, csr_matrix, issparse
>>> issparse(csr_matrix([[5]]))
True
>>> issparse(csr_array([[5]]))
True
>>> issparse(np.array([[5]]))
False
>>> issparse(5)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.issparse.html, scipy.sparse.issparse scipy.sparse.csr_matrix scipy.sparse.csr_array
">>> from scipy.sparse import dia_array, dia_matrix, coo_matrix, isspmatrix_dia
>>> isspmatrix_dia(dia_matrix([[5]]))
True
>>> isspmatrix_dia(dia_array([[5]]))
False
>>> isspmatrix_dia(coo_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_dia.html, scipy.sparse.isspmatrix_dia scipy.sparse.dia_matrix scipy.sparse.dia_array scipy.sparse.coo_matrix
">>> from scipy.ndimage import generate_binary_structure, white_tophat
>>> import numpy as np
>>> square = generate_binary_structure(rank=2, connectivity=3)
>>> bright_on_gray = np.array([[2, 3, 3, 3, 2],
...                            [3, 4, 5, 4, 3],
...                            [3, 5, 9, 5, 3],
...                            [3, 4, 5, 4, 3],
...                            [2, 3, 3, 3, 2]])
>>> white_tophat(input=bright_on_gray, structure=square)
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 1, 5, 1, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.white_tophat.html, scipy.ndimage.generate_binary_structure scipy.ndimage.white_tophat
">>> distvec = pdist(x)
>>> distvec
array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,
       6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.squareform.html, scipy.spatial.distance.pdist
">>> m = squareform(distvec)
>>> m
array([[0.        , 2.23606798, 6.40312424, 7.34846923, 2.82842712],
       [2.23606798, 0.        , 4.89897949, 6.40312424, 1.        ],
       [6.40312424, 4.89897949, 0.        , 5.38516481, 4.58257569],
       [7.34846923, 6.40312424, 5.38516481, 0.        , 5.47722558],
       [2.82842712, 1.        , 4.58257569, 5.47722558, 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.squareform.html, scipy.spatial.distance.squareform
">>> squareform(m)
array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,
       6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.squareform.html, scipy.spatial.distance.squareform
">>> import numpy as np
>>> import scipy as sp
>>> A = sp.sparse.csr_array(np.array([[0, 2], [5, 0]]))
>>> B = sp.sparse.csr_array(np.array([[1, 2], [3, 4]]))
>>> sp.sparse.kron(A, B).toarray()
array([[ 0,  0,  2,  4],
       [ 0,  0,  6,  8],
       [ 5, 10,  0,  0],
       [15, 20,  0,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.kron.html, scipy.sparse.csr_array scipy.sparse.kron
">>> sp.sparse.kron(A, [[1, 2], [3, 4]]).toarray()
array([[ 0,  0,  2,  4],
       [ 0,  0,  6,  8],
       [ 5, 10,  0,  0],
       [15, 20,  0,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.kron.html, scipy.sparse.kron
">>> from scipy.spatial.distance import correlation
>>> correlation([1, 0, 1], [1, 1, 0])
1.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.correlation.html, scipy.spatial.distance.correlation
">>> correlation([1, 0, 1], [1, 1, 0], w=[0.9, 0.1, 0.1])
1.1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.correlation.html, scipy.spatial.distance.correlation
">>> correlation([1, 0, 1], [1, 1, 0], centered=False)
0.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.correlation.html, scipy.spatial.distance.correlation
">>> from scipy.sparse import coo_array, bmat
>>> A = coo_array([[1, 2], [3, 4]])
>>> B = coo_array([[5], [6]])
>>> C = coo_array([[7]])
>>> bmat([[A, B], [None, C]]).toarray()
array([[1, 2, 5],
       [3, 4, 6],
       [0, 0, 7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bmat.html, scipy.sparse.coo_array scipy.sparse.bmat
">>> bmat([[A, None], [None, C]]).toarray()
array([[1, 2, 0],
       [3, 4, 0],
       [0, 0, 7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bmat.html, scipy.sparse.bmat
">>> from scipy.spatial import distance
>>> distance.sqeuclidean([1, 0, 0], [0, 1, 0])
2.0
>>> distance.sqeuclidean([1, 1, 0], [0, 1, 0])
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.sqeuclidean.html, scipy.spatial.distance.sqeuclidean
">>> from scipy.spatial import distance
>>> iv = [[1, 0.5, 0.5], [0.5, 1, 0.5], [0.5, 0.5, 1]]
>>> distance.mahalanobis([1, 0, 0], [0, 1, 0], iv)
1.0
>>> distance.mahalanobis([0, 2, 0], [0, 1, 0], iv)
1.0
>>> distance.mahalanobis([2, 0, 0], [0, 1, 0], iv)
1.7320508075688772
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.mahalanobis.html, scipy.spatial.distance.mahalanobis
">>> from scipy.sparse import bsr_array, bsr_matrix, csr_matrix, isspmatrix_bsr
>>> isspmatrix_bsr(bsr_matrix([[5]]))
True
>>> isspmatrix_bsr(bsr_array([[5]]))
False
>>> isspmatrix_bsr(csr_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_bsr.html, scipy.sparse.isspmatrix_bsr scipy.sparse.bsr_matrix scipy.sparse.bsr_array scipy.sparse.csr_matrix
">>> from scipy.spatial import distance
>>> distance.canberra([1, 0, 0], [0, 1, 0])
2.0
>>> distance.canberra([1, 1, 0], [0, 1, 0])
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.canberra.html, scipy.spatial.distance.canberra
">>> import numpy as np
>>> import scipy as sp
>>> sparse_array = sp.sparse.csc_array([[0, 0, 3], [4, 0, 0]])
>>> sparse_array
<2x3 sparse array of type ''
   with 2 stored elements in Compressed Sparse Column format>
>>> sparse_array.toarray()
array([[0, 0, 3],
       [4, 0, 0]], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.load_npz.html, scipy.sparse.csc_array scipy.sparse.csc_array.toarray
">>> sp.sparse.save_npz('/tmp/sparse_array.npz', sparse_array)
>>> sparse_array = sp.sparse.load_npz('/tmp/sparse_array.npz')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.load_npz.html, scipy.sparse.save_npz scipy.sparse.load_npz
">>> sparse_array
<2x3 sparse array of type ''
    with 2 stored elements in Compressed Sparse Column format>
>>> sparse_array.toarray()
array([[0, 0, 3],
       [4, 0, 0]], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.load_npz.html, scipy.sparse.csc_array.toarray
">>> from scipy.spatial import distance
>>> distance.sokalmichener([1, 0, 0], [0, 1, 0])
0.8
>>> distance.sokalmichener([1, 0, 0], [1, 1, 0])
0.5
>>> distance.sokalmichener([1, 0, 0], [2, 0, 0])
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.sokalmichener.html, scipy.spatial.distance.sokalmichener
">>> from scipy.spatial import distance
>>> distance.euclidean([1, 0, 0], [0, 1, 0])
1.4142135623730951
>>> distance.euclidean([1, 1, 0], [0, 1, 0])
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.euclidean.html, scipy.spatial.distance.euclidean
">>> d = np.array([[0.0, 1.1, 1.2, 1.3],
...               [1.1, 0.0, 1.0, 1.4],
...               [1.2, 1.0, 0.0, 1.5],
...               [1.3, 1.4, 1.5, 0.0]])
>>> is_valid_dm(d)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_dm.html, scipy.spatial.distance.is_valid_dm
">>> is_valid_dm([[0, 2, 2], [2, 0, 2]])
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_dm.html, scipy.spatial.distance.is_valid_dm
">>> is_valid_dm([[0, 1, 1], [1, 2, 3], [1, 3, 0]])
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_dm.html, scipy.spatial.distance.is_valid_dm
">>> is_valid_dm([[0, 1, 3], [2, 0, 1], [3, 1, 0]])
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_dm.html, scipy.spatial.distance.is_valid_dm
">>> import numpy as np
>>> from scipy.sparse import spdiags
>>> data = np.array([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])
>>> diags = np.array([0, -1, 2])
>>> spdiags(data, diags, 4, 4).toarray()
array([[1, 0, 3, 0],
       [1, 2, 0, 4],
       [0, 2, 3, 0],
       [0, 0, 3, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spdiags.html, scipy.sparse.spdiags
">>> import numpy as np
>>> from scipy.sparse import dok_array
>>> S = dok_array((5, 5), dtype=np.float32)
>>> for i in range(5):
...     for j in range(5):
...         S[i, j] = i + j    # Update element
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_array.html, scipy.sparse.dok_array
">>> from scipy import odr
>>> import numpy as np
>>> x = np.linspace(0.0, 5.0)
>>> y = 1.0 * x ** 2 + 2.0 * x + 3.0
>>> data = odr.Data(x, y)
>>> odr_obj = odr.ODR(data, odr.quadratic)
>>> output = odr_obj.run()
>>> print(output.beta)
[1. 2. 3.]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.odr.quadratic.html, scipy.odr.Data scipy.odr.ODR
">>> from scipy.spatial import distance
>>> distance.dice([1, 0, 0], [0, 1, 0])
1.0
>>> distance.dice([1, 0, 0], [1, 1, 0])
0.3333333333333333
>>> distance.dice([1, 0, 0], [2, 0, 0])
-0.3333333333333333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.dice.html, scipy.spatial.distance.dice
">>> from scipy import odr
>>> import numpy as np
>>> x = np.linspace(0.0, 5.0)
>>> y = -10.0 + np.exp(0.5*x)
>>> data = odr.Data(x, y)
>>> odr_obj = odr.ODR(data, odr.exponential)
>>> output = odr_obj.run()
>>> print(output.beta)
[-10.    0.5]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.odr.exponential.html, scipy.odr.Data scipy.odr.ODR
">>> import numpy as np
>>> from scipy.sparse import dia_array
>>> dia_array((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.html, scipy.sparse.dia_array
">>> data = np.array([[1, 2, 3, 4]]).repeat(3, axis=0)
>>> offsets = np.array([0, -1, 2])
>>> dia_array((data, offsets), shape=(4, 4)).toarray()
array([[1, 0, 3, 0],
       [1, 2, 0, 4],
       [0, 2, 3, 0],
       [0, 0, 3, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.html, scipy.sparse.dia_array
">>> from scipy.sparse import dia_array
>>> n = 10
>>> ex = np.ones(n)
>>> data = np.array([ex, 2 * ex, ex])
>>> offsets = np.array([-1, 0, 1])
>>> dia_array((data, offsets), shape=(n, n)).toarray()
array([[2., 1., 0., ..., 0., 0., 0.],
       [1., 2., 1., ..., 0., 0., 0.],
       [0., 1., 2., ..., 0., 0., 0.],
       ...,
       [0., 0., 0., ..., 2., 1., 0.],
       [0., 0., 0., ..., 1., 2., 1.],
       [0., 0., 0., ..., 0., 1., 2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.html, scipy.sparse.dia_array
">>> from scipy.sparse import csr_array, find
>>> A = csr_array([[7.0, 8.0, 0],[0, 0, 9.0]])
>>> find(A)
(array([0, 0, 1], dtype=int32),
 array([0, 1, 2], dtype=int32),
 array([ 7.,  8.,  9.]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.find.html, scipy.sparse.csr_array scipy.sparse.find
">>> from scipy.spatial.distance import num_obs_y
>>> Y = [1, 2, 3.5, 7, 10, 4]
>>> num_obs_y(Y)
4
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.num_obs_y.html, scipy.spatial.distance.num_obs_y
">>> import scipy as sp
>>> sp.sparse.identity(3).toarray()
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])
>>> sp.sparse.identity(3, dtype='int8', format='dia')
<3x3 sparse matrix of type ''
        with 3 stored elements (1 diagonals) in DIAgonal format>
>>> sp.sparse.eye_array(3, dtype='int8', format='dia')
<3x3 sparse array of type ''
        with 3 stored elements (1 diagonals) in DIAgonal format>
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.identity.html, scipy.sparse.identity
">>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random_array.html, scipy.sparse.random_array
">>> rvs = sp.stats.poisson(25, loc=10).rvs
>>> S = sp.sparse.random_array((3, 4), density=0.25,
...                            random_state=rng, data_sampler=rvs)
>>> S.toarray()
array([[ 36.,   0.,  33.,   0.],   # random
       [  0.,   0.,   0.,   0.],
       [  0.,   0.,  36.,   0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random_array.html, scipy.sparse.random_array scipy.sparse.dok_array.toarray
">>> def np_normal_squared(size=None, random_state=rng):
...     return random_state.standard_normal(size) ** 2
>>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng,
...                      data_sampler=np_normal_squared)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random_array.html, scipy.sparse.random_array
">>> def sp_stats_normal_squared(size=None, random_state=rng):
...     std_normal = sp.stats.distributions.norm_gen().rvs
...     return std_normal(size=size, random_state=random_state) ** 2
>>> S = sp.sparse.random_array((3, 4), density=0.25, random_state=rng,
...                      data_sampler=sp_stats_normal_squared)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random_array.html, scipy.sparse.random_array
">>> class NormalSquared(sp.stats.rv_continuous):
...     def _rvs(self,  size=None, random_state=rng):
...         return random_state.standard_normal(size) ** 2
>>> X = NormalSquared()
>>> Y = X().rvs
>>> S = sp.sparse.random_array((3, 4), density=0.25,
...                            random_state=rng, data_sampler=Y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.random_array.html, scipy.sparse.csr_matrix scipy.sparse.random_array
">>> from scipy.sparse import coo_array, coo_matrix, csr_matrix, isspmatrix_coo
>>> isspmatrix_coo(coo_matrix([[5]]))
True
>>> isspmatrix_coo(coo_array([[5]]))
False
>>> isspmatrix_coo(csr_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_coo.html, scipy.sparse.isspmatrix_coo scipy.sparse.coo_matrix scipy.sparse.coo_array scipy.sparse.csr_matrix
">>> import numpy as np
>>> from scipy.sparse import csr_matrix
>>> csr_matrix((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html, scipy.sparse.csr_matrix
">>> row = np.array([0, 0, 1, 2, 2, 2])
>>> col = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csr_matrix((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html, scipy.sparse.csr_matrix
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csr_matrix((data, indices, indptr), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html, scipy.sparse.csr_matrix
">>> row = np.array([0, 1, 2, 0])
>>> col = np.array([0, 1, 1, 0])
>>> data = np.array([1, 2, 4, 8])
>>> csr_matrix((data, (row, col)), shape=(3, 3)).toarray()
array([[9, 0, 0],
       [0, 2, 0],
       [0, 4, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html, scipy.sparse.csr_matrix
">>> docs = [[""hello"", ""world"", ""hello""], [""goodbye"", ""cruel"", ""world""]]
>>> indptr = [0]
>>> indices = []
>>> data = []
>>> vocabulary = {}
>>> for d in docs:
...     for term in d:
...         index = vocabulary.setdefault(term, len(vocabulary))
...         indices.append(index)
...         data.append(1)
...     indptr.append(len(indices))
...
>>> csr_matrix((data, indices, indptr), dtype=int).toarray()
array([[2, 1, 0, 0],
       [0, 1, 1, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html, scipy.sparse.csr_matrix
">>> from scipy import odr
>>> import numpy as np
>>> x = np.linspace(0.0, 5.0)
>>> y = 10.0 + 5.0 * x
>>> data = odr.Data(x, y)
>>> odr_obj = odr.ODR(data, odr.multilinear)
>>> output = odr_obj.run()
>>> print(output.beta)
[10.  5.]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.odr.multilinear.html, scipy.odr.Data scipy.odr.ODR
">>> from scipy.spatial import distance
>>> distance.braycurtis([1, 0, 0], [0, 1, 0])
1.0
>>> distance.braycurtis([1, 1, 0], [0, 1, 0])
0.33333333333333331
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.braycurtis.html, scipy.spatial.distance.braycurtis
">>> from scipy.spatial import distance
>>> distance.jaccard([1, 0, 0], [0, 1, 0])
1.0
>>> distance.jaccard([1, 0, 0], [1, 1, 0])
0.5
>>> distance.jaccard([1, 0, 0], [1, 2, 0])
0.5
>>> distance.jaccard([1, 0, 0], [1, 1, 1])
0.66666666666666663
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.jaccard.html, scipy.spatial.distance.jaccard
">>> from scipy.spatial import distance
>>> distance.hamming([1, 0, 0], [0, 1, 0])
0.66666666666666663
>>> distance.hamming([1, 0, 0], [1, 1, 0])
0.33333333333333331
>>> distance.hamming([1, 0, 0], [2, 0, 0])
0.33333333333333331
>>> distance.hamming([1, 0, 0], [3, 0, 0])
0.33333333333333331
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.hamming.html, scipy.spatial.distance.hamming
">>> from scipy.sparse import rand
>>> matrix = rand(3, 4, density=0.25, format=""csr"", random_state=42)
>>> matrix
<3x4 sparse matrix of type ''
   with 3 stored elements in Compressed Sparse Row format>
>>> matrix.toarray()
array([[0.05641158, 0.        , 0.        , 0.65088847],  # random
       [0.        , 0.        , 0.        , 0.14286682],
       [0.        , 0.        , 0.        , 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.rand.html, scipy.sparse.rand
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> csr_array((3, 4), dtype=np.int8).toarray()
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]], dtype=int8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.html, scipy.sparse.csr_array
">>> row = np.array([0, 0, 1, 2, 2, 2])
>>> col = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csr_array((data, (row, col)), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.html, scipy.sparse.csr_array
">>> indptr = np.array([0, 2, 3, 6])
>>> indices = np.array([0, 2, 2, 0, 1, 2])
>>> data = np.array([1, 2, 3, 4, 5, 6])
>>> csr_array((data, indices, indptr), shape=(3, 3)).toarray()
array([[1, 0, 2],
       [0, 0, 3],
       [4, 5, 6]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.html, scipy.sparse.csr_array
">>> row = np.array([0, 1, 2, 0])
>>> col = np.array([0, 1, 1, 0])
>>> data = np.array([1, 2, 4, 8])
>>> csr_array((data, (row, col)), shape=(3, 3)).toarray()
array([[9, 0, 0],
       [0, 2, 0],
       [0, 4, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.html, scipy.sparse.csr_array
">>> docs = [[""hello"", ""world"", ""hello""], [""goodbye"", ""cruel"", ""world""]]
>>> indptr = [0]
>>> indices = []
>>> data = []
>>> vocabulary = {}
>>> for d in docs:
...     for term in d:
...         index = vocabulary.setdefault(term, len(vocabulary))
...         indices.append(index)
...         data.append(1)
...     indptr.append(len(indices))
...
>>> csr_array((data, indices, indptr), dtype=int).toarray()
array([[2, 1, 0, 0],
       [0, 1, 1, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.html, scipy.sparse.csr_array
">>> from scipy.spatial import distance
>>> import numpy as np
>>> distance.jensenshannon([1.0, 0.0, 0.0], [0.0, 1.0, 0.0], 2.0)
1.0
>>> distance.jensenshannon([1.0, 0.0], [0.5, 0.5])
0.46450140402245893
>>> distance.jensenshannon([1.0, 0.0, 0.0], [1.0, 0.0, 0.0])
0.0
>>> a = np.array([[1, 2, 3, 4],
...               [5, 6, 7, 8],
...               [9, 10, 11, 12]])
>>> b = np.array([[13, 14, 15, 16],
...               [17, 18, 19, 20],
...               [21, 22, 23, 24]])
>>> distance.jensenshannon(a, b, axis=0)
array([0.1954288, 0.1447697, 0.1138377, 0.0927636])
>>> distance.jensenshannon(a, b, axis=1)
array([0.1402339, 0.0399106, 0.0201815])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.jensenshannon.html, scipy.spatial.distance.jensenshannon
">>> v = [1.0, 1.2, 1.0, 0.5, 1.3, 0.9]
>>> is_valid_y(v)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_y.html, scipy.spatial.distance.is_valid_y
">>> is_valid_y([1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7])
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.is_valid_y.html, scipy.spatial.distance.is_valid_y
">>> from scipy.spatial import distance
>>> distance.sokalsneath([1, 0, 0], [0, 1, 0])
1.0
>>> distance.sokalsneath([1, 0, 0], [1, 1, 0])
0.66666666666666663
>>> distance.sokalsneath([1, 0, 0], [2, 1, 0])
0.0
>>> distance.sokalsneath([1, 0, 0], [3, 1, 0])
-2.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.sokalsneath.html, scipy.spatial.distance.sokalsneath
">>> from scipy.spatial import distance
>>> distance.cityblock([1, 0, 0], [0, 1, 0])
2
>>> distance.cityblock([1, 0, 0], [0, 2, 0])
3
>>> distance.cityblock([1, 0, 0], [1, 1, 0])
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cityblock.html, scipy.spatial.distance.cityblock
">>> from scipy.spatial import distance
>>> distance.chebyshev([1, 0, 0], [0, 1, 0])
1
>>> distance.chebyshev([1, 1, 0], [0, 1, 0])
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.chebyshev.html, scipy.spatial.distance.chebyshev
">>> from scipy.sparse import coo_array, block_diag
>>> A = coo_array([[1, 2], [3, 4]])
>>> B = coo_array([[5], [6]])
>>> C = coo_array([[7]])
>>> block_diag((A, B, C)).toarray()
array([[1, 2, 0, 0],
       [3, 4, 0, 0],
       [0, 0, 5, 0],
       [0, 0, 6, 0],
       [0, 0, 0, 7]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.block_diag.html, scipy.sparse.coo_array scipy.sparse.block_diag
"dm = cdist(XA, XB, lambda u, v: np.sqrt(((u-v)**2).sum()))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html, scipy.spatial.distance.cdist
"dm = cdist(XA, XB, sokalsneath)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html, scipy.spatial.distance.cdist
"dm = cdist(XA, XB, 'sokalsneath')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html, scipy.spatial.distance.cdist
">>> from scipy.spatial import distance
>>> import numpy as np
>>> coords = [(35.0456, -85.2672),
...           (35.1174, -89.9711),
...           (35.9728, -83.9422),
...           (36.1667, -86.7833)]
>>> distance.cdist(coords, coords, 'euclidean')
array([[ 0.    ,  4.7044,  1.6172,  1.8856],
       [ 4.7044,  0.    ,  6.0893,  3.3561],
       [ 1.6172,  6.0893,  0.    ,  2.8477],
       [ 1.8856,  3.3561,  2.8477,  0.    ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html, scipy.spatial.distance.cdist
">>> a = np.array([[0, 0, 0],
...               [0, 0, 1],
...               [0, 1, 0],
...               [0, 1, 1],
...               [1, 0, 0],
...               [1, 0, 1],
...               [1, 1, 0],
...               [1, 1, 1]])
>>> b = np.array([[ 0.1,  0.2,  0.4]])
>>> distance.cdist(a, b, 'cityblock')
array([[ 0.7],
       [ 0.9],
       [ 1.3],
       [ 1.5],
       [ 1.5],
       [ 1.7],
       [ 2.1],
       [ 2.3]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html, scipy.spatial.distance.cdist
">>> from scipy.spatial import distance
>>> distance.seuclidean([1, 0, 0], [0, 1, 0], [0.1, 0.1, 0.1])
4.4721359549995796
>>> distance.seuclidean([1, 0, 0], [0, 1, 0], [1, 0.1, 0.1])
3.3166247903553998
>>> distance.seuclidean([1, 0, 0], [0, 1, 0], [10, 0.1, 0.1])
3.1780497164141406
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.seuclidean.html, scipy.spatial.distance.seuclidean
">>> from scipy.spatial import distance
>>> distance.russellrao([1, 0, 0], [0, 1, 0])
1.0
>>> distance.russellrao([1, 0, 0], [1, 1, 0])
0.6666666666666666
>>> distance.russellrao([1, 0, 0], [2, 0, 0])
0.3333333333333333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.russellrao.html, scipy.spatial.distance.russellrao
">>> from scipy.spatial import distance
>>> distance.yule([1, 0, 0], [0, 1, 0])
2.0
>>> distance.yule([1, 1, 0], [0, 1, 0])
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.yule.html, scipy.spatial.distance.yule
">>> from scipy.sparse import lil_array, lil_matrix, coo_matrix, isspmatrix_lil
>>> isspmatrix_lil(lil_matrix([[5]]))
True
>>> isspmatrix_lil(lil_array([[5]]))
False
>>> isspmatrix_lil(coo_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_lil.html, scipy.sparse.isspmatrix_lil scipy.sparse.lil_matrix scipy.sparse.lil_array scipy.sparse.coo_matrix
">>> from scipy.spatial import distance
>>> distance.cosine([1, 0, 0], [0, 1, 0])
1.0
>>> distance.cosine([100, 0, 0], [0, 1, 0])
1.0
>>> distance.cosine([1, 1, 0], [0, 1, 0])
0.29289321881345254
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cosine.html, scipy.spatial.distance.cosine
">>> import numpy as np
>>> from scipy.sparse import csr_array, csr_matrix, isspmatrix
>>> isspmatrix(csr_matrix([[5]]))
True
>>> isspmatrix(csr_array([[5]]))
False
>>> isspmatrix(np.array([[5]]))
False
>>> isspmatrix(5)
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix.html, scipy.sparse.isspmatrix scipy.sparse.csr_matrix scipy.sparse.csr_array
">>> from scipy.spatial.distance import num_obs_dm
>>> d = [[0, 100, 200], [100, 0, 150], [200, 150, 0]]
>>> num_obs_dm(d)
3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.num_obs_dm.html, scipy.spatial.distance.num_obs_dm
">>> from scipy.spatial import distance
>>> distance.minkowski([1, 0, 0], [0, 1, 0], 1)
2.0
>>> distance.minkowski([1, 0, 0], [0, 1, 0], 2)
1.4142135623730951
>>> distance.minkowski([1, 0, 0], [0, 1, 0], 3)
1.2599210498948732
>>> distance.minkowski([1, 1, 0], [0, 1, 0], 1)
1.0
>>> distance.minkowski([1, 1, 0], [0, 1, 0], 2)
1.0
>>> distance.minkowski([1, 1, 0], [0, 1, 0], 3)
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.minkowski.html, scipy.spatial.distance.minkowski
"dm = pdist(X, lambda u, v: np.sqrt(((u-v)**2).sum()))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
"dm = pdist(X, sokalsneath)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
"dm = pdist(X, 'sokalsneath')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
">>> pdist(x)
array([2.23606798, 6.40312424, 7.34846923, 2.82842712, 4.89897949,
       6.40312424, 1.        , 5.38516481, 4.58257569, 5.47722558])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
">>> pdist(x, metric='minkowski', p=3.5)
array([2.04898923, 5.1154929 , 7.02700737, 2.43802731, 4.19042714,
       6.03956994, 1.        , 4.45128103, 4.10636143, 5.0619695 ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
">>> pdist(x, metric='cityblock')
array([ 3., 11., 10.,  4.,  8.,  9.,  1.,  9.,  7.,  8.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html, scipy.spatial.distance.pdist
">>> directed_hausdorff(u, v)[0]
2.23606797749979
>>> directed_hausdorff(v, u)[0]
3.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.directed_hausdorff.html, scipy.spatial.distance.directed_hausdorff
">>> max(directed_hausdorff(u, v)[0], directed_hausdorff(v, u)[0])
3.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.directed_hausdorff.html, scipy.spatial.distance.directed_hausdorff
">>> directed_hausdorff(v, u)[1:]
(3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.directed_hausdorff.html, scipy.spatial.distance.directed_hausdorff
">>> from scipy.spatial import distance
>>> distance.rogerstanimoto([1, 0, 0], [0, 1, 0])
0.8
>>> distance.rogerstanimoto([1, 0, 0], [1, 1, 0])
0.5
>>> distance.rogerstanimoto([1, 0, 0], [2, 0, 0])
-1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.rogerstanimoto.html, scipy.spatial.distance.rogerstanimoto
">>> from scipy.sparse import dok_array, dok_matrix, coo_matrix, isspmatrix_dok
>>> isspmatrix_dok(dok_matrix([[5]]))
True
>>> isspmatrix_dok(dok_array([[5]]))
False
>>> isspmatrix_dok(coo_matrix([[5]]))
False
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.isspmatrix_dok.html, scipy.sparse.isspmatrix_dok scipy.sparse.dok_matrix scipy.sparse.dok_array scipy.sparse.coo_matrix
">>> zeta(2), np.pi**2/6
(1.6449340668482266, 1.6449340668482264)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.zeta.html, scipy.special.zeta
">>> zeta(4), np.pi**4/90
(1.0823232337111381, 1.082323233711138)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.zeta.html, scipy.special.zeta
">>> m = 3
>>> x = 1.25
>>> polygamma(m, x)
array(2.782144009188397)
>>> (-1)**(m+1) * factorial(m) * zeta(m+1, x)
2.7821440091883969
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.zeta.html, scipy.special.polygamma scipy.special.factorial scipy.special.zeta
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.linalg import det
>>> from scipy.special import chebyt
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-2.0, 2.0)
>>> ax.set_title(r'Chebyshev polynomial $T_3$')
>>> ax.plot(x, chebyt(3)(x), label=rf'$T_3$')
>>> for p in np.arange(-1.0, 1.0, 0.1):
...     ax.plot(p,
...             det(np.array([[p, 1, 0], [1, 2*p, 1], [0, 1, 2*p]])),
...             'rx')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyt.html, scipy.special.chebyt scipy.linalg.det
">>> from scipy.special import binom
>>> from scipy.special import jacobi
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> np.allclose(jacobi(3, -0.5, -0.5)(x),
...             1/64 * binom(6, 3) * chebyt(3)(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyt.html, scipy.special.jacobi scipy.special.chebyt
">>> x = np.arange(-1.5, 1.5, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-4.0, 4.0)
>>> ax.set_title(r'Chebyshev polynomials $T_n$')
>>> for n in np.arange(2,5):
...     ax.plot(x, chebyt(n)(x), label=rf'$T_n={n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyt.html, scipy.special.chebyt
">>> import numpy as np
>>> from scipy.special import stirling2
>>> k = np.array([3, -1, 3])
>>> n = np.array([10, 10, 9])
>>> stirling2(n, k)
array([9330, 0, 3025], dtype=object)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.stirling2.html, scipy.special.stirling2
">>> import numpy as np
>>> from scipy.special import multigammaln, gammaln
>>> a = 23.5
>>> d = 10
>>> multigammaln(a, d)
454.1488605074416
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.multigammaln.html, scipy.special.multigammaln
">>> import numpy as np
>>> from scipy.special import roots_legendre, eval_legendre
>>> roots, weights = roots_legendre(9)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.roots_legendre.html, scipy.special.roots_legendre
">>> def f(t):
...    return t + 1/t
...
>>> a = 1
>>> b = 2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.roots_legendre.html, scipy.io.netcdf_file
"integral(f(t), a, b) =
    (b - a)/2 * integral(f((b-a)/2*x + (a+b)/2), x=-1, x=1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.roots_legendre.html, scipy.io.netcdf_file
">>> (b - a)/2 * f(t).dot(weights)
2.1931471805599276
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.roots_legendre.html, scipy.io.netcdf_file
">>> from scipy.special import boxcox, inv_boxcox
>>> y = boxcox([1, 4, 10], 2.5)
>>> inv_boxcox(y, 2.5)
array([1., 4., 10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.inv_boxcox.html, scipy.stats.boxcox
">>> import numpy as np
>>> from scipy.special import y0_zeros
>>> zeros, grads = y0_zeros(4)
>>> with np.printoptions(precision=5):
...     print(f""Roots: {zeros}"")
...     print(f""Gradients: {grads}"")
Roots: [ 0.89358+0.j  3.95768+0.j  7.08605+0.j 10.22235+0.j]
Gradients: [-0.87942+0.j  0.40254+0.j -0.3001 +0.j  0.2497 +0.j]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y0_zeros.html, scipy.special.y0_zeros
">>> import matplotlib.pyplot as plt
>>> from scipy.special import y0
>>> xmin = 0
>>> xmax = 11
>>> x = np.linspace(xmin, xmax, 500)
>>> fig, ax = plt.subplots()
>>> ax.hlines(0, xmin, xmax, color='k')
>>> ax.plot(x, y0(x), label=r'$Y_0$')
>>> zeros, grads = y0_zeros(4)
>>> ax.scatter(zeros.real, np.zeros((4, )), s=30, c='r',
...            label=r'$Y_0$_zeros', zorder=5)
>>> ax.set_ylim(-0.5, 0.6)
>>> ax.set_xlim(xmin, xmax)
>>> plt.legend(ncol=2)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y0_zeros.html, scipy.special.y0_zeros
">>> y0_zeros(4, True)
(array([ -2.40301663+0.53988231j,  -5.5198767 +0.54718001j,
         -8.6536724 +0.54841207j, -11.79151203+0.54881912j]),
 array([ 0.10074769-0.88196771j, -0.02924642+0.5871695j ,
         0.01490806-0.46945875j, -0.00937368+0.40230454j]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y0_zeros.html, scipy.special.y0_zeros
">>> from scipy.special import ivp
>>> ivp(0, 1, 0), ivp(0, 1, 1), ivp(0, 1, 2)
(1.2660658777520084, 0.565159103992485, 0.7009067737595233)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ivp.html, scipy.special.ivp
">>> ivp([0, 1, 2], 1, 1)
array([0.5651591 , 0.70090677, 0.29366376])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ivp.html, scipy.special.ivp
">>> import numpy as np
>>> points = np.array([0., 1.5, 3.])
>>> ivp(0, points, 1)
array([0.        , 0.98166643, 3.95337022])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ivp.html, scipy.special.ivp
">>> import matplotlib.pyplot as plt
>>> x = np.linspace(-5, 5, 1000)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, ivp(1, x, 0), label=r""$I_1$"")
>>> ax.plot(x, ivp(1, x, 1), label=r""$I_1'$"")
>>> ax.plot(x, ivp(1, x, 2), label=r""$I_1''$"")
>>> ax.plot(x, ivp(1, x, 3), label=r""$I_1'''$"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ivp.html, scipy.special.ivp
">>> import numpy as np
>>> from scipy.special import logsumexp
>>> a = np.arange(10)
>>> logsumexp(a)
9.4586297444267107
>>> np.log(np.sum(np.exp(a)))
9.4586297444267107
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html, scipy.special.logsumexp
">>> a = np.arange(10)
>>> b = np.arange(10, 0, -1)
>>> logsumexp(a, b=b)
9.9170178533034665
>>> np.log(np.sum(b*np.exp(a)))
9.9170178533034647
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html, scipy.special.logsumexp
">>> logsumexp([1,2],b=[1,-1],return_sign=True)
(1.5413248546129181, -1.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html, scipy.special.logsumexp
">>> a = np.ma.array([np.log(2), 2, np.log(3)],
...                  mask=[False, True, False])
>>> b = (~a.mask).astype(int)
>>> logsumexp(a.data, b=b), np.log(5)
1.6094379124341005, 1.6094379124341005
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.logsumexp.html, scipy.special.logsumexp
">>> from scipy.stats import norm, laplace
>>> rng = np.random.default_rng()
>>> n = 1000
>>> lap01 = laplace(0, 1)
>>> x = np.sort(lap01.rvs(n, random_state=rng))
>>> np.mean(x), np.std(x)
(-0.05841730131499543, 1.3968109101997568)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kolmogorov.html, scipy.ndimage.laplace
">>> import numpy as np
>>> from scipy.special import factorial
>>> arr = np.array([3, 4, 5])
>>> factorial(arr, exact=False)
array([   6.,   24.,  120.])
>>> factorial(arr, exact=True)
array([  6,  24, 120])
>>> factorial(5, exact=True)
120
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.factorial.html, scipy.special.factorial
">>> from scipy.special import ynp_zeros
>>> ynp_zeros(0, 4)
array([ 2.19714133,  5.42968104,  8.59600587, 11.74915483])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ynp_zeros.html, scipy.special.ynp_zeros
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.special import yn, ynp_zeros, yvp
>>> zeros = ynp_zeros(0, 4)
>>> xmax = 13
>>> x = np.linspace(0, xmax, 500)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, yn(0, x), label=r'$Y_0$')
>>> ax.plot(x, yvp(0, x, 1), label=r""$Y_0'$"")
>>> ax.scatter(zeros, np.zeros((4, )), s=30, c='r',
...            label=r""Roots of $Y_0'$"", zorder=5)
>>> for root in zeros:
...     y0_extremum =  yn(0, root)
...     lower = min(0, y0_extremum)
...     upper = max(0, y0_extremum)
...     ax.vlines(root, lower, upper, color='r')
>>> ax.hlines(0, 0, xmax, color='k')
>>> ax.set_ylim(-0.6, 0.6)
>>> ax.set_xlim(0, xmax)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ynp_zeros.html, scipy.special.ynp_zeros scipy.special.yvp
"diric(x, n) = sin(x * n/2) / (n * sin(x / 2)),
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.diric.html, scipy.special.diric
">>> x = np.linspace(-8*np.pi, 8*np.pi, num=201)
>>> plt.figure(figsize=(8, 8));
>>> for idx, n in enumerate([2, 3, 4, 9]):
...     plt.subplot(2, 2, idx+1)
...     plt.plot(x, special.diric(x, n))
...     plt.title('diric, n={}'.format(n))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.diric.html, scipy.special.diric
">>> theta = np.linspace(0, 2*np.pi, m, endpoint=False)
>>> k * special.diric(theta, k)
array([ 3.        ,  2.41421356,  1.        , -0.41421356, -1.        ,
       -0.41421356,  1.        ,  2.41421356])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.diric.html, scipy.special.diric
">>> z = 0.5 + 3j
>>> wrightomega(z)
(0.0966015889280649+1.4937828458191993j)
>>> lambertw(np.exp(z))
(0.09660158892806493+1.4937828458191993j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.wrightomega.html, scipy.special.lambertw
">>> z = 0.5 + 4j
>>> wrightomega(z)
(-0.3362123489037213+2.282986001579032j)
>>> lambertw(np.exp(z), k=1)
(-0.33621234890372115+2.282986001579032j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.wrightomega.html, scipy.special.lambertw
">>> from scipy.special import jnp_zeros
>>> jnp_zeros(2, 4)
array([ 3.05423693,  6.70613319,  9.96946782, 13.17037086])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jnp_zeros.html, scipy.special.jnp_zeros
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.special import jn, jnp_zeros, jvp
>>> j2_roots = jnp_zeros(2, 4)
>>> xmax = 15
>>> x = np.linspace(0, xmax, 500)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, jn(2, x), label=r'$J_2$')
>>> ax.plot(x, jvp(2, x, 1), label=r""$J_2'$"")
>>> ax.hlines(0, 0, xmax, color='k')
>>> ax.scatter(j2_roots, np.zeros((4, )), s=30, c='r',
...            label=r""Roots of $J_2'$"", zorder=5)
>>> ax.set_ylim(-0.4, 0.8)
>>> ax.set_xlim(0, xmax)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jnp_zeros.html, scipy.special.jnp_zeros scipy.special.jvp
">>> import scipy.special as sc
>>> for key, value in sorted(sc.geterr().items()):
...     print(""{}: {}"".format(key, value))
...
arg: ignore
domain: ignore
loss: ignore
no_result: ignore
other: ignore
overflow: ignore
singular: ignore
slow: ignore
underflow: ignore
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.geterr.html, scipy.special.geterr
">>> from scipy.special import h1vp
>>> h1vp(0, 1, 0), h1vp(0, 1, 1), h1vp(0, 1, 2)
((0.7651976865579664+0.088256964215677j),
 (-0.44005058574493355+0.7812128213002889j),
 (-0.3251471008130329-0.8694697855159659j))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h1vp.html, scipy.special.h1vp
">>> h1vp([0, 1, 2], 1, 1)
array([-0.44005059+0.78121282j,  0.3251471 +0.86946979j,
       0.21024362+2.52015239j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h1vp.html, scipy.special.h1vp
">>> import numpy as np
>>> points = np.array([0.5, 1.5, 3.])
>>> h1vp(0, points, 1)
array([-0.24226846+1.47147239j, -0.55793651+0.41230863j,
       -0.33905896-0.32467442j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h1vp.html, scipy.special.h1vp
"softmax(x) = np.exp(x)/sum(np.exp(x))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.softmax.html, scipy.special.softmax
">>> m = softmax(x)
>>> m
array([[  4.48309e-06,   2.71913e-06,   2.01438e-06,   3.31258e-05],
       [  4.48309e-06,   6.06720e-07,   1.80861e-03,   3.31258e-05],
       [  1.21863e-05,   2.68421e-01,   7.29644e-01,   3.31258e-05]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.softmax.html, scipy.special.softmax
">>> m = softmax(x, axis=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.softmax.html, scipy.special.softmax
">>> m = softmax(x, axis=1)
>>> m
array([[  1.05877e-01,   6.42177e-02,   4.75736e-02,   7.82332e-01],
       [  2.42746e-03,   3.28521e-04,   9.79307e-01,   1.79366e-02],
       [  1.22094e-05,   2.68929e-01,   7.31025e-01,   3.31885e-05]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.softmax.html, scipy.special.softmax
">>> zetac(60), zeta(60) - 1
(8.673617380119933e-19, 0.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.zetac.html, scipy.special.zeta
">>> import numpy as np
>>> from scipy.special import bernoulli, zeta
>>> bernoulli(4)
array([ 1.        , -0.5       ,  0.16666667,  0.        , -0.03333333])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.bernoulli.html, scipy.special.bernoulli
">>> n = np.arange(1, 5)
>>> -n * zeta(1 - n)
array([ 0.5       ,  0.16666667, -0.        , -0.03333333])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.bernoulli.html, scipy.special.zeta
">>> import matplotlib.pyplot as plt
>>> plt.plot(x, y, 'b', alpha=0.6, label='gamma(x)')
>>> k = np.arange(1, 7)
>>> plt.plot(k, factorial(k-1), 'k*', alpha=0.6,
...          label='(x-1)!, x = 1, 2, ...')
>>> plt.xlim(-3.5, 5.5)
>>> plt.ylim(-10, 25)
>>> plt.grid()
>>> plt.xlabel('x')
>>> plt.legend(loc='lower right')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.gamma.html, scipy.special.factorial
">>> from scipy.special import jvp
>>> jvp(0, 1, 0), jvp(0, 1, 1), jvp(0, 1, 2)
(0.7651976865579666, -0.44005058574493355, -0.3251471008130331)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jvp.html, scipy.special.jvp
">>> jvp([0, 1, 2], 1, 1)
array([-0.44005059,  0.3251471 ,  0.21024362])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jvp.html, scipy.special.jvp
">>> import numpy as np
>>> points = np.array([0., 1.5, 3.])
>>> jvp(0, points, 1)
array([-0.        , -0.55793651, -0.33905896])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jvp.html, scipy.special.jvp
">>> import matplotlib.pyplot as plt
>>> x = np.linspace(-10, 10, 1000)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, jvp(1, x, 0), label=r""$J_1$"")
>>> ax.plot(x, jvp(1, x, 1), label=r""$J_1'$"")
>>> ax.plot(x, jvp(1, x, 2), label=r""$J_1''$"")
>>> ax.plot(x, jvp(1, x, 3), label=r""$J_1'''$"")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jvp.html, scipy.special.jvp
">>> from scipy.stats import t
>>> df, x = 3, 0.5
>>> stdtrit_result = stdtrit(df, x)  # this can be faster than below
>>> stats_result = t(df).ppf(x)
>>> stats_result == stdtrit_result  # test that results are equal
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.stdtrit.html, scipy.signal.ShortTimeFFT.t
">>> from scipy.special import jnyn_zeros
>>> jn_roots, jnp_roots, yn_roots, ynp_roots = jnyn_zeros(1, 3)
>>> jn_roots, yn_roots
(array([ 3.83170597,  7.01558667, 10.17346814]),
 array([2.19714133, 5.42968104, 8.59600587]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jnyn_zeros.html, scipy.special.jnyn_zeros
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.special import jnyn_zeros, jvp, jn, yvp, yn
>>> jn_roots, jnp_roots, yn_roots, ynp_roots = jnyn_zeros(1, 3)
>>> fig, ax = plt.subplots()
>>> xmax= 11
>>> x = np.linspace(0, xmax)
>>> x[0] += 1e-15
>>> ax.plot(x, jn(1, x), label=r""$J_1$"", c='r')
>>> ax.plot(x, jvp(1, x, 1), label=r""$J_1'$"", c='b')
>>> ax.plot(x, yn(1, x), label=r""$Y_1$"", c='y')
>>> ax.plot(x, yvp(1, x, 1), label=r""$Y_1'$"", c='c')
>>> zeros = np.zeros((3, ))
>>> ax.scatter(jn_roots, zeros, s=30, c='r', zorder=5,
...            label=r""$J_1$ roots"")
>>> ax.scatter(jnp_roots, zeros, s=30, c='b', zorder=5,
...            label=r""$J_1'$ roots"")
>>> ax.scatter(yn_roots, zeros, s=30, c='y', zorder=5,
...            label=r""$Y_1$ roots"")
>>> ax.scatter(ynp_roots, zeros, s=30, c='c', zorder=5,
...            label=r""$Y_1'$ roots"")
>>> ax.hlines(0, 0, xmax, color='k')
>>> ax.set_ylim(-0.6, 0.6)
>>> ax.set_xlim(0, xmax)
>>> ax.legend(ncol=2, bbox_to_anchor=(1., 0.75))
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jnyn_zeros.html, scipy.special.jnyn_zeros scipy.special.jvp scipy.special.yvp
">>> import scipy.special as sc
>>> from pytest import raises
>>> sc.gammaln(0)
inf
>>> olderr = sc.seterr(singular='raise')
>>> with raises(sc.SpecialFunctionError):
...     sc.gammaln(0)
...
>>> _ = sc.seterr(**olderr)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.seterr.html, scipy.special.seterr
">>> olderr = sc.seterr(all='raise', singular='ignore')
>>> sc.gammaln(0)
inf
>>> with raises(sc.SpecialFunctionError):
...     sc.spence(-1)
...
>>> _ = sc.seterr(**olderr)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.seterr.html, scipy.special.seterr
"double boxcox(double, double)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.stats.boxcox
"double btdtr(double, double, double)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.btdtr
"double btdtri(double, double, double)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.btdtri
"double complex spherical_jn(long, double complex)
double complex spherical_jn(long, double complex, bint)
double spherical_jn(long, double)
double spherical_jn(long, double, bint)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.spherical_jn
"double complex spherical_yn(long, double complex)
double complex spherical_yn(long, double complex, bint)
double spherical_yn(long, double)
double spherical_yn(long, double, bint)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.spherical_yn
"double complex spherical_in(long, double complex)
double complex spherical_in(long, double complex, bint)
double spherical_in(long, double)
double spherical_in(long, double, bint)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.spherical_in
"double complex spherical_kn(long, double complex)
double complex spherical_kn(long, double complex, bint)
double spherical_kn(long, double)
double spherical_kn(long, double, bint)
",https://docs.scipy.org/doc/scipy/reference/special.cython_special.html, scipy.special.spherical_kn
">>> import numpy as np
>>> from scipy.special import lambertw
>>> w = lambertw(1)
>>> w
(0.56714329040978384+0j)
>>> w * np.exp(w)
(1.0+0j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.lambertw.html, scipy.special.lambertw
">>> w = lambertw(1, k=3)
>>> w
(-2.8535817554090377+17.113535539412148j)
>>> w*np.exp(w)
(1.0000000000000002+1.609823385706477e-15j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.lambertw.html, scipy.special.lambertw
">>> x = a - lambertw(-b*c*np.exp(a*c))/c
>>> x
(3.3707498368978794+0j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.lambertw.html, scipy.special.lambertw
">>> def tower(z, n):
...     if n == 0:
...         return z
...     return z ** tower(z, n-1)
...
>>> tower(0.5, 100)
0.641185744504986
>>> -lambertw(-np.log(0.5)) / np.log(0.5)
(0.64118574450498589+0j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.lambertw.html, scipy.special.lambertw
">>> from scipy import special
>>> special.erf_zeros(1)
array([1.45061616+1.880943j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.erf_zeros.html, scipy.special.erf_zeros
">>> special.erf(special.erf_zeros(1))
array([4.95159469e-14-1.16407394e-16j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.erf_zeros.html, scipy.special.erf_zeros
">>> from scipy.special import spherical_jn
>>> spherical_jn(0, 3+5j)
(-9.878987731663194-8.021894345786002j)
>>> type(spherical_jn(0, 3+5j))

",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_jn.html, scipy.special.spherical_jn
">>> import numpy as np
>>> x = np.arange(1.0, 2.0, 0.01)
>>> np.allclose(spherical_jn(3, x, True),
...             spherical_jn(2, x) - 4/x * spherical_jn(3, x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_jn.html, scipy.special.spherical_jn
">>> import matplotlib.pyplot as plt
>>> x = np.arange(0.0, 10.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-0.5, 1.5)
>>> ax.set_title(r'Spherical Bessel functions $j_n$')
>>> for n in np.arange(0, 4):
...     ax.plot(x, spherical_jn(n, x), label=rf'$j_{n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_jn.html, scipy.special.spherical_jn
">>> import numpy as np
>>> from scipy.special import y1_zeros
>>> zeros, grads = y1_zeros(4)
>>> with np.printoptions(precision=5):
...     print(f""Roots: {zeros}"")
...     print(f""Gradients: {grads}"")
Roots: [ 2.19714+0.j  5.42968+0.j  8.59601+0.j 11.74915+0.j]
Gradients: [ 0.52079+0.j -0.34032+0.j  0.27146+0.j -0.23246+0.j]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y1_zeros.html, scipy.special.y1_zeros
">>> import matplotlib.pyplot as plt
>>> from scipy.special import y1
>>> xmin = 0
>>> xmax = 13
>>> x = np.linspace(xmin, xmax, 500)
>>> zeros, grads = y1_zeros(4)
>>> fig, ax = plt.subplots()
>>> ax.hlines(0, xmin, xmax, color='k')
>>> ax.plot(x, y1(x), label=r'$Y_1$')
>>> ax.scatter(zeros.real, np.zeros((4, )), s=30, c='r',
...            label=r'$Y_1$_zeros', zorder=5)
>>> ax.set_ylim(-0.5, 0.5)
>>> ax.set_xlim(xmin, xmax)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y1_zeros.html, scipy.special.y1_zeros
">>> y1_zeros(4, True)
(array([ -0.50274327+0.78624371j,  -3.83353519+0.56235654j,
         -7.01590368+0.55339305j, -10.17357383+0.55127339j]),
 array([-0.45952768+1.31710194j,  0.04830191-0.69251288j,
        -0.02012695+0.51864253j,  0.011614  -0.43203296j]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y1_zeros.html, scipy.special.y1_zeros
">>> from scipy.special import yvp
>>> yvp(0, 1, 0), yvp(0, 1, 1), yvp(0, 1, 2)
(0.088256964215677, 0.7812128213002889, -0.8694697855159659)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yvp.html, scipy.special.yvp
">>> yvp([0, 1, 2], 1, 1)
array([0.78121282, 0.86946979, 2.52015239])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yvp.html, scipy.special.yvp
">>> import numpy as np
>>> points = np.array([0.5, 1.5, 3.])
>>> yvp(0, points, 1)
array([ 1.47147239,  0.41230863, -0.32467442])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yvp.html, scipy.special.yvp
">>> import matplotlib.pyplot as plt
>>> x = np.linspace(0, 5, 1000)
>>> x[0] += 1e-15
>>> fig, ax = plt.subplots()
>>> ax.plot(x, yvp(1, x, 0), label=r""$Y_1$"")
>>> ax.plot(x, yvp(1, x, 1), label=r""$Y_1'$"")
>>> ax.plot(x, yvp(1, x, 2), label=r""$Y_1''$"")
>>> ax.plot(x, yvp(1, x, 3), label=r""$Y_1'''$"")
>>> ax.set_ylim(-10, 10)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yvp.html, scipy.special.yvp
">>> from scipy.special import spherical_in
>>> spherical_in(0, 3+5j)
(-1.1689867793369182-1.2697305267234222j)
>>> type(spherical_in(0, 3+5j))

",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_in.html, scipy.special.spherical_in
">>> import numpy as np
>>> x = np.arange(1.0, 2.0, 0.01)
>>> np.allclose(spherical_in(3, x, True),
...             spherical_in(2, x) - 4/x * spherical_in(3, x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_in.html, scipy.special.spherical_in
">>> import matplotlib.pyplot as plt
>>> x = np.arange(0.0, 6.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-0.5, 5.0)
>>> ax.set_title(r'Modified spherical Bessel functions $i_n$')
>>> for n in np.arange(0, 4):
...     ax.plot(x, spherical_in(n, x), label=rf'$i_{n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_in.html, scipy.special.spherical_in
">>> import numpy as np
>>> from scipy.special import jacobi
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> np.allclose(jacobi(0, 2, 2)(x),
...             jacobi(1, 2, 1)(x) - jacobi(1, 1, 2)(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jacobi.html, scipy.special.jacobi
">>> import matplotlib.pyplot as plt
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-2.0, 2.0)
>>> ax.set_title(r'Jacobi polynomials $P_5^{(\alpha, -0.5)}$')
>>> for alpha in np.arange(0, 4, 1):
...     ax.plot(x, jacobi(5, alpha, -0.5)(x), label=rf'$\alpha={alpha}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jacobi.html, scipy.special.jacobi
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.linalg import det
>>> from scipy.special import chebyu
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-2.0, 2.0)
>>> ax.set_title(r'Chebyshev polynomial $U_3$')
>>> ax.plot(x, chebyu(3)(x), label=rf'$U_3$')
>>> for p in np.arange(-1.0, 1.0, 0.1):
...     ax.plot(p,
...             det(np.array([[2*p, 1, 0], [1, 2*p, 1], [0, 1, 2*p]])),
...             'rx')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyu.html, scipy.special.chebyu scipy.linalg.det
">>> from scipy.special import chebyt
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> np.allclose(chebyu(3)(x), 2 * chebyt(2)(x) * chebyu(1)(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyu.html, scipy.special.chebyu scipy.special.chebyt
">>> x = np.arange(-1.0, 1.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-1.5, 1.5)
>>> ax.set_title(r'Chebyshev polynomials $U_n$')
>>> for n in np.arange(1,5):
...     ax.plot(x, chebyu(n)(x), label=rf'$U_n={n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.chebyu.html, scipy.special.chebyu
"log_softmax(x) = log(softmax(x))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_softmax.html, scipy.special.log_softmax scipy.special.softmax
">>> y = log_softmax(x)
>>> y
array([   0., -999.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_softmax.html, scipy.special.log_softmax
">>> with np.errstate(divide='ignore'):
...   y = np.log(softmax(x))
...
>>> y
array([  0., -inf])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_softmax.html, scipy.special.softmax
">>> import numpy as np
>>> from scipy.special import genlaguerre
>>> from scipy.special import laguerre
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> np.allclose(genlaguerre(3, 0)(x), laguerre(3)(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.laguerre.html, scipy.special.genlaguerre scipy.special.laguerre
">>> x = np.arange(0.0, 1.0, 0.01)
>>> np.allclose(4 * laguerre(4)(x),
...             (7 - x) * laguerre(3)(x) - 3 * laguerre(2)(x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.laguerre.html, scipy.special.laguerre
">>> import matplotlib.pyplot as plt
>>> x = np.arange(-1.0, 5.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-5.0, 5.0)
>>> ax.set_title(r'Laguerre polynomials $L_n$')
>>> for n in np.arange(0, 5):
...     ax.plot(x, laguerre(n)(x), label=rf'$L_{n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.laguerre.html, scipy.special.laguerre
">>> p = special.gegenbauer(3, 0.5, monic=False)
>>> p
poly1d([ 2.5,  0. , -1.5,  0. ])
>>> p(1)
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.gegenbauer.html, scipy.special.gegenbauer
">>> from scipy.special import boxcox
>>> boxcox([1, 4, 10], 2.5)
array([   0.        ,   12.4       ,  126.09110641])
>>> boxcox(2, [0, 1, 2])
array([ 0.69314718,  1.        ,  1.5       ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.boxcox.html, scipy.stats.boxcox
">>> import numpy as np
>>> from scipy.special import perm
>>> k = np.array([3, 4])
>>> n = np.array([10, 10])
>>> perm(n, k)
array([  720.,  5040.])
>>> perm(10, 3, exact=True)
720
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.perm.html, scipy.special.perm
">>> import numpy as np
>>> from scipy.special import euler
>>> euler(6)
array([  1.,   0.,  -1.,   0.,   5.,   0., -61.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.euler.html, scipy.special.euler
">>> euler(13).astype(np.int64)
array([      1,       0,      -1,       0,       5,       0,     -61,
             0,    1385,       0,  -50521,       0, 2702765,       0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.euler.html, scipy.special.euler
">>> euler(22)[-1]  # Exact value of E(22) is -69348874393137901.
-69348874393137976.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.euler.html, scipy.special.euler
">>> from scipy import special
>>> b, bp, bi, bip = special.bi_zeros(3)
>>> b
array([-1.17371322, -3.2710933 , -4.83073784])
>>> bp
array([-2.29443968, -4.07315509, -5.51239573])
>>> bi
array([-0.45494438,  0.39652284, -0.36796916])
>>> bip
array([ 0.60195789, -0.76031014,  0.83699101])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.bi_zeros.html, scipy.special.bi_zeros
">>> p_monic = special.hermite(3, monic=True)
>>> p_monic
poly1d([ 1. ,  0. , -1.5,  0. ])
>>> p_monic(1)
-0.49999999999999983
>>> x = np.linspace(-3, 3, 400)
>>> y = p_monic(x)
>>> plt.plot(x, y)
>>> plt.title(""Monic Hermite polynomial of degree 3"")
>>> plt.xlabel(""x"")
>>> plt.ylabel(""H_3(x)"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.hermite.html, scipy.special.hermite
">>> from scipy.special import spherical_yn
>>> spherical_yn(0, 3+5j)
(8.022343088587197-9.880052589376795j)
>>> type(spherical_yn(0, 3+5j))

",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_yn.html, scipy.special.spherical_yn
">>> import numpy as np
>>> x = np.arange(1.0, 2.0, 0.01)
>>> np.allclose(spherical_yn(3, x, True),
...             spherical_yn(2, x) - 4/x * spherical_yn(3, x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_yn.html, scipy.special.spherical_yn
">>> import matplotlib.pyplot as plt
>>> x = np.arange(0.0, 10.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-2.0, 1.0)
>>> ax.set_title(r'Spherical Bessel functions $y_n$')
>>> for n in np.arange(0, 4):
...     ax.plot(x, spherical_yn(n, x), label=rf'$y_{n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_yn.html, scipy.special.spherical_yn
">>> from scipy import special
>>> a, ap, ai, aip = special.ai_zeros(3)
>>> a
array([-2.33810741, -4.08794944, -5.52055983])
>>> ap
array([-1.01879297, -3.24819758, -4.82009921])
>>> ai
array([ 0.53565666, -0.41901548,  0.38040647])
>>> aip
array([ 0.70121082, -0.80311137,  0.86520403])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ai_zeros.html, scipy.special.ai_zeros
">>> from scipy.special import ellip_harm
>>> w = ellip_harm(5,8,1,1,2.5)
>>> w
2.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ellip_harm.html, scipy.special.ellip_harm
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> def eigenvalue(f, df, ddf):
...     r = (((s**2 - h**2) * (s**2 - k**2) * ddf
...           + s * (2*s**2 - h**2 - k**2) * df
...           - n * (n + 1)*s**2*f) / f)
...     return -r.mean(), r.std()
>>> s = np.linspace(0.1, 10, 200)
>>> k, h, n, p = 8.0, 2.2, 3, 2
>>> E = ellip_harm(h**2, k**2, n, p, s)
>>> E_spl = UnivariateSpline(s, E)
>>> a, a_err = eigenvalue(E_spl(s), E_spl(s,1), E_spl(s,2))
>>> a, a_err
(583.44366156701483, 6.4580890640310646e-11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ellip_harm.html, scipy.special.ellip_harm scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline
">>> from scipy.special import yn_zeros
>>> yn_zeros(2, 4)
array([ 3.38424177,  6.79380751, 10.02347798, 13.20998671])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yn_zeros.html, scipy.special.yn_zeros
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.special import yn, yn_zeros
>>> xmin = 2
>>> xmax = 15
>>> x = np.linspace(xmin, xmax, 500)
>>> fig, ax = plt.subplots()
>>> ax.hlines(0, xmin, xmax, color='k')
>>> ax.plot(x, yn(2, x), label=r'$Y_2$')
>>> ax.scatter(yn_zeros(2, 4), np.zeros((4, )), s=30, c='r',
...            label='Roots', zorder=5)
>>> ax.set_ylim(-0.4, 0.4)
>>> ax.set_xlim(xmin, xmax)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.yn_zeros.html, scipy.special.yn_zeros
">>> from scipy.signal import convolve
>>> x, dx = np.linspace(-10, 10, 500, retstep=True)
>>> def gaussian(x, sigma):
...     return np.exp(-0.5 * x**2/sigma**2)/(sigma * np.sqrt(2*np.pi))
>>> def cauchy(x, gamma):
...     return gamma/(np.pi * (np.square(x)+gamma**2))
>>> sigma = 2
>>> gamma = 1
>>> gauss_profile = gaussian(x, sigma)
>>> cauchy_profile = cauchy(x, gamma)
>>> convolved = dx * convolve(cauchy_profile, gauss_profile, mode=""same"")
>>> voigt = voigt_profile(x, sigma, gamma)
>>> fig, ax = plt.subplots(figsize=(8, 8))
>>> ax.plot(x, gauss_profile, label=""Gauss: $G$"", c='b')
>>> ax.plot(x, cauchy_profile, label=""Cauchy: $C$"", c='y', ls=""dashed"")
>>> xx = 0.5*(x[1:] + x[:-1])  # midpoints
>>> ax.plot(xx, convolved[1:], label=""Convolution: $G * C$"", ls='dashdot',
...         c='k')
>>> ax.plot(x, voigt, label=""Voigt"", ls='dotted', c='r')
>>> ax.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.voigt_profile.html, scipy.signal.windows.gaussian scipy.signal.convolve
">>> from scipy.special import legendre
>>> legendre(3)
poly1d([ 2.5,  0. , -1.5,  0. ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.legendre.html, scipy.special.legendre
">>> from scipy.special import jn_zeros
>>> jn_zeros(3, 4)
array([ 6.3801619 ,  9.76102313, 13.01520072, 16.22346616])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jn_zeros.html, scipy.special.jn_zeros
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.special import jn, jn_zeros
>>> j3_roots = jn_zeros(3, 4)
>>> xmax = 18
>>> xmin = -1
>>> x = np.linspace(xmin, xmax, 500)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, jn(3, x), label=r'$J_3$')
>>> ax.scatter(j3_roots, np.zeros((4, )), s=30, c='r',
...            label=r""$J_3$_Zeros"", zorder=5)
>>> ax.scatter(0, 0, s=30, c='k',
...            label=r""Root at 0"", zorder=5)
>>> ax.hlines(0, 0, xmax, color='k')
>>> ax.set_xlim(xmin, xmax)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jn_zeros.html, scipy.special.jn_zeros
">>> from scipy.special import factorialk
>>> factorialk(5, k=1, exact=True)
120
>>> factorialk(5, k=3, exact=True)
10
>>> factorialk([5, 7, 9], k=3, exact=True)
array([ 10,  28, 162])
>>> factorialk([5, 7, 9], k=3, exact=False)
array([ 10.,  28., 162.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.factorialk.html, scipy.special.factorialk
">>> from scipy.stats import t
>>> df, x = 3, 1
>>> stdtr_result = stdtr(df, x)  # this can be faster than below
>>> stats_result = t(df).cdf(x)
>>> stats_result == stdtr_result  # test that results are equal
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.stdtr.html, scipy.signal.ShortTimeFFT.t
">>> from scipy.special import spherical_kn
>>> spherical_kn(0, 3+5j)
(0.012985785614001561+0.003354691603137546j)
>>> type(spherical_kn(0, 3+5j))

",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_kn.html, scipy.special.spherical_kn
">>> import numpy as np
>>> x = np.arange(1.0, 2.0, 0.01)
>>> np.allclose(spherical_kn(3, x, True),
...             - 4/x * spherical_kn(3, x) - spherical_kn(2, x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_kn.html, scipy.special.spherical_kn
">>> import matplotlib.pyplot as plt
>>> x = np.arange(0.0, 4.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(0.0, 5.0)
>>> ax.set_title(r'Modified spherical Bessel functions $k_n$')
>>> for n in np.arange(0, 4):
...     ax.plot(x, spherical_kn(n, x), label=rf'$k_{n}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.spherical_kn.html, scipy.special.spherical_kn
">>> from scipy.special import h2vp
>>> h2vp(0, 1, 0), h2vp(0, 1, 1), h2vp(0, 1, 2)
((0.7651976865579664-0.088256964215677j),
 (-0.44005058574493355-0.7812128213002889j),
 (-0.3251471008130329+0.8694697855159659j))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h2vp.html, scipy.special.h2vp
">>> h2vp([0, 1, 2], 1, 1)
array([-0.44005059-0.78121282j,  0.3251471 -0.86946979j,
       0.21024362-2.52015239j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h2vp.html, scipy.special.h2vp
">>> import numpy as np
>>> points = np.array([0.5, 1.5, 3.])
>>> h2vp(0, points, 1)
array([-0.24226846-1.47147239j, -0.55793651-0.41230863j,
       -0.33905896+0.32467442j])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.h2vp.html, scipy.special.h2vp
">>> import scipy.special as sc
>>> from pytest import raises
>>> sc.gammaln(0)
inf
>>> with sc.errstate(singular='raise'):
...     with raises(sc.SpecialFunctionError):
...         sc.gammaln(0)
...
>>> sc.gammaln(0)
inf
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.errstate.html, scipy.special.errstate
">>> with sc.errstate(all='raise', singular='ignore'):
...     sc.gammaln(0)
...     with raises(sc.SpecialFunctionError):
...         sc.spence(-1)
...
inf
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.errstate.html, scipy.special.errstate
">>> from scipy.special import factorial2
>>> factorial2(7, exact=False)
array(105.00000000000001)
>>> factorial2(7, exact=True)
105
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.factorial2.html, scipy.special.factorial2
">>> from scipy.special import ellip_harm_2
>>> w = ellip_harm_2(5,8,2,1,10)
>>> w
0.00108056853382
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ellip_harm_2.html, scipy.special.ellip_harm_2
">>> from scipy import special
>>> x = [2, 3, 25.5]
>>> special.polygamma(1, x)
array([ 0.64493407,  0.39493407,  0.03999467])
>>> special.polygamma(0, x) == special.psi(x)
array([ True,  True,  True], dtype=bool)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.polygamma.html, scipy.special.polygamma
">>> import numpy as np
>>> from scipy.special import y1p_zeros
>>> y1grad_roots, y1_values = y1p_zeros(4)
>>> with np.printoptions(precision=5):
...     print(f""Y1' Roots: {y1grad_roots.real}"")
...     print(f""Y1 values: {y1_values.real}"")
Y1' Roots: [ 3.68302  6.9415  10.1234  13.28576]
Y1 values: [ 0.41673 -0.30317  0.25091 -0.21897]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y1p_zeros.html, scipy.special.y1p_zeros
">>> import matplotlib.pyplot as plt
>>> from scipy.special import y1, yvp
>>> y1_roots, y1_values_at_roots = y1p_zeros(4)
>>> real_roots = y1_roots.real
>>> xmax = 15
>>> x = np.linspace(0, xmax, 500)
>>> x[0] += 1e-15
>>> fig, ax = plt.subplots()
>>> ax.plot(x, y1(x), label=r'$Y_1$')
>>> ax.plot(x, yvp(1, x, 1), label=r""$Y_1'$"")
>>> ax.scatter(real_roots, np.zeros((4, )), s=30, c='r',
...            label=r""Roots of $Y_1'$"", zorder=5)
>>> ax.scatter(real_roots, y1_values_at_roots.real, s=30, c='k',
...            label=r""Extrema of $Y_1$"", zorder=5)
>>> ax.hlines(0, 0, xmax, color='k')
>>> ax.set_ylim(-0.5, 0.5)
>>> ax.set_xlim(0, xmax)
>>> ax.legend(ncol=2, bbox_to_anchor=(1., 0.75))
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.y1p_zeros.html, scipy.special.y1p_zeros scipy.special.yvp
">>> from scipy.special import ellip_normal
>>> w = ellip_normal(5,8,3,7)
>>> w
1723.38796997
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.ellip_normal.html, scipy.special.ellip_normal
"(res.statistic, res.pvalue) == stats.chisquare(obs.ravel(),
                                               f_exp=ex.ravel(),
                                               ddof=obs.size - 1 - dof)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.chi2_contingency.html, scipy.stats.chisquare
">>> import numpy as np
>>> from scipy.stats import chi2_contingency
>>> table = np.array([[176, 230], [21035, 21018]])
>>> res = chi2_contingency(table)
>>> res.statistic
6.892569132546561
>>> res.pvalue
0.008655478161175739
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.chi2_contingency.html, scipy.stats.chi2_contingency
">>> obs = np.array([[10, 10, 20], [20, 20, 20]])
>>> res = chi2_contingency(obs)
>>> res.statistic
2.7777777777777777
>>> res.pvalue
0.24935220877729619
>>> res.dof
2
>>> res.expected_freq
array([[ 12.,  12.,  16.],
       [ 18.,  18.,  24.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.chi2_contingency.html, scipy.stats.chi2_contingency
">>> res = chi2_contingency(obs, lambda_=""log-likelihood"")
>>> res.statistic
2.7688587616781319
>>> res.pvalue
0.25046668010954165
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.chi2_contingency.html, scipy.stats.chi2_contingency
">>> obs = np.array(
...     [[[[12, 17],
...        [11, 16]],
...       [[11, 12],
...        [15, 16]]],
...      [[[23, 15],
...        [30, 22]],
...       [[14, 17],
...        [15, 16]]]])
>>> res = chi2_contingency(obs)
>>> res.statistic
8.7584514426741897
>>> res.pvalue
0.64417725029295503
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.chi2_contingency.html, scipy.stats.chi2_contingency
">>> from scipy.optimize import LinearConstraint
>>> constraints = LinearConstraint(A, b_l, b_u)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.milp.html, scipy.optimize.LinearConstraint
">>> from scipy.optimize import milp
>>> res = milp(c=c, constraints=constraints, integrality=integrality)
>>> res.x
[1.0, 2.0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.milp.html, scipy.optimize.milp
">>> res = milp(c=c, constraints=constraints)  # OR:
>>> # from scipy.optimize import linprog; res = linprog(c, A, b_u)
>>> res.x
[1.8, 2.8]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.milp.html, scipy.optimize.milp scipy.optimize.linprog
">>> import numpy as np
>>> def func(x):
...     return x[0]**2 - 0.5 * x[1]**3
>>> def grad(x):
...     return [2 * x[0], -1.5 * x[1]**2]
>>> from scipy.optimize import check_grad
>>> check_grad(func, grad, [1.5, -1.5])
2.9802322387695312e-08  # may vary
>>> rng = np.random.default_rng()
>>> check_grad(func, grad, [1.5, -1.5],
...             direction='random', seed=rng)
2.9802322387695312e-08
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.check_grad.html, scipy.interpolate.RectBivariateSpline scipy.optimize.check_grad
">>> minimizer = optimize.golden(f, brack=(1, 2))
>>> minimizer
1
>>> res = optimize.golden(f, brack=(-1, 0.5, 2), full_output=True)
>>> xmin, fval, funcalls = res
>>> f(xmin), fval
(9.925165290385052e-18, 9.925165290385052e-18)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.golden.html, scipy.optimize.golden
">>> from scipy.optimize import direct, Bounds
>>> def styblinski_tang(pos):
...     x, y = pos
...     return 0.5 * (x**4 - 16*x**2 + 5*x + y**4 - 16*y**2 + 5*y)
>>> bounds = Bounds([-4., -4.], [4., 4.])
>>> result = direct(styblinski_tang, bounds)
>>> result.x, result.fun, result.nfev
array([-2.90321597, -2.90321597]), -78.3323279095383, 2011
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.direct.html, scipy.optimize.Bounds scipy.optimize.direct
">>> result = direct(styblinski_tang, bounds, len_tol=1e-3)
>>> result.x, result.fun, result.nfev
array([-2.9044353, -2.9044353]), -78.33230330754142, 207
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.direct.html, scipy.optimize.direct
">>> start_point = np.array([1.8, 1.7])
>>> search_gradient = np.array([-1.0, -1.0])
>>> line_search(obj_func, obj_grad, start_point, search_gradient)
(1.0, 2, 1, 1.1300000000000001, 6.13, [1.6, 1.4])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.line_search.html, scipy.optimize.line_search
">>> import numpy as np
>>> from scipy.stats.contingency import expected_freq
>>> observed = np.array([[10, 10, 20],[20, 20, 20]])
>>> expected_freq(observed)
array([[ 12.,  12.,  16.],
       [ 18.,  18.,  24.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.expected_freq.html, scipy.stats.contingency.expected_freq
">>> x0 = [1.3, 0.7, 0.8, 1.9, 1.2]
>>> res = minimize(rosen, x0, method='Nelder-Mead', tol=1e-6)
>>> res.x
array([ 1.,  1.,  1.,  1.,  1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html, scipy.optimize.minimize
">>> res = minimize(rosen, x0, method='BFGS', jac=rosen_der,
...                options={'gtol': 1e-6, 'disp': True})
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 26
         Function evaluations: 31
         Gradient evaluations: 31
>>> res.x
array([ 1.,  1.,  1.,  1.,  1.])
>>> print(res.message)
Optimization terminated successfully.
>>> res.hess_inv
array([
    [ 0.00749589,  0.01255155,  0.02396251,  0.04750988,  0.09495377],  # may vary
    [ 0.01255155,  0.02510441,  0.04794055,  0.09502834,  0.18996269],
    [ 0.02396251,  0.04794055,  0.09631614,  0.19092151,  0.38165151],
    [ 0.04750988,  0.09502834,  0.19092151,  0.38341252,  0.7664427 ],
    [ 0.09495377,  0.18996269,  0.38165151,  0.7664427,   1.53713523]
])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html, scipy.optimize.minimize
">>> res = minimize(fun, (2, 0), method='SLSQP', bounds=bnds,
...                constraints=cons)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html, scipy.optimize.minimize
">>> from scipy.stats.contingency import odds_ratio
>>> res = odds_ratio([[176, 230], [21035, 21018]])
>>> res.statistic
0.7646037659999126
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.odds_ratio.html, scipy.stats.contingency.odds_ratio
">>> import numpy as np
>>> from scipy.optimize import isotonic_regression, minimize
>>> y = [1.5, 1.0, 4.0, 6.0, 5.7, 5.0, 7.8, 9.0, 7.5, 9.5, 9.0]
>>> def objective(yhat, y):
...     return np.sum((yhat - y)**2)
>>> def constraint(yhat, y):
...     # This is for a monotonically increasing regression.
...     return np.diff(yhat)
>>> result = minimize(objective, x0=y, args=(y,),
...                   constraints=[{'type': 'ineq',
...                                 'fun': lambda x: constraint(x, y)}])
>>> result.x
array([1.25      , 1.25      , 4.        , 5.56666667, 5.56666667,
       5.56666667, 7.8       , 8.25      , 8.25      , 9.25      ,
       9.25      ])
>>> result = isotonic_regression(y)
>>> result.x
array([1.25      , 1.25      , 4.        , 5.56666667, 5.56666667,
       5.56666667, 7.8       , 8.25      , 8.25      , 9.25      ,
       9.25      ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.isotonic_regression.html, scipy.optimize.minimize scipy.optimize.isotonic_regression
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.optimize import bracket
>>> def f(x):
...     return 10*x**2 + 3*x + 5
>>> x = np.linspace(-2, 2)
>>> y = f(x)
>>> init_xa, init_xb = 0.1, 1
>>> xa, xb, xc, fa, fb, fc, funcalls = bracket(f, xa=init_xa, xb=init_xb)
>>> plt.axvline(x=init_xa, color=""k"", linestyle=""--"")
>>> plt.axvline(x=init_xb, color=""k"", linestyle=""--"")
>>> plt.plot(x, y, ""-k"")
>>> plt.plot(xa, fa, ""bx"")
>>> plt.plot(xb, fb, ""rx"")
>>> plt.plot(xc, fc, ""bx"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.bracket.html, scipy.optimize.bracket
">>> import numpy as np
>>> from scipy.optimize import rosen
>>> X = 0.1 * np.arange(10)
>>> rosen(X)
76.56
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.rosen.html, scipy.optimize.rosen
">>> import matplotlib.pyplot as plt
>>> from mpl_toolkits.mplot3d import Axes3D
>>> x = np.linspace(-1, 1, 50)
>>> X, Y = np.meshgrid(x, x)
>>> ax = plt.subplot(111, projection='3d')
>>> ax.plot_surface(X, Y, rosen([X, Y]))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.rosen.html, scipy.optimize.rosen
">>> sol = optimize.root_scalar(f, bracket=[0, 3], method='brentq')
>>> sol.root, sol.iterations, sol.function_calls
(1.0, 10, 11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html, scipy.optimize.root_scalar
">>> sol = optimize.root_scalar(f, x0=0.2, fprime=fprime, method='newton')
>>> sol.root, sol.iterations, sol.function_calls
(1.0, 11, 22)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html, scipy.optimize.root_scalar
">>> sol = optimize.root_scalar(
...     f_p_pp, x0=0.2, fprime=True, method='newton'
... )
>>> sol.root, sol.iterations, sol.function_calls
(1.0, 11, 11)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html, scipy.optimize.root_scalar
">>> sol = optimize.root_scalar(
...     f_p_pp, x0=0.2, fprime=True, fprime2=True, method='halley'
... )
>>> sol.root, sol.iterations, sol.function_calls
(1.0, 7, 8)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html, scipy.optimize.root_scalar
">>> from scipy import optimize
>>> root, results = optimize.toms748(f, 0, 2, full_output=True)
>>> root
1.0
>>> results
      converged: True
           flag: converged
 function_calls: 11
     iterations: 5
           root: 1.0
         method: toms748
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.toms748.html, scipy.optimize.toms748
">>> from scipy.optimize import BroydenFirst, KrylovJacobian
>>> from scipy.optimize import InverseJacobian
>>> jac = BroydenFirst()
>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.KrylovJacobian.html, scipy.optimize.BroydenFirst scipy.optimize.KrylovJacobian scipy.optimize.InverseJacobian
">>> from scipy import optimize
>>> sol = optimize.newton_krylov(fun, [0, 0])
>>> sol
array([0.66731771, 0.66536458])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.KrylovJacobian.html, scipy.optimize.newton_krylov
"lb <= A.dot(x) <= ub
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.LinearConstraint.html, scipy.sparse.coo_array.dot
">>> n = 1
>>> x = np.linspace(0, 1, 5)
>>> sc.jv(n, x)
array([0.        , 0.12402598, 0.24226846, 0.3492436 , 0.44005059])
>>> (0.5 * x)**n / sc.factorial(n) * sc.hyp0f1(n + 1, -0.25 * x**2)
array([0.        , 0.12402598, 0.24226846, 0.3492436 , 0.44005059])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.hyp0f1.html, scipy.special.factorial
">>> from scipy import optimize
>>> def f(x):
...     return (x-1)**2
>>> minimizer = optimize.fminbound(f, -4, 4)
>>> minimizer
1.0
>>> minimum = f(minimizer)
>>> minimum
0.0
>>> res = optimize.fminbound(f, 3, 4, full_output=True)
>>> minimizer, fval, ierr, numfunc = res
>>> minimizer
3.000005960860986
>>> minimum = f(minimizer)
>>> minimum, fval
(4.000023843479476, 4.000023843479476)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fminbound.html, scipy.optimize.fminbound
">>> minimum = optimize.fmin(f, 1)
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 17
         Function evaluations: 34
>>> minimum[0]
-8.8817841970012523e-16
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin.html, scipy.optimize.fmin
">>> association(obs4x2, method=""pearson"")
0.18303298140595667
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.association.html, scipy.stats.contingency.association
">>> association(obs4x2, method=""cramer"")
0.18617813077483678
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.association.html, scipy.stats.contingency.association
">>> association(obs4x2, method=""tschuprow"")
0.14146478765062995
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.association.html, scipy.stats.contingency.association
">>> import numpy as np
>>> from scipy.special import binom
>>> from scipy.special import genlaguerre
>>> from scipy.special import hyp1f1
>>> x = np.arange(-1.0, 1.0, 0.01)
>>> np.allclose(genlaguerre(3, 3)(x), binom(6, 3) * hyp1f1(-3, 4, x))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.genlaguerre.html, scipy.special.genlaguerre
">>> import matplotlib.pyplot as plt
>>> x = np.arange(-4.0, 12.0, 0.01)
>>> fig, ax = plt.subplots()
>>> ax.set_ylim(-5.0, 10.0)
>>> ax.set_title(r'Generalized Laguerre polynomials $L_3^{\alpha}$')
>>> for alpha in np.arange(0, 5):
...     ax.plot(x, genlaguerre(3, alpha)(x), label=rf'$L_3^{(alpha)}$')
>>> plt.legend(loc='best')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.genlaguerre.html, scipy.special.genlaguerre
">>> jac = BroydenFirst()
>>> kjac = KrylovJacobian(inner_M=jac.inverse).
",https://docs.scipy.org/doc/scipy/reference/optimize.root-krylov.html, scipy.optimize.BroydenFirst scipy.optimize.KrylovJacobian
">>> a = ['A', 'B', 'A', 'A', 'B', 'B', 'A', 'A', 'B', 'B']
>>> x = ['X', 'X', 'X', 'Y', 'Z', 'Z', 'Y', 'Y', 'Z', 'Z']
>>> res = crosstab(a, x)
>>> avals, xvals = res.elements
>>> avals
array(['A', 'B'], dtype='
>>> xvals
array(['X', 'Y', 'Z'], dtype='
>>> res.count
array([[2, 3, 0],
       [1, 0, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> p = [0, 0, 0, 0, 1, 1, 1, 0, 0, 1]
>>> res = crosstab(a, x, p)
>>> res.count
array([[[2, 0],
        [2, 1],
        [0, 0]],
       [[1, 0],
        [0, 0],
        [1, 3]]])
>>> res.count.shape
(2, 3, 2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> q1 = [2, 3, 3, 2, 4, 4, 2, 3, 4, 4, 4, 3, 3, 3, 4]  # 1 does not occur.
>>> q2 = [4, 4, 2, 2, 2, 4, 1, 1, 2, 2, 4, 2, 2, 2, 4]  # 3 does not occur.
>>> options = [1, 2, 3, 4]
>>> res = crosstab(q1, q2, levels=(options, options))
>>> res.count
array([[0, 0, 0, 0],
       [1, 1, 0, 1],
       [1, 4, 0, 1],
       [0, 3, 0, 3]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> res = crosstab(q1, q2, levels=(None, options))
>>> res.elements
[array([2, 3, 4]), [1, 2, 3, 4]]
>>> res.count
array([[1, 1, 0, 1],
       [1, 4, 0, 1],
       [0, 3, 0, 3]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> res = crosstab(q1, q2, levels=(None, [1, 2]))
>>> res.elements
[array([2, 3, 4]), [1, 2]]
>>> res.count
array([[1, 1],
       [1, 4],
       [0, 3]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> res = crosstab(a, x, sparse=True)
>>> res.count
<2x3 sparse matrix of type ''
        with 4 stored elements in COOrdinate format>
>>> res.count.A
array([[2, 3, 0],
       [1, 0, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.crosstab.html, scipy.stats.contingency.crosstab
">>> import numpy as np
>>> args = (2, 3, 7, 8, 9, 10)  # parameter values
>>> def f(x, *args):
...     u, v = x
...     a, b, c, d, e, f = args
...     return a*u**2 + b*u*v + c*v**2 + d*u + e*v + f
>>> def gradf(x, *args):
...     u, v = x
...     a, b, c, d, e, f = args
...     gu = 2*a*u + b*v + d     # u-component of the gradient
...     gv = b*u + 2*c*v + e     # v-component of the gradient
...     return np.asarray((gu, gv))
>>> x0 = np.asarray((0, 0))  # Initial guess.
>>> from scipy import optimize
>>> res1 = optimize.fmin_cg(f, x0, fprime=gradf, args=args)
Optimization terminated successfully.
         Current function value: 1.617021
         Iterations: 4
         Function evaluations: 8
         Gradient evaluations: 8
>>> res1
array([-1.80851064, -0.25531915])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_cg.html, scipy.optimize.fmin_cg
">>> opts = {'maxiter' : None,    # default value.
...         'disp' : True,    # non-default value.
...         'gtol' : 1e-5,    # default value.
...         'norm' : np.inf,  # default value.
...         'eps' : 1.4901161193847656e-08}  # default value.
>>> res2 = optimize.minimize(f, x0, jac=gradf, args=args,
...                          method='CG', options=opts)
Optimization terminated successfully.
        Current function value: 1.617021
        Iterations: 4
        Function evaluations: 8
        Gradient evaluations: 8
>>> res2.x  # minimum found
array([-1.80851064, -0.25531915])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_cg.html, scipy.optimize.minimize
">>> def objective(x):
...     return x[0]*x[1]
...
>>> def constr1(x):
...     return 1 - (x[0]**2 + x[1]**2)
...
>>> def constr2(x):
...     return x[1]
...
>>> from scipy.optimize import fmin_cobyla
>>> fmin_cobyla(objective, [0.0, 0.1], [constr1, constr2], rhoend=1e-7)
array([-0.70710685,  0.70710671])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_cobyla.html, scipy.optimize.fmin_cobyla
">>> minimizer = optimize.brent(f, brack=(1, 2))
>>> minimizer
1
>>> res = optimize.brent(f, brack=(-1, 0.5, 2), full_output=True)
>>> xmin, fval, iter, funcalls = res
>>> f(xmin), fval
(0.0, 0.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brent.html, scipy.optimize.brent
">>> def func(x):
...     return np.cos(x) + x[::-1] - [1, 2, 3, 4]
...
>>> from scipy import optimize
>>> res = optimize.root(func, [1, 1, 1, 1], method='broyden1', tol=1e-14)
>>> x = res.x
>>> x
array([4.04674914, 3.91158389, 2.71791677, 1.61756251])
>>> np.cos(x) + x[::-1]
array([1., 2., 3., 4.])
",https://docs.scipy.org/doc/scipy/reference/optimize.root-broyden1.html, scipy.interpolate.RectBivariateSpline scipy.optimize.root
">>> from scipy import optimize
>>> sol = optimize.broyden1(fun, [0, 0])
>>> sol
array([0.84116396, 0.15883641])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.BroydenFirst.html, scipy.optimize.broyden1
">>> from scipy.special import kvp
>>> kvp(0, 1, 0), kvp(0, 1, 1), kvp(0, 1, 2)
(0.42102443824070834, -0.6019072301972346, 1.0229316684379428)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kvp.html, scipy.special.kvp
">>> kvp([0, 1, 2], 1, 1)
array([-0.60190723, -1.02293167, -3.85158503])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kvp.html, scipy.special.kvp
">>> import numpy as np
>>> points = np.array([0.5, 1.5, 3.])
>>> kvp(0, points, 1)
array([-1.65644112, -0.2773878 , -0.04015643])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kvp.html, scipy.special.kvp
">>> import matplotlib.pyplot as plt
>>> x = np.linspace(0, 5, 1000)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, kvp(1, x, 0), label=r""$K_1$"")
>>> ax.plot(x, kvp(1, x, 1), label=r""$K_1'$"")
>>> ax.plot(x, kvp(1, x, 2), label=r""$K_1''$"")
>>> ax.plot(x, kvp(1, x, 3), label=r""$K_1'''$"")
>>> ax.set_ylim(-2.5, 2.5)
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.kvp.html, scipy.special.kvp
"relative_risk(n11, n10 + n11, n01, n00 + n01)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.relative_risk.html, scipy.stats.contingency.relative_risk
">>> result = relative_risk(27, 122, 44, 487)
>>> result.relative_risk
2.4495156482861398
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.contingency.relative_risk.html, scipy.stats.contingency.relative_risk
">>> def jac(x):
...     return np.array([[1 + 1.5 * (x[0] - x[1])**2,
...                       -1.5 * (x[0] - x[1])**2],
...                      [-1.5 * (x[1] - x[0])**2,
...                       1 + 1.5 * (x[1] - x[0])**2]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root.html, scipy.optimize.BroydenFirst
">>> from scipy import optimize
>>> sol = optimize.root(fun, [0, 0], jac=jac, method='hybr')
>>> sol.x
array([ 0.8411639,  0.1588361])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root.html, scipy.optimize.root
">>> guess = np.zeros((nx, ny), float)
>>> sol = optimize.root(residual, guess, method='krylov')
>>> print('Residual: %g' % abs(residual(sol.x)).max())
Residual: 5.7972e-06  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root.html, scipy.optimize.root
">>> minimum = optimize.fmin_powell(f, -1)
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 2
         Function evaluations: 16
>>> minimum
array(0.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_powell.html, scipy.optimize.fmin_powell
">>> import numpy as np
>>> from scipy import optimize
>>> def func(x, c0, c1):
...     ""Coordinate vector `x` should be an array of size two.""
...     return c0 * x[0]**2 + c1*x[1]**2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.approx_fprime.html, scipy.interpolate.RectBivariateSpline
">>> x = np.ones(2)
>>> c0, c1 = (1, 200)
>>> eps = np.sqrt(np.finfo(float).eps)
>>> optimize.approx_fprime(x, func, [eps, np.sqrt(200) * eps], c0, c1)
array([   2.        ,  400.00004198])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.approx_fprime.html, scipy.optimize.approx_fprime
"exp( -(func(xnew) - func(xold)) / T )
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html, scipy.interpolate.RectBivariateSpline
">>> minimizer_kwargs = {""method"": ""BFGS""}
>>> ret = basinhopping(func, x0, minimizer_kwargs=minimizer_kwargs,
...                    niter=200)
>>> print(""global minimum: x = %.4f, f(x) = %.4f"" % (ret.x, ret.fun))
global minimum: x = -0.1951, f(x) = -1.0009
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html, scipy.optimize.basinhopping
">>> minimizer_kwargs = {""method"":""L-BFGS-B"", ""jac"":True}
>>> x0 = [1.0, 1.0]
>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,
...                    niter=200)
>>> print(""global minimum: x = [%.4f, %.4f], f(x) = %.4f"" % (ret.x[0],
...                                                           ret.x[1],
...                                                           ret.fun))
global minimum: x = [-0.1951, -0.1000], f(x) = -1.0109
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html, scipy.optimize.basinhopping
">>> mytakestep = MyTakeStep()
>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,
...                    niter=200, take_step=mytakestep)
>>> print(""global minimum: x = [%.4f, %.4f], f(x) = %.4f"" % (ret.x[0],
...                                                           ret.x[1],
...                                                           ret.fun))
global minimum: x = [-0.1951, -0.1000], f(x) = -1.0109
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html, scipy.optimize.basinhopping
">>> rng = np.random.default_rng()
>>> ret = basinhopping(func2d, x0, minimizer_kwargs=minimizer_kwargs,
...                    niter=10, callback=print_fun, seed=rng)
at minimum 0.4159 accepted 1
at minimum -0.4317 accepted 1
at minimum -1.0109 accepted 1
at minimum -0.9073 accepted 1
at minimum -0.4317 accepted 0
at minimum -0.1021 accepted 1
at minimum -0.7425 accepted 1
at minimum -0.9073 accepted 1
at minimum -0.4317 accepted 0
at minimum -0.7425 accepted 1
at minimum -0.9073 accepted 1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html, scipy.optimize.basinhopping
">>> from scipy import optimize
>>> sol = optimize.broyden1(fun, [0, 0])
>>> sol
array([0.84116396, 0.15883641])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.broyden1.html, scipy.optimize.broyden1
">>> M, n, r = [20, 7, 12]
>>> rv = nhypergeom(M, n, r)
>>> x = np.arange(0, n+2)
>>> pmf_dogs = rv.pmf(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.nhypergeom.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> params = (2, 3, 7, 8, 9, 10, 44, -1, 2, 26, 1, -2, 0.5)
>>> def f1(z, *params):
...     x, y = z
...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
...     return (a * x**2 + b * x * y + c * y**2 + d*x + e*y + f)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html, scipy.interpolate.interp1d
">>> def f2(z, *params):
...     x, y = z
...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
...     return (-g*np.exp(-((x-h)**2 + (y-i)**2) / scale))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html, scipy.interpolate.interp1d
">>> def f3(z, *params):
...     x, y = z
...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
...     return (-j*np.exp(-((x-k)**2 + (y-l)**2) / scale))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html, scipy.interpolate.interp1d
">>> def f(z, *params):
...     return f1(z, *params) + f2(z, *params) + f3(z, *params)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brute.html, scipy.interpolate.interp1d scipy.interpolate.interp1d scipy.interpolate.interp1d
">>> import numpy as np
>>> from scipy.optimize import rosen_hess
>>> X = 0.1 * np.arange(4)
>>> rosen_hess(X)
array([[-38.,   0.,   0.,   0.],
       [  0., 134., -40.,   0.],
       [  0., -40., 130., -80.],
       [  0.,   0., -80., 200.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.rosen_hess.html, scipy.optimize.rosen_hess
">>> import numpy as np
>>> from scipy.optimize import quadratic_assignment
>>> A = np.array([[0, 80, 150, 170], [80, 0, 130, 100],
...               [150, 130, 0, 120], [170, 100, 120, 0]])
>>> B = np.array([[0, 5, 2, 7], [0, 0, 3, 8],
...               [0, 0, 0, 3], [0, 0, 0, 0]])
>>> res = quadratic_assignment(A, B)
>>> print(res)
     fun: 3260
 col_ind: [0 3 2 1]
     nit: 9
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.quadratic_assignment.html, scipy.optimize.quadratic_assignment
">>> A = np.array([[0, 5, 8, 6], [5, 0, 5, 1],
...               [8, 5, 0, 2], [6, 1, 2, 0]])
>>> B = np.array([[0, 1, 8, 4], [1, 0, 5, 2],
...               [8, 5, 0, 5], [4, 2, 5, 0]])
>>> res = quadratic_assignment(A, B)
>>> print(res)
     fun: 178
 col_ind: [1 0 3 2]
     nit: 13
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.quadratic_assignment.html, scipy.optimize.quadratic_assignment
">>> guess = np.array([np.arange(len(A)), res.col_ind]).T
>>> res = quadratic_assignment(A, B, method=""2opt"",
...                            options = {'partial_guess': guess})
>>> print(res)
     fun: 176
 col_ind: [1 2 3 0]
     nit: 17
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.quadratic_assignment.html, scipy.optimize.quadratic_assignment
">>> def func(x, a, b, c):
...     return a * np.exp(-b * x) + c
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.interpolate.RectBivariateSpline
">>> xdata = np.linspace(0, 4, 50)
>>> y = func(xdata, 2.5, 1.3, 0.5)
>>> rng = np.random.default_rng()
>>> y_noise = 0.2 * rng.normal(size=xdata.size)
>>> ydata = y + y_noise
>>> plt.plot(xdata, ydata, 'b-', label='data')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.interpolate.RectBivariateSpline
">>> popt, pcov = curve_fit(func, xdata, ydata)
>>> popt
array([2.56274217, 1.37268521, 0.47427475])
>>> plt.plot(xdata, func(xdata, *popt), 'r-',
...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.optimize.curve_fit scipy.interpolate.RectBivariateSpline
">>> popt, pcov = curve_fit(func, xdata, ydata, bounds=(0, [3., 1., 0.5]))
>>> popt
array([2.43736712, 1.        , 0.34463856])
>>> plt.plot(xdata, func(xdata, *popt), 'g--',
...          label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.optimize.curve_fit scipy.interpolate.RectBivariateSpline
">>> def func2(x, a, b, c, d):
...     return a * d * np.exp(-b * x) + c  # a and d are redundant
>>> popt, pcov = curve_fit(func2, xdata, ydata)
>>> np.linalg.cond(pcov)
1.13250718925596e+32  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.optimize.curve_fit
">>> ydata = func(xdata, 500000, 0.01, 15)
>>> try:
...     popt, pcov = curve_fit(func, xdata, ydata, method = 'trf')
... except RuntimeError as e:
...     print(e)
Optimal parameters not found: The maximum number of function evaluations is exceeded.
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.interpolate.RectBivariateSpline scipy.optimize.curve_fit
">>> popt, pcov = curve_fit(func, xdata, ydata, method = 'trf',
...                        x_scale = [1000, 1, 1])
>>> popt
array([5.00000000e+05, 1.00000000e-02, 1.49999999e+01])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html, scipy.optimize.curve_fit
">>> import numpy as np
>>> from scipy import optimize
>>> def func(x, c1, c2):
...    return np.sqrt(c1/(x+c2))
>>> c1 = np.array([10,12.])
>>> c2 = np.array([3, 5.])
>>> optimize.fixed_point(func, [1.2, 1.3], args=(c1,c2))
array([ 1.4920333 ,  1.37228132])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fixed_point.html, scipy.interpolate.RectBivariateSpline scipy.optimize.fixed_point
">>> rv = yulesimon(alpha)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yulesimon.html, scipy.stats.rv_discrete.pmf
">>> from scipy.optimize import minimize_scalar
>>> res = minimize_scalar(f)
>>> res.fun
-9.9149495908
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize_scalar.html, scipy.optimize.minimize_scalar
">>> res = minimize_scalar(f, bounds=(-3, -1), method='bounded')
>>> res.fun  # minimum
3.28365179850e-13
>>> res.x  # minimizer
-2.0000002026
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize_scalar.html, scipy.optimize.minimize_scalar
">>> x = stats.loggamma.rvs(5, size=500) + 5
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> prob = stats.yeojohnson_normplot(x, -20, 20, plot=ax)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_normplot.html, scipy.stats.yeojohnson_normplot
">>> _, maxlog = stats.yeojohnson(x)
>>> ax.axvline(maxlog, color='r')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_normplot.html, scipy.stats.yeojohnson
">>> import numpy as np
>>> from scipy.optimize import rosen_der
>>> X = 0.1 * np.arange(9)
>>> rosen_der(X)
array([ -2. ,  10.6,  15.6,  13.4,   6.4,  -3. , -12.4, -19.4,  62. ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.rosen_der.html, scipy.optimize.rosen_der
">>> rvs1 = stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)
>>> rvs2 = stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)
>>> stats.ttest_ind(rvs1, rvs2)
Ttest_indResult(statistic=-0.4390847099199348, pvalue=0.6606952038870015)
>>> stats.ttest_ind(rvs1, rvs2, equal_var=False)
Ttest_indResult(statistic=-0.4390847099199348, pvalue=0.6606952553131064)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> rvs3 = stats.norm.rvs(loc=5, scale=20, size=500, random_state=rng)
>>> stats.ttest_ind(rvs1, rvs3)
Ttest_indResult(statistic=-1.6370984482905417, pvalue=0.1019251574705033)
>>> stats.ttest_ind(rvs1, rvs3, equal_var=False)
Ttest_indResult(statistic=-1.637098448290542, pvalue=0.10202110497954867)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> rvs4 = stats.norm.rvs(loc=5, scale=20, size=100, random_state=rng)
>>> stats.ttest_ind(rvs1, rvs4)
Ttest_indResult(statistic=-1.9481646859513422, pvalue=0.05186270935842703)
>>> stats.ttest_ind(rvs1, rvs4, equal_var=False)
Ttest_indResult(statistic=-1.3146566100751664, pvalue=0.1913495266513811)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> rvs5 = stats.norm.rvs(loc=8, scale=20, size=100, random_state=rng)
>>> stats.ttest_ind(rvs1, rvs5)
Ttest_indResult(statistic=-2.8415950600298774, pvalue=0.0046418707568707885)
>>> stats.ttest_ind(rvs1, rvs5, equal_var=False)
Ttest_indResult(statistic=-1.8686598649188084, pvalue=0.06434714193919686)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> stats.ttest_ind(rvs1, rvs5, permutations=10000,
...                 random_state=rng)
Ttest_indResult(statistic=-2.8415950600298774, pvalue=0.0052994700529947)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> stats.ttest_ind(a, b, trim=.2)
Ttest_indResult(statistic=3.4463884028073513,
                pvalue=0.01369338726499547)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind.html, scipy.stats.ttest_ind
">>> res = stats.linregress(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.linregress.html, scipy.stats.linregress
">>> import numpy as np
>>> cost = np.array([[4, 1, 3], [2, 0, 5], [3, 2, 2]])
>>> from scipy.optimize import linear_sum_assignment
>>> row_ind, col_ind = linear_sum_assignment(cost)
>>> col_ind
array([1, 0, 2])
>>> cost[row_ind, col_ind].sum()
5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linear_sum_assignment.html, scipy.optimize.linear_sum_assignment
">>> from scipy.stats import mannwhitneyu
>>> U1, p = mannwhitneyu(males, females, method=""exact"")
>>> print(U1)
17.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html, scipy.stats.mannwhitneyu
">>> _, pnorm = mannwhitneyu(males, females, method=""asymptotic"")
>>> print(pnorm)
0.11134688653314041
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html, scipy.stats.mannwhitneyu
">>> _, pnorm = mannwhitneyu(males, females, use_continuity=False,
...                         method=""asymptotic"")
>>> print(pnorm)
0.0864107329737
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html, scipy.stats.mannwhitneyu
">>> res = mannwhitneyu(females, males, alternative=""less"", method=""exact"")
>>> print(res)
MannwhitneyuResult(statistic=3.0, pvalue=0.05555555555555555)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html, scipy.stats.mannwhitneyu
">>> from scipy.stats import ttest_ind
>>> res = ttest_ind(females, males, alternative=""less"")
>>> print(res)
Ttest_indResult(statistic=-2.239334696520584, pvalue=0.030068441095757924)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html, scipy.stats.ttest_ind
">>> from scipy import stats
>>> res = stats.bartlett(small_dose, medium_dose, large_dose)
>>> res.statistic
0.6654670663030519
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bartlett.html, scipy.stats.bartlett
">>> def statistic(*samples):
...     return stats.bartlett(*samples).statistic
>>> ref = stats.permutation_test(
...     (small_dose, medium_dose, large_dose), statistic,
...     permutation_type='independent', alternative='greater'
... )
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> bins = np.linspace(0, 5, 25)
>>> ax.hist(
...     ref.null_distribution, bins=bins, density=True, facecolor=""C1""
... )
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'randomized null distribution'])
>>> plot(ax)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bartlett.html, scipy.stats.bartlett scipy.stats.permutation_test
">>> a = [8.88, 9.12, 9.04, 8.98, 9.00, 9.08, 9.01, 8.85, 9.06, 8.99]
>>> b = [8.88, 8.95, 9.29, 9.44, 9.15, 9.58, 8.36, 9.18, 8.67, 9.05]
>>> c = [8.95, 9.12, 8.95, 8.85, 9.03, 8.84, 9.07, 8.98, 8.86, 8.98]
>>> stat, p = stats.bartlett(a, b, c)
>>> p
1.1254782518834628e-05
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bartlett.html, scipy.stats.bartlett
">>> from scipy.stats import wasserstein_distance
>>> wasserstein_distance([0, 1, 3], [5, 6, 8])
5.0
>>> wasserstein_distance([0, 1], [0, 1], [3, 1], [2, 2])
0.25
>>> wasserstein_distance([3.4, 3.9, 7.5, 7.8], [4.5, 1.4],
...                      [1.4, 0.9, 3.1, 7.2], [3.2, 3.5])
4.0781331438047861
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance.html, scipy.stats.wasserstein_distance
">>> import numpy as np
>>> from scipy import stats
>>> a = np.array([0, 0, 0, 1, 1, 1, 1])
>>> b = np.arange(7)
>>> stats.pointbiserialr(a, b)
(0.8660254037844386, 0.011724811003954652)
>>> stats.pearsonr(a, b)
(0.86602540378443871, 0.011724811003954626)
>>> np.corrcoef(a, b)
array([[ 1.       ,  0.8660254],
       [ 0.8660254,  1.       ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pointbiserialr.html, scipy.stats.pointbiserialr scipy.stats.pearsonr
">>> import numpy as np
>>> from scipy.stats import entropy
>>> base = 2  # work in units of bits
>>> pk = np.array([1/2, 1/2])  # fair coin
>>> H = entropy(pk, base=base)
>>> H
1.0
>>> H == -np.sum(pk * np.log(pk)) / np.log(base)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.entropy.html, scipy.stats.entropy
">>> qk = np.array([9/10, 1/10])  # biased coin
>>> entropy(qk, base=base)
0.46899559358928117
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.entropy.html, scipy.stats.entropy
">>> D = entropy(pk, qk, base=base)
>>> D
0.7369655941662062
>>> D == np.sum(pk * np.log(pk/qk)) / np.log(base)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.entropy.html, scipy.stats.entropy
">>> CE = entropy(pk, base=base) + entropy(pk, qk, base=base)
>>> CE
1.736965594166206
>>> CE == -np.sum(pk * np.log(qk)) / np.log(base)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.entropy.html, scipy.stats.entropy
">>> root = optimize.newton(f, 1.5)
>>> root
1.0000000000000016
>>> root = optimize.newton(f, 1.5, fprime2=lambda x: 6 * x)
>>> root
1.0000000000000016
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html, scipy.optimize.newton
">>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html, scipy.optimize.newton
">>> root = optimize.newton(f, 1.5, fprime=lambda x: 3 * x**2,
...                        fprime2=lambda x: 6 * x)
>>> root
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html, scipy.optimize.newton
">>> f = lambda x, a: x**3 - a
>>> fder = lambda x, a: 3 * x**2
>>> rng = np.random.default_rng()
>>> x = rng.standard_normal(100)
>>> a = np.arange(-50, 50)
>>> vec_res = optimize.newton(f, x, fprime=fder, args=(a, ), maxiter=200)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html, scipy.optimize.newton
">>> loop_res = [optimize.newton(f, x0, fprime=fder, args=(a0,),
...                             maxiter=200)
...             for x0, a0 in zip(x, a)]
>>> np.allclose(vec_res, loop_res)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html, scipy.optimize.newton
">>> from scipy.stats import gmean
>>> gmean([1, 4])
2.0
>>> gmean([1, 2, 3, 4, 5, 6, 7])
3.3800151591412964
>>> gmean([1, 4, 7], weights=[3, 1, 3])
2.80668351922014
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gmean.html, scipy.stats.gmean
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tmean(x)
9.5
>>> stats.tmean(x, (3,17))
10.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmean.html, scipy.stats.tmean
">>> from scipy import stats
>>> x1 = [1,2,1,1,1,1,1,1,1,1,2,4,1,1]
>>> x2 = [3,3,4,3,1,2,3,1,1,5,4]
>>> w, p_value = stats.brunnermunzel(x1, x2)
>>> w
3.1374674823029505
>>> p_value
0.0057862086661515377
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.brunnermunzel.html, scipy.stats.brunnermunzel
">>> from scipy import optimize
>>> sol = optimize.anderson(fun, [0, 0])
>>> sol
array([0.84116588, 0.15883789])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.anderson.html, scipy.optimize.anderson
">>> from scipy.optimize import least_squares
>>> x0_rosenbrock = np.array([2, 2])
>>> res_1 = least_squares(fun_rosenbrock, x0_rosenbrock)
>>> res_1.x
array([ 1.,  1.])
>>> res_1.cost
9.8669242910846867e-30
>>> res_1.optimality
8.8928864934219529e-14
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.optimize.least_squares
">>> res_2 = least_squares(fun_rosenbrock, x0_rosenbrock, jac_rosenbrock,
...                       bounds=([-np.inf, 1.5], np.inf))
>>> res_2.x
array([ 1.22437075,  1.5       ])
>>> res_2.cost
0.025213093946805685
>>> res_2.optimality
1.5885401433157753e-07
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.optimize.least_squares
">>> from scipy.sparse import lil_matrix
>>> def sparsity_broyden(n):
...     sparsity = lil_matrix((n, n), dtype=int)
...     i = np.arange(n)
...     sparsity[i, i] = 1
...     i = np.arange(1, n)
...     sparsity[i, i - 1] = 1
...     i = np.arange(n - 1)
...     sparsity[i, i + 1] = 1
...     return sparsity
...
>>> n = 100000
>>> x0_broyden = -np.ones(n)
...
>>> res_3 = least_squares(fun_broyden, x0_broyden,
...                       jac_sparsity=sparsity_broyden(n))
>>> res_3.cost
4.5687069299604613e-23
>>> res_3.optimality
1.1650454296851518e-11
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.sparse.lil_matrix scipy.optimize.least_squares
">>> res_lsq = least_squares(fun, x0, args=(t_train, y_train))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.optimize.least_squares
">>> res_soft_l1 = least_squares(fun, x0, loss='soft_l1', f_scale=0.1,
...                             args=(t_train, y_train))
>>> res_log = least_squares(fun, x0, loss='cauchy', f_scale=0.1,
...                         args=(t_train, y_train))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.optimize.least_squares
">>> from scipy.optimize import least_squares
>>> res_wrapped = least_squares(f_wrap, (0.1, 0.1), bounds=([0, 0], [1, 1]))
>>> z = res_wrapped.x[0] + res_wrapped.x[1]*1j
>>> z
(0.49999999999925893+0.49999999999925893j)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html, scipy.optimize.least_squares
">>> fig, ax = plt.subplots()
>>> ax.hist(zscore(x), 50)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gzscore.html, scipy.stats.zscore
">>> fig, ax = plt.subplots()
>>> ax.hist(gzscore(x), 50)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gzscore.html, scipy.stats.gzscore
">>> import numpy as np
>>> from scipy.optimize import fmin_l_bfgs_b
>>> X = np.arange(0, 10, 1)
>>> M = 2
>>> B = 3
>>> Y = M * X + B
>>> def func(parameters, *args):
...     x = args[0]
...     y = args[1]
...     m, b = parameters
...     y_model = m*x + b
...     error = sum(np.power((y - y_model), 2))
...     return error
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_l_bfgs_b.html, scipy.interpolate.RectBivariateSpline
">>> x_opt, f_opt, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),
...                                    approx_grad=True)
>>> x_opt, f_opt
array([1.99999999, 3.00000006]), 1.7746231151323805e-14  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_l_bfgs_b.html, scipy.optimize.fmin_l_bfgs_b
">>> bounds = [(0, 5), (5, 10)]
>>> x_opt, f_op, info = fmin_l_bfgs_b(func, x0=initial_values, args=(X, Y),
...                                   approx_grad=True, bounds=bounds)
>>> x_opt, f_opt
array([1.65990508, 5.31649385]), 15.721334516453945  # may vary    
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_l_bfgs_b.html, scipy.optimize.fmin_l_bfgs_b
">>> from scipy.optimize import rosen, shgo
>>> bounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]
>>> result = shgo(rosen, bounds)
>>> result.x, result.fun
(array([1., 1., 1., 1., 1.]), 2.920392374190081e-18)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html, scipy.optimize.shgo
">>> bounds = [(None, None), ]*4
>>> result = shgo(rosen, bounds)
>>> result.x
array([0.99999851, 0.99999704, 0.99999411, 0.9999882 ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html, scipy.optimize.shgo
">>> result = shgo(eggholder, bounds, n=64, sampling_method='sobol')
>>> result.x, result.fun
(array([512.        , 404.23180824]), -959.6406627208397)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html, scipy.optimize.shgo
">>> result_2 = shgo(eggholder,
...                 bounds, n=64, iters=3, sampling_method='sobol')
>>> len(result.xl), len(result_2.xl)
(12, 23)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html, scipy.optimize.shgo
">>> def f(x):  # (cattle-feed)
...     return 24.55*x[0] + 26.75*x[1] + 39*x[2] + 40.50*x[3]
...
>>> def g1(x):
...     return 2.3*x[0] + 5.6*x[1] + 11.1*x[2] + 1.3*x[3] - 5  # >=0
...
>>> def g2(x):
...     return (12*x[0] + 11.9*x[1] +41.8*x[2] + 52.1*x[3] - 21
...             - 1.645 * np.sqrt(0.28*x[0]**2 + 0.19*x[1]**2
...                             + 20.5*x[2]**2 + 0.62*x[3]**2)
...             ) # >=0
...
>>> def h1(x):
...     return x[0] + x[1] + x[2] + x[3] - 1  # == 0
...
>>> cons = ({'type': 'ineq', 'fun': g1},
...         {'type': 'ineq', 'fun': g2},
...         {'type': 'eq', 'fun': h1})
>>> bounds = [(0, 1.0),]*4
>>> res = shgo(f, bounds, n=150, constraints=cons)
>>> res
 message: Optimization terminated successfully.
 success: True
     fun: 29.894378159142136
    funl: [ 2.989e+01]
       x: [ 6.355e-01  1.137e-13  3.127e-01  5.178e-02] # may vary
      xl: [[ 6.355e-01  1.137e-13  3.127e-01  5.178e-02]] # may vary
     nit: 1
    nfev: 142 # may vary
   nlfev: 35 # may vary
   nljev: 5
   nlhev: 0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.shgo.html, scipy.optimize.shgo
">>> import numpy as np
>>> from scipy.sparse import rand
>>> from scipy.optimize import lsq_linear
>>> rng = np.random.default_rng()
...
>>> m = 20000
>>> n = 10000
...
>>> A = rand(m, n, density=1e-4, random_state=rng)
>>> b = rng.standard_normal(m)
...
>>> lb = rng.standard_normal(n)
>>> ub = lb + 1
...
>>> res = lsq_linear(A, b, bounds=(lb, ub), lsmr_tol='auto', verbose=1)
# may vary
The relative change of the cost function is less than `tol`.
Number of iterations 16, initial cost 1.5039e+04, final cost 1.1112e+04,
first-order optimality 4.66e-08.
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.lsq_linear.html, scipy.sparse.rand scipy.optimize.lsq_linear
">>> import numpy as np
>>> from scipy.optimize import rosen, differential_evolution
>>> bounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]
>>> result = differential_evolution(rosen, bounds)
>>> result.x, result.fun
(array([1., 1., 1., 1., 1.]), 1.9216496320061384e-19)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.differential_evolution
">>> result = differential_evolution(rosen, bounds, updating='deferred',
...                                 workers=2)
>>> result.x, result.fun
(array([1., 1., 1., 1., 1.]), 1.9216496320061384e-19)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.differential_evolution
">>> lc = LinearConstraint([[1, 1]], -np.inf, 1.9)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.LinearConstraint
">>> bounds = Bounds([0., 0.], [2., 2.])
>>> result = differential_evolution(rosen, bounds, constraints=lc,
...                                 seed=1)
>>> result.x, result.fun
(array([0.96632622, 0.93367155]), 0.0011352416852625719)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.Bounds scipy.optimize.differential_evolution
">>> def ackley(x):
...     arg1 = -0.2 * np.sqrt(0.5 * (x[0] ** 2 + x[1] ** 2))
...     arg2 = 0.5 * (np.cos(2. * np.pi * x[0]) + np.cos(2. * np.pi * x[1]))
...     return -20. * np.exp(arg1) - np.exp(arg2) + 20. + np.e
>>> bounds = [(-5, 5), (-5, 5)]
>>> result = differential_evolution(ackley, bounds, seed=1)
>>> result.x, result.fun
(array([0., 0.]), 4.440892098500626e-16)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.differential_evolution
">>> result = differential_evolution(
...     ackley, bounds, vectorized=True, updating='deferred', seed=1
... )
>>> result.x, result.fun
(array([0., 0.]), 4.440892098500626e-16)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html, scipy.optimize.differential_evolution
"x = arg min(sum(func(y)**2,axis=0))
         y
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.leastsq.html, scipy.interpolate.RectBivariateSpline
"func(params) = ydata - f(xdata, params)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.leastsq.html, scipy.interpolate.RectBivariateSpline
">>> from scipy.optimize import leastsq
>>> def func(x):
...     return 2*(x-3)**2+1
>>> leastsq(func, 0)
(array([2.99999999]), 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.leastsq.html, scipy.interpolate.RectBivariateSpline scipy.optimize.leastsq
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> res = stats.anderson_ksamp([rng.normal(size=50),
... rng.normal(loc=0.5, size=30)])
>>> res.statistic, res.pvalue
(1.974403288713695, 0.04991293614572478)
>>> res.critical_values
array([0.325, 1.226, 1.961, 2.718, 3.752, 4.592, 6.546])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.anderson_ksamp.html, scipy.stats.anderson_ksamp
">>> samples = [rng.normal(size=50), rng.normal(size=30),
...            rng.normal(size=20)]
>>> res = stats.anderson_ksamp(samples)
>>> res.statistic, res.pvalue
(-0.29103725200789504, 0.25)
>>> res.critical_values
array([ 0.44925884,  1.3052767 ,  1.9434184 ,  2.57696569,  3.41634856,
  4.07210043, 5.56419101])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.anderson_ksamp.html, scipy.stats.anderson_ksamp
">>> method = stats.PermutationMethod(n_resamples=9999, random_state=rng)
>>> res = stats.anderson_ksamp(samples, method=method)
>>> res.pvalue
0.5254
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.anderson_ksamp.html, scipy.stats.PermutationMethod scipy.stats.anderson_ksamp
">>> from scipy.optimize import linprog
>>> c = [-1, 4]
>>> A = [[-3, 1], [1, 2]]
>>> b = [6, 4]
>>> x0_bounds = (None, None)
>>> x1_bounds = (-3, None)
>>> res = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds])
>>> res.fun
-22.0
>>> res.x
array([10., -3.])
>>> res.message
'Optimization terminated successfully. (HiGHS Status 7: Optimal)'
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html, scipy.optimize.linprog
">>> eps = 0.05
>>> b[1] += eps
>>> linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds]).fun
-22.05
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html, scipy.optimize.linprog
">>> b = [6, 4]  # reset to original values
>>> b[0] -= 39
>>> linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds]).fun
-22.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html, scipy.optimize.linprog
">>> from numpy.random import default_rng
>>> rng = default_rng()
>>> n = 15
>>> A = rng.random((n, n))
>>> B = rng.random((n, n))
>>> res = quadratic_assignment(A, B)  # FAQ is default method
>>> print(res.fun)
46.871483385480545  # may vary
",https://docs.scipy.org/doc/scipy/reference/optimize.qap-faq.html, scipy.optimize.quadratic_assignment
">>> options = {""P0"": ""randomized""}  # use randomized initialization
>>> res = quadratic_assignment(A, B, options=options)
>>> print(res.fun)
47.224831071310625 # may vary
",https://docs.scipy.org/doc/scipy/reference/optimize.qap-faq.html, scipy.optimize.quadratic_assignment
">>> res = min([quadratic_assignment(A, B, options=options)
...            for i in range(30)], key=lambda x: x.fun)
>>> print(res.fun)
46.671852533681516 # may vary
",https://docs.scipy.org/doc/scipy/reference/optimize.qap-faq.html, scipy.optimize.quadratic_assignment
">>> options = {""partial_guess"": np.array([np.arange(n), res.col_ind]).T}
>>> res = quadratic_assignment(A, B, method=""2opt"", options=options)
>>> print(res.fun)
46.47160735721583 # may vary
",https://docs.scipy.org/doc/scipy/reference/optimize.qap-faq.html, scipy.optimize.quadratic_assignment
">>> tillamook = [0.0571, 0.0813, 0.0831, 0.0976, 0.0817, 0.0859, 0.0735,
...              0.0659, 0.0923, 0.0836]
>>> newport = [0.0873, 0.0662, 0.0672, 0.0819, 0.0749, 0.0649, 0.0835,
...            0.0725]
>>> petersburg = [0.0974, 0.1352, 0.0817, 0.1016, 0.0968, 0.1064, 0.105]
>>> magadan = [0.1033, 0.0915, 0.0781, 0.0685, 0.0677, 0.0697, 0.0764,
...            0.0689]
>>> tvarminne = [0.0703, 0.1026, 0.0956, 0.0973, 0.1039, 0.1045]
>>> f_oneway(tillamook, newport, petersburg, magadan, tvarminne)
F_onewayResult(statistic=7.121019471642447, pvalue=0.0002812242314534544)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html, scipy.stats.f_oneway
">>> a = np.array([[9.87, 9.03, 6.81],
...               [7.18, 8.35, 7.00],
...               [8.39, 7.58, 7.68],
...               [7.45, 6.33, 9.35],
...               [6.41, 7.10, 9.33],
...               [8.00, 8.24, 8.44]])
>>> b = np.array([[6.35, 7.30, 7.16],
...               [6.65, 6.68, 7.63],
...               [5.72, 7.73, 6.72],
...               [7.01, 9.19, 7.41],
...               [7.75, 7.87, 8.30],
...               [6.90, 7.97, 6.97]])
>>> c = np.array([[3.31, 8.77, 1.01],
...               [8.25, 3.24, 3.62],
...               [6.32, 8.81, 5.19],
...               [7.48, 8.83, 8.91],
...               [8.59, 6.01, 6.07],
...               [3.07, 9.72, 7.48]])
>>> F, p = f_oneway(a, b, c)
>>> F
array([1.75676344, 0.03701228, 3.76439349])
>>> p
array([0.20630784, 0.96375203, 0.04733157])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html, scipy.stats.f_oneway
">>> import numpy as np
>>> from scipy.optimize import fmin_bfgs
>>> def quadratic_cost(x, Q):
...     return x @ Q @ x
...
>>> x0 = np.array([-3, -4])
>>> cost_weight =  np.diag([1., 10.])
>>> # Note that a trailing comma is necessary for a tuple with single element
>>> fmin_bfgs(quadratic_cost, x0, args=(cost_weight,))
Optimization terminated successfully.
        Current function value: 0.000000
        Iterations: 7                   # may vary
        Function evaluations: 24        # may vary
        Gradient evaluations: 8         # may vary
array([ 2.85169950e-06, -4.61820139e-07])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_bfgs.html, scipy.optimize.fmin_bfgs
">>> def quadratic_cost_grad(x, Q):
...     return 2 * Q @ x
...
>>> fmin_bfgs(quadratic_cost, x0, quadratic_cost_grad, args=(cost_weight,))
Optimization terminated successfully.
        Current function value: 0.000000
        Iterations: 7
        Function evaluations: 8
        Gradient evaluations: 8
array([ 2.85916637e-06, -4.54371951e-07])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fmin_bfgs.html, scipy.optimize.fmin_bfgs
">>> import numpy as np
>>> from scipy.optimize import fsolve
>>> def func(x):
...     return [x[0] * np.cos(x[1]) - 4,
...             x[1] * x[0] - x[1] - 5]
>>> root = fsolve(func, [1, 1])
>>> root
array([6.50409711, 0.90841421])
>>> np.isclose(func(root), [0.0, 0.0])  # func(root) should be almost 0.0.
array([ True,  True])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html, scipy.interpolate.RectBivariateSpline scipy.optimize.fsolve
">>> import numpy as np
>>> from scipy.stats import circmean
>>> import matplotlib.pyplot as plt
>>> angles = np.deg2rad(np.array([20, 30, 330]))
>>> circmean = circmean(angles)
>>> np.rad2deg(circmean)
7.294976657784009
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.circmean.html, scipy.stats.circmean
">>> import numpy as np
>>> a = np.array([[3, 0, 3, 7],
...               [3, 2, 6, 2],
...               [1, 7, 2, 8],
...               [3, 0, 6, 1],
...               [3, 2, 5, 5]])
>>> from scipy import stats
>>> stats.mode(a, keepdims=True)
ModeResult(mode=array([[3, 0, 6, 1]]), count=array([[4, 2, 2, 1]]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mode.html, scipy.stats.mode
">>> stats.mode(a, axis=None, keepdims=True)
ModeResult(mode=[[3]], count=[[5]])
>>> stats.mode(a, axis=None, keepdims=False)
ModeResult(mode=3, count=5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mode.html, scipy.stats.mode
">>> rv = boltzmann(lambda_, N)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boltzmann.html, scipy.stats.rv_discrete.pmf
">>> for n in [2, 3, 4, 5, 6, 7]:
...     x = rng.normal(size=10**n)
...     m, k = stats.moment(x, 3), stats.kstat(x, 3)
...     print(""%.3g %.3g %.3g"" % (m, k, m-k))
-0.631 -0.651 0.0194  # random
0.0282 0.0283 -8.49e-05
-0.0454 -0.0454 1.36e-05
7.53e-05 7.53e-05 -2.26e-09
0.00166 0.00166 -4.99e-09
-2.88e-06 -2.88e-06 8.63e-13
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstat.html, scipy.stats.moment scipy.stats.kstat
">>> from scipy import optimize
>>> sol = optimize.broyden2(fun, [0, 0])
>>> sol
array([0.84116365, 0.15883529])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.broyden2.html, scipy.optimize.broyden2
">>> from scipy.stats import tiecorrect, rankdata
>>> tiecorrect([1, 2.5, 2.5, 4])
0.9
>>> ranks = rankdata([1, 3, 2, 4, 5, 7, 2, 8, 4])
>>> ranks
array([ 1. ,  4. ,  2.5,  5.5,  7. ,  8. ,  2.5,  9. ,  5.5])
>>> tiecorrect(ranks)
0.9833333333333333
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tiecorrect.html, scipy.stats.tiecorrect scipy.stats.rankdata
">>> import numpy as np
>>> from scipy.optimize import rosen_hess_prod
>>> X = 0.1 * np.arange(9)
>>> p = 0.5 * np.arange(9)
>>> rosen_hess_prod(X, p)
array([  -0.,   27.,  -10.,  -95., -192., -265., -278., -195., -180.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.rosen_hess_prod.html, scipy.optimize.rosen_hess_prod
">>> import numpy as np
>>> from scipy.optimize import nnls
...
>>> A = np.array([[1, 0], [1, 0], [0, 1]])
>>> b = np.array([2, 1, 1])
>>> nnls(A, b)
(array([1.5, 1. ]), 0.7071067811865475)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.nnls.html, scipy.optimize.nnls
">>> b = np.array([-1, -1, -1])
>>> nnls(A, b)
(array([0., 0.]), 1.7320508075688772)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.nnls.html, scipy.optimize.nnls
">>> import numpy as np
>>> from scipy.optimize import dual_annealing
>>> func = lambda x: np.sum(x*x - 10*np.cos(2*np.pi*x)) + 10*np.size(x)
>>> lw = [-5.12] * 10
>>> up = [5.12] * 10
>>> ret = dual_annealing(func, bounds=list(zip(lw, up)))
>>> ret.x
array([-4.26437714e-09, -3.91699361e-09, -1.86149218e-09, -3.97165720e-09,
       -6.29151648e-09, -6.53145322e-09, -3.93616815e-09, -6.55623025e-09,
       -6.05775280e-09, -5.00668935e-09]) # random
>>> ret.fun
0.000000
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.dual_annealing.html, scipy.optimize.dual_annealing
">>> import scipy.stats as stats
>>> res = stats.barnard_exact([[7, 12], [8, 3]], alternative=""less"")
>>> res.statistic
-1.894...
>>> res.pvalue
0.03407...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.barnard_exact.html, scipy.stats.barnard_exact
">>> _, pvalue = stats.fisher_exact([[7, 12], [8, 3]], alternative=""less"")
>>> pvalue
0.0640...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.barnard_exact.html, scipy.stats.fisher_exact
">>> from scipy.optimize import BroydenFirst, KrylovJacobian
>>> from scipy.optimize import InverseJacobian
>>> jac = BroydenFirst()
>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton_krylov.html, scipy.optimize.BroydenFirst scipy.optimize.KrylovJacobian scipy.optimize.InverseJacobian
">>> from scipy import optimize
>>> sol = optimize.newton_krylov(fun, [0, 0])
>>> sol
array([0.66731771, 0.66536458])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton_krylov.html, scipy.optimize.newton_krylov
">>> from scipy.stats import page_trend_test
>>> res = page_trend_test(table)
>>> res
PageTrendTestResult(statistic=133.5, pvalue=0.0018191161948127822,
                    method='exact')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.page_trend_test.html, scipy.stats.page_trend_test
">>> from scipy.stats import rankdata
>>> ranks = rankdata(table, axis=1)
>>> ranks
array([[1.5, 3. , 1.5],
       [1.5, 1.5, 3. ],
       [1.5, 1.5, 3. ],
       [1. , 3. , 2. ],
       [1.5, 3. , 1.5],
       [1. , 2. , 3. ],
       [1. , 2. , 3. ],
       [1. , 2.5, 2.5],
       [1. , 2. , 3. ],
       [1. , 2. , 3. ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.page_trend_test.html, scipy.stats.rankdata
">>> res = page_trend_test(table, method=""asymptotic"")
>>> res
PageTrendTestResult(statistic=133.5, pvalue=0.0012693433690751756,
                    method='asymptotic')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.page_trend_test.html, scipy.stats.page_trend_test
">>> res = page_trend_test(ranks,             # ranks of data
...                       ranked=True,       # data is already ranked
...                       )
>>> res
PageTrendTestResult(statistic=133.5, pvalue=0.0018191161948127822,
                    method='exact')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.page_trend_test.html, scipy.stats.page_trend_test
">>> res = page_trend_test(table,             # data as originally tabulated
...                       predicted_ranks=[2, 3, 1],  # our predicted order
...                       )
>>> res
PageTrendTestResult(statistic=133.5, pvalue=0.0018191161948127822,
                    method='exact')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.page_trend_test.html, scipy.stats.page_trend_test
">>> from scipy import stats
>>> res = stats.jarque_bera(x)
>>> res.statistic
6.982848237344646
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.jarque_bera.html, scipy.stats.jarque_bera
">>> def statistic(x, axis):
...     # underlying calculation of the Jarque Bera statistic
...     s = stats.skew(x, axis=axis)
...     k = stats.kurtosis(x, axis=axis)
...     return x.shape[axis]/6 * (s**2 + k**2/4)
>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic,
...                              alternative='greater')
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> jb_plot(ax)
>>> ax.hist(res.null_distribution, np.linspace(0, 10, 50),
...         density=True)
>>> ax.legend(['aymptotic approximation (many observations)',
...            'Monte Carlo approximation (11 observations)'])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.jarque_bera.html, scipy.stats.skew scipy.stats.kurtosis scipy.stats.monte_carlo_test
">>> from scipy.stats import fisher_exact
>>> res = fisher_exact(table, alternative='two-sided')
>>> res.pvalue
0.10256410256410257
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html, scipy.stats.fisher_exact
">>> res = fisher_exact(table, alternative='greater')
>>> res.pvalue
0.08624708624708627
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html, scipy.stats.fisher_exact
">>> res = fisher_exact(table, alternative='less')
>>> res.pvalue
0.9953379953379957
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html, scipy.stats.fisher_exact
">>> from scipy.stats import fisher_exact
>>> res = fisher_exact([[7, 17], [15, 5]], alternative='less')
>>> res.statistic
0.13725490196078433
>>> res.pvalue
0.0028841933752349743
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html, scipy.stats.fisher_exact
">>> from scipy.stats import boschloo_exact
>>> res = boschloo_exact([[7, 17], [15, 5]], alternative='less')
>>> res.statistic
0.0028841933752349743
>>> res.pvalue
0.0015141406667567101
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html, scipy.stats.boschloo_exact
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> x = stats.norm.rvs(size=500, random_state=rng)
>>> res = stats.cramervonmises(x, 'norm')
>>> res.statistic, res.pvalue
(0.1072085112565724, 0.5508482238203407)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises.html, scipy.stats.cramervonmises
">>> y = x + 2.1
>>> res = stats.cramervonmises(y, 'norm', args=(2,))
>>> res.statistic, res.pvalue
(0.8364446265294695, 0.00596286797008283)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises.html, scipy.stats.cramervonmises
">>> frozen_dist = stats.norm(loc=2)
>>> res = stats.cramervonmises(y, frozen_dist.cdf)
>>> res.statistic, res.pvalue
(0.8364446265294695, 0.00596286797008283)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises.html, scipy.stats.cramervonmises
">>> from scipy.stats import skew
>>> skew([1, 2, 3, 4, 5])
0.0
>>> skew([2, 8, 0, 4, 1, 9, 9, 0])
0.2650554122698573
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skew.html, scipy.stats.skew
">>> import numpy as np
>>> from scipy.stats import gstd
>>> rng = np.random.default_rng()
>>> sample = rng.lognormal(mean=0, sigma=1, size=1000)
>>> gstd(sample)
2.810010162475324
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gstd.html, scipy.stats.gstd
">>> a = np.arange(1, 25).reshape(2, 3, 4)
>>> gstd(a, axis=None)
2.2944076136018947
>>> gstd(a, axis=2)
array([[1.82424757, 1.22436866, 1.13183117],
       [1.09348306, 1.07244798, 1.05914985]])
>>> gstd(a, axis=(1,2))
array([2.12939215, 1.22120169])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gstd.html, scipy.stats.gstd
">>> a = np.arange(1, 25).reshape(2, 3, 4)
>>> ma = np.ma.masked_where(a > 16, a)
>>> ma
masked_array(
  data=[[[1, 2, 3, 4],
         [5, 6, 7, 8],
         [9, 10, 11, 12]],
        [[13, 14, 15, 16],
         [--, --, --, --],
         [--, --, --, --]]],
  mask=[[[False, False, False, False],
         [False, False, False, False],
         [False, False, False, False]],
        [[False, False, False, False],
         [ True,  True,  True,  True],
         [ True,  True,  True,  True]]],
  fill_value=999999)
>>> gstd(ma, axis=2)
masked_array(
  data=[[1.8242475707663655, 1.2243686572447428, 1.1318311657788478],
        [1.0934830582350938, --, --]],
  mask=[[False, False, False],
        [False,  True,  True]],
  fill_value=999999)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gstd.html, scipy.stats.gstd
">>> fig = plt.figure()
>>> ax1 = fig.add_subplot(211)
>>> x = stats.loggamma.rvs(5, size=500) + 5
>>> prob = stats.probplot(x, dist=stats.norm, plot=ax1)
>>> ax1.set_xlabel('')
>>> ax1.set_title('Probplot against normal distribution')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox.html, scipy.stats.probplot
">>> ax2 = fig.add_subplot(212)
>>> xt, _ = stats.boxcox(x)
>>> prob = stats.probplot(xt, dist=stats.norm, plot=ax2)
>>> ax2.set_title('Probplot after Box-Cox transformation')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox.html, scipy.stats.boxcox scipy.stats.probplot
">>> import numpy as np
>>> from scipy import stats
>>> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> stats.trimboth(a, 0.1)
array([1, 3, 2, 4, 5, 6, 7, 8])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trimboth.html, scipy.stats.trimboth
">>> b = np.arange(10)
>>> stats.trimboth(b, 1/4).shape
(6,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trimboth.html, scipy.stats.trimboth
">>> c = [2, 4, 6, 8, 0, 1, 3, 5, 7, 9]
>>> d = np.array([a, b, c])
>>> stats.trimboth(d, 0.4, axis=0).shape
(1, 10)
>>> stats.trimboth(d, 0.4, axis=1).shape
(3, 2)
>>> stats.trimboth(d, 0.4, axis=None).shape
(6,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trimboth.html, scipy.stats.trimboth
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tmax(x)
19
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmax.html, scipy.stats.tmax
">>> stats.tmax(x, 13)
13
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmax.html, scipy.stats.tmax
">>> stats.tmax(x, 13, inclusive=False)
12
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmax.html, scipy.stats.tmax
">>> from scipy import stats
>>> data = [6, 9, 12, 7, 8, 8, 13]
>>> mean, var, std = stats.mvsdist(data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mvsdist.html, scipy.stats.mvsdist
">>> import numpy as np
>>> from scipy.stats import CensoredData
>>> data = CensoredData(uncensored=[1, 1.5], left=[0], right=[10],
...                     interval=[[2, 3]])
>>> print(data)
CensoredData(5 values: 2 not censored, 1 left-censored,
1 right-censored, 1 interval-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData
">>> data = CensoredData(interval=[[1, 1],
...                               [1.5, 1.5],
...                               [-np.inf, 0],
...                               [10, np.inf],
...                               [2, 3]])
>>> print(data)
CensoredData(5 values: 2 not censored, 1 left-censored,
1 right-censored, 1 interval-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData
">>> data = CensoredData(uncensored=[13, 22, 17, 15], right=[20, 18])
>>> print(data)
CensoredData(6 values: 4 not censored, 2 right-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData
">>> data = CensoredData.right_censored(ttf, censored)
>>> print(data)
CensoredData(6 values: 4 not censored, 2 right-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData.right_censored scipy.stats.CensoredData
">>> a = [10, 0.5, 2, 12.5]  # Low ends of the intervals
>>> b = [11, 1.0, 3, 13.5]  # High ends of the intervals
>>> data = CensoredData.interval_censored(low=a, high=b)
>>> print(data)
CensoredData(4 values: 0 not censored, 4 interval-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData.interval_censored scipy.stats.CensoredData
">>> data = CensoredData.right_censored(x, x == 40)
>>> print(data)
CensoredData(250 values: 215 not censored, 35 right-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.html, scipy.stats.CensoredData.right_censored scipy.stats.CensoredData
">>> atlanta = [13.75, 13.75, 13.5, 13.5, 13.0, 13.0, 13.0, 12.75, 12.5]
>>> chicago = [14.25, 13.0, 12.75, 12.5, 12.5, 12.4, 12.3, 11.9, 11.9]
>>> houston = [14.0, 14.0, 13.51, 13.5, 13.5, 13.25, 13.0, 12.5, 12.5]
>>> memphis = [15.0, 14.0, 13.75, 13.59, 13.25, 12.97, 12.5, 12.25,
...           11.89]
>>> alexandergovern(atlanta, chicago, houston, memphis)
AlexanderGovernResult(statistic=4.65087071883494,
                      pvalue=0.19922132490385214)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.alexandergovern.html, scipy.stats.alexandergovern
">>> x = [0.1, 0.1, 0.1, 0.6]
>>> y = [2.1, 2.6, 2.1, 2.1]
>>> binx = [0.0, 0.5, 1.0]
>>> biny = [2.0, 2.5, 3.0]
>>> ret = stats.binned_statistic_2d(x, y, None, 'count', bins=[binx, biny])
>>> ret.statistic
array([[2., 1.],
       [1., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html, scipy.stats.binned_statistic_2d
">>> ret = stats.binned_statistic_2d(x, y, None, 'count', bins=[binx, biny],
...                                 expand_binnumbers=True)
>>> ret.binnumber
array([[1, 1, 1, 2],
       [1, 2, 1, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html, scipy.stats.binned_statistic_2d
">>> result = binomtest(3, n=15, p=0.1, alternative='greater')
>>> result.pvalue
0.18406106910639114
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binomtest.html, scipy.stats.binomtest
">>> result.proportion_ci(confidence_level=0.95)
ConfidenceInterval(low=0.05684686759024681, high=1.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binomtest.html, scipy.stats._result_classes.BinomTestResult.proportion_ci
">>> rv = zipfian(a, n)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zipfian.html, scipy.stats.rv_discrete.pmf
">>> x = stats.loggamma.rvs(5, loc=10, size=1000)
>>> lmbdas = np.linspace(-2, 10)
>>> llf = np.zeros(lmbdas.shape, dtype=float)
>>> for ii, lmbda in enumerate(lmbdas):
...     llf[ii] = stats.yeojohnson_llf(lmbda, x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_llf.html, scipy.stats.yeojohnson_llf
">>> x_most_normal, lmbda_optimal = stats.yeojohnson(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_llf.html, scipy.stats.yeojohnson
">>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> ax.plot(lmbdas, llf, 'b.-')
>>> ax.axhline(stats.yeojohnson_llf(lmbda_optimal, x), color='r')
>>> ax.set_xlabel('lmbda parameter')
>>> ax.set_ylabel('Yeo-Johnson log-likelihood')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_llf.html, scipy.stats.yeojohnson_llf
">>> locs = [3, 10, 4]  # 'lower left', 'center', 'lower right'
>>> for lmbda, loc in zip([-1, lmbda_optimal, 9], locs):
...     xt = stats.yeojohnson(x, lmbda=lmbda)
...     (osm, osr), (slope, intercept, r_sq) = stats.probplot(xt)
...     ax_inset = inset_axes(ax, width=""20%"", height=""20%"", loc=loc)
...     ax_inset.plot(osm, osr, 'c.', osm, slope*osm + intercept, 'k-')
...     ax_inset.set_xticklabels([])
...     ax_inset.set_yticklabels([])
...     ax_inset.set_title(r'$\lambda=%1.2f$' % lmbda)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_llf.html, scipy.stats.yeojohnson scipy.stats.probplot
">>> from scipy.stats import wasserstein_distance_nd
>>> wasserstein_distance_nd([[0, 2, 3], [1, 2, 5]], [[3, 2, 3], [4, 2, 5]])
3.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance_nd.html, scipy.stats.wasserstein_distance_nd
">>> wasserstein_distance_nd([[0, 2.75], [2, 209.3], [0, 0]],
...                      [[0.2, 0.322], [4.5, 25.1808]],
...                      [0.4, 5.2, 0.114], [0.8, 1.5])
174.15840245217169
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wasserstein_distance_nd.html, scipy.stats.wasserstein_distance_nd
">>> import numpy as np
>>> from scipy.stats import circstd
>>> import matplotlib.pyplot as plt
>>> samples_1 = np.array([0.072, -0.158, 0.077, 0.108, 0.286,
...                       0.133, -0.473, -0.001, -0.348, 0.131])
>>> samples_2 = np.array([0.111, -0.879, 0.078, 0.733, 0.421,
...                       0.104, -0.136, -0.867,  0.012,  0.105])
>>> circstd_1 = circstd(samples_1)
>>> circstd_2 = circstd(samples_2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.circstd.html, scipy.stats.circstd
">>> rng = np.random.default_rng()
>>> values = rng.standard_normal(100)
>>> differential_entropy(values)
1.3407817436640392
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.differential_entropy.html, scipy.stats.differential_entropy
">>> from scipy import stats
>>> import matplotlib.pyplot as plt
>>>
>>>
>>> def rmse(res, expected):
...     '''Root mean squared error'''
...     return np.sqrt(np.mean((res - expected)**2))
>>>
>>>
>>> a, b = np.log10(5), np.log10(1000)
>>> ns = np.round(np.logspace(a, b, 10)).astype(int)
>>> reps = 1000  # number of repetitions for each sample size
>>> expected = stats.expon.entropy()
>>>
>>> method_errors = {'vasicek': [], 'van es': [], 'ebrahimi': []}
>>> for method in method_errors:
...     for n in ns:
...        rvs = stats.expon.rvs(size=(reps, n), random_state=rng)
...        res = stats.differential_entropy(rvs, method=method, axis=-1)
...        error = rmse(res, expected)
...        method_errors[method].append(error)
>>>
>>> for method, errors in method_errors.items():
...     plt.loglog(ns, errors, label=method)
>>>
>>> plt.legend()
>>> plt.xlabel('sample size')
>>> plt.ylabel('RMSE (1000 trials)')
>>> plt.title('Entropy Estimator Error (Exponential Distribution)')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.differential_entropy.html, scipy.stats.differential_entropy
">>> import numpy as np
>>> from scipy.stats import sigmaclip
>>> a = np.concatenate((np.linspace(9.5, 10.5, 31),
...                     np.linspace(0, 20, 5)))
>>> fact = 1.5
>>> c, low, upp = sigmaclip(a, fact, fact)
>>> c
array([  9.96666667,  10.        ,  10.03333333,  10.        ])
>>> c.var(), c.std()
(0.00055555555555555165, 0.023570226039551501)
>>> low, c.mean() - fact*c.std(), c.min()
(9.9646446609406727, 9.9646446609406727, 9.9666666666666668)
>>> upp, c.mean() + fact*c.std(), c.max()
(10.035355339059327, 10.035355339059327, 10.033333333333333)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sigmaclip.html, scipy.stats.sigmaclip
">>> a = np.concatenate((np.linspace(9.5, 10.5, 11),
...                     np.linspace(-100, -50, 3)))
>>> c, low, upp = sigmaclip(a, 1.8, 1.8)
>>> (c == np.linspace(9.5, 10.5, 11)).all()
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sigmaclip.html, scipy.stats.sigmaclip
">>> import scipy.stats as stats
>>> res = stats.poisson_means_test(0, 100, 3, 100)
>>> res.statistic, res.pvalue
(-1.7320508075688772, 0.08837900929018157)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.poisson_means_test.html, scipy.stats.poisson_means_test
">>> rv = nbinom(n, p)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.nbinom.html, scipy.stats.rv_discrete.pmf
">>> rv = nchypergeom_wallenius(M, n, N, odds)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.nchypergeom_wallenius.html, scipy.stats.rv_discrete.pmf
">>> rv = binom(n, p)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binom.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091,
...                0.1954,  0.6307,  0.6599,  0.1065,  0.0508])
>>> from scipy import stats
>>> stats.zscore(a)
array([ 1.1273, -1.247 , -0.0552,  1.0923,  1.1664, -0.8559,  0.5786,
        0.6748, -1.1488, -1.3324])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zscore.html, scipy.stats.zscore
">>> b = np.array([[ 0.3148,  0.0478,  0.6243,  0.4608],
...               [ 0.7149,  0.0775,  0.6072,  0.9656],
...               [ 0.6341,  0.1403,  0.9759,  0.4064],
...               [ 0.5918,  0.6948,  0.904 ,  0.3721],
...               [ 0.0921,  0.2481,  0.1188,  0.1366]])
>>> stats.zscore(b, axis=1, ddof=1)
array([[-0.19264823, -1.28415119,  1.07259584,  0.40420358],
       [ 0.33048416, -1.37380874,  0.04251374,  1.00081084],
       [ 0.26796377, -1.12598418,  1.23283094, -0.37481053],
       [-0.22095197,  0.24468594,  1.19042819, -1.21416216],
       [-0.82780366,  1.4457416 , -0.43867764, -0.1792603 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zscore.html, scipy.stats.zscore
">>> x = np.array([[25.11, 30.10, np.nan, 32.02, 43.15],
...               [14.95, 16.06, 121.25, 94.35, 29.81]])
>>> stats.zscore(x, axis=1, nan_policy='omit')
array([[-1.13490897, -0.37830299,         nan, -0.08718406,  1.60039602],
       [-0.91611681, -0.89090508,  1.4983032 ,  0.88731639, -0.5785977 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zscore.html, scipy.stats.zscore
">>> from scipy.stats import pmean, hmean, gmean
>>> pmean([1, 4], 1.3)
2.639372938300652
>>> pmean([1, 2, 3, 4, 5, 6, 7], 1.3)
4.157111214492084
>>> pmean([1, 4, 7], -2, weights=[3, 1, 3])
1.4969684896631954
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pmean.html, scipy.stats.pmean
">>> pmean([1, 4, 7], -1, weights=[3, 1, 3])
1.9029126213592233
>>> hmean([1, 4, 7], weights=[3, 1, 3])
1.9029126213592233
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pmean.html, scipy.stats.pmean scipy.stats.hmean
">>> pmean([1, 4, 7], 0, weights=[3, 1, 3])
2.80668351922014
>>> gmean([1, 4, 7], weights=[3, 1, 3])
2.80668351922014
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pmean.html, scipy.stats.pmean scipy.stats.gmean
">>> [M, n, N] = [20, 7, 12]
>>> rv = hypergeom(M, n, N)
>>> x = np.arange(0, n+1)
>>> pmf_dogs = rv.pmf(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.hypergeom.html, scipy.stats.rv_discrete.pmf
">>> from scipy import stats
>>> res = stats.ecdf(sample)
>>> res.cdf.quantiles
array([5.2 , 5.58, 6.23, 6.42, 7.06])
>>> res.cdf.probabilities
array([0.2, 0.4, 0.6, 0.8, 1. ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ecdf.html, scipy.stats.ecdf
">>> sample = stats.CensoredData(uncensored=broken, right=unbroken)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ecdf.html, scipy.stats.CensoredData
">>> res = stats.ecdf(sample)
>>> res.sf.quantiles
array([37., 43., 47., 56., 60., 62., 71., 77., 80., 81.])
>>> res.sf.probabilities
array([1.   , 1.   , 0.875, 0.75 , 0.75 , 0.75 , 0.75 , 0.5  , 0.25 , 0.   ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ecdf.html, scipy.stats.ecdf
">>> rvs1 = stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)
>>> rvs2 = (stats.norm.rvs(loc=5, scale=10, size=500, random_state=rng)
...         + stats.norm.rvs(scale=0.2, size=500, random_state=rng))
>>> stats.ttest_rel(rvs1, rvs2)
TtestResult(statistic=-0.4549717054410304, pvalue=0.6493274702088672, df=499)
>>> rvs3 = (stats.norm.rvs(loc=8, scale=10, size=500, random_state=rng)
...         + stats.norm.rvs(scale=0.2, size=500, random_state=rng))
>>> stats.ttest_rel(rvs1, rvs3)
TtestResult(statistic=-5.879467544540889, pvalue=7.540777129099917e-09, df=499)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_rel.html, scipy.stats.ttest_rel scipy.stats._result_classes.TtestResult
"res = chi2_contingency(obs, correction=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chi2_contingency
"(res.statistic, res.pvalue) == stats.chisquare(obs.ravel(),
                                               f_exp=ex.ravel(),
                                               ddof=obs.size - 1 - dof)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chisquare
">>> import numpy as np
>>> from scipy.stats import chi2_contingency
>>> table = np.array([[176, 230], [21035, 21018]])
>>> res = chi2_contingency(table)
>>> res.statistic
6.892569132546561
>>> res.pvalue
0.008655478161175739
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chi2_contingency
">>> obs = np.array([[10, 10, 20], [20, 20, 20]])
>>> res = chi2_contingency(obs)
>>> res.statistic
2.7777777777777777
>>> res.pvalue
0.24935220877729619
>>> res.dof
2
>>> res.expected_freq
array([[ 12.,  12.,  16.],
       [ 18.,  18.,  24.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chi2_contingency
">>> res = chi2_contingency(obs, lambda_=""log-likelihood"")
>>> res.statistic
2.7688587616781319
>>> res.pvalue
0.25046668010954165
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chi2_contingency
">>> obs = np.array(
...     [[[[12, 17],
...        [11, 16]],
...       [[11, 12],
...        [15, 16]]],
...      [[[23, 15],
...        [30, 22]],
...       [[14, 17],
...        [15, 16]]]])
>>> res = chi2_contingency(obs)
>>> res.statistic
8.7584514426741897
>>> res.pvalue
0.64417725029295503
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html, scipy.stats.chi2_contingency
">>> import numpy as np
>>> from scipy import stats
>>> a = np.arange(100)
>>> stats.scoreatpercentile(a, 50)
49.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.scoreatpercentile.html, scipy.stats.scoreatpercentile
">>> import numpy as np
>>> from scipy.stats import anderson
>>> rng = np.random.default_rng()
>>> data = rng.random(size=35)
>>> res = anderson(data)
>>> res.statistic
0.8398018749744764
>>> res.critical_values
array([0.527, 0.6  , 0.719, 0.839, 0.998])
>>> res.significance_level
array([15. , 10. ,  5. ,  2.5,  1. ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.anderson.html, scipy.stats.anderson
">>> d_norm_frozen = stats.norm()
>>> d_norm = FastGeneratorInversion(d_norm_frozen)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html, scipy.stats.sampling.FastGeneratorInversion
">>> u_error, x_error = d_norm.evaluate_error(x_error=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html, scipy.stats.sampling.FastGeneratorInversion.evaluate_error
">>> q = [0.001, 0.2, 0.4, 0.6, 0.8, 0.999]
>>> diff = np.abs(d_norm_frozen.ppf(q) - d_norm.ppf(q))
>>> x_error_abs = np.max(diff)
>>> x_error_abs
1.2937954707581412e-08
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html, scipy.stats.sampling.FastGeneratorInversion.ppf
">>> X, Y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]
>>> positions = np.vstack([X.ravel(), Y.ravel()])
>>> values = np.vstack([m1, m2])
>>> kernel = stats.gaussian_kde(values)
>>> Z = np.reshape(kernel(positions).T, X.shape)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde
">>> fig2 = plt.figure(figsize=(12, 4))
>>> ax1 = fig2.add_subplot(1, 3, 1)
>>> ax2 = fig2.add_subplot(1, 3, 2)
>>> ax3 = fig2.add_subplot(1, 3, 3)
>>> res = stats.probplot(x, plot=ax1)
>>> res = stats.boxcox_normplot(x, -4, 4, plot=ax2)
>>> res = stats.ppcc_plot(x, c/2, 2*c, dist='weibull_min', plot=ax3)
>>> ax3.axvline(c, color='r')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ppcc_plot.html, scipy.stats.probplot scipy.stats.boxcox_normplot scipy.stats.ppcc_plot
">>> from scipy import stats
>>> stats.find_repeats([2, 1, 2, 3, 2, 2, 5])
RepeatedResults(values=array([2.]), counts=array([4]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.find_repeats.html, scipy.stats.find_repeats
">>> stats.find_repeats([[10, 20, 1, 2], [5, 5, 4, 4]])
RepeatedResults(values=array([4.,  5.]), counts=array([2, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.find_repeats.html, scipy.stats.find_repeats
">>> rv = skellam(mu1, mu2)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skellam.html, scipy.stats.rv_discrete.pmf
">>> N = 60
>>> x = np.linspace(-3, 3, N)
>>> y = np.linspace(-3, 4, N)
>>> ret = stats.binned_statistic_dd(data, np.arange(600), bins=[x, y],
...                                 statistic='count')
>>> bincounts = ret.statistic
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_dd.html, scipy.stats.binned_statistic_dd
">>> ret2 = stats.binned_statistic_dd(data, -np.arange(600),
...                                  binned_statistic_result=ret,
...                                  statistic='mean')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_dd.html, scipy.stats.binned_statistic_dd
">>> rv = dlaplace(a)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.dlaplace.html, scipy.stats.rv_discrete.pmf
">>> from scipy import stats
>>> data = [6, 9, 12, 7, 8, 8, 13]
>>> mean, var, std = stats.bayes_mvs(data)
>>> mean
Mean(statistic=9.0, minmax=(7.103650222612533, 10.896349777387467))
>>> var
Variance(statistic=10.0, minmax=(3.176724206..., 24.45910382...))
>>> std
Std_dev(statistic=2.9724954732045084,
        minmax=(1.7823367265645143, 4.945614605014631))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bayes_mvs.html, scipy.stats.bayes_mvs
">>> n_samples = 100000
>>> data = stats.norm.rvs(size=n_samples)
>>> res_mean, res_var, res_std = stats.bayes_mvs(data, alpha=0.95)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bayes_mvs.html, scipy.stats.bayes_mvs
">>> loc, scale = np.mean(x), np.std(x, ddof=1)
>>> cdf = stats.norm(loc, scale).cdf
>>> stats.ks_1samp(x, cdf)
KstestResult(statistic=0.1119257570456813, pvalue=0.2827756409939257)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.ks_1samp
">>> known_params = {'loc': loc, 'scale': scale}
>>> res = stats.goodness_of_fit(stats.norm, x, known_params=known_params,
...                             statistic='ks', random_state=rng)
>>> res.statistic, res.pvalue
(0.1119257570456813, 0.2788)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.goodness_of_fit
">>> res = stats.goodness_of_fit(stats.norm, x, statistic='ks',
...                             random_state=rng)
>>> res.statistic, res.pvalue
(0.1119257570456813, 0.0196)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.goodness_of_fit
">>> res = stats.anderson(x, 'norm')
>>> print(res.statistic)
1.2139573337497467
>>> print(res.critical_values)
[0.549 0.625 0.75  0.875 1.041]
>>> print(res.significance_level)
[15.  10.   5.   2.5  1. ]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.anderson
">>> res = stats.goodness_of_fit(stats.norm, x, statistic='ad',
...                             random_state=rng)
>>> res.statistic, res.pvalue
(1.2139573337497467, 0.0034)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.goodness_of_fit
">>> rng = np.random.default_rng()
>>> x = stats.chi(df=2.2, loc=0, scale=2).rvs(size=1000, random_state=rng)
>>> res = stats.goodness_of_fit(stats.rayleigh, x, statistic='cvm',
...                             known_params={'loc': 0}, random_state=rng)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.goodness_of_fit.html, scipy.stats.goodness_of_fit
">>> res = stats.siegelslopes(y, x)
>>> lsq_res = stats.linregress(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.siegelslopes.html, scipy.stats.siegelslopes scipy.stats.linregress
">>> from scipy.stats import combine_pvalues
>>> pvalues = [0.1, 0.05, 0.02, 0.3]
>>> combine_pvalues(pvalues)
SignificanceResult(statistic=20.828626352604235, pvalue=0.007616871850449092)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.combine_pvalues.html, scipy.stats.combine_pvalues
">>> weights = [1, 2, 3, 4]
>>> res = combine_pvalues(pvalues, method='stouffer', weights=weights)
>>> res.pvalue
0.009578891494533616
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.combine_pvalues.html, scipy.stats.combine_pvalues
">>> import numpy as np
>>> from scipy.stats import rankdata
>>> rankdata([0, 2, 3, 2])
array([ 1. ,  2.5,  4. ,  2.5])
>>> rankdata([0, 2, 3, 2], method='min')
array([ 1,  2,  4,  2])
>>> rankdata([0, 2, 3, 2], method='max')
array([ 1,  3,  4,  3])
>>> rankdata([0, 2, 3, 2], method='dense')
array([ 1,  2,  3,  2])
>>> rankdata([0, 2, 3, 2], method='ordinal')
array([ 1,  2,  4,  3])
>>> rankdata([[0, 2], [3, 2]]).reshape(2,2)
array([[1. , 2.5],
      [4. , 2.5]])
>>> rankdata([[0, 2, 2], [3, 2, 5]], axis=1)
array([[1. , 2.5, 2.5],
       [2. , 1. , 3. ]])
>>> rankdata([0, 2, 3, np.nan, -2, np.nan], nan_policy=""propagate"")
array([nan, nan, nan, nan, nan, nan])
>>> rankdata([0, 2, 3, np.nan, -2, np.nan], nan_policy=""omit"")
array([ 2.,  3.,  4., nan,  1., nan])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html, scipy.stats.rankdata
">>> from scipy import stats
>>> res = stats.fligner(small_dose, medium_dose, large_dose)
>>> res.statistic
1.3878943408857916
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fligner.html, scipy.stats.fligner
">>> def statistic(*samples):
...     return stats.fligner(*samples).statistic
>>> ref = stats.permutation_test(
...     (small_dose, medium_dose, large_dose), statistic,
...     permutation_type='independent', alternative='greater'
... )
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> bins = np.linspace(0, 8, 25)
>>> ax.hist(
...     ref.null_distribution, bins=bins, density=True, facecolor=""C1""
... )
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'randomized null distribution'])
>>> plot(ax)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fligner.html, scipy.stats.fligner scipy.stats.permutation_test
">>> a = [8.88, 9.12, 9.04, 8.98, 9.00, 9.08, 9.01, 8.85, 9.06, 8.99]
>>> b = [8.88, 8.95, 9.29, 9.44, 9.15, 9.58, 8.36, 9.18, 8.67, 9.05]
>>> c = [8.95, 9.12, 8.95, 8.85, 9.03, 8.84, 9.07, 8.98, 8.86, 8.98]
>>> stat, p = stats.fligner(a, b, c)
>>> p
0.00450826080004775
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fligner.html, scipy.stats.fligner
">>> rng = np.random.default_rng()
>>> x = stats.loggamma.rvs(5, size=30, random_state=rng) + 5
>>> lmax = stats.yeojohnson_normmax(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_normmax.html, scipy.stats.yeojohnson_normmax
">>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> prob = stats.yeojohnson_normplot(x, -10, 10, plot=ax)
>>> ax.axvline(lmax, color='r')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson_normmax.html, scipy.stats.yeojohnson_normplot
">>> from scipy import stats
>>> x = [1, 3, 5, 7, 9]
>>> y = [2, 4, 6, 8, 10]
>>> stats.kruskal(x, y)
KruskalResult(statistic=0.2727272727272734, pvalue=0.6015081344405895)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kruskal.html, scipy.stats.kruskal
">>> x = [1, 1, 1]
>>> y = [2, 2, 2]
>>> z = [2, 2]
>>> stats.kruskal(x, y, z)
KruskalResult(statistic=7.0, pvalue=0.0301973834223185)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kruskal.html, scipy.stats.kruskal
">>> res = stats.theilslopes(y, x, 0.90, method='separate')
>>> lsq_res = stats.linregress(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.theilslopes.html, scipy.stats.theilslopes scipy.stats.linregress
">>> from scipy.stats import multinomial
>>> rv = multinomial(8, [0.3, 0.2, 0.5])
>>> rv.pmf([1, 3, 4])
0.042000000000000072
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.multinomial.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> from scipy import stats
>>> stats.percentileofscore([1, 2, 3, 4], 3)
75.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([1, 2, 3, 3, 4], 3)
70.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='strict')
40.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='weak')
80.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='mean')
60.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([1, 2, 3, 3, 4], [2, 3])
array([40., 70.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([-np.inf, 0, 1, np.inf], [1, 2, np.inf])
array([75., 75., 100.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> stats.percentileofscore([], [1, 2])
array([nan, nan])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.percentileofscore.html, scipy.stats.percentileofscore
">>> rv = trapezoid(c, d)
>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trapezoid.html, scipy.integrate.trapezoid
">>> from scipy.stats import friedmanchisquare
>>> before = [72, 96, 88, 92, 74, 76, 82]
>>> immediately_after = [120, 120, 132, 120, 101, 96, 112]
>>> five_min_after = [76, 95, 104, 96, 84, 72, 76]
>>> res = friedmanchisquare(before, immediately_after, five_min_after)
>>> res.statistic
10.57142857142857
>>> res.pvalue
0.005063414171757498
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.friedmanchisquare.html, scipy.stats.friedmanchisquare
">>> import scipy.linalg
>>> np.fabs(scipy.linalg.det(x))
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ortho_group.html, scipy.linalg.det
">>> rv = t(df)
>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.t.html, scipy.signal.ShortTimeFFT.t
">>> from scipy import stats
>>> res = stats.normaltest(x)
>>> res.statistic
13.034263121192582
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.normaltest.html, scipy.stats.normaltest
">>> def statistic(x, axis):
...     # Get only the `normaltest` statistic; ignore approximate p-value
...     return stats.normaltest(x, axis=axis).statistic
>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic,
...                              alternative='greater')
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> ax.hist(res.null_distribution, np.linspace(0, 25, 50),
...         density=True)
>>> ax.legend(['aymptotic approximation (many observations)',
...            'Monte Carlo approximation (11 observations)'])
>>> ax.set_xlim(0, 14)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.normaltest.html, scipy.stats.normaltest scipy.stats.monte_carlo_test
">>> fig = plt.figure()
>>> ax1 = fig.add_subplot(211)
>>> x = stats.loggamma.rvs(5, size=500) + 5
>>> prob = stats.probplot(x, dist=stats.norm, plot=ax1)
>>> ax1.set_xlabel('')
>>> ax1.set_title('Probplot against normal distribution')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson.html, scipy.stats.probplot
">>> ax2 = fig.add_subplot(212)
>>> xt, lmbda = stats.yeojohnson(x)
>>> prob = stats.probplot(xt, dist=stats.norm, plot=ax2)
>>> ax2.set_title('Probplot after Yeo-Johnson transformation')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.yeojohnson.html, scipy.stats.yeojohnson scipy.stats.probplot
">>> from scipy.stats import chisquare
>>> chisquare(f_obs=f_obs, f_exp=f_exp)
Power_divergenceResult(statistic=228.23515947653874, pvalue=3.3295585338846486e-49)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12])
Power_divergenceResult(statistic=2.0, pvalue=0.84914503608460956)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], f_exp=[16, 16, 16, 16, 16, 8])
Power_divergenceResult(statistic=3.5, pvalue=0.62338762774958223)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T
>>> obs.shape
(6, 2)
>>> chisquare(obs)
Power_divergenceResult(statistic=array([2.        , 6.66666667]), pvalue=array([0.84914504, 0.24663415]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare(obs, axis=None)
Power_divergenceResult(statistic=23.31034482758621, pvalue=0.015975692534127565)
>>> chisquare(obs.ravel())
Power_divergenceResult(statistic=23.310344827586206, pvalue=0.01597569253412758)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], ddof=1)
Power_divergenceResult(statistic=2.0, pvalue=0.7357588823428847)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12], ddof=[0,1,2])
Power_divergenceResult(statistic=2.0, pvalue=array([0.84914504, 0.73575888, 0.5724067 ]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> chisquare([16, 18, 16, 14, 12, 12],
...           f_exp=[[16, 16, 16, 16, 16, 8], [8, 20, 20, 16, 12, 12]],
...           axis=1)
Power_divergenceResult(statistic=array([3.5 , 9.25]), pvalue=array([0.62338763, 0.09949846]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html, scipy.stats.chisquare
">>> rng = np.random.default_rng()
>>> x = stats.loggamma.rvs(5, size=30, random_state=rng) + 5
>>> y, lmax_mle = stats.boxcox(x)
>>> lmax_pearsonr = stats.boxcox_normmax(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normmax.html, scipy.stats.boxcox scipy.stats.boxcox_normmax
">>> lmax_mle
2.217563431465757
>>> lmax_pearsonr
2.238318660200961
>>> stats.boxcox_normmax(x, method='all')
array([2.23831866, 2.21756343])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normmax.html, scipy.stats.boxcox_normmax
">>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> prob = stats.boxcox_normplot(x, -10, 10, plot=ax)
>>> ax.axvline(lmax_mle, color='r')
>>> ax.axvline(lmax_pearsonr, color='g', ls='--')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normmax.html, scipy.stats.boxcox_normplot
">>> from scipy import optimize
>>> options = {'xatol': 1e-12}  # absolute tolerance on `x`
>>> def optimizer(fun):
...     return optimize.minimize_scalar(fun, bounds=(6, 7),
...                                     method=""bounded"", options=options)
>>> stats.boxcox_normmax(x, optimizer=optimizer)
6.000...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normmax.html, scipy.optimize.minimize_scalar scipy.stats.boxcox_normmax
">>> from scipy.stats import obrientransform
>>> tx, ty = obrientransform(x, y)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.obrientransform.html, scipy.stats.obrientransform
">>> from scipy.stats import f_oneway
>>> F, p = f_oneway(tx, ty)
>>> p
0.1314139477040335
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.obrientransform.html, scipy.stats.f_oneway
">>> rv = randint(low, high)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-',
...           lw=1, label='frozen pmf')
>>> ax.legend(loc='lower center')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.randint.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> stats.ks_1samp(stats.uniform.rvs(size=100, random_state=rng),
...                stats.norm.cdf)
KstestResult(statistic=0.5001899973268688, pvalue=1.1616392184763533e-23)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_1samp.html, scipy.stats.ks_1samp
">>> x = stats.norm.rvs(size=100, random_state=rng)
>>> stats.ks_1samp(x, stats.norm.cdf)
KstestResult(statistic=0.05345882212970396, pvalue=0.9227159037744717)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_1samp.html, scipy.stats.ks_1samp
">>> x = stats.norm.rvs(size=100, loc=0.5, random_state=rng)
>>> stats.ks_1samp(x, stats.norm.cdf, alternative='less')
KstestResult(statistic=0.17482387821055168, pvalue=0.001913921057766743)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_1samp.html, scipy.stats.ks_1samp
">>> rng = np.random.default_rng()
>>> x = stats.loggamma.rvs(5, loc=10, size=1000, random_state=rng)
>>> lmbdas = np.linspace(-2, 10)
>>> llf = np.zeros(lmbdas.shape, dtype=float)
>>> for ii, lmbda in enumerate(lmbdas):
...     llf[ii] = stats.boxcox_llf(lmbda, x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_llf.html, scipy.stats.boxcox_llf
">>> x_most_normal, lmbda_optimal = stats.boxcox(x)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_llf.html, scipy.stats.boxcox
">>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> ax.plot(lmbdas, llf, 'b.-')
>>> ax.axhline(stats.boxcox_llf(lmbda_optimal, x), color='r')
>>> ax.set_xlabel('lmbda parameter')
>>> ax.set_ylabel('Box-Cox log-likelihood')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_llf.html, scipy.stats.boxcox_llf
">>> locs = [3, 10, 4]  # 'lower left', 'center', 'lower right'
>>> for lmbda, loc in zip([-1, lmbda_optimal, 9], locs):
...     xt = stats.boxcox(x, lmbda=lmbda)
...     (osm, osr), (slope, intercept, r_sq) = stats.probplot(xt)
...     ax_inset = inset_axes(ax, width=""20%"", height=""20%"", loc=loc)
...     ax_inset.plot(osm, osr, 'c.', osm, slope*osm + intercept, 'k-')
...     ax_inset.set_xticklabels([])
...     ax_inset.set_yticklabels([])
...     ax_inset.set_title(r'$\lambda=%1.2f$' % lmbda)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_llf.html, scipy.stats.boxcox scipy.stats.probplot
">>> import numpy as np
>>> from scipy.stats import variation
>>> variation([1, 2, 3, 4, 5], ddof=1)
0.5270462766947299
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.variation.html, scipy.stats.variation
">>> x = np.array([[  10.0, np.nan, 11.0, 19.0, 23.0, 29.0, 98.0],
...               [  29.0,   30.0, 32.0, 33.0, 35.0, 56.0, 57.0],
...               [np.nan, np.nan, 12.0, 13.0, 16.0, 16.0, 17.0]])
>>> variation(x, axis=1, ddof=1, nan_policy='omit')
array([1.05109361, 0.31428986, 0.146483  ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.variation.html, scipy.stats.variation
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> x = [1, 4, 2, 1, 3, 1]
>>> res = stats.cumfreq(x, numbins=4, defaultreallimits=(1.5, 5))
>>> res.cumcount
array([ 1.,  2.,  3.,  3.])
>>> res.extrapoints
3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cumfreq.html, scipy.stats.cumfreq
">>> res = stats.cumfreq(samples, numbins=25)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cumfreq.html, scipy.stats.cumfreq
">>> rv = zipf(a)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zipf.html, scipy.stats.rv_discrete.pmf
">>> ax1 = plt.subplot(221)
>>> x = stats.t.rvs(3, size=nsample, random_state=rng)
>>> res = stats.probplot(x, plot=plt)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.probplot.html, scipy.stats.probplot
">>> ax2 = plt.subplot(222)
>>> x = stats.t.rvs(25, size=nsample, random_state=rng)
>>> res = stats.probplot(x, plot=plt)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.probplot.html, scipy.stats.probplot
">>> ax3 = plt.subplot(223)
>>> x = stats.norm.rvs(loc=[0,5], scale=[1,1.5],
...                    size=(nsample//2,2), random_state=rng).ravel()
>>> res = stats.probplot(x, plot=plt)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.probplot.html, scipy.stats.probplot
">>> ax4 = plt.subplot(224)
>>> x = stats.norm.rvs(loc=0, scale=1, size=nsample, random_state=rng)
>>> res = stats.probplot(x, plot=plt)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.probplot.html, scipy.stats.probplot
">>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> x = stats.loggamma.rvs(c=2.5, size=500, random_state=rng)
>>> res = stats.probplot(x, dist=stats.loggamma, sparams=(2.5,), plot=ax)
>>> ax.set_title(""Probplot for loggamma dist with shape parameter 2.5"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.probplot.html, scipy.stats.probplot
">>> import numpy as np
>>> from scipy.stats import directional_stats
>>> data = np.array([[3, 4],    # first observation, 2D vector space
...                  [6, -8]])  # second observation
>>> dirstats = directional_stats(data)
>>> dirstats.mean_direction
array([1., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.directional_stats.html, scipy.stats.directional_stats
">>> data = np.array([[0.8660254, 0.5, 0.],
...                  [0.8660254, -0.5, 0.]])
>>> dirstats = directional_stats(data)
>>> dirstats.mean_direction
array([1., 0., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.directional_stats.html, scipy.stats.directional_stats
">>> rv = planck(lambda_)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.planck.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> from scipy import stats
>>> x = [1, 2, 3, 5]
>>> stats.trim_mean(x, 0.25)
2.5
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim_mean.html, scipy.stats.trim_mean
">>> stats.trim_mean(x, 0.24999) == np.mean(x)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim_mean.html, scipy.stats.trim_mean
">>> x2 = [[1, 2, 3, 5],
...       [10, 20, 30, 50]]
>>> stats.trim_mean(x2, 0.25)
array([ 5.5, 11. , 16.5, 27.5])
>>> stats.trim_mean(x2, 0.25, axis=1)
array([ 2.5, 25. ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim_mean.html, scipy.stats.trim_mean
">>> from scipy import stats
>>> res = stats.kurtosistest(x)
>>> res.statistic
2.3048235214240873
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosistest.html, scipy.stats.kurtosistest
">>> def statistic(x, axis):
...     # get just the skewtest statistic; ignore the p-value
...     return stats.kurtosistest(x, axis=axis).statistic
>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic)
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> kt_plot(ax)
>>> ax.hist(res.null_distribution, np.linspace(-5, 5, 50),
...         density=True)
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'Monte Carlo approximation\n(11 observations)'])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosistest.html, scipy.stats.kurtosistest scipy.stats.monte_carlo_test
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> sample1 = stats.uniform.rvs(size=100, random_state=rng)
>>> sample2 = stats.norm.rvs(size=110, random_state=rng)
>>> stats.ks_2samp(sample1, sample2)
KstestResult(statistic=0.5454545454545454, pvalue=7.37417839555191e-15)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_2samp.html, scipy.stats.ks_2samp
">>> sample1 = stats.norm.rvs(size=105, random_state=rng)
>>> sample2 = stats.norm.rvs(size=95, random_state=rng)
>>> stats.ks_2samp(sample1, sample2)
KstestResult(statistic=0.10927318295739348, pvalue=0.5438289009927495)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_2samp.html, scipy.stats.ks_2samp
">>> sample1 = stats.norm.rvs(size=105, loc=0.5, random_state=rng)
>>> stats.ks_2samp(sample1, sample2, alternative='less')
KstestResult(statistic=0.4055137844611529, pvalue=3.5474563068855554e-08)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ks_2samp.html, scipy.stats.ks_2samp
">>> import numpy as np
>>> from scipy.stats import circvar
>>> import matplotlib.pyplot as plt
>>> samples_1 = np.array([0.072, -0.158, 0.077, 0.108, 0.286,
...                       0.133, -0.473, -0.001, -0.348, 0.131])
>>> samples_2 = np.array([0.111, -0.879, 0.078, 0.733, 0.421,
...                       0.104, -0.136, -0.867,  0.012,  0.105])
>>> circvar_1 = circvar(samples_1)
>>> circvar_2 = circvar(samples_2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.circvar.html, scipy.stats.circvar
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tsem(x)
1.3228756555322954
>>> stats.tsem(x, (3,17))
1.1547005383792515
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tsem.html, scipy.stats.tsem
">>> import numpy as np
>>> from scipy import stats
>>> x, y = [1, 2, 3, 4, 5, 6, 7], [10, 9, 2.5, 6, 4, 3, 2]
>>> res = stats.pearsonr(x, y)
>>> res
PearsonRResult(statistic=-0.828503883588428, pvalue=0.021280260007523286)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.pearsonr scipy.stats._result_classes.PearsonRResult
">>> rng = np.random.default_rng()
>>> method = stats.PermutationMethod(n_resamples=np.inf, random_state=rng)
>>> stats.pearsonr(x, y, method=method)
PearsonRResult(statistic=-0.828503883588428, pvalue=0.028174603174603175)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.PermutationMethod scipy.stats.pearsonr scipy.stats._result_classes.PearsonRResult
">>> method = stats.MonteCarloMethod(rvs=(rng.uniform, rng.uniform))
>>> stats.pearsonr(x, y, method=method)
PearsonRResult(statistic=-0.828503883588428, pvalue=0.0188)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.MonteCarloMethod scipy.stats.pearsonr scipy.stats._result_classes.PearsonRResult
">>> method = stats.BootstrapMethod(method='BCa', random_state=rng)
>>> res.confidence_interval(confidence_level=0.9, method=method)
ConfidenceInterval(low=-0.9983163756488651, high=-0.22771001702132443)  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.BootstrapMethod
">>> rng = np.random.default_rng()
>>> s = 0.5
>>> x = stats.norm.rvs(size=500, random_state=rng)
>>> e = stats.norm.rvs(scale=s, size=500, random_state=rng)
>>> y = x + e
>>> stats.pearsonr(x, y).statistic
0.9001942438244763
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.pearsonr
">>> y = np.abs(x)
>>> stats.pearsonr(x, y)
PearsonRResult(statistic=-0.05444919272687482, pvalue=0.22422294836207743)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.pearsonr scipy.stats._result_classes.PearsonRResult
">>> y = np.where(x < 0, x, 0)
>>> stats.pearsonr(x, y)
PearsonRResult(statistic=0.861985781588, pvalue=4.813432002751103e-149)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html, scipy.stats.pearsonr scipy.stats._result_classes.PearsonRResult
">>> rv = multivariate_hypergeom(m=[10, 20], n=12)
>>> rv.pmf(x=[8, 4])
0.0025207176631464523
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.multivariate_hypergeom.html, scipy.stats.rv_discrete.pmf
">>> fig, ax = plt.subplots(figsize=(8, 6))
>>> res = stats.ppcc_plot(x, c/2, 2*c, dist='weibull_min', plot=ax)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ppcc_max.html, scipy.stats.ppcc_plot
">>> cmax = stats.ppcc_max(x, brack=(c/2, 2*c), dist='weibull_min')
>>> ax.axvline(cmax, color='r')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ppcc_max.html, scipy.stats.ppcc_max
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> rvs = stats.uniform.rvs(size=100, random_state=rng)
>>> stats.quantile_test(rvs, q=0.5, p=0.5)
QuantileTestResult(statistic=45, statistic_type=1, pvalue=0.36820161732669576)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> rvs = stats.norm.rvs(size=100, random_state=rng)
>>> stats.quantile_test(rvs, q=0.5, p=0.5)
QuantileTestResult(statistic=67, statistic_type=2, pvalue=0.0008737198369123724)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> stats.quantile_test(rvs, q=0.5, p=0.5, alternative='greater')
QuantileTestResult(statistic=67, statistic_type=1, pvalue=0.9997956114162866)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> rvs = stats.uniform.rvs(size=100, random_state=rng)
>>> stats.quantile_test(rvs, q=0.6, p=0.75, alternative='greater')
QuantileTestResult(statistic=64, statistic_type=1, pvalue=0.00940696592998271)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> rvs = stats.norm.rvs(size=100, random_state=rng)
>>> res = stats.quantile_test(rvs, q=0.6, p=0.75)
>>> ci = res.confidence_interval(confidence_level=0.95)
>>> ci
ConfidenceInterval(low=0.284491604437432, high=0.8912531024914844)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> rvs.sort()
>>> q, p, alpha = 0.6, 0.75, 0.95
>>> res = stats.quantile_test(rvs, q=q, p=p, alternative='less')
>>> ci = res.confidence_interval(confidence_level=alpha)
>>> for x in rvs[rvs <= ci.high]:
...     res = stats.quantile_test(rvs, q=x, p=p, alternative='less')
...     assert res.pvalue > 1-alpha
>>> for x in rvs[rvs > ci.high]:
...     res = stats.quantile_test(rvs, q=x, p=p, alternative='less')
...     assert res.pvalue < 1-alpha
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> dist = stats.rayleigh() # our ""unknown"" distribution
>>> p = 0.2
>>> true_stat = dist.ppf(p) # the true value of the statistic
>>> n_trials = 1000
>>> quantile_ci_contains_true_stat = 0
>>> for i in range(n_trials):
...     data = dist.rvs(size=100, random_state=rng)
...     res = stats.quantile_test(data, p=p)
...     ci = res.confidence_interval(0.95)
...     if ci[0] < true_stat < ci[1]:
...         quantile_ci_contains_true_stat += 1
>>> quantile_ci_contains_true_stat >= 950
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.quantile_test.html, scipy.stats.quantile_test
">>> from scipy import stats
>>> x = stats.CensoredData(
...     uncensored=[6, 13, 21, 30, 37, 38, 49, 50,
...                 63, 79, 86, 98, 202, 219],
...     right=[31, 47, 80, 82, 82, 149]
... )
>>> y = stats.CensoredData(
...     uncensored=[10, 10, 12, 13, 14, 15, 16, 17, 18, 20, 24, 24,
...                 25, 28,30, 33, 35, 37, 40, 40, 46, 48, 76, 81,
...                 82, 91, 112, 181],
...     right=[34, 40, 70]
... )
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.logrank.html, scipy.stats.CensoredData
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> ax = plt.subplot()
>>> ecdf_x = stats.ecdf(x)
>>> ecdf_x.sf.plot(ax, label='Astrocytoma')
>>> ecdf_y = stats.ecdf(y)
>>> ecdf_y.sf.plot(ax, label='Glioblastoma')
>>> ax.set_xlabel('Time to death (weeks)')
>>> ax.set_ylabel('Empirical SF')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.logrank.html, scipy.stats.ecdf
">>> res = stats.logrank(x=x, y=y)
>>> res.statistic
-2.73799...
>>> res.pvalue
0.00618...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.logrank.html, scipy.stats.logrank
">>> from scipy.stats import somersd
>>> table = [[27, 25, 14, 7, 0], [7, 14, 18, 35, 12], [1, 3, 2, 7, 17]]
>>> res = somersd(table)
>>> res.statistic
0.6032766111513396
>>> res.pvalue
1.0007091191074533e-27
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.somersd.html, scipy.stats.somersd
">>> from scipy.stats import hmean
>>> hmean([1, 4])
1.6000000000000001
>>> hmean([1, 2, 3, 4, 5, 6, 7])
2.6997245179063363
>>> hmean([1, 4, 7], weights=[3, 1, 3])
1.9029126213592233
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.hmean.html, scipy.stats.hmean
">>> values = [1.0, 1.0, 2.0, 1.5, 3.0]
>>> stats.binned_statistic([1, 1, 2, 5, 7], values, 'sum', bins=2)
BinnedStatisticResult(statistic=array([4. , 4.5]),
        bin_edges=array([1., 4., 7.]), binnumber=array([1, 1, 1, 2, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html, scipy.stats.binned_statistic
">>> values = [[1.0, 1.0, 2.0, 1.5, 3.0], [2.0, 2.0, 4.0, 3.0, 6.0]]
>>> stats.binned_statistic([1, 1, 2, 5, 7], values, 'sum', bins=2)
BinnedStatisticResult(statistic=array([[4. , 4.5],
       [8. , 9. ]]), bin_edges=array([1., 4., 7.]),
       binnumber=array([1, 1, 1, 2, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html, scipy.stats.binned_statistic
">>> stats.binned_statistic([1, 2, 1, 2, 4], np.arange(5), statistic='mean',
...                        bins=3)
BinnedStatisticResult(statistic=array([1., 2., 4.]),
        bin_edges=array([1., 2., 3., 4.]),
        binnumber=array([1, 2, 1, 2, 3]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html, scipy.stats.binned_statistic
">>> rng = np.random.default_rng()
>>> windspeed = 8 * rng.random(500)
>>> boatspeed = .3 * windspeed**.5 + .2 * rng.random(500)
>>> bin_means, bin_edges, binnumber = stats.binned_statistic(windspeed,
...                 boatspeed, statistic='median', bins=[1,2,3,4,5,6,7])
>>> plt.figure()
>>> plt.plot(windspeed, boatspeed, 'b.', label='raw data')
>>> plt.hlines(bin_means, bin_edges[:-1], bin_edges[1:], colors='g', lw=5,
...            label='binned statistic of data')
>>> plt.legend()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html, scipy.stats.binned_statistic
">>> bin_means, bin_edges, binnumber = stats.binned_statistic(x, x_pdf,
...         statistic='mean', bins=25)
>>> bin_width = (bin_edges[1] - bin_edges[0])
>>> bin_centers = bin_edges[1:] - bin_width/2
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic.html, scipy.stats.binned_statistic
">>> rv = betanbinom(n, a, b)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.betanbinom.html, scipy.stats.rv_discrete.pmf
">>> from scipy.stats import wilcoxon
>>> res = wilcoxon(d)
>>> res.statistic, res.pvalue
(24.0, 0.041259765625)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> res = wilcoxon(d, alternative='greater')
>>> res.statistic, res.pvalue
(96.0, 0.0206298828125)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> res = wilcoxon(d, method='approx')
>>> res.statistic, res.pvalue
(24.0, 0.04088813291185591)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> import numpy as np
>>> x = np.array([0.5, 0.825, 0.375, 0.5])
>>> y = np.array([0.525, 0.775, 0.325, 0.55])
>>> res = wilcoxon(x, y, alternative='greater')
>>> res
WilcoxonResult(statistic=5.0, pvalue=0.5625)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> d = [-0.025, 0.05, 0.05, -0.05]
>>> ref = wilcoxon(d, alternative='greater')
>>> ref
WilcoxonResult(statistic=6.0, pvalue=0.4375)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> d2 = np.around(x - y, decimals=3)
>>> wilcoxon(d2, alternative='greater')
WilcoxonResult(statistic=6.0, pvalue=0.4375)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html, scipy.stats.wilcoxon
">>> import numpy as np
>>> from scipy.stats import iqr
>>> x = np.array([[10, 7, 4], [3, 2, 1]])
>>> x
array([[10,  7,  4],
       [ 3,  2,  1]])
>>> iqr(x)
4.0
>>> iqr(x, axis=0)
array([ 3.5,  2.5,  1.5])
>>> iqr(x, axis=1)
array([ 3.,  1.])
>>> iqr(x, axis=1, keepdims=True)
array([[ 3.],
       [ 1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.iqr.html, scipy.stats.iqr
">>> import numpy as np
>>> from scipy import stats
>>> def statistic(x, axis):
...     return stats.skew(x, axis)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.monte_carlo_test.html, scipy.stats.skew
">>> from scipy.stats import monte_carlo_test
>>> # because our statistic is vectorized, we pass `vectorized=True`
>>> rvs = lambda size: stats.norm.rvs(size=size, random_state=rng)
>>> res = monte_carlo_test(x, rvs, statistic, vectorized=True)
>>> print(res.statistic)
0.12457412450240658
>>> print(res.pvalue)
0.7012
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.monte_carlo_test.html, scipy.stats.monte_carlo_test
">>> stats.skewtest(x).pvalue
0.6892046027110614
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.monte_carlo_test.html, scipy.stats.skewtest
">>> x = stats.skewnorm.rvs(a=1, size=7, random_state=rng)
>>> # stats.skewtest(x) would produce an error due to small sample
>>> res = monte_carlo_test(x, rvs, statistic, vectorized=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.monte_carlo_test.html, scipy.stats.skewtest scipy.stats.monte_carlo_test
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> x = stats.norm.rvs(size=100, random_state=rng)
>>> y = stats.norm.rvs(size=70, random_state=rng)
>>> res = stats.cramervonmises_2samp(x, y)
>>> res.statistic, res.pvalue
(0.29376470588235293, 0.1412873014573014)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises_2samp.html, scipy.stats.cramervonmises_2samp
">>> x = stats.norm.rvs(size=7, random_state=rng)
>>> y = stats.t.rvs(df=2, size=6, random_state=rng)
>>> res = stats.cramervonmises_2samp(x, y, method='exact')
>>> res.statistic, res.pvalue
(0.197802197802198, 0.31643356643356646)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises_2samp.html, scipy.stats.cramervonmises_2samp
">>> res = stats.cramervonmises_2samp(x, y, method='asymptotic')
>>> res.statistic, res.pvalue
(0.197802197802198, 0.2966041181527128)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.cramervonmises_2samp.html, scipy.stats.cramervonmises_2samp
"factorial(n)**m
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.special.factorial
"factorial(m)**n
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.special.factorial
">>> from scipy.stats import permutation_test
>>> # because our statistic is vectorized, we pass `vectorized=True`
>>> # `n_resamples=np.inf` indicates that an exact test is to be performed
>>> res = permutation_test((x, y), statistic, vectorized=True,
...                        n_resamples=np.inf, alternative='less')
>>> print(res.statistic)
-3.5411688580987266
>>> print(res.pvalue)
0.004329004329004329
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.stats.permutation_test
">>> x = norm.rvs(size=100, random_state=rng)
>>> y = norm.rvs(size=120, loc=0.3, random_state=rng)
>>> res = permutation_test((x, y), statistic, n_resamples=100000,
...                        vectorized=True, alternative='less',
...                        random_state=rng)
>>> print(res.statistic)
-0.5230459671240913
>>> print(res.pvalue)
0.00016999830001699983
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.stats.permutation_test
">>> from scipy.stats import ttest_ind
>>> res_asymptotic = ttest_ind(x, y, alternative='less')
>>> print(res_asymptotic.pvalue)
0.00012688101537979522
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.stats.ttest_ind
">>> from scipy.stats import pearsonr
>>> x = [1, 2, 4, 3]
>>> y = [2, 4, 6, 8]
>>> def statistic(x, y):
...     return pearsonr(x, y).statistic
>>> res = permutation_test((x, y), statistic, vectorized=False,
...                        permutation_type='pairings',
...                        alternative='greater')
>>> r, pvalue, null = res.statistic, res.pvalue, res.null_distribution
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.permutation_test.html, scipy.stats.pearsonr scipy.stats.permutation_test
">>> rv = geom(p)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.geom.html, scipy.stats.rv_discrete.pmf
">>> dm = dirichlet_multinomial(alpha, n)
>>> dm.pmf(x)
0.08484162895927579
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.dirichlet_multinomial.html, scipy.stats.rv_discrete.pmf
">>> rv = bernoulli(p)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bernoulli.html, scipy.special.bernoulli scipy.stats.rv_discrete.pmf
">>> d_norm = FastGeneratorInversion(stats.norm(), domain=(0, 1))
>>> d_norm.support()
(0, 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.support.html, scipy.stats.sampling.FastGeneratorInversion scipy.stats.sampling.FastGeneratorInversion.support
">>> d_norm.loc = 2.5
>>> d_norm.support()
(2.5, 3.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.FastGeneratorInversion.support.html, scipy.stats.sampling.FastGeneratorInversion.support
">>> import numpy as np
>>> from scipy.stats import expectile
>>> a = [1, 4, 2, -1]
>>> expectile(a, alpha=0.5) == np.mean(a)
True
>>> expectile(a, alpha=0.2)
0.42857142857142855
>>> expectile(a, alpha=0.8)
2.5714285714285716
>>> weights = [1, 3, 1, 1]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.expectile.html, scipy.stats.expectile
">>> x = stats.loggamma.rvs(5, size=500) + 5
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> prob = stats.boxcox_normplot(x, -20, 20, plot=ax)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normplot.html, scipy.stats.boxcox_normplot
">>> _, maxlog = stats.boxcox(x)
>>> ax.axvline(maxlog, color='r')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox_normplot.html, scipy.stats.boxcox
">>> from scipy.stats import dunnett
>>> res = dunnett(drug_a, drug_b, control=control)
>>> res.pvalue
array([0.62004941, 0.0059035 ])  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.dunnett.html, scipy.stats.dunnett
">>> rv = triang(c)
>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.triang.html, scipy.signal.windows.triang
">>> rv = nchypergeom_fisher(M, n, N, odds)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.nchypergeom_fisher.html, scipy.stats.rv_discrete.pmf
">>> rv = poisson(mu)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.poisson.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> from scipy import stats
>>> a = np.arange(10)
>>> stats.describe(a)
DescribeResult(nobs=10, minmax=(0, 9), mean=4.5,
               variance=9.166666666666666, skewness=0.0,
               kurtosis=-1.2242424242424244)
>>> b = [[1, 2], [3, 4]]
>>> stats.describe(b)
DescribeResult(nobs=2, minmax=(array([1, 2]), array([3, 4])),
               mean=array([2., 3.]), variance=array([2., 2.]),
               skewness=array([0., 0.]), kurtosis=array([-2., -2.]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.describe.html, scipy.stats.describe
">>> import numpy as np
>>> from scipy.stats import ranksums
>>> rng = np.random.default_rng()
>>> sample1 = rng.uniform(-1, 1, 200)
>>> sample2 = rng.uniform(-0.5, 1.5, 300) # a shifted distribution
>>> ranksums(sample1, sample2)
RanksumsResult(statistic=-7.887059,
               pvalue=3.09390448e-15) # may vary
>>> ranksums(sample1, sample2, alternative='less')
RanksumsResult(statistic=-7.750585297581713,
               pvalue=4.573497606342543e-15) # may vary
>>> ranksums(sample1, sample2, alternative='greater')
RanksumsResult(statistic=-7.750585297581713,
               pvalue=0.9999999999999954) # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ranksums.html, scipy.stats.ranksums
">>> bounds = {'n': (6, 6)}  # fix parameter `n`
>>> res3 = stats.fit(dist, data, bounds)
>>> res3.params
FitParams(n=6.0, p=0.5486556076755706, loc=0.0)  # may vary
>>> res3.nllf() > res.nllf()
True  # may vary
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fit.html, scipy.stats._result_classes.FitResult.nllf scipy.stats._result_classes.FitResult.nllf
">>> from scipy.optimize import differential_evolution
>>> rng = np.random.default_rng()
>>> def optimizer(fun, bounds, *, integrality):
...     return differential_evolution(fun, bounds, strategy='best2bin',
...                                   seed=rng, integrality=integrality)
>>> bounds = [(0, 30), (0, 1)]
>>> res4 = stats.fit(dist, data, bounds, optimizer=optimizer)
>>> res4.params
FitParams(n=5.0, p=0.5015183149259951, loc=0.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fit.html, scipy.optimize.differential_evolution
">>> from scipy import stats
>>> res = stats.skewtest(x)
>>> res.statistic
2.7788579769903414
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skewtest.html, scipy.stats.skewtest
">>> def statistic(x, axis):
...     # get just the skewtest statistic; ignore the p-value
...     return stats.skewtest(x, axis=axis).statistic
>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic)
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> st_plot(ax)
>>> ax.hist(res.null_distribution, np.linspace(-5, 5, 50),
...         density=True)
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'Monte Carlo approximation\n(11 observations)'])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skewtest.html, scipy.stats.skewtest scipy.stats.monte_carlo_test
">>> import scipy.stats as stats
>>> res = stats.boschloo_exact([[74, 31], [43, 32]], alternative=""greater"")
>>> res.statistic
0.0483...
>>> res.pvalue
0.0355...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boschloo_exact.html, scipy.stats.boschloo_exact
">>> import numpy as np
>>> from scipy import stats
>>> a = np.arange(20).reshape(5,4)
>>> stats.sem(a)
array([ 2.8284,  2.8284,  2.8284,  2.8284])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sem.html, scipy.stats.sem
">>> stats.sem(a, axis=None, ddof=0)
1.2893796958227628
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sem.html, scipy.stats.sem
">>> ansari(x1, x2)
AnsariResult(statistic=541.0, pvalue=0.9762532927399098)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ansari.html, scipy.stats.ansari
">>> ansari(x1, x3)
AnsariResult(statistic=425.0, pvalue=0.0003087020407974518)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ansari.html, scipy.stats.ansari
">>> ansari(x1, x3, alternative='greater')
AnsariResult(statistic=425.0, pvalue=0.0001543510203987259)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ansari.html, scipy.stats.ansari
">>> ansari(x1, x3, alternative='less')
AnsariResult(statistic=425.0, pvalue=0.9998643258449039)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ansari.html, scipy.stats.ansari
">>> import numpy as np
>>> from scipy import stats
>>> x = [12, 2, 1, 12, 2]
>>> y = [1, 4, 7, 1, 0]
>>> res = stats.weightedtau(x, y)
>>> res.statistic
-0.56694968153682723
>>> res.pvalue
nan
>>> res = stats.weightedtau(x, y, additive=False)
>>> res.statistic
-0.62205716951801038
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.weightedtau.html, scipy.stats.weightedtau
">>> x = [12, 2, 1, 12, 2]
>>> y = [1, 4, 7, 1, np.nan]
>>> res = stats.weightedtau(x, y)
>>> res.statistic
-0.56694968153682723
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.weightedtau.html, scipy.stats.weightedtau
">>> x = [12, 2, 1, 12, 2]
>>> y = [1, 4, 7, 1, 0]
>>> res = stats.weightedtau(x, y, weigher=lambda x: 1)
>>> res.statistic
-0.47140452079103173
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.weightedtau.html, scipy.stats.weightedtau
">>> x = [12, 2, 1, 12, 2]
>>> y = [1, 4, 7, 1, 0]
>>> stats.weightedtau(x, y, rank=None)
SignificanceResult(statistic=-0.4157652301037516, pvalue=nan)
>>> stats.weightedtau(y, x, rank=None)
SignificanceResult(statistic=-0.7181341329699028, pvalue=nan)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.weightedtau.html, scipy.stats.weightedtau
">>> from scipy import stats
>>> res = stats.shapiro(x)
>>> res.statistic
0.7888147830963135
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.shapiro.html, scipy.stats.shapiro
">>> def statistic(x):
...     # Get only the `shapiro` statistic; ignore its p-value
...     return stats.shapiro(x).statistic
>>> ref = stats.monte_carlo_test(x, stats.norm.rvs, statistic,
...                              alternative='less')
>>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> bins = np.linspace(0.65, 1, 50)
>>> def plot(ax):  # we'll reuse this
...     ax.hist(ref.null_distribution, density=True, bins=bins)
...     ax.set_title(""Shapiro-Wilk Test Null Distribution \n""
...                  ""(Monte Carlo Approximation, 11 Observations)"")
...     ax.set_xlabel(""statistic"")
...     ax.set_ylabel(""probability density"")
>>> plot(ax)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.shapiro.html, scipy.stats.shapiro scipy.stats.monte_carlo_test
">>> rv = laplace()
>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.laplace.html, scipy.ndimage.laplace
">>> import matplotlib.pyplot as plt
>>> from scipy.stats import bootstrap
>>> data = (data,)  # samples must be in a sequence
>>> res = bootstrap(data, np.std, confidence_level=0.9,
...                 random_state=rng)
>>> fig, ax = plt.subplots()
>>> ax.hist(res.bootstrap_distribution, bins=25)
>>> ax.set_title('Bootstrap Distribution')
>>> ax.set_xlabel('statistic value')
>>> ax.set_ylabel('frequency')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
">>> n_trials = 1000
>>> ci_contains_true_std = 0
>>> for i in range(n_trials):
...    data = (dist.rvs(size=100, random_state=rng),)
...    ci = bootstrap(data, np.std, confidence_level=0.9, n_resamples=1000,
...                   random_state=rng).confidence_interval
...    if ci[0] < std_true < ci[1]:
...        ci_contains_true_std += 1
>>> print(ci_contains_true_std)
875
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
">>> data = (dist.rvs(size=(n_trials, 100), random_state=rng),)
>>> res = bootstrap(data, np.std, axis=-1, confidence_level=0.9,
...                 n_resamples=1000, random_state=rng)
>>> ci_l, ci_u = res.confidence_interval
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
">>> from scipy.stats import mood
>>> def my_statistic(sample1, sample2, axis):
...     statistic, _ = mood(sample1, sample2, axis=-1)
...     return statistic
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.mood
">>> sample1 = norm.rvs(scale=1, size=100, random_state=rng)
>>> sample2 = norm.rvs(scale=2, size=100, random_state=rng)
>>> data = (sample1, sample2)
>>> res = bootstrap(data, my_statistic, method='basic', random_state=rng)
>>> print(mood(sample1, sample2)[0])  # element 0 is the statistic
-5.521109549096542
>>> print(res.confidence_interval)
ConfidenceInterval(low=-7.255994487314675, high=-4.016202624747605)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap scipy.stats.mood
">>> from scipy.stats import pearsonr
>>> n = 100
>>> x = np.linspace(0, 10, n)
>>> y = x + rng.uniform(size=n)
>>> print(pearsonr(x, y)[0])  # element 0 is the statistic
0.9962357936065914
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.pearsonr
">>> def my_statistic(x, y):
...     return pearsonr(x, y)[0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.pearsonr
">>> res = bootstrap((x, y), my_statistic, vectorized=False, paired=True,
...                 random_state=rng)
>>> print(res.confidence_interval)
ConfidenceInterval(low=0.9950085825848624, high=0.9971212407917498)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
">>> len(res.bootstrap_distribution)
9999
>>> res = bootstrap((x, y), my_statistic, vectorized=False, paired=True,
...                 n_resamples=1001, random_state=rng,
...                 bootstrap_result=res)
>>> len(res.bootstrap_distribution)
11000
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
">>> res2 = bootstrap((x, y), my_statistic, vectorized=False, paired=True,
...                  n_resamples=0, random_state=rng, bootstrap_result=res,
...                  method='percentile', confidence_level=0.9)
>>> np.testing.assert_equal(res2.bootstrap_distribution,
...                         res.bootstrap_distribution)
>>> res.confidence_interval
ConfidenceInterval(low=0.9950035351407804, high=0.9971170323404578)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bootstrap.html, scipy.stats.bootstrap
"func(x: ArrayLike) -> ArrayLike
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sobol_indices.html, scipy.interpolate.RectBivariateSpline
"func(f_A: np.ndarray, f_B: np.ndarray, f_AB: np.ndarray)
-> Tuple[np.ndarray, np.ndarray]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sobol_indices.html, scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy.stats import sobol_indices, uniform
>>> rng = np.random.default_rng()
>>> def f_ishigami(x):
...     f_eval = (
...         np.sin(x[0])
...         + 7 * np.sin(x[1])**2
...         + 0.1 * (x[2]**4) * np.sin(x[0])
...     )
...     return f_eval
>>> indices = sobol_indices(
...     func=f_ishigami, n=1024,
...     dists=[
...         uniform(loc=-np.pi, scale=2*np.pi),
...         uniform(loc=-np.pi, scale=2*np.pi),
...         uniform(loc=-np.pi, scale=2*np.pi)
...     ],
...     random_state=rng
... )
>>> indices.first_order
array([0.31637954, 0.43781162, 0.00318825])
>>> indices.total_order
array([0.56122127, 0.44287857, 0.24229595])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sobol_indices.html, scipy.stats.sobol_indices
">>> boot = indices.bootstrap()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sobol_indices.html, scipy.stats.bootstrap
">>> from scipy.stats import qmc
>>> n_dim = 3
>>> p_labels = ['$x_1$', '$x_2$', '$x_3$']
>>> sample = qmc.Sobol(d=n_dim, seed=rng).random(1024)
>>> sample = qmc.scale(
...     sample=sample,
...     l_bounds=[-np.pi, -np.pi, -np.pi],
...     u_bounds=[np.pi, np.pi, np.pi]
... )
>>> output = f_ishigami(sample.T)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sobol_indices.html, scipy.stats.qmc.Sobol scipy.sparse.random scipy.stats.qmc.scale
">>> from scipy.stats import moment
>>> moment([1, 2, 3, 4, 5], order=1)
0.0
>>> moment([1, 2, 3, 4, 5], order=2)
2.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.moment.html, scipy.stats.moment
">>> rv = betabinom(n, a, b)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.betabinom.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> stats.kstest(stats.uniform.rvs(size=100, random_state=rng),
...              stats.norm.cdf)
KstestResult(statistic=0.5001899973268688, pvalue=1.1616392184763533e-23)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstest.html, scipy.stats.kstest
">>> x = stats.norm.rvs(size=100, random_state=rng)
>>> stats.kstest(x, stats.norm.cdf)
KstestResult(statistic=0.05345882212970396, pvalue=0.9227159037744717)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstest.html, scipy.stats.kstest
">>> x = stats.norm.rvs(size=100, loc=0.5, random_state=rng)
>>> stats.kstest(x, stats.norm.cdf, alternative='less')
KstestResult(statistic=0.17482387821055168, pvalue=0.001913921057766743)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstest.html, scipy.stats.kstest
">>> stats.kstest(x, ""norm"", alternative='less')
KstestResult(statistic=0.17482387821055168, pvalue=0.001913921057766743)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstest.html, scipy.stats.kstest
">>> sample1 = stats.laplace.rvs(size=105, random_state=rng)
>>> sample2 = stats.laplace.rvs(size=95, random_state=rng)
>>> stats.kstest(sample1, sample2)
KstestResult(statistic=0.11779448621553884, pvalue=0.4494256912629795)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kstest.html, scipy.stats.kstest
">>> from scipy import ndimage
>>> import numpy as np
>>> input = np.zeros((8, 8), dtype=int)
>>> input[2, 2] = 1
>>> mask = np.zeros((8, 8), dtype=int)
>>> mask[1:4, 1:4] = mask[4, 4]  = mask[6:8, 6:8] = 1
>>> input
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0]])
>>> mask
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 1, 1]])
>>> ndimage.binary_propagation(input, mask=mask).astype(int)
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.binary_propagation(input, mask=mask,\
... structure=np.ones((3,3))).astype(int)
array([[0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 1, 1, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_propagation.html, scipy.ndimage.binary_propagation
">>> # Comparison between opening and erosion+propagation
>>> a = np.zeros((6,6), dtype=int)
>>> a[2:5, 2:5] = 1; a[0, 0] = 1; a[5, 5] = 1
>>> a
array([[1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 1]])
>>> ndimage.binary_opening(a).astype(int)
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0]])
>>> b = ndimage.binary_erosion(a)
>>> b.astype(int)
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0]])
>>> ndimage.binary_propagation(b, mask=a).astype(int)
array([[0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_propagation.html, scipy.ndimage.binary_opening scipy.ndimage.binary_erosion scipy.sparse.csr_matrix.astype scipy.ndimage.binary_propagation
">>> from scipy.stats import rv_discrete
>>> class poisson_gen(rv_discrete):
...     ""Poisson distribution""
...     def _pmf(self, k, mu):
...         return exp(-mu) * mu**k / factorial(k)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_discrete.html, scipy.special.factorial
">>> import numpy as np
>>> from scipy import stats
>>> xk = np.arange(7)
>>> pk = (0.1, 0.2, 0.3, 0.1, 0.1, 0.0, 0.2)
>>> custm = stats.rv_discrete(name='custm', values=(xk, pk))
>>>
>>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots(1, 1)
>>> ax.plot(xk, custm.pmf(xk), 'ro', ms=12, mec='r')
>>> ax.vlines(xk, 0, custm.pmf(xk), colors='r', lw=4)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_discrete.html, scipy.stats.rv_discrete scipy.stats.rv_discrete.pmf
">>> R = custm.rvs(size=100)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_discrete.html, scipy.stats.rv_discrete.rvs
">>> res = tukey_hsd(group0, group1, group2)
>>> print(res)
Tukey's HSD Pairwise Group Comparisons (95.0% Confidence Interval)
Comparison  Statistic  p-value   Lower CI   Upper CI
(0 - 1)     -4.600      0.014     -8.249     -0.951
(0 - 2)     -0.260      0.980     -3.909      3.389
(1 - 0)      4.600      0.014      0.951      8.249
(1 - 2)      4.340      0.020      0.691      7.989
(2 - 0)      0.260      0.980     -3.389      3.909
(2 - 1)     -4.340      0.020     -7.989     -0.691
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tukey_hsd.html, scipy.stats.tukey_hsd
">>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]
>>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]
>>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]
>>> result = tukey_hsd(group0, group1, group2)
>>> conf = res.confidence_interval(confidence_level=.99)
>>> for ((i, j), l) in np.ndenumerate(conf.low):
...     # filter out self comparisons
...     if i != j:
...         h = conf.high[i,j]
...         print(f""({i} - {j}) {l:>6.3f} {h:>6.3f}"")
(0 - 1) -9.480  0.280
(0 - 2) -5.140  4.620
(1 - 0) -0.280  9.480
(1 - 2) -0.540  9.220
(2 - 0) -4.620  5.140
(2 - 1) -9.220  0.540
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tukey_hsd.html, scipy.stats.tukey_hsd
">>> import scipy.linalg
>>> scipy.linalg.det(x)
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.special_ortho_group.html, scipy.linalg.det
">>> import numpy as np
>>> from scipy.stats import norm, kurtosis
>>> data = norm.rvs(size=1000, random_state=3)
>>> kurtosis(data)
-0.06928694200380558
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html, scipy.stats.kurtosis
">>> for distname in distnames:
...     if distname == 'uniform':
...         dist = getattr(stats, distname)(loc=-2, scale=4)
...     else:
...         dist = getattr(stats, distname)
...     data = dist.rvs(size=1000)
...     kur = kurtosis(data, fisher=True)
...     y = dist.pdf(x)
...     ax.plot(x, y, label=""{}, {}"".format(distname, round(kur, 3)))
...     ax.legend()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html, scipy.stats.kurtosis
">>> from scipy import ndimage, datasets
>>> import numpy.fft
>>> import matplotlib.pyplot as plt
>>> fig, (ax1, ax2) = plt.subplots(1, 2)
>>> plt.gray()  # show the filtered result in grayscale
>>> ascent = datasets.ascent()
>>> input_ = numpy.fft.fft2(ascent)
>>> result = ndimage.fourier_gaussian(input_, sigma=4)
>>> result = numpy.fft.ifft2(result)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result.real)  # the imaginary part is an artifact
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.fourier_gaussian.html, scipy.datasets.ascent scipy.ndimage.fourier_gaussian
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> a = np.array([2, 4, 1, 2, 3, 2])
>>> res = stats.relfreq(a, numbins=4)
>>> res.frequency
array([ 0.16666667, 0.5       , 0.16666667,  0.16666667])
>>> np.sum(res.frequency)  # relative frequencies should add up to 1
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.relfreq.html, scipy.stats.relfreq
">>> res = stats.relfreq(samples, numbins=25)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.relfreq.html, scipy.stats.relfreq
">>> from scipy.interpolate import interp1d
>>> rng = np.random.default_rng()
>>> xs = np.linspace(a, b, 50)
>>> cdf = studentized_range.cdf(xs, k, df)
# Create an interpolant of the inverse CDF
>>> ppf = interp1d(cdf, xs, fill_value='extrapolate')
# Perform inverse transform sampling using the interpolant
>>> r = ppf(rng.uniform(size=1000))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.studentized_range.html, scipy.interpolate.interp1d scipy.interpolate.interp1d
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tmin(x)
0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmin.html, scipy.stats.tmin
">>> stats.tmin(x, 13)
13
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmin.html, scipy.stats.tmin
">>> stats.tmin(x, 13, inclusive=False)
14
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tmin.html, scipy.stats.tmin
">>> from scipy import stats
>>> res = stats.spearmanr(x, y)
>>> res.statistic
0.7000000000000001
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html, scipy.stats.spearmanr
">>> res = stats.spearmanr(x, y, alternative='greater')
>>> res.statistic
0.7000000000000001  # same statistic
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> pvalue = dist.sf(transformed)
>>> annotation = (f'p-value={pvalue:.6f}\n(shaded area)')
>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)
>>> _ = ax.annotate(annotation, (3, 0.018), (3.5, 0.03), arrowprops=props)
>>> i = t_vals >= transformed
>>> ax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')
>>> ax.set_xlim(1, 5)
>>> ax.set_ylim(0, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html, scipy.stats.spearmanr
">>> def statistic(x):  # explore all possible pairings by permuting `x`
...     rs = stats.spearmanr(x, y).statistic  # ignore pvalue
...     transformed = rs * np.sqrt(dof / ((rs+1.0)*(1.0-rs)))
...     return transformed
>>> ref = stats.permutation_test((x,), statistic, alternative='greater',
...                              permutation_type='pairings')
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> ax.hist(ref.null_distribution, np.linspace(-5, 5, 26),
...         density=True)
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            f'exact \n({len(ref.null_distribution)} permutations)'])
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html, scipy.stats.spearmanr scipy.stats.permutation_test
">>> import numpy as np
>>> from scipy.stats import ttest_ind_from_stats
>>> ttest_ind_from_stats(mean1=15.0, std1=np.sqrt(87.5), nobs1=13,
...                      mean2=12.0, std2=np.sqrt(39.0), nobs2=11)
Ttest_indResult(statistic=0.9051358093310269, pvalue=0.3751996797581487)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind_from_stats.html, scipy.stats.ttest_ind_from_stats
">>> a = np.array([1, 3, 4, 6, 11, 13, 15, 19, 22, 24, 25, 26, 26])
>>> b = np.array([2, 4, 6, 9, 11, 13, 14, 15, 18, 19, 21])
>>> from scipy.stats import ttest_ind
>>> ttest_ind(a, b)
Ttest_indResult(statistic=0.905135809331027, pvalue=0.3751996797581486)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind_from_stats.html, scipy.stats.ttest_ind
">>> ttest_ind_from_stats(mean1=0.2, std1=np.sqrt(0.161073), nobs1=150,
...                      mean2=0.225, std2=np.sqrt(0.175251), nobs2=200)
Ttest_indResult(statistic=-0.5627187905196761, pvalue=0.5739887114209541)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind_from_stats.html, scipy.stats.ttest_ind_from_stats
">>> group1 = np.array([1]*30 + [0]*(150-30))
>>> group2 = np.array([1]*45 + [0]*(200-45))
>>> ttest_ind(group1, group2)
Ttest_indResult(statistic=-0.5627179589855622, pvalue=0.573989277115258)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_ind_from_stats.html, scipy.stats.ttest_ind
">>> from scipy.ndimage import uniform_filter1d
>>> uniform_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)
array([4, 3, 4, 1, 4, 6, 6, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.uniform_filter1d.html, scipy.ndimage.uniform_filter1d
">>> import numpy as np
>>> points = np.array([[0, 0], [0, 1.1], [1, 0], [1, 1]])
>>> from scipy.spatial import Delaunay
>>> tri = Delaunay(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html, scipy.spatial.Delaunay
">>> p = np.array([(0.1, 0.2), (1.5, 0.5), (0.5, 1.05)])
>>> tri.find_simplex(p)
array([ 1, -1, 1], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html, scipy.spatial.Delaunay.find_simplex
">>> p_valids = np.array([(0.1, 0.2), (0.5, 1.05)])
>>> tri.simplices[tri.find_simplex(p_valids)]
array([[3, 1, 0],                 # may vary
       [3, 1, 0]], dtype=int32)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html, scipy.spatial.Delaunay.find_simplex
">>> b = tri.transform[1,:2].dot(np.transpose(p - tri.transform[1,2]))
>>> np.c_[np.transpose(b), 1 - b.sum(axis=0)]
array([[ 0.1       ,  0.09090909,  0.80909091],
       [ 1.5       , -0.90909091,  0.40909091],
       [ 0.5       ,  0.5       ,  0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Delaunay.html, scipy.sparse.csr_matrix.sum
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> ascent = datasets.ascent()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_laplace.html, scipy.datasets.ascent
">>> result = ndimage.gaussian_laplace(ascent, sigma=1)
>>> ax1.imshow(result)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_laplace.html, scipy.ndimage.gaussian_laplace
">>> result = ndimage.gaussian_laplace(ascent, sigma=3)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_laplace.html, scipy.ndimage.gaussian_laplace
">>> from scipy.spatial import minkowski_distance_p
>>> minkowski_distance_p([[0, 0], [0, 0]], [[1, 1], [0, 1]])
array([2, 1])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.minkowski_distance_p.html, scipy.spatial.minkowski_distance_p
">>> slerp = Slerp(key_times, key_rots)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html, scipy.spatial.transform.Slerp
">>> times = [0, 0.5, 0.25, 1, 1.5, 2, 2.75, 3, 3.25, 3.60, 4]
>>> interp_rots = slerp(times)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html, scipy.spatial.transform.Slerp
">>> key_rots.as_euler('xyz', degrees=True)
array([[ 14.31443779, -27.50095894,  -3.7275787 ],
       [ -1.79924227, -24.69421529, 164.57701743],
       [146.15020772,  43.22849451, -31.34891088],
       [ 46.39959442,  11.62126073, -45.99719267],
       [-88.94647804, -49.64400082, -65.80546984]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html, scipy.spatial.transform.Rotation.as_euler
">>> interp_rots.as_euler('xyz', degrees=True)
array([[  14.31443779,  -27.50095894,   -3.7275787 ],
       [   4.74588574,  -32.44683966,   81.25139984],
       [  10.71094749,  -31.56690154,   38.06896408],
       [  -1.79924227,  -24.69421529,  164.57701743],
       [  11.72796022,   51.64207311, -171.7374683 ],
       [ 146.15020772,   43.22849451,  -31.34891088],
       [  68.10921869,   20.67625074,  -48.74886034],
       [  46.39959442,   11.62126073,  -45.99719267],
       [  12.35552615,    4.21525086,  -64.89288124],
       [ -30.08117143,  -19.90769513,  -78.98121326],
       [ -88.94647804,  -49.64400082,  -65.80546984]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Slerp.html, scipy.spatial.transform.Rotation.as_euler
">>> import numpy as np
>>> points = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2],
...                    [2, 0], [2, 1], [2, 2]])
>>> from scipy.spatial import Voronoi, voronoi_plot_2d
>>> vor = Voronoi(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html, scipy.spatial.Voronoi
">>> import matplotlib.pyplot as plt
>>> fig = voronoi_plot_2d(vor)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html, scipy.spatial.voronoi_plot_2d
">>> a = np.array([[1, 3], [1, 2], [1, 1], [2, 1]], 'd')
>>> b = np.array([[4, -2], [4, -4], [4, -6], [2, -6]], 'd')
>>> mtx1, mtx2, disparity = procrustes(a, b)
>>> round(disparity)
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.procrustes.html, scipy.spatial.procrustes
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> ascent = datasets.ascent().astype('int32')
>>> sobel_h = ndimage.sobel(ascent, 0)  # horizontal gradient
>>> sobel_v = ndimage.sobel(ascent, 1)  # vertical gradient
>>> magnitude = np.sqrt(sobel_h**2 + sobel_v**2)
>>> magnitude *= 255.0 / np.max(magnitude)  # normalization
>>> fig, axs = plt.subplots(2, 2, figsize=(8, 8))
>>> plt.gray()  # show the filtered result in grayscale
>>> axs[0, 0].imshow(ascent)
>>> axs[0, 1].imshow(sobel_h)
>>> axs[1, 0].imshow(sobel_v)
>>> axs[1, 1].imshow(magnitude)
>>> titles = [""original"", ""horizontal"", ""vertical"", ""magnitude""]
>>> for i, ax in enumerate(axs.ravel()):
...     ax.set_title(titles[i])
...     ax.axis(""off"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.sobel.html, scipy.datasets.ascent scipy.ndimage.sobel
">>> times = [0, 10, 20, 40]
>>> angles = [[-10, 20, 30], [0, 15, 40], [-30, 45, 30], [20, 45, 90]]
>>> rotations = Rotation.from_euler('XYZ', angles, degrees=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.RotationSpline.html, scipy.spatial.transform.Rotation.from_euler
">>> spline = RotationSpline(times, rotations)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.RotationSpline.html, scipy.spatial.transform.RotationSpline
">>> angular_rate = np.rad2deg(spline(times, 1))
>>> angular_acceleration = np.rad2deg(spline(times, 2))
>>> times_plot = np.linspace(times[0], times[-1], 100)
>>> angles_plot = spline(times_plot).as_euler('XYZ', degrees=True)
>>> angular_rate_plot = np.rad2deg(spline(times_plot, 1))
>>> angular_acceleration_plot = np.rad2deg(spline(times_plot, 2))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.RotationSpline.html, scipy.spatial.transform.RotationSpline scipy.spatial.transform.Rotation.as_euler
">>> radius = 1
>>> center = np.array([0, 0, 0])
>>> sv = SphericalVoronoi(points, radius, center)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.SphericalVoronoi.html, scipy.spatial.SphericalVoronoi
">>> # sort vertices (optional, helpful for plotting)
>>> sv.sort_vertices_of_regions()
>>> t_vals = np.linspace(0, 1, 2000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111, projection='3d')
>>> # plot the unit sphere for reference (optional)
>>> u = np.linspace(0, 2 * np.pi, 100)
>>> v = np.linspace(0, np.pi, 100)
>>> x = np.outer(np.cos(u), np.sin(v))
>>> y = np.outer(np.sin(u), np.sin(v))
>>> z = np.outer(np.ones(np.size(u)), np.cos(v))
>>> ax.plot_surface(x, y, z, color='y', alpha=0.1)
>>> # plot generator points
>>> ax.scatter(points[:, 0], points[:, 1], points[:, 2], c='b')
>>> # plot Voronoi vertices
>>> ax.scatter(sv.vertices[:, 0], sv.vertices[:, 1], sv.vertices[:, 2],
...                    c='g')
>>> # indicate Voronoi regions (as Euclidean polygons)
>>> for region in sv.regions:
...    n = len(region)
...    for i in range(n):
...        start = sv.vertices[region][i]
...        end = sv.vertices[region][(i + 1) % n]
...        result = geometric_slerp(start, end, t_vals)
...        ax.plot(result[..., 0],
...                result[..., 1],
...                result[..., 2],
...                c='k')
>>> ax.azim = 10
>>> ax.elev = 40
>>> _ = ax.set_xticks([])
>>> _ = ax.set_yticks([])
>>> _ = ax.set_zticks([])
>>> fig.set_size_inches(4, 4)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.SphericalVoronoi.html, scipy.spatial.geometric_slerp
">>> from scipy.spatial import distance_matrix
>>> distance_matrix([[0,0],[0,1]], [[1,0],[1,1]])
array([[ 1.        ,  1.41421356],
       [ 1.41421356,  1.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance_matrix.html, scipy.spatial.distance_matrix
">>> import numpy as np
>>> from scipy.spatial import geometric_slerp
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> start = np.array([1, 0])
>>> end = np.array([0, 1])
>>> t_vals = np.linspace(0, 1, 4)
>>> result = geometric_slerp(start,
...                          end,
...                          t_vals)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.geometric_slerp.html, scipy.spatial.geometric_slerp
">>> opposite_pole = np.array([-1, 0])
>>> with np.testing.suppress_warnings() as sup:
...     sup.filter(UserWarning)
...     geometric_slerp(start,
...                     opposite_pole,
...                     t_vals)
array([[ 1.00000000e+00,  0.00000000e+00],
       [ 5.00000000e-01,  8.66025404e-01],
       [-5.00000000e-01,  8.66025404e-01],
       [-1.00000000e+00,  1.22464680e-16]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.geometric_slerp.html, scipy.spatial.geometric_slerp
">>> start = np.array([1, 0, 0])
>>> end = np.array([0, 0, 1])
>>> t_vals = np.linspace(0, 1, 200)
>>> result = geometric_slerp(start,
...                          end,
...                          t_vals)
>>> ax.plot(result[...,0],
...         result[...,1],
...         result[...,2],
...         c='k')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.geometric_slerp.html, scipy.spatial.geometric_slerp
">>> from scipy.spatial import ConvexHull, convex_hull_plot_2d
>>> import numpy as np
>>> rng = np.random.default_rng()
>>> points = rng.random((30, 2))   # 30 random points in 2-D
>>> hull = ConvexHull(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html, scipy.spatial.ConvexHull
">>> hull = ConvexHull(points=generators,
...                   qhull_options='QG4')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html, scipy.spatial.ConvexHull
">>> fig = plt.figure()
>>> ax = fig.add_subplot(1,1,1)
>>> for visible_facet in hull.simplices[hull.good]:
...     ax.plot(hull.points[visible_facet, 0],
...             hull.points[visible_facet, 1],
...             color='violet',
...             lw=6)
>>> convex_hull_plot_2d(hull, ax=ax)
     # may vary
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html, scipy.spatial.convex_hull_plot_2d
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.uniform_filter(ascent, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.uniform_filter.html, scipy.datasets.ascent scipy.ndimage.uniform_filter
">>> ndimage.minimum_position(a)
(2, 0)
>>> ndimage.minimum_position(b)
(0, 2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum_position.html, scipy.ndimage.minimum_position
">>> label, pos = ndimage.label(a)
>>> ndimage.minimum_position(a, label, index=np.arange(1, pos+1))
[(2, 0)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum_position.html, scipy.ndimage.label scipy.ndimage.minimum_position
">>> label, pos = ndimage.label(b)
>>> ndimage.minimum_position(b, label, index=np.arange(1, pos+1))
[(0, 0), (0, 3), (3, 1)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum_position.html, scipy.ndimage.label scipy.ndimage.minimum_position
">>> from scipy import ndimage
>>> input =  [0,1,2,3]
>>> labels = [1,1,2,2]
>>> ndimage.sum_labels(input, labels, index=[1,2])
[1.0, 5.0]
>>> ndimage.sum_labels(input, labels, index=1)
1
>>> ndimage.sum_labels(input, labels)
6
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.sum_labels.html, scipy.ndimage.sum_labels
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.arange(36).reshape((6,6))
>>> a[3,3] = 0
>>> a
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20,  0, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
>>> ndimage.grey_closing(a, size=(3,3))
array([[ 7,  7,  8,  9, 10, 11],
       [ 7,  7,  8,  9, 10, 11],
       [13, 13, 14, 15, 16, 17],
       [19, 19, 20, 20, 22, 23],
       [25, 25, 26, 27, 28, 29],
       [31, 31, 32, 33, 34, 35]])
>>> # Note that the local minimum a[3,3] has disappeared
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.grey_closing.html, scipy.ndimage.grey_closing
">>> import numpy as np
>>> from scipy import ndimage
>>> a = np.zeros((6, 6), dtype=int)
>>> a[2:4, 2:4] = 1
>>> a[4, 4] = 1
>>> a[:2, :3] = 2
>>> a[0, 5] = 3
>>> a
array([[2, 2, 2, 0, 0, 3],
       [2, 2, 2, 0, 0, 0],
       [0, 0, 1, 1, 0, 0],
       [0, 0, 1, 1, 0, 0],
       [0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0]])
>>> val_indices = ndimage.value_indices(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.value_indices.html, scipy.ndimage.value_indices
">>> val_indices = ndimage.value_indices(a, ignore_value=0)
>>> val_indices.keys()
dict_keys([1, 2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.value_indices.html, scipy.ndimage.value_indices
">>> rng = np.random.default_rng()
>>> points = rng.random((30, 2))
>>> tri = Delaunay(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.delaunay_plot_2d.html, scipy.spatial.Delaunay
">>> _ = delaunay_plot_2d(tri)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.delaunay_plot_2d.html, scipy.spatial.delaunay_plot_2d
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> x2 = rng.standard_normal((2, 45, 6, 7))
>>> x1 = rng.standard_normal((2, 30, 6, 7))
>>> res = stats.mood(x1, x2, axis=1)
>>> res.pvalue.shape
(2, 6, 7)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mood.html, scipy.stats.mood
">>> x1 = rng.standard_normal((2, 30))
>>> x2 = rng.standard_normal((2, 35)) * 10.0
>>> stats.mood(x1, x2, axis=1)
SignificanceResult(statistic=array([-5.76174136, -6.12650783]),
                   pvalue=array([8.32505043e-09, 8.98287869e-10]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mood.html, scipy.stats.mood
">>> from scipy.spatial import minkowski_distance
>>> minkowski_distance([[0, 0], [0, 0]], [[1, 1], [0, 1]])
array([ 1.41421356,  1.        ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.minkowski_distance.html, scipy.spatial.minkowski_distance
">>> from scipy.ndimage import maximum_filter1d
>>> maximum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)
array([8, 8, 8, 4, 9, 9, 9, 9])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_filter1d.html, scipy.ndimage.maximum_filter1d
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> ascent = datasets.ascent()
>>> prewitt_h = ndimage.prewitt(ascent, axis=0)
>>> prewitt_v = ndimage.prewitt(ascent, axis=1)
>>> magnitude = np.sqrt(prewitt_h ** 2 + prewitt_v ** 2)
>>> magnitude *= 255 / np.max(magnitude) # Normalization
>>> fig, axes = plt.subplots(2, 2, figsize = (8, 8))
>>> plt.gray()
>>> axes[0, 0].imshow(ascent)
>>> axes[0, 1].imshow(prewitt_h)
>>> axes[1, 0].imshow(prewitt_v)
>>> axes[1, 1].imshow(magnitude)
>>> titles = [""original"", ""horizontal"", ""vertical"", ""magnitude""]
>>> for i, ax in enumerate(axes.ravel()):
...     ax.set_title(titles[i])
...     ax.axis(""off"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.prewitt.html, scipy.datasets.ascent scipy.ndimage.prewitt
">>> pts = rng.random((20, 2))
>>> tri = Delaunay(pts)
>>> _ = delaunay_plot_2d(tri)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.tsearch.html, scipy.spatial.Delaunay scipy.spatial.delaunay_plot_2d
">>> loc = rng.uniform(0.2, 0.8, (5, 2))
>>> s = tsearch(tri, loc)
>>> plt.triplot(pts[:, 0], pts[:, 1], tri.simplices[s], 'b-', mask=s==-1)
>>> plt.scatter(loc[:, 0], loc[:, 1], c='r', marker='x')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.tsearch.html, scipy.spatial.tsearch
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> rvs = stats.uniform.rvs(size=50, random_state=rng)
>>> stats.ttest_1samp(rvs, popmean=0.5)
TtestResult(statistic=2.456308468440, pvalue=0.017628209047638, df=49)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp scipy.stats._result_classes.TtestResult
">>> rvs = stats.norm.rvs(size=50, random_state=rng)
>>> stats.ttest_1samp(rvs, popmean=0.5)
TtestResult(statistic=-7.433605518875, pvalue=1.416760157221e-09, df=49)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp scipy.stats._result_classes.TtestResult
">>> stats.ttest_1samp(rvs, popmean=0.5, alternative='greater')
TtestResult(statistic=-7.433605518875, pvalue=0.99999999929, df=49)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp scipy.stats._result_classes.TtestResult
">>> rvs = stats.uniform.rvs(size=(100, 50), random_state=rng)
>>> res = stats.ttest_1samp(rvs, popmean=0.5, axis=1)
>>> np.sum(res.pvalue < 0.01)
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp
">>> rvs = stats.norm.rvs(size=50, random_state=rng)
>>> res = stats.ttest_1samp(rvs, popmean=0)
>>> ci = res.confidence_interval(confidence_level=0.95)
>>> ci
ConfidenceInterval(low=-0.3193887540880017, high=0.2898583388980972)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp
">>> res = stats.ttest_1samp(rvs, popmean=ci.low)
>>> np.testing.assert_allclose(res.pvalue, 0.05)
>>> res = stats.ttest_1samp(rvs, popmean=ci.high)
>>> np.testing.assert_allclose(res.pvalue, 0.05)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp
">>> rvs = stats.norm.rvs(size=(50, 1000), loc=1, random_state=rng)
>>> res = stats.ttest_1samp(rvs, popmean=0)
>>> ci = res.confidence_interval()
>>> contains_pop_mean = (ci.low < 1) & (ci.high > 1)
>>> contains_pop_mean.sum()
953
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html, scipy.stats.ttest_1samp
">>> from scipy.spatial import HalfspaceIntersection
>>> import numpy as np
>>> halfspaces = np.array([[-1, 0., 0.],
...                        [0., -1., 0.],
...                        [2., 1., -4.],
...                        [-0.5, 1., -2.]])
>>> feasible_point = np.array([0.5, 0.5])
>>> hs = HalfspaceIntersection(halfspaces, feasible_point)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.HalfspaceIntersection.html, scipy.spatial.HalfspaceIntersection
">>> from scipy.optimize import linprog
>>> from matplotlib.patches import Circle
>>> norm_vector = np.reshape(np.linalg.norm(halfspaces[:, :-1], axis=1),
...     (halfspaces.shape[0], 1))
>>> c = np.zeros((halfspaces.shape[1],))
>>> c[-1] = -1
>>> A = np.hstack((halfspaces[:, :-1], norm_vector))
>>> b = - halfspaces[:, -1:]
>>> res = linprog(c, A_ub=A, b_ub=b, bounds=(None, None))
>>> x = res.x[:-1]
>>> y = res.x[-1]
>>> circle = Circle(x, radius=y, alpha=0.3)
>>> ax.add_patch(circle)
>>> plt.legend(bbox_to_anchor=(1.6, 1.0))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.HalfspaceIntersection.html, scipy.optimize.linprog
">>> def statistic(x):  # explore all possible pairings by permuting `x`
...     return stats.kendalltau(x, y).statistic  # ignore pvalue
>>> ref = stats.permutation_test((x,), statistic,
...                              permutation_type='pairings')
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> bins = np.linspace(-1.25, 1.25, 25)
>>> ax.hist(ref.null_distribution, bins=bins, density=True)
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'exact null distribution'])
>>> plot(ax)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kendalltau.html, scipy.stats.permutation_test
">>> rng = np.random.default_rng()
>>> points = rng.random((30, 2))
>>> hull = ConvexHull(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.convex_hull_plot_2d.html, scipy.spatial.ConvexHull
">>> _ = convex_hull_plot_2d(hull)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.convex_hull_plot_2d.html, scipy.spatial.convex_hull_plot_2d
">>> import scipy.stats
>>> import numpy as np
>>> data = scipy.stats.norm.rvs(size=100000, loc=0, scale=1.5,
...                             random_state=123)
>>> hist = np.histogram(data, bins=100)
>>> hist_dist = scipy.stats.rv_histogram(hist, density=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_histogram.html, scipy.stats.rv_histogram
">>> vor = Voronoi(points)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.voronoi_plot_2d.html, scipy.spatial.Voronoi
">>> fig = voronoi_plot_2d(vor)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.voronoi_plot_2d.html, scipy.spatial.voronoi_plot_2d
">>> fig = voronoi_plot_2d(vor, show_vertices=False, line_colors='orange',
...                       line_width=2, line_alpha=0.6, point_size=2)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.voronoi_plot_2d.html, scipy.spatial.voronoi_plot_2d
">>> rv = logser(p)
>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,
...         label='frozen pmf')
>>> ax.legend(loc='best', frameon=False)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.logser.html, scipy.stats.rv_discrete.pmf
">>> import numpy as np
>>> a = np.array(([0,0,0,0],
...               [0,1,1,0],
...               [0,1,1,0],
...               [0,1,1,0]))
>>> from scipy import ndimage
>>> ndimage.center_of_mass(a)
(2.0, 1.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html, scipy.ndimage.center_of_mass
">>> b = np.array(([0,1,1,0],
...               [0,1,0,0],
...               [0,0,0,0],
...               [0,0,1,1],
...               [0,0,1,1]))
>>> lbl = ndimage.label(b)[0]
>>> ndimage.center_of_mass(b, lbl, [1,2])
[(0.33333333333333331, 1.3333333333333333), (3.5, 2.5)]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html, scipy.ndimage.label scipy.ndimage.center_of_mass
">>> c = np.array(([-1,0,0,0],
...               [0,-1,-1,0],
...               [0,1,-1,0],
...               [0,1,1,0]))
>>> ndimage.center_of_mass(c)
(-4.0, 1.0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html, scipy.ndimage.center_of_mass
">>> d = np.array([-1, 1])
>>> ndimage.center_of_mass(d)
(inf,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html, scipy.ndimage.center_of_mass
">>> import numpy as np
>>> a = np.arange(16).reshape((4,4))
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
>>> labels = np.zeros_like(a)
>>> labels[:2,:2] = 1
>>> labels[2:, 1:3] = 2
>>> labels
array([[1, 1, 0, 0],
       [1, 1, 0, 0],
       [0, 2, 2, 0],
       [0, 2, 2, 0]])
>>> from scipy import ndimage
>>> ndimage.maximum(a)
15.0
>>> ndimage.maximum(a, labels=labels, index=[1,2])
[5.0, 14.0]
>>> ndimage.maximum(a, labels=labels)
14.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum.html, scipy.ndimage.maximum
">>> b = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> labels, labels_nb = ndimage.label(b)
>>> labels
array([[1, 1, 0, 0],
       [1, 1, 0, 2],
       [0, 0, 0, 2],
       [3, 3, 0, 0]])
>>> ndimage.maximum(b, labels=labels, index=np.arange(1, labels_nb + 1))
[5.0, 7.0, 9.0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum.html, scipy.ndimage.label scipy.ndimage.maximum
">>> from scipy.ndimage import correlate1d
>>> correlate1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])
array([ 8, 26,  8, 12,  7, 28, 36,  9])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.correlate1d.html, scipy.ndimage.correlate1d
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.maximum_filter(ascent, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_filter.html, scipy.datasets.ascent scipy.ndimage.maximum_filter
">>> from scipy import ndimage, datasets
>>> import numpy.fft
>>> import matplotlib.pyplot as plt
>>> fig, (ax1, ax2) = plt.subplots(1, 2)
>>> plt.gray()  # show the filtered result in grayscale
>>> ascent = datasets.ascent()
>>> input_ = numpy.fft.fft2(ascent)
>>> result = ndimage.fourier_uniform(input_, size=20)
>>> result = numpy.fft.ifft2(result)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result.real)  # the imaginary part is an artifact
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.fourier_uniform.html, scipy.datasets.ascent scipy.ndimage.fourier_uniform
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.array(([0,1,1,1,1],
...               [0,0,1,1,1],
...               [0,1,1,1,1],
...               [0,1,1,1,0],
...               [0,1,1,0,0]))
>>> ndimage.distance_transform_edt(a)
array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],
       [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],
       [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],
       [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],
       [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_edt.html, scipy.ndimage.distance_transform_edt
">>> ndimage.distance_transform_edt(a, sampling=[2,1])
array([[ 0.    ,  1.    ,  2.    ,  2.8284,  3.6056],
       [ 0.    ,  0.    ,  1.    ,  2.    ,  3.    ],
       [ 0.    ,  1.    ,  2.    ,  2.2361,  2.    ],
       [ 0.    ,  1.    ,  2.    ,  1.    ,  0.    ],
       [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_edt.html, scipy.ndimage.distance_transform_edt
">>> edt, inds = ndimage.distance_transform_edt(a, return_indices=True)
>>> inds
array([[[0, 0, 1, 1, 3],
        [1, 1, 1, 1, 3],
        [2, 2, 1, 3, 3],
        [3, 3, 4, 4, 3],
        [4, 4, 4, 4, 4]],
       [[0, 0, 1, 1, 4],
        [0, 1, 1, 1, 4],
        [0, 0, 1, 4, 4],
        [0, 0, 3, 3, 4],
        [0, 0, 3, 3, 4]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_edt.html, scipy.ndimage.distance_transform_edt
">>> indices = np.zeros(((np.ndim(a),) + a.shape), dtype=np.int32)
>>> ndimage.distance_transform_edt(a, return_indices=True, indices=indices)
array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],
       [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],
       [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],
       [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],
       [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])
>>> indices
array([[[0, 0, 1, 1, 3],
        [1, 1, 1, 1, 3],
        [2, 2, 1, 3, 3],
        [3, 3, 4, 4, 3],
        [4, 4, 4, 4, 4]],
       [[0, 0, 1, 1, 4],
        [0, 1, 1, 1, 4],
        [0, 0, 1, 4, 4],
        [0, 0, 3, 3, 4],
        [0, 0, 3, 3, 4]]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_edt.html, scipy.ndimage.distance_transform_edt
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.median_filter(ascent, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.median_filter.html, scipy.datasets.ascent scipy.ndimage.median_filter
">>> import numpy as np
>>> from scipy import stats
>>> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> stats.trim1(a, 0.2, 'left')
array([2, 4, 3, 5, 6, 7, 8, 9])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim1.html, scipy.stats.trim1
">>> b = np.arange(10)
>>> stats.trim1(b, 1/4).shape
(8,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim1.html, scipy.stats.trim1
">>> c = [2, 4, 6, 8, 0, 1, 3, 5, 7, 9]
>>> d = np.array([a, b, c])
>>> stats.trim1(d, 0.8, axis=0).shape
(1, 10)
>>> stats.trim1(d, 0.8, axis=1).shape
(3, 2)
>>> stats.trim1(d, 0.8, axis=None).shape
(6,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.trim1.html, scipy.stats.trim1
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((5, 5), dtype=int)
>>> a[1:4, 1:4] = 1
>>> a[2,2] = 0
>>> a
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> ndimage.binary_fill_holes(a).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> # Too big structuring element
>>> ndimage.binary_fill_holes(a, structure=np.ones((5,5))).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_fill_holes.html, scipy.ndimage.binary_fill_holes
">>> g1 = [10, 14, 14, 18, 20, 22, 24, 25, 31, 31, 32, 39, 43, 43, 48, 49]
>>> g2 = [28, 30, 31, 33, 34, 35, 36, 40, 44, 55, 57, 61, 91, 92, 99]
>>> g3 = [0, 3, 9, 22, 23, 25, 25, 33, 34, 34, 40, 45, 46, 48, 62, 67, 84]
>>> from scipy.stats import median_test
>>> res = median_test(g1, g2, g3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.median_test.html, scipy.stats.median_test
">>> res = median_test(g1, g2, g3, lambda_=""log-likelihood"")
>>> res.pvalue
0.12224779737117837
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.median_test.html, scipy.stats.median_test
">>> res = median_test(g1, g2, g3, ties=""above"")
>>> res.pvalue
0.063873276069553273
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.median_test.html, scipy.stats.median_test
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tstd(x)
5.9160797830996161
>>> stats.tstd(x, (3,17))
4.4721359549995796
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tstd.html, scipy.stats.tstd
">>> from scipy import stats
>>> res = stats.levene(small_dose, medium_dose, large_dose)
>>> res.statistic
0.6457341109631506
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.levene.html, scipy.stats.levene
">>> def statistic(*samples):
...     return stats.levene(*samples).statistic
>>> ref = stats.permutation_test(
...     (small_dose, medium_dose, large_dose), statistic,
...     permutation_type='independent', alternative='greater'
... )
>>> fig, ax = plt.subplots(figsize=(8, 5))
>>> plot(ax)
>>> bins = np.linspace(0, 5, 25)
>>> ax.hist(
...     ref.null_distribution, bins=bins, density=True, facecolor=""C1""
... )
>>> ax.legend(['aymptotic approximation\n(many observations)',
...            'randomized null distribution'])
>>> plot(ax)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.levene.html, scipy.stats.levene scipy.stats.permutation_test
">>> a = [8.88, 9.12, 9.04, 8.98, 9.00, 9.08, 9.01, 8.85, 9.06, 8.99]
>>> b = [8.88, 8.95, 9.29, 9.44, 9.15, 9.58, 8.36, 9.18, 8.67, 9.05]
>>> c = [8.95, 9.12, 8.95, 8.85, 9.03, 8.84, 9.07, 8.98, 8.86, 8.98]
>>> stat, p = stats.levene(a, b, c)
>>> p
0.002431505967249681
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.levene.html, scipy.stats.levene
">>> fig = plt.figure()
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.zoom(ascent, 3.0)
>>> ax1.imshow(ascent, vmin=0, vmax=255)
>>> ax2.imshow(result, vmin=0, vmax=255)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.zoom.html, scipy.datasets.ascent scipy.ndimage.zoom
">>> import numpy as np
>>> from scipy import stats
>>> x = np.arange(20)
>>> stats.tvar(x)
35.0
>>> stats.tvar(x, (3,17))
20.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.tvar.html, scipy.stats.tvar
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((7,7), dtype=int)
>>> a[1, 1] = 1; a[2:4, 2:4] = 1; a[4:6, 4:6] = 1
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 0, 0, 0],
       [0, 0, 1, 1, 0, 0, 0],
       [0, 0, 0, 0, 1, 1, 0],
       [0, 0, 0, 0, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> structure1 = np.array([[1, 0, 0], [0, 1, 1], [0, 1, 1]])
>>> structure1
array([[1, 0, 0],
       [0, 1, 1],
       [0, 1, 1]])
>>> # Find the matches of structure1 in the array a
>>> ndimage.binary_hit_or_miss(a, structure1=structure1).astype(int)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> # Change the origin of the filter
>>> # origin1=1 is equivalent to origin1=(1,1) here
>>> ndimage.binary_hit_or_miss(a, structure1=structure1,\
... origin1=1).astype(int)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_hit_or_miss.html, scipy.ndimage.binary_hit_or_miss
">>> correlate(input_img, weights)
array([[  6,  10,  15,  20,  24],
    [ 26,  30,  35,  40,  44],
    [ 51,  55,  60,  65,  69],
    [ 76,  80,  85,  90,  94],
    [ 96, 100, 105, 110, 114]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.correlate.html, scipy.ndimage.correlate
">>> from scipy.stats import zmap
>>> a = [0.5, 2.0, 2.5, 3]
>>> b = [0, 1, 2, 3, 4]
>>> zmap(a, b)
array([-1.06066017,  0.        ,  0.35355339,  0.70710678])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.zmap.html, scipy.stats.zmap
">>> r = R.from_quat([0, 0, np.sin(np.pi/4), np.cos(np.pi/4)])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_matrix([[0, -1, 0],
...                    [1, 0, 0],
...                    [0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_matrix
">>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_euler('z', 90, degrees=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('zyx', [
... [90, 0, 0],
... [0, 45, 0],
... [45, 60, 30]], degrees=True)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_euler
">>> r.as_quat()
array([[0.        , 0.        , 0.70710678, 0.70710678],
       [0.        , 0.38268343, 0.        , 0.92387953],
       [0.39190384, 0.36042341, 0.43967974, 0.72331741]])
>>> p = r[0]
>>> p.as_matrix()
array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
>>> q = r[1:3]
>>> q.as_quat()
array([[0.        , 0.38268343, 0.        , 0.92387953],
       [0.39190384, 0.36042341, 0.43967974, 0.72331741]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.as_matrix scipy.spatial.transform.Rotation.as_quat
">>> r_array = np.asarray(r)
>>> r_array.shape
(3,)
>>> r_array[0].as_matrix()
array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.as_matrix
">>> r1 = R.from_euler('z', 90, degrees=True)
>>> r2 = R.from_rotvec([np.pi/4, 0, 0])
>>> v = [1, 2, 3]
>>> r2.apply(r1.apply(v))
array([-2.        , -1.41421356,  2.82842712])
>>> r3 = r2 * r1 # Note the order
>>> r3.apply(v)
array([-2.        , -1.41421356,  2.82842712])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_euler scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.apply scipy.spatial.transform.Rotation.apply scipy.spatial.transform.Rotation.apply
">>> p = R.from_rotvec([1, 0, 0])
>>> q = p ** 2
>>> q.as_rotvec()
array([2., 0., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> r1 = R.from_euler('z', [90, 45], degrees=True)
>>> r2 = r1.inv()
>>> r2.as_euler('zyx', degrees=True)
array([[-90.,   0.,   0.],
       [-45.,   0.,   0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_euler scipy.spatial.transform.Rotation.as_euler
">>> r0 = R.identity()
>>> r1 = R.from_euler(""ZYX"", [90, -30, 0], degrees=True)  # intrinsic
>>> r2 = R.from_euler(""zyx"", [90, -30, 0], degrees=True)  # extrinsic
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html, scipy.spatial.transform.Rotation.from_euler
">>> from scipy.stats import bws_test
>>> res = bws_test(x, y)
>>> print(res.statistic)
5.132167152575315
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.bws_test.html, scipy.stats.bws_test
">>> import numpy as np
>>> from scipy.stats import power_divergence
>>> power_divergence([16, 18, 16, 14, 12, 12], lambda_='log-likelihood')
(2.006573162632538, 0.84823476779463769)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> power_divergence([16, 18, 16, 14, 12, 12],
...                  f_exp=[16, 16, 16, 16, 16, 8],
...                  lambda_='log-likelihood')
(3.3281031458963746, 0.6495419288047497)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T
>>> obs.shape
(6, 2)
>>> power_divergence(obs, lambda_=""log-likelihood"")
(array([ 2.00657316,  6.77634498]), array([ 0.84823477,  0.23781225]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> power_divergence(obs, axis=None)
(23.31034482758621, 0.015975692534127565)
>>> power_divergence(obs.ravel())
(23.31034482758621, 0.015975692534127565)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> power_divergence([16, 18, 16, 14, 12, 12], ddof=1)
(2.0, 0.73575888234288467)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> power_divergence([16, 18, 16, 14, 12, 12], ddof=[0,1,2])
(2.0, array([ 0.84914504,  0.73575888,  0.5724067 ]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> power_divergence([16, 18, 16, 14, 12, 12],
...                  f_exp=[[16, 16, 16, 16, 16, 8],
...                         [8, 20, 20, 16, 12, 12]],
...                  axis=1)
(array([ 3.5 ,  9.25]), array([ 0.62338763,  0.09949846]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.power_divergence.html, scipy.stats.power_divergence
">>> from scipy.ndimage import minimum_filter1d
>>> minimum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)
array([2, 0, 0, 0, 1, 1, 0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum_filter1d.html, scipy.ndimage.minimum_filter1d
">>> import numpy
>>> numpy.test(label='slow')
",https://numpy.org/doc/stable/reference/testing.html, numpy.test
">>> numpy.test(label='full', verbose=2)  # or numpy.test('full', 2)
",https://numpy.org/doc/stable/reference/testing.html, numpy.test
">>> functions = [(""test_bytes"", ""METH_O"", """"""
    if ( !PyBytesCheck(args)) {
        Py_RETURN_FALSE;
    }
    Py_RETURN_TRUE;
"""""")]
>>> mod = build_and_import_extension(""testme"", functions)
>>> assert not mod.test_bytes(u'abc')
>>> assert mod.test_bytes(b'abc')
",https://numpy.org/doc/stable/reference/testing.html, numpy.testing.extbuild.build_and_import_extension
">>> import test_yyy
>>> test_yyy.test()
",https://numpy.org/doc/stable/reference/testing.html, numpy.test
"...
def test(level=1, verbosity=1):
    from numpy.testing import Tester
    return Tester().test(level, verbosity)
",https://numpy.org/doc/stable/reference/testing.html, numpy.test
">>> import numpy
>>> numpy.test()
# your tests are included and run automatically!
",https://numpy.org/doc/stable/reference/testing.html, numpy.test
"class LinalgTestCase:
    def test_single(self):
        a = array([[1., 2.], [3., 4.]], dtype=single)
        b = array([2., 1.], dtype=single)
        self.do(a, b)

    def test_double(self):
        a = array([[1., 2.], [3., 4.]], dtype=double)
        b = array([2., 1.], dtype=double)
        self.do(a, b)

    ...

class TestSolve(LinalgTestCase):
    def do(self, a, b):
        x = linalg.solve(a, b)
        assert_allclose(b, dot(a, x))
        assert imply(isinstance(b, matrix), isinstance(x, matrix))

class TestInv(LinalgTestCase):
    def do(self, a, b):
        a_inv = linalg.inv(a)
        assert_allclose(dot(a, a_inv), identity(asarray(a).shape[0]))
        assert imply(isinstance(a, matrix), isinstance(a_inv, matrix))
",https://numpy.org/doc/stable/reference/testing.html, scipy.linalg.solve scipy.linalg.inv
"derivative(input, axis, output, mode, cval,
           *extra_arguments, **extra_keywords)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_gradient_magnitude.html, scipy.misc.derivative
">>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> from scipy import ndimage
>>> lbl, nlbl = ndimage.label(a)
>>> lbls = np.arange(1, nlbl+1)
>>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, 0)
array([ 2.75,  5.5 ,  6.  ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.labeled_comprehension.html, scipy.ndimage.label scipy.ndimage.labeled_comprehension
">>> lbls = np.arange(1, nlbl+2)
>>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, -1)
array([ 2.75,  5.5 ,  6.  , -1.  ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.labeled_comprehension.html, scipy.ndimage.labeled_comprehension
">>> def fn(val, pos):
...     print(""fn says: %s : %s"" % (val, pos))
...     return (val.sum()) if (pos.sum() % 2 == 0) else (-val.sum())
...
>>> ndimage.labeled_comprehension(a, lbl, lbls, fn, float, 0, True)
fn says: [1 2 5 3] : [0 1 4 5]
fn says: [4 7] : [ 7 11]
fn says: [9 3] : [12 13]
array([ 11.,  11., -12.,   0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.labeled_comprehension.html, scipy.ndimage.labeled_comprehension
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure(figsize=(10, 3))
>>> ax1, ax2, ax3 = fig.subplots(1, 3)
>>> img = datasets.ascent()
>>> img_45 = ndimage.rotate(img, 45, reshape=False)
>>> full_img_45 = ndimage.rotate(img, 45, reshape=True)
>>> ax1.imshow(img, cmap='gray')
>>> ax1.set_axis_off()
>>> ax2.imshow(img_45, cmap='gray')
>>> ax2.set_axis_off()
>>> ax3.imshow(full_img_45, cmap='gray')
>>> ax3.set_axis_off()
>>> fig.set_layout_engine('tight')
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.rotate.html, scipy.datasets.ascent scipy.ndimage.rotate
">>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> k = np.array([[1,1,1],[1,1,0],[1,0,0]])
>>> from scipy import ndimage
>>> ndimage.convolve(a, k, mode='constant', cval=0.0)
array([[11, 10,  7,  4],
       [10,  3, 11, 11],
       [15, 12, 14,  7],
       [12,  3,  7,  0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html, scipy.ndimage.convolve
">>> ndimage.convolve(a, k, mode='constant', cval=1.0)
array([[13, 11,  8,  7],
       [11,  3, 11, 14],
       [16, 12, 14, 10],
       [15,  6, 10,  5]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html, scipy.ndimage.convolve
">>> b = np.array([[2, 0, 0],
...               [1, 0, 0],
...               [0, 0, 0]])
>>> k = np.array([[0,1,0], [0,1,0], [0,1,0]])
>>> ndimage.convolve(b, k, mode='reflect')
array([[5, 0, 0],
       [3, 0, 0],
       [1, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html, scipy.ndimage.convolve
">>> k = np.array([[1,0,0],[0,1,0],[0,0,1]])
>>> ndimage.convolve(b, k)
array([[4, 2, 0],
       [3, 2, 0],
       [1, 1, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html, scipy.ndimage.convolve
">>> c = np.array([[2, 0, 1],
...               [1, 0, 0],
...               [0, 0, 0]])
>>> k = np.array([[0, 1, 0],
...               [0, 1, 0],
...               [0, 1, 0],
...               [0, 1, 0],
...               [0, 1, 0]])
>>> ndimage.convolve(c, k, mode='nearest')
array([[7, 0, 3],
       [5, 0, 2],
       [3, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve.html, scipy.ndimage.convolve
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.gaussian_gradient_magnitude(ascent, sigma=5)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_gradient_magnitude.html, scipy.datasets.ascent scipy.ndimage.gaussian_gradient_magnitude
">>> distance_transform_euclidean = distance_transform_bf(image)
>>> euclidean_transform = grid[1].imshow(distance_transform_euclidean,
...                                      cmap='gray')
>>> cbar_euclidean = grid.cbar_axes[1].colorbar(euclidean_transform)
>>> colorbar_ticks = [0, 10, 20]
>>> cbar_euclidean.set_ticks(colorbar_ticks)
>>> grid[1].set_title(""Euclidean distance"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_bf.html, scipy.ndimage.distance_transform_bf
">>> distance_transform_taxicab = distance_transform_bf(image,
...                                                    metric='taxicab')
>>> taxicab_transformation = grid[2].imshow(distance_transform_taxicab,
...                                         cmap='gray')
>>> cbar_taxicab = grid.cbar_axes[2].colorbar(taxicab_transformation)
>>> cbar_taxicab.set_ticks(colorbar_ticks)
>>> grid[2].set_title(""Taxicab distance"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_bf.html, scipy.ndimage.distance_transform_bf
">>> distance_transform_cb = distance_transform_bf(image,
...                                               metric='chessboard')
>>> chessboard_transformation = grid[3].imshow(distance_transform_cb,
...                                            cmap='gray')
>>> cbar_taxicab = grid.cbar_axes[3].colorbar(chessboard_transformation)
>>> cbar_taxicab.set_ticks(colorbar_ticks)
>>> grid[3].set_title(""Chessboard distance"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_bf.html, scipy.ndimage.distance_transform_bf
">>> from scipy import ndimage, datasets
>>> import numpy.fft
>>> import matplotlib.pyplot as plt
>>> fig, (ax1, ax2) = plt.subplots(1, 2)
>>> plt.gray()  # show the filtered result in grayscale
>>> ascent = datasets.ascent()
>>> input_ = numpy.fft.fft2(ascent)
>>> result = ndimage.fourier_ellipsoid(input_, size=20)
>>> result = numpy.fft.ifft2(result)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result.real)  # the imaginary part is an artifact
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.fourier_ellipsoid.html, scipy.datasets.ascent scipy.ndimage.fourier_ellipsoid
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.minimum_filter(ascent, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum_filter.html, scipy.datasets.ascent scipy.ndimage.minimum_filter
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.rank_filter(ascent, rank=42, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.rank_filter.html, scipy.datasets.ascent scipy.ndimage.rank_filter
">>> from scipy.ndimage import gaussian_filter1d
>>> import numpy as np
>>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 1)
array([ 1.42704095,  2.06782203,  3.        ,  3.93217797,  4.57295905])
>>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 4)
array([ 2.91948343,  2.95023502,  3.        ,  3.04976498,  3.08051657])
>>> import matplotlib.pyplot as plt
>>> rng = np.random.default_rng()
>>> x = rng.standard_normal(101).cumsum()
>>> y3 = gaussian_filter1d(x, 3)
>>> y6 = gaussian_filter1d(x, 6)
>>> plt.plot(x, 'k', label='original data')
>>> plt.plot(y3, '--', label='filtered, sigma=3')
>>> plt.plot(y6, ':', label='filtered, sigma=6')
>>> plt.legend()
>>> plt.grid()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter1d.html, scipy.ndimage.gaussian_filter1d
">>> from scipy.ndimage import label, generate_binary_structure
>>> import numpy as np
>>> a = np.array([[0,0,1,1,0,0],
...               [0,0,0,1,0,0],
...               [1,1,0,0,1,0],
...               [0,0,0,1,0,0]])
>>> labeled_array, num_features = label(a)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.label.html, scipy.ndimage.label
">>> s = generate_binary_structure(2,2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.label.html, scipy.ndimage.generate_binary_structure
">>> labeled_array, num_features = label(a, structure=s)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.label.html, scipy.ndimage.label
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> labels, labels_nb = ndimage.label(a)
>>> labels
array([[1, 1, 0, 0],
       [1, 1, 0, 2],
       [0, 0, 0, 2],
       [3, 3, 0, 0]])
>>> ndimage.minimum(a, labels=labels, index=np.arange(1, labels_nb + 1))
[1.0, 4.0, 3.0]
>>> ndimage.minimum(a)
0.0
>>> ndimage.minimum(a, labels=labels)
1.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.minimum.html, scipy.ndimage.label scipy.ndimage.minimum
">>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> from scipy import ndimage
>>> ndimage.extrema(a)
(0, 9, (0, 2), (3, 0))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.extrema.html, scipy.ndimage.extrema
">>> lbl, nlbl = ndimage.label(a)
>>> ndimage.extrema(a, lbl, index=np.arange(1, nlbl+1))
(array([1, 4, 3]),
 array([5, 7, 9]),
 [(0, 0), (1, 3), (3, 1)],
 [(1, 0), (2, 3), (3, 0)])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.extrema.html, scipy.ndimage.label scipy.ndimage.extrema
">>> ndimage.extrema(a, lbl)
(1, 9, (0, 0), (3, 0))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.extrema.html, scipy.ndimage.extrema
">>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> from scipy import ndimage
>>> ndimage.variance(a)
7.609375
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.variance.html, scipy.ndimage.variance
">>> lbl, nlbl = ndimage.label(a)
>>> ndimage.variance(a, lbl, index=np.arange(1, nlbl+1))
array([ 2.1875,  2.25  ,  9.    ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.variance.html, scipy.ndimage.label scipy.ndimage.variance
">>> ndimage.variance(a, lbl)
6.1875
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.variance.html, scipy.ndimage.variance
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.percentile_filter(ascent, percentile=20, size=20)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.percentile_filter.html, scipy.datasets.ascent scipy.ndimage.percentile_filter
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.array([[1, 2, 0, 1],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> labels, labels_nb = ndimage.label(a)
>>> labels
array([[1, 1, 0, 2],
       [1, 1, 0, 2],
       [0, 0, 0, 2],
       [3, 3, 0, 0]])
>>> ndimage.median(a, labels=labels, index=np.arange(1, labels_nb + 1))
[2.5, 4.0, 6.0]
>>> ndimage.median(a)
1.0
>>> ndimage.median(a, labels=labels)
3.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.median.html, scipy.ndimage.label scipy.ndimage.median
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = ndimage.laplace(ascent)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.laplace.html, scipy.datasets.ascent scipy.ndimage.laplace
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.arange(25).reshape((5,5))
>>> labels = np.zeros_like(a)
>>> labels[3:5,3:5] = 1
>>> index = np.unique(labels)
>>> labels
array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 1, 1],
       [0, 0, 0, 1, 1]])
>>> index
array([0, 1])
>>> ndimage.mean(a, labels=labels, index=index)
[10.285714285714286, 21.0]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.mean.html, scipy.ndimage.mean
">>> urng = np.random.default_rng()
>>> dist = StdNorm()
>>> rng = SimpleRatioUniforms(dist, mode=0,
...                           pdf_area=np.sqrt(2*np.pi),
...                           random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_srou.html, scipy.stats.sampling.SimpleRatioUniforms
">>> rvs = rng.rvs(10)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_srou.html, scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> from scipy.stats import norm
>>> rng = SimpleRatioUniforms(dist, mode=0,
...                           pdf_area=np.sqrt(2*np.pi),
...                           cdf_at_mode=norm.cdf(0),
...                           random_state=urng)
>>> rvs = rng.rvs(1000)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_srou.html, scipy.stats.sampling.SimpleRatioUniforms scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> from scipy.stats.sampling import SimpleRatioUniforms
>>> from scipy.stats import norm
>>> import matplotlib.pyplot as plt
>>> class StdNorm:
...     def pdf(self, x):
...         return np.exp(-0.5 * x**2)
...
>>> urng = np.random.default_rng()
>>> dist = StdNorm()
>>> rng = SimpleRatioUniforms(dist, mode=0,
...                           pdf_area=np.sqrt(2*np.pi),
...                           cdf_at_mode=norm.cdf(0),
...                           random_state=urng)
>>> rvs = rng.rvs(1000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)
>>> fx = 1/np.sqrt(2*np.pi) * dist.pdf(x)
>>> fig, ax = plt.subplots()
>>> ax.plot(x, fx, 'r-', lw=2, label='true distribution')
>>> ax.hist(rvs, bins=10, density=True, alpha=0.8, label='random variates')
>>> ax.set_xlabel('x')
>>> ax.set_ylabel('PDF(x)')
>>> ax.set_title('Simple Ratio-of-Uniforms Samples')
>>> ax.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_srou.html, scipy.stats.sampling.SimpleRatioUniforms scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> import math
>>> class GammaDist:
...     def __init__(self, p):
...         self.p = p
...     def pdf(self, x):
...         return x**(self.p-1) * np.exp(-x)
...
>>> urng = np.random.default_rng()
>>> p = np.arange(1.5, 5, 1000)
>>> res = np.empty((1000, 100))
>>> for i in range(1000):
...     dist = GammaDist(p[i])
...     rng = SimpleRatioUniforms(dist, mode=p[i]-1,
...                               pdf_area=math.gamma(p[i]),
...                               random_state=urng)
...     with np.suppress_warnings() as sup:
...         sup.filter(RuntimeWarning, ""invalid value encountered in double_scalars"")
...         sup.filter(RuntimeWarning, ""overflow encountered in exp"")
...         res[i] = rng.rvs(100)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_srou.html, scipy.stats.sampling.SimpleRatioUniforms scipy.stats.sampling.SimpleRatioUniforms.rvs
">>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> from scipy import ndimage
>>> ndimage.standard_deviation(a)
2.7585095613392387
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.standard_deviation.html, scipy.ndimage.standard_deviation
">>> lbl, nlbl = ndimage.label(a)
>>> ndimage.standard_deviation(a, lbl, index=np.arange(1, nlbl+1))
array([ 1.479,  1.5  ,  3.   ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.standard_deviation.html, scipy.ndimage.label scipy.ndimage.standard_deviation
">>> ndimage.standard_deviation(a, lbl)
2.4874685927665499
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.standard_deviation.html, scipy.ndimage.standard_deviation
">>> import numpy as np
>>> from scipy.ndimage import geometric_transform
>>> a = np.arange(12.).reshape((4, 3))
>>> def shift_func(output_coords):
...     return (output_coords[0] - 0.5, output_coords[1] - 0.5)
...
>>> geometric_transform(a, shift_func)
array([[ 0.   ,  0.   ,  0.   ],
       [ 0.   ,  1.362,  2.738],
       [ 0.   ,  4.812,  6.187],
       [ 0.   ,  8.263,  9.637]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.geometric_transform.html, scipy.ndimage.geometric_transform
">>> b = [1, 2, 3, 4, 5]
>>> def shift_func(output_coords):
...     return (output_coords[0] - 3,)
...
>>> geometric_transform(b, shift_func, mode='constant')
array([0, 0, 0, 1, 2])
>>> geometric_transform(b, shift_func, mode='nearest')
array([1, 1, 1, 1, 2])
>>> geometric_transform(b, shift_func, mode='reflect')
array([3, 2, 1, 1, 2])
>>> geometric_transform(b, shift_func, mode='wrap')
array([2, 3, 4, 1, 2])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.geometric_transform.html, scipy.ndimage.geometric_transform
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((6,6), dtype=int)
>>> a[2:4, 2:4] = 1
>>> a[4, 4] = 1
>>> a[:2, :3] = 2
>>> a[0, 5] = 3
>>> a
array([[2, 2, 2, 0, 0, 3],
       [2, 2, 2, 0, 0, 0],
       [0, 0, 1, 1, 0, 0],
       [0, 0, 1, 1, 0, 0],
       [0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0]])
>>> ndimage.find_objects(a)
[(slice(2, 5, None), slice(2, 5, None)),
 (slice(0, 2, None), slice(0, 3, None)),
 (slice(0, 1, None), slice(5, 6, None))]
>>> ndimage.find_objects(a, max_label=2)
[(slice(2, 5, None), slice(2, 5, None)), (slice(0, 2, None), slice(0, 3, None))]
>>> ndimage.find_objects(a == 1, max_label=2)
[(slice(2, 5, None), slice(2, 5, None)), None]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.find_objects.html, scipy.ndimage.find_objects
">>> loc = ndimage.find_objects(a)[0]
>>> a[loc]
array([[1, 1, 0],
       [1, 1, 0],
       [0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.find_objects.html, scipy.ndimage.find_objects
">>> from scipy.ndimage import generate_binary_structure, black_tophat
>>> import numpy as np
>>> square = generate_binary_structure(rank=2, connectivity=3)
>>> dark_on_gray = np.array([[7, 6, 6, 6, 7],
...                          [6, 5, 4, 5, 6],
...                          [6, 4, 0, 4, 6],
...                          [6, 5, 4, 5, 6],
...                          [7, 6, 6, 6, 7]])
>>> black_tophat(input=dark_on_gray, structure=square)
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 1, 5, 1, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.black_tophat.html, scipy.ndimage.generate_binary_structure scipy.ndimage.black_tophat
">>> from scipy.ndimage import shift
>>> import matplotlib.pyplot as plt
>>> from scipy import datasets
>>> image = datasets.ascent()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.shift.html, scipy.datasets.ascent
">>> image_shifted_vertically = shift(image, (20, 0))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.shift.html, scipy.ndimage.shift
">>> image_shifted_both_directions = shift(image, (-200, 100))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.shift.html, scipy.ndimage.shift
">>> import numpy as np
>>> from scipy.stats.sampling import DiscreteAliasUrn
>>>
>>> pv = [0.18, 0.02, 0.8]
>>> urng = np.random.default_rng()
>>> rng = DiscreteAliasUrn(pv, random_state=urng)
>>> rng.rvs()
0
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.sampling.DiscreteAliasUrn scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> rng = DiscreteAliasUrn(pv, domain=(10, 13), random_state=urng)
>>> rng.rvs()
12
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.sampling.DiscreteAliasUrn scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> class Distribution:
...     def __init__(self, c):
...         self.c = c
...     def pmf(self, x):
...         return x**self.c
...     def support(self):
...         return (0, 10)
...
>>> dist = Distribution(2)
>>> rng = DiscreteAliasUrn(dist, random_state=urng)
>>> rng.rvs()
10
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.rv_discrete.pmf scipy.stats.sampling.DiscreteAliasUrn scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> import matplotlib.pyplot as plt
>>> from scipy.stats.sampling import DiscreteAliasUrn
>>> class Distribution:
...     def __init__(self, c):
...         self.c = c
...     def pmf(self, x):
...         return x**self.c
...     def support(self):
...         return (0, 10)
...
>>> dist = Distribution(2)
>>> urng = np.random.default_rng()
>>> rng = DiscreteAliasUrn(dist, random_state=urng)
>>> rvs = rng.rvs(1000)
>>> fig = plt.figure()
>>> ax = fig.add_subplot(111)
>>> x = np.arange(1, 11)
>>> fx = dist.pmf(x)
>>> fx = fx / fx.sum()
>>> ax.plot(x, fx, 'bo', label='true distribution')
>>> ax.vlines(x, 0, fx, lw=2)
>>> ax.hist(rvs, bins=np.r_[x, 11]-0.5, density=True, alpha=0.5, color='r',
...         label='samples')
>>> ax.set_xlabel('x')
>>> ax.set_ylabel('PMF(x)')
>>> ax.set_title('Discrete Alias Urn Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.rv_discrete.pmf scipy.stats.sampling.DiscreteAliasUrn scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> from scipy.stats import binom
>>> from scipy.stats.sampling import DiscreteAliasUrn
>>> dist = binom(10, 0.2)  # distribution object
>>> domain = dist.support()  # the domain of your distribution
>>> x = np.arange(domain[0], domain[1] + 1)
>>> pv = dist.pmf(x)
>>> rng = DiscreteAliasUrn(pv, domain=domain)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.sampling.DiscreteAliasUrn
">>> # use a table twice the length of PV.
>>> urn_factor = 2
>>> rng = DiscreteAliasUrn(pv, urn_factor=urn_factor, random_state=urng)
>>> rng.rvs()
2
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dau.html, scipy.stats.sampling.DiscreteAliasUrn scipy.stats.sampling.DiscreteAliasUrn.rvs
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((5,5), dtype=int)
>>> a[1:-1, 1:-1] = 1; a[2,2] = 0
>>> a
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> # Closing removes small holes
>>> ndimage.binary_closing(a).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> # Closing is the erosion of the dilation of the input
>>> ndimage.binary_dilation(a).astype(int)
array([[0, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [0, 1, 1, 1, 0]])
>>> ndimage.binary_erosion(ndimage.binary_dilation(a)).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_closing.html, scipy.ndimage.binary_closing scipy.ndimage.binary_dilation scipy.ndimage.binary_erosion
">>> a = np.zeros((7,7), dtype=int)
>>> a[1:6, 2:5] = 1; a[1:3,3] = 0
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0],
       [0, 0, 1, 0, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> # In addition to removing holes, closing can also
>>> # coarsen boundaries with fine hollows.
>>> ndimage.binary_closing(a).astype(int)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.binary_closing(a, structure=np.ones((2,2))).astype(int)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_closing.html, scipy.ndimage.binary_closing
">>> distance_taxicab = distance_transform_cdt(image, metric=""taxicab"")
>>> taxicab_transform = middle.imshow(distance_taxicab, cmap='gray')
>>> cbar_taxicab = middle.cax.colorbar(taxicab_transform)
>>> cbar_taxicab.set_ticks(colorbar_ticks)
>>> middle.set_title(""Taxicab metric"")
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_cdt.html, scipy.ndimage.distance_transform_cdt
">>> distance_chessboard = distance_transform_cdt(image,
...                                              metric=""chessboard"")
>>> chessboard_transform = bottom.imshow(distance_chessboard, cmap='gray')
>>> cbar_chessboard = bottom.cax.colorbar(chessboard_transform)
>>> cbar_chessboard.set_ticks(colorbar_ticks)
>>> bottom.set_title(""Chessboard metric"")
>>> plt.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.distance_transform_cdt.html, scipy.ndimage.distance_transform_cdt
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((7,7), dtype=int)
>>> a[2:5, 2:5] = 1
>>> a[4,4] = 2; a[2,3] = 3
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 3, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.grey_dilation(a, size=(3,3))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 3, 3, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.grey_dilation(a, footprint=np.ones((3,3)))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 3, 3, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> s = ndimage.generate_binary_structure(2,1)
>>> s
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> ndimage.grey_dilation(a, footprint=s)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 3, 1, 0, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 1, 3, 2, 1, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 0, 1, 1, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.grey_dilation(a, size=(3,3), structure=np.ones((3,3)))
array([[1, 1, 1, 1, 1, 1, 1],
       [1, 2, 4, 4, 4, 2, 1],
       [1, 2, 4, 4, 4, 2, 1],
       [1, 2, 4, 4, 4, 3, 1],
       [1, 2, 2, 3, 3, 3, 1],
       [1, 2, 2, 3, 3, 3, 1],
       [1, 1, 1, 1, 1, 1, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.grey_dilation.html, scipy.ndimage.grey_dilation scipy.ndimage.generate_binary_structure
">>> from scipy.ndimage import convolve1d
>>> convolve1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])
array([14, 24,  4, 13, 12, 36, 27,  0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve1d.html, scipy.ndimage.convolve1d
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((7,7), dtype=int)
>>> a[2:5, 2:5] = 1
>>> ndimage.morphological_gradient(a, size=(3,3))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> # The morphological gradient is computed as the difference
>>> # between a dilation and an erosion
>>> ndimage.grey_dilation(a, size=(3,3)) -\
...  ndimage.grey_erosion(a, size=(3,3))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> a = np.zeros((7,7), dtype=int)
>>> a[2:5, 2:5] = 1
>>> a[4,4] = 2; a[2,3] = 3
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 3, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.morphological_gradient(a, size=(3,3))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 3, 3, 1, 0],
       [0, 1, 3, 2, 3, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 1, 1, 2, 2, 2, 0],
       [0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.morphological_gradient.html, scipy.ndimage.morphological_gradient scipy.ndimage.grey_dilation scipy.ndimage.grey_erosion
">>> from scipy.stats.sampling import NumericalInversePolynomial
>>> class StandardNormal:
...     def pdf(self, x):
...         return np.exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial
">>> rng.rvs((5, 3))
array([[-1.52449963,  1.31933688,  2.05884468],
       [ 0.48883931,  0.15207903, -0.02150773],
       [ 1.11486463,  1.95449597, -0.30724928],
       [ 0.9854643 ,  0.29867424,  0.7560304 ],
       [-0.61776203,  0.16033378, -1.00933003]])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial.rvs
">>> import matplotlib.pyplot as plt
>>> from scipy.stats import norm
>>> from scipy.stats.sampling import NumericalInversePolynomial
>>> class StandardNormal:
...     def pdf(self, x):
...         return np.exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, random_state=urng)
>>> rvs = rng.rvs(10000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, num=10000)
>>> fx = norm.pdf(x)
>>> plt.plot(x, fx, ""r-"", label=""pdf"")
>>> plt.hist(rvs, bins=50, density=True, alpha=0.8, label=""rvs"")
>>> plt.xlabel(""x"")
>>> plt.ylabel(""PDF(x)"")
>>> plt.title(""Samples drawn using PINV method."")
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial scipy.stats.sampling.NumericalInversePolynomial.rvs
">>> rng = NumericalInversePolynomial(dist, u_resolution=1e-12,
...                                  random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial
">>> from scipy.stats.sampling import NumericalInversePolynomial
>>> class StandardNormal:
...     def __init__(self):
...         self.callbacks = 0
...     def pdf(self, x):
...         self.callbacks += 1
...         return np.exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> # u_resolution = 10^-8
>>> # => less PDF evaluations required
>>> # => faster setup
>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-8,
...                                  random_state=urng)
>>> dist.callbacks
4095
>>> dist.callbacks = 0  # reset the number of callbacks
>>> # u_resolution = 10^-10 (default)
>>> # => more PDF evaluations required
>>> # => slow setup
>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-10,
...                                  random_state=urng)
>>> dist.callbacks
11454
>>> dist.callbacks = 0  # reset the number of callbacks
>>> # u_resolution = 10^-12
>>> # => lots of PDF evaluations required
>>> # => very slow setup
>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-12,
...                                  random_state=urng)
13902
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial
">>> from scipy.stats.sampling import NumericalInverseHermite
>>> # NumericalInverseHermite accepts a `tol` parameter to set the
>>> # u-resolution of the generator.
>>> rng_hermite = NumericalInverseHermite(norm(), tol=1e-12)
>>> rng_hermite.intervals
3000
>>> rng_poly = NumericalInversePolynomial(norm(), u_resolution=1e-12)
>>> rng_poly.intervals
252
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInversePolynomial
">>> from scipy.special import ndtr
>>> class StandardNormal:
...     def pdf(self, x):
...         return np.exp(-0.5 * x*x)
...     def cdf(self, x):
...         return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInversePolynomial(dist, random_state=urng)
>>> rng.u_error(sample_size=100_000)
UError(max_error=8.785949745515609e-11, mean_absolute_error=2.9307548109436816e-11)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial scipy.stats.sampling.NumericalInversePolynomial.u_error
">>> rng.ppf(0.975)
1.959963985701268
>>> norm.ppf(0.975)
1.959963984540054
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial.ppf
">>> u = np.linspace(0.001, 0.999, num=1_000_000)
>>> u_errors = np.abs(u - dist.cdf(rng.ppf(u)))
>>> u_errors.max()
8.78600525666684e-11
>>> u_errors.mean()
2.9321444940323206e-11
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial.ppf
">>> rng.cdf(1.959963984540054)
0.9750000000042454
>>> norm.cdf(1.959963984540054)
0.975
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial.cdf
">>> x = np.linspace(-10, 10, num=100_000)
>>> x_error = np.abs(dist.cdf(x) - rng.cdf(x))
>>> x_error.max()
4.506062190046123e-12
>>> I0 = np.sqrt(2*np.pi)
>>> max_integration_error = 0.05 * I0 * 1e-10
>>> x_error.max() <= max_integration_error
True
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_pinv.html, scipy.stats.sampling.NumericalInversePolynomial.cdf
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((5, 5))
>>> a[2, 2] = 1
>>> a
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> ndimage.binary_dilation(a)
array([[False, False, False, False, False],
       [False, False,  True, False, False],
       [False,  True,  True,  True, False],
       [False, False,  True, False, False],
       [False, False, False, False, False]], dtype=bool)
>>> ndimage.binary_dilation(a).astype(a.dtype)
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> # 3x3 structuring element with connectivity 1, used by default
>>> struct1 = ndimage.generate_binary_structure(2, 1)
>>> struct1
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> # 3x3 structuring element with connectivity 2
>>> struct2 = ndimage.generate_binary_structure(2, 2)
>>> struct2
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
>>> ndimage.binary_dilation(a, structure=struct1).astype(a.dtype)
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> ndimage.binary_dilation(a, structure=struct2).astype(a.dtype)
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> ndimage.binary_dilation(a, structure=struct1,\
... iterations=2).astype(a.dtype)
array([[ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_dilation.html, scipy.ndimage.binary_dilation scipy.ndimage.generate_binary_structure
">>> from scipy.ndimage import gaussian_filter
>>> import numpy as np
>>> a = np.arange(50, step=2).reshape((5,5))
>>> a
array([[ 0,  2,  4,  6,  8],
       [10, 12, 14, 16, 18],
       [20, 22, 24, 26, 28],
       [30, 32, 34, 36, 38],
       [40, 42, 44, 46, 48]])
>>> gaussian_filter(a, sigma=1)
array([[ 4,  6,  8,  9, 11],
       [10, 12, 14, 15, 17],
       [20, 22, 24, 25, 27],
       [29, 31, 33, 34, 36],
       [35, 37, 39, 40, 42]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter.html, scipy.ndimage.gaussian_filter
">>> from scipy import datasets
>>> import matplotlib.pyplot as plt
>>> fig = plt.figure()
>>> plt.gray()  # show the filtered result in grayscale
>>> ax1 = fig.add_subplot(121)  # left side
>>> ax2 = fig.add_subplot(122)  # right side
>>> ascent = datasets.ascent()
>>> result = gaussian_filter(ascent, sigma=5)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter.html, scipy.datasets.ascent scipy.ndimage.gaussian_filter
">>> from scipy import ndimage
>>> struct = ndimage.generate_binary_structure(2, 1)
>>> struct.astype(int)
array([[0, 1, 0],
       [1, 1, 1],
       [0, 1, 0]])
>>> ndimage.iterate_structure(struct, 2).astype(int)
array([[0, 0, 1, 0, 0],
       [0, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [0, 1, 1, 1, 0],
       [0, 0, 1, 0, 0]])
>>> ndimage.iterate_structure(struct, 3).astype(int)
array([[0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.iterate_structure.html, scipy.ndimage.generate_binary_structure scipy.ndimage.iterate_structure
">>> import numpy as np
>>> a = np.array([[ 0.    ,  0.2146,  0.5962,  0.    ],
...               [ 0.    ,  0.7778,  0.    ,  0.    ],
...               [ 0.    ,  0.    ,  0.    ,  0.    ],
...               [ 0.    ,  0.    ,  0.7181,  0.2787],
...               [ 0.    ,  0.    ,  0.6573,  0.3094]])
>>> from scipy import ndimage
>>> ndimage.histogram(a, 0, 1, 10)
array([13,  0,  2,  1,  0,  1,  1,  2,  0,  0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.histogram.html, scipy.ndimage.histogram
">>> lbl, nlbl = ndimage.label(a)
>>> ndimage.histogram(a, 0, 1, 10, lbl)
array([0, 0, 2, 1, 0, 1, 1, 2, 0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.histogram.html, scipy.ndimage.label scipy.ndimage.histogram
">>> ndimage.histogram(a, 0, 1, 10, lbl, 2)
array([0, 0, 1, 1, 0, 0, 1, 1, 0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.histogram.html, scipy.ndimage.histogram
"int callback(double *buffer, npy_intp filter_size,
             double *return_value, void *user_data)
int callback(double *buffer, intptr_t filter_size,
             double *return_value, void *user_data)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html, scipy.LowLevelCallable
">>> import numpy as np
>>> from scipy import datasets
>>> from scipy.ndimage import generic_filter
>>> import matplotlib.pyplot as plt
>>> ascent = datasets.ascent()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html, scipy.datasets.ascent
">>> maximum_filter_result = generic_filter(ascent, np.amax, [10, 10])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html, scipy.ndimage.generic_filter
">>> def custom_filter(image):
...     return np.amax(image) - np.amin(image)
>>> custom_filter_result = generic_filter(ascent, custom_filter, [5, 5])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html, scipy.ndimage.generic_filter
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((5,5), dtype=int)
>>> a[1:4, 1:4] = 1; a[4, 4] = 1
>>> a
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 1]])
>>> # Opening removes small objects
>>> ndimage.binary_opening(a, structure=np.ones((3,3))).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 0, 0, 0]])
>>> # Opening can also smooth corners
>>> ndimage.binary_opening(a).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0]])
>>> # Opening is the dilation of the erosion of the input
>>> ndimage.binary_erosion(a).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])
>>> ndimage.binary_dilation(ndimage.binary_erosion(a)).astype(int)
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0],
       [0, 1, 1, 1, 0],
       [0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_opening.html, scipy.ndimage.binary_opening scipy.ndimage.binary_erosion scipy.ndimage.binary_dilation
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.array([[1, 2, 0, 0],
...               [5, 3, 0, 4],
...               [0, 0, 0, 7],
...               [9, 3, 0, 0]])
>>> ndimage.maximum_position(a)
(3, 0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_position.html, scipy.ndimage.maximum_position
">>> lbl = np.array([[0, 1, 2, 3],
...                 [0, 1, 2, 3],
...                 [0, 1, 2, 3],
...                 [0, 1, 2, 3]])
>>> ndimage.maximum_position(a, lbl, 1)
(1, 1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_position.html, scipy.ndimage.maximum_position
">>> ndimage.maximum_position(a, lbl)
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_position.html, scipy.ndimage.maximum_position
">>> ndimage.maximum_position(a, lbl, 2)
(0, 2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.maximum_position.html, scipy.ndimage.maximum_position
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((7,7), dtype=int)
>>> a[1:6, 2:5] = 1
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.binary_erosion(a).astype(a.dtype)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> #Erosion removes objects smaller than the structure
>>> ndimage.binary_erosion(a, structure=np.ones((5,5))).astype(a.dtype)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_erosion.html, scipy.ndimage.binary_erosion
">>> from scipy import ndimage, datasets
>>> import matplotlib.pyplot as plt
>>> import numpy.fft
>>> fig, (ax1, ax2) = plt.subplots(1, 2)
>>> plt.gray()  # show the filtered result in grayscale
>>> ascent = datasets.ascent()
>>> input_ = numpy.fft.fft2(ascent)
>>> result = ndimage.fourier_shift(input_, shift=200)
>>> result = numpy.fft.ifft2(result)
>>> ax1.imshow(ascent)
>>> ax2.imshow(result.real)  # the imaginary part is an artifact
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.fourier_shift.html, scipy.datasets.ascent scipy.ndimage.fourier_shift
">>> from scipy.stats.sampling import TransformedDensityRejection
>>> from scipy.stats import norm
>>>
>>> class StandardNormal:
...     def pdf(self, x):
...         # note that the normalization constant is not required
...         return np.exp(-0.5 * x*x)
...     def dpdf(self, x):
...         return -x * np.exp(-0.5 * x*x)
...
>>> dist = StandardNormal()
>>>
>>> urng = np.random.default_rng()
>>> rng = TransformedDensityRejection(dist, random_state=urng)
>>> rng.rvs()
-1.526829048388144
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> rng.ppf_hat(0.5)
-0.00018050266342362759
>>> norm.ppf(0.5)
0.0
>>> u = np.linspace(0, 1, num=10)
>>> rng.ppf_hat(u)
array([       -inf, -1.22227372, -0.7656556 , -0.43135731, -0.14002921,
        0.13966423,  0.43096141,  0.76517113,  1.22185606,         inf])
>>> norm.ppf(u)
array([       -inf, -1.22064035, -0.76470967, -0.4307273 , -0.1397103 ,
        0.1397103 ,  0.4307273 ,  0.76470967,  1.22064035,         inf])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection.ppf_hat
">>> urng = np.random.default_rng()
>>> rng = TransformedDensityRejection(dist, domain=[0, 1], random_state=urng)
>>> rng.rvs(10)
array([0.05452512, 0.97251362, 0.49955877, 0.82789729, 0.33048885,
       0.55558548, 0.23168323, 0.13423275, 0.73176575, 0.35739799])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> class StandardNormal:
...     def pdf(self, x):
...         return np.exp(-0.5 * x*x)
...     def dpdf(self, x):
...         return -x * np.exp(-0.5 * x*x)
...     def support(self):
...         return -np.inf, np.inf
...
>>> dist = StandardNormal()
>>>
>>> urng = np.random.default_rng()
>>> rng = TransformedDensityRejection(dist, random_state=urng)
>>> rng.rvs(10)
array([-1.52682905,  2.06206883,  0.15205036,  1.11587367, -0.30775562,
       0.29879802, -0.61858268, -1.01049115,  0.78853694, -0.23060766])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs
">>> dist = StandardNormal()
>>> rng = TransformedDensityRejection(dist, max_squeeze_hat_ratio=0.999,
...                                   random_state=urng)
>>> rng.squeeze_hat_ratio
0.999364900465214
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection
">>> from copy import copy
>>> class StandardNormal:
...     def __init__(self):
...         self.callbacks = 0
...     def pdf(self, x):
...         self.callbacks += 1
...         return np.exp(-0.5 * x*x)
...     def dpdf(self, x):
...         return -x * np.exp(-0.5 * x*x)
...
>>> dist1 = StandardNormal()
>>> urng1 = np.random.default_rng()
>>> urng2 = copy(urng1)
>>> rng1 = TransformedDensityRejection(dist1, random_state=urng1)
>>> dist1.callbacks  # evaluations during setup
139
>>> dist1.callbacks = 0  # don't consider evaluations during setup
>>> rvs = rng1.rvs(100000)
>>> dist1.callbacks  # evaluations during sampling
527
>>> dist2 = StandardNormal()
>>> # use the same stream of uniform random numbers
>>> rng2 = TransformedDensityRejection(dist2, max_squeeze_hat_ratio=0.999,
...                                    random_state=urng2)
>>> dist2.callbacks  # evaluations during setup
467
>>> dist2.callbacks = 0  # don't consider evaluations during setup
>>> rvs = rng2.rvs(100000)
>>> dist2.callbacks  # evaluations during sampling
84
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.rvs scipy.stats.sampling.TransformedDensityRejection.rvs
">>> abs(norm.ppf(0.975) - rng1.ppf_hat(0.975))
0.0027054565421578136
>>> abs(norm.ppf(0.975) - rng2.ppf_hat(0.975))
0.00047824084476300044
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection.ppf_hat scipy.stats.sampling.TransformedDensityRejection.ppf_hat
">>> # mode = 0 for our distribution
>>> # if exact mode is not available, pass 'center' parameter instead
>>> rng = TransformedDensityRejection(dist, mode=0.)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection
">>> rng = TransformedDensityRejection(dist,
...                                   construction_points=[-5, 0, 5])
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_tdr.html, scipy.stats.sampling.TransformedDensityRejection
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.arange(36).reshape((6,6))
>>> a[3, 3] = 50
>>> a
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 50, 22, 23],
       [24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35]])
>>> ndimage.grey_opening(a, size=(3,3))
array([[ 0,  1,  2,  3,  4,  4],
       [ 6,  7,  8,  9, 10, 10],
       [12, 13, 14, 15, 16, 16],
       [18, 19, 20, 22, 22, 22],
       [24, 25, 26, 27, 28, 28],
       [24, 25, 26, 27, 28, 28]])
>>> # Note that the local maximum a[3,3] has disappeared
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.grey_opening.html, scipy.ndimage.grey_opening
">>> from scipy import ndimage
>>> import numpy as np
>>> a = np.zeros((7,7), dtype=int)
>>> a[1:6, 1:6] = 3
>>> a[4,4] = 2; a[2,3] = 1
>>> a
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 3, 3, 3, 3, 3, 0],
       [0, 3, 3, 1, 3, 3, 0],
       [0, 3, 3, 3, 3, 3, 0],
       [0, 3, 3, 3, 2, 3, 0],
       [0, 3, 3, 3, 3, 3, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> ndimage.grey_erosion(a, size=(3,3))
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 3, 2, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
>>> footprint = ndimage.generate_binary_structure(2, 1)
>>> footprint
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> # Diagonally-connected elements are not considered neighbors
>>> ndimage.grey_erosion(a, footprint=footprint)
array([[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 3, 1, 2, 0, 0],
       [0, 0, 3, 2, 2, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.grey_erosion.html, scipy.ndimage.grey_erosion scipy.ndimage.generate_binary_structure
">>> class StandardNormal:
...     def pdf(self, x):
...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)
...     def cdf(self, x):
...        return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInverseHermite(dist, random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng = NumericalInverseHermite(dist)
>>> p = np.linspace(0.01, 0.99, 99) # percentiles from 1% to 99%
>>> np.allclose(rng.ppf(p), norm.ppf(p))
True
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.ppf
">>> dist = genexpon(9, 16, 3)
>>> rng = NumericalInverseHermite(dist)
>>> # `seed` ensures identical random streams are used by each `rvs` method
>>> seed = 500072020
>>> rvs1 = dist.rvs(size=100, random_state=np.random.default_rng(seed))
>>> rvs2 = rng.rvs(size=100, random_state=np.random.default_rng(seed))
>>> np.allclose(rvs1, rvs2)
True
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.rvs
">>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInverseHermite(dist, random_state=urng)
>>> rvs = rng.rvs(10000)
>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)
>>> fx = norm.pdf(x)
>>> plt.plot(x, fx, 'r-', lw=2, label='true distribution')
>>> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')
>>> plt.xlabel('x')
>>> plt.ylabel('PDF(x)')
>>> plt.title('Numerical Inverse Hermite Samples')
>>> plt.legend()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.rvs
">>> class StandardNormal:
...     def pdf(self, x):
...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)
...     def dpdf(self, x):
...        return -1/np.sqrt(2*np.pi) * x * np.exp(-x**2 / 2)
...     def cdf(self, x):
...        return ndtr(x)
...
>>> dist = StandardNormal()
>>> urng = np.random.default_rng()
>>> rng = NumericalInverseHermite(dist, order=5, random_state=urng)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng3 = NumericalInverseHermite(dist, order=3)
>>> rng5 = NumericalInverseHermite(dist, order=5)
>>> rng3.intervals, rng5.intervals
(3000, 522)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite
">>> rng1 = NumericalInverseHermite(dist, u_resolution=1e-10)
>>> rng1.u_error(sample_size=1000000)  # uses one million samples
UError(max_error=9.53167544892608e-11, mean_absolute_error=2.2450136432146864e-11)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.u_error
">>> rng2 = NumericalInverseHermite(dist, u_resolution=1e-13)
>>> rng2.u_error(sample_size=1000000)
UError(max_error=9.32027892364129e-14, mean_absolute_error=1.5194172675685075e-14)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite scipy.stats.sampling.NumericalInverseHermite.u_error
">>> rng1.intervals
1022
>>> rng2.intervals
5687
>>> from timeit import timeit
>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-10)
>>> timeit(f, number=1)
0.017409582000254886  # may vary
>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-13)
>>> timeit(f, number=1)
0.08671202100003939  # may vary
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_hinv.html, scipy.stats.sampling.NumericalInverseHermite
">>> from scipy import ndimage
>>> import numpy as np
>>> struct = ndimage.generate_binary_structure(2, 1)
>>> struct
array([[False,  True, False],
       [ True,  True,  True],
       [False,  True, False]], dtype=bool)
>>> a = np.zeros((5,5))
>>> a[2, 2] = 1
>>> a
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> b = ndimage.binary_dilation(a, structure=struct).astype(a.dtype)
>>> b
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> ndimage.binary_dilation(b, structure=struct).astype(a.dtype)
array([[ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 0.,  1.,  1.,  1.,  0.],
       [ 0.,  0.,  1.,  0.,  0.]])
>>> struct = ndimage.generate_binary_structure(2, 2)
>>> struct
array([[ True,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
>>> struct = ndimage.generate_binary_structure(3, 1)
>>> struct # no diagonal elements
array([[[False, False, False],
        [False,  True, False],
        [False, False, False]],
       [[False,  True, False],
        [ True,  True,  True],
        [False,  True, False]],
       [[False, False, False],
        [False,  True, False],
        [False, False, False]]], dtype=bool)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generate_binary_structure.html, scipy.ndimage.generate_binary_structure scipy.ndimage.binary_dilation
">>> import numpy as np
>>> from scipy.stats.sampling import DiscreteGuideTable
>>>
>>> pv = [0.18, 0.02, 0.8]
>>> urng = np.random.default_rng()
>>> rng = DiscreteGuideTable(pv, random_state=urng)
>>> rng.rvs()
2
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.rvs
">>> rng = DiscreteGuideTable(pv, random_state=urng, domain=(10, 13))
>>> rng.rvs()
10
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.rvs
">>> class Distribution:
...     def __init__(self, c):
...             self.c = c
...     def pmf(self, x):
...             return x ** self.c
...     def support(self):
...             return 0, 10
...
>>> dist = Distribution(2)
>>> rng = DiscreteGuideTable(dist, random_state=urng)
>>> rng.rvs()
9
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.rv_discrete.pmf scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.rvs
">>> from scipy.stats import binom
>>> from scipy.stats.sampling import DiscreteGuideTable
>>> dist = binom(10, 0.2)  # distribution object
>>> domain = dist.support()  # the domain of your distribution
>>> x = np.arange(domain[0], domain[1] + 1)
>>> pv = dist.pmf(x)
>>> rng = DiscreteGuideTable(pv, domain=domain)
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.sampling.DiscreteGuideTable
">>> guide_factor = 2
>>> rng = DiscreteGuideTable(pv, random_state=urng, guide_factor=guide_factor)
>>> rng.rvs()
2
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.rvs
">>> n, p = 4, 0.1
>>> dist = stats.binom(n, p)
>>> rng = DiscreteGuideTable(dist, random_state=42)
>>> rng.ppf(0.5)
0.0
",https://docs.scipy.org/doc/scipy/tutorial/stats/sampling_dgt.html, scipy.stats.sampling.DiscreteGuideTable scipy.stats.sampling.DiscreteGuideTable.ppf
">>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]
>>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,
...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,
...      6.520430e-03,  8.170770e-03]
>>> from scipy.interpolate import UnivariateSpline
>>> spl = UnivariateSpline(x, y, s=0)
>>> spl.roots()
array([], dtype=float64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.roots.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.roots
">>> from scipy.interpolate import splrep, PPoly
>>> tck = splrep(x, y, s=0)
>>> ppoly = PPoly.from_spline(tck)
>>> ppoly.roots(extrapolate=False)
array([2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.roots.html, scipy.interpolate.splrep scipy.interpolate.PPoly.from_spline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 10, 70)
>>> y = np.sin(x)
>>> spl = UnivariateSpline(x, y, k=4, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline
">>> spl.derivative().roots() / np.pi
array([ 0.50000001,  1.5       ,  2.49999998])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline.derivative
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 10, 70)
>>> y = np.sin(x)
>>> spl = UnivariateSpline(x, y, k=4, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline
">>> spl.derivative().roots() / np.pi
array([ 0.50000001,  1.5       ,  2.49999998])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline.derivative
">>> from scipy.interpolate import KroghInterpolator
>>> KroghInterpolator([0,0,0],[1,2,3]).derivatives(0)
array([1.0,2.0,3.0])
>>> KroghInterpolator([0,0,0],[1,2,3]).derivatives([0,0])
array([[1.0,1.0],
       [2.0,2.0],
       [3.0,3.0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.derivatives.html, scipy.interpolate.KroghInterpolator
">>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
>>> xarr_fine = np.linspace(-3, 3, 200)
>>> yarr_fine = np.linspace(-3, 3, 200)
>>> xgrid_fine, ygrid_fine = np.meshgrid(xarr_fine, yarr_fine, indexing=""ij"")
>>> zdata_interp = rbs(xgrid_fine, ygrid_fine, grid=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothBivariateSpline.__call__.html, scipy.interpolate.RectBivariateSpline scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.derivatives(1.5)
array([2.25, 3.0, 2.0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.derivatives.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.derivatives
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetaarr_fine = np.linspace(0, np.pi, 200)
>>> phiarr_fine = np.linspace(0, 2 * np.pi, 200)
>>> zdata_fine = rsbs(thetaarr_fine, phiarr_fine)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQSphereBivariateSpline.__call__.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)
>>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)
>>> zinterp = rsbs.ev(thetainterp, phiinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQSphereBivariateSpline.ev.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline.ev
"sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.get_residual.html, scipy.interpolate.UnivariateSpline
">>> import numpy as np
>>> from scipy.interpolate import BSpline, make_interp_spline
>>> x = np.linspace(0, 10, 5)
>>> y = np.sin(x)
>>> spl = make_interp_spline(x, y, k=3)
>>> spl.t
array([ 0.,  0.,  0.,  0.,  5., 10., 10., 10., 10.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.insert_knot.html, scipy.interpolate.make_interp_spline
">>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]
>>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,
...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,
...      6.520430e-03,  8.170770e-03]
>>> from scipy.interpolate import UnivariateSpline
>>> spl = UnivariateSpline(x, y, s=0)
>>> spl.roots()
array([], dtype=float64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.roots.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.roots
">>> from scipy.interpolate import splrep, PPoly
>>> tck = splrep(x, y, s=0)
>>> ppoly = PPoly.from_spline(tck)
>>> ppoly.roots(extrapolate=False)
array([2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.roots.html, scipy.interpolate.splrep scipy.interpolate.PPoly.from_spline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.derivatives(1.5)
array([2.25, 3.0, 2.0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.derivatives.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.derivatives
"sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.get_residual.html, scipy.interpolate.UnivariateSpline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.integral(0, 3)
9.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.integral
">>> spl.integral(-1, 4)
9.0
>>> spl.integral(-1, 0)
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline.integral
">>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
>>> xarr_fine = np.linspace(-3, 3, 200)
>>> yarr_fine = np.linspace(-3, 3, 200)
>>> xgrid_fine, ygrid_fine = np.meshgrid(xarr_fine, yarr_fine, indexing=""ij"")
>>> zdata_interp = rbs(xgrid_fine, ygrid_fine, grid=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQBivariateSpline.__call__.html, scipy.interpolate.RectBivariateSpline scipy.interpolate.RectBivariateSpline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, np.pi/2, 70)
>>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)
>>> spl = UnivariateSpline(x, y, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline
">>> spl(1.7), spl.antiderivative().derivative()(1.7)
(array(2.1565429877197317), array(2.1565429877201865))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.antiderivative scipy.misc.derivative
">>> ispl = spl.antiderivative()
>>> ispl(np.pi/2) - ispl(0)
2.2572053588768486
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline.antiderivative
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.integral(0, 3)
9.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.integral
">>> spl.integral(-1, 4)
9.0
>>> spl.integral(-1, 0)
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline.integral
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 10, 70)
>>> y = np.sin(x)
>>> spl = UnivariateSpline(x, y, k=4, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline
">>> spl.derivative().roots() / np.pi
array([ 0.50000001,  1.5       ,  2.49999998])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.derivative.html, scipy.interpolate.UnivariateSpline.derivative
">>> xarr = np.linspace(-3, 3, 21)
>>> yarr = np.linspace(-3, 3, 21)
>>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=""ij"")
>>> zdata = f(xgrid, ygrid)
>>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline
">>> xinterp = np.linspace(-3, 3, 201)
>>> yinterp = np.linspace(3, -3, 201)
>>> zinterp = rbs.ev(xinterp, yinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline.ev
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.integral(0, 3)
9.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.integral
">>> spl.integral(-1, 4)
9.0
>>> spl.integral(-1, 0)
0.0
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.integral.html, scipy.interpolate.UnivariateSpline.integral
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, 3, 11)
>>> y = x**2
>>> spl = UnivariateSpline(x, y)
>>> spl.derivatives(1.5)
array([2.25, 3.0, 2.0, 0])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.derivatives.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.derivatives
">>> xarr = np.linspace(-3, 3, 21)
>>> yarr = np.linspace(-3, 3, 21)
>>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=""ij"")
>>> zdata = f(xgrid, ygrid)
>>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline
">>> xinterp = np.linspace(-3, 3, 201)
>>> yinterp = np.linspace(3, -3, 201)
>>> zinterp = rbs.ev(xinterp, yinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline.ev
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, np.pi/2, 70)
>>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)
>>> spl = UnivariateSpline(x, y, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline
">>> spl(1.7), spl.antiderivative().derivative()(1.7)
(array(2.1565429877197317), array(2.1565429877201865))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.antiderivative scipy.misc.derivative
">>> ispl = spl.antiderivative()
>>> ispl(np.pi/2) - ispl(0)
2.2572053588768486
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.LSQUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline.antiderivative
"sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.get_residual.html, scipy.interpolate.UnivariateSpline
">>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]
>>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,
...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,
...      6.520430e-03,  8.170770e-03]
>>> from scipy.interpolate import UnivariateSpline
>>> spl = UnivariateSpline(x, y, s=0)
>>> spl.roots()
array([], dtype=float64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.roots.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.roots
">>> from scipy.interpolate import splrep, PPoly
>>> tck = splrep(x, y, s=0)
>>> ppoly = PPoly.from_spline(tck)
>>> ppoly.roots(extrapolate=False)
array([2.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.UnivariateSpline.roots.html, scipy.interpolate.splrep scipy.interpolate.PPoly.from_spline
">>> import numpy as np
>>> from scipy.interpolate import UnivariateSpline
>>> x = np.linspace(0, np.pi/2, 70)
>>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)
>>> spl = UnivariateSpline(x, y, s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline
">>> spl(1.7), spl.antiderivative().derivative()(1.7)
(array(2.1565429877197317), array(2.1565429877201865))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline scipy.interpolate.UnivariateSpline.antiderivative scipy.misc.derivative
">>> ispl = spl.antiderivative()
>>> ispl(np.pi/2) - ispl(0)
2.2572053588768486
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.antiderivative.html, scipy.interpolate.UnivariateSpline.antiderivative
">>> from scipy.interpolate import BPoly
>>> BPoly.from_derivatives([0, 1], [[1, 2], [3, 4]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.from_derivatives.html, scipy.interpolate.BPoly.from_derivatives
">>> BPoly.from_derivatives([0, 1, 2], [[0, 1], [0], [2]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BPoly.from_derivatives.html, scipy.interpolate.BPoly.from_derivatives
">>> from scipy.interpolate import BSpline
>>> b = BSpline.basis_element([0, 1, 2])
>>> b.integrate(0, 1)
array(0.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.integrate.html, scipy.interpolate.BSpline.basis_element
">>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots()
>>> ax.grid(True)
>>> ax.axvline(0, c='r', lw=5, alpha=0.5)  # base interval
>>> ax.axvline(2, c='r', lw=5, alpha=0.5)
>>> xx = [-1, 1, 2]
>>> ax.plot(xx, b(xx))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.integrate.html, scipy.sparse.csr_matrix
">>> import numpy as np
>>> from scipy.interpolate import PPoly
>>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])
>>> pp.solve()
array([-1.,  1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.solve.html, scipy.interpolate.PPoly scipy.interpolate.PPoly.solve
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetaarr_fine = np.linspace(0, np.pi, 200)
>>> phiarr_fine = np.linspace(0, 2 * np.pi, 200)
>>> zdata_fine = rsbs(thetaarr_fine, phiarr_fine)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.__call__.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline
">>> from scipy.interpolate import make_interp_spline, BSpline
>>> import numpy as np
>>> x = np.linspace(0, np.pi * 2, 4)
>>> y = np.sin(x)
>>> k = 3
>>> bspl = make_interp_spline(x, y, k=k)
>>> design_matrix = bspl.design_matrix(x, bspl.t, k)
>>> design_matrix.toarray()
[[1.        , 0.        , 0.        , 0.        ],
[0.2962963 , 0.44444444, 0.22222222, 0.03703704],
[0.03703704, 0.22222222, 0.44444444, 0.2962963 ],
[0.        , 0.        , 0.        , 1.        ]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.design_matrix.html, scipy.interpolate.make_interp_spline scipy.interpolate.BSpline.design_matrix
">>> k = 2
>>> t = [-1, 0, 1, 2, 3, 4, 5, 6]
>>> x = [1, 2, 3, 4]
>>> design_matrix = BSpline.design_matrix(x, t, k).toarray()
>>> design_matrix
[[0.5, 0.5, 0. , 0. , 0. ],
[0. , 0.5, 0.5, 0. , 0. ],
[0. , 0. , 0.5, 0.5, 0. ],
[0. , 0. , 0. , 0.5, 0.5]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.design_matrix.html, scipy.interpolate.BSpline.design_matrix
">>> c = np.eye(len(t) - k - 1)
>>> design_matrix_gh = BSpline(t, c, k)(x)
>>> np.allclose(design_matrix, design_matrix_gh, atol=1e-14)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.design_matrix.html, scipy.interpolate.BSpline
">>> import numpy as np
>>> from scipy.interpolate import splrep, PPoly
>>> x = np.linspace(0, 1, 11)
>>> y = np.sin(2*np.pi*x)
>>> tck = splrep(x, y, s=0)
>>> p = PPoly.from_spline(tck)
>>> isinstance(p, PPoly)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.from_spline.html, scipy.interpolate.splrep scipy.interpolate.PPoly.from_spline
">>> from scipy.interpolate import splprep, splev
>>> t = np.linspace(0, 1, 11)
>>> x = np.sin(2*np.pi*t)
>>> y = np.cos(2*np.pi*t)
>>> (t, c, k), u = splprep([x, y], s=0)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.from_spline.html, scipy.interpolate.splprep
">>> unew = np.arange(0, 1.01, 0.01)
>>> out = splev(unew, (t, c, k))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.from_spline.html, scipy.interpolate.splev
">>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]
>>> polys[0].c.shape
(4, 14)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.from_spline.html, scipy.interpolate.PPoly.from_spline
">>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)
>>> poly = PPoly(cc, polys[0].x)
>>> np.allclose(poly(unew).T,     # note the transpose to match `splev`
...             out, atol=1e-15)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PPoly.from_spline.html, scipy.interpolate.PPoly scipy.interpolate.PPoly
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)
>>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)
>>> zinterp = rsbs.ev(thetainterp, phiinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.ev.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline.ev
">>> import numpy as np
>>> x, y = np.array([0, 1, 2]), np.array([1, 3, 7])
>>> def f(x, y):
...     return x**2 + y**2
>>> data = f(*np.meshgrid(x, y, indexing='ij', sparse=True))
>>> from scipy.interpolate import RegularGridInterpolator
>>> interp = RegularGridInterpolator((x, y), data, method='nearest')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.__call__.html, scipy.interpolate.RegularGridInterpolator
">>> interp([[1.5, 1.3], [0.3, 4.5]])
array([2., 9.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.__call__.html, scipy.interpolate.RegularGridInterpolator
">>> interp([[1.5, 1.3], [0.3, 4.5]], method='linear')
array([ 4.7, 24.3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.__call__.html, scipy.interpolate.RegularGridInterpolator
">>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
>>> xarr_fine = np.linspace(-3, 3, 200)
>>> yarr_fine = np.linspace(-3, 3, 200)
>>> xgrid_fine, ygrid_fine = np.meshgrid(xarr_fine, yarr_fine, indexing=""ij"")
>>> zdata_interp = rbs(xgrid_fine, ygrid_fine, grid=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectBivariateSpline.__call__.html, scipy.interpolate.RectBivariateSpline scipy.interpolate.RectBivariateSpline
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetaarr_fine = np.linspace(0, np.pi, 200)
>>> phiarr_fine = np.linspace(0, 2 * np.pi, 200)
>>> zdata_fine = rsbs(thetaarr_fine, phiarr_fine)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectSphereBivariateSpline.__call__.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline
">>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)
>>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)
>>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)
>>> zinterp = rsbs.ev(thetainterp, phiinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectSphereBivariateSpline.ev.html, scipy.interpolate.RectSphereBivariateSpline scipy.interpolate.RectSphereBivariateSpline.ev
">>> from scipy.interpolate import KroghInterpolator
>>> KroghInterpolator([0,0,0],[1,2,3]).derivatives(0)
array([1.0,2.0,3.0])
>>> KroghInterpolator([0,0,0],[1,2,3]).derivatives([0,0])
array([[1.0,1.0],
       [2.0,2.0],
       [3.0,3.0]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BarycentricInterpolator.derivatives.html, scipy.interpolate.KroghInterpolator
">>> xarr = np.linspace(-3, 3, 21)
>>> yarr = np.linspace(-3, 3, 21)
>>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=""ij"")
>>> zdata = f(xgrid, ygrid)
>>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline
">>> xinterp = np.linspace(-3, 3, 201)
>>> yinterp = np.linspace(3, -3, 201)
>>> zinterp = rbs.ev(xinterp, yinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RectBivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline.ev
">>> import numpy as np
>>> from scipy.interpolate import BSpline
>>> b = BSpline.basis_element([0, 1, 2, 3, 4])
>>> k = b.k
>>> b.t[k:-k]
array([ 0.,  1.,  2.,  3.,  4.])
>>> k
3
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.basis_element.html, scipy.interpolate.BSpline.basis_element
">>> t = [0, 1, 1, 2]
>>> b = BSpline.basis_element(t)
>>> def f(x):
...     return np.where(x < 1, x*x, (2. - x)**2)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.basis_element.html, scipy.interpolate.BSpline.basis_element
">>> import matplotlib.pyplot as plt
>>> fig, ax = plt.subplots()
>>> x = np.linspace(0, 2, 51)
>>> ax.plot(x, b(x), 'g', lw=3)
>>> ax.plot(x, f(x), 'r', lw=8, alpha=0.4)
>>> ax.grid(True)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BSpline.basis_element.html, scipy.sparse.csr_matrix
">>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
>>> xarr_fine = np.linspace(-3, 3, 200)
>>> yarr_fine = np.linspace(-3, 3, 200)
>>> xgrid_fine, ygrid_fine = np.meshgrid(xarr_fine, yarr_fine, indexing=""ij"")
>>> zdata_interp = rbs(xgrid_fine, ygrid_fine, grid=False)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BivariateSpline.__call__.html, scipy.interpolate.RectBivariateSpline scipy.interpolate.RectBivariateSpline
">>> xarr = np.linspace(-3, 3, 21)
>>> yarr = np.linspace(-3, 3, 21)
>>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=""ij"")
>>> zdata = f(xgrid, ygrid)
>>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline
">>> xinterp = np.linspace(-3, 3, 201)
>>> yinterp = np.linspace(3, -3, 201)
>>> zinterp = rbs.ev(xinterp, yinterp)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.BivariateSpline.ev.html, scipy.interpolate.RectBivariateSpline.ev
">>> sys = signal.TransferFunction([1], [1, 1])
>>> w, mag, phase = sys.bode()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.lti.bode.html, scipy.signal.TransferFunction
">>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from scipy.signal import ShortTimeFFT
>>> from scipy.signal.windows import gaussian
...
>>> T, N = 0.1, 51
>>> d_win = gaussian(N, std=1/T, sym=True)  # symmetric Gaussian window
>>> t = T * (np.arange(N) - N//2)
...
>>> fg1, ax1 = plt.subplots()
>>> ax1.set_title(r""Dual Window: Gaussian with $\sigma_t=1$"")
>>> ax1.set(xlabel=f""Time $t$ in seconds ({N} samples, $T={T}$ s)"",
...        xlim=(t[0], t[-1]), ylim=(0, 1.1*max(d_win)))
>>> ax1.plot(t, d_win, 'C0-')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.from_dual.html, scipy.signal.windows.gaussian
">>> fig2, axx = plt.subplots(3, 1, sharex='all')
...
>>> axx[0].set_title(r""Windows for hop$\in\{10, 40, 49\}$"")
>>> for c_, h_ in enumerate([10, 40, 49]):
...     SFT = ShortTimeFFT.from_dual(d_win, h_, 1/T)
...     axx[c_].plot(t + h_ * T, SFT.win, 'k--', alpha=.3, label=None)
...     axx[c_].plot(t - h_ * T, SFT.win, 'k:', alpha=.3, label=None)
...     axx[c_].plot(t, SFT.win, f'C{c_+1}',
...                     label=r""$\Delta t=%0.1f\,$s"" % SFT.delta_t)
...     axx[c_].set_ylim(0, 1.1*max(SFT.win))
...     axx[c_].legend(loc='center')
>>> axx[-1].set(xlabel=f""Time $t$ in seconds ({N} samples, $T={T}$ s)"",
...             xlim=(t[0], t[-1]))
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.from_dual.html, scipy.signal.ShortTimeFFT.from_dual
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.signal import square, ShortTimeFFT
>>> from scipy.signal.windows import gaussian
...
>>> T_x, N = 1 / 20, 1000  # 20 Hz sampling rate for 50 s signal
>>> t_x = np.arange(N) * T_x  # time indexes for signal
>>> f_i = 5e-3*(t_x - t_x[N // 3])**2 + 1  # varying frequency
>>> x = square(2*np.pi*np.cumsum(f_i)*T_x)  # the signal
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.spectrogram.html, scipy.signal.square
">>> g_std = 12  # standard deviation for Gaussian window in samples
>>> win = gaussian(50, std=g_std, sym=True)  # symmetric Gaussian wind.
>>> SFT = ShortTimeFFT(win, hop=2, fs=1/T_x, mfft=800, scale_to='psd')
>>> Sx2 = SFT.spectrogram(x)  # calculate absolute square of STFT
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.spectrogram.html, scipy.signal.windows.gaussian scipy.signal.ShortTimeFFT scipy.signal.ShortTimeFFT.spectrogram
">>> fig1, ax1 = plt.subplots(figsize=(6., 4.))  # enlarge plot a bit
>>> t_lo, t_hi = SFT.extent(N)[:2]  # time range of plot
>>> ax1.set_title(rf""Spectrogram ({SFT.m_num*SFT.T:g}$\,s$ Gaussian "" +
...               rf""window, $\sigma_t={g_std*SFT.T:g}\,$s)"")
>>> ax1.set(xlabel=f""Time $t$ in seconds ({SFT.p_num(N)} slices, "" +
...                rf""$\Delta t = {SFT.delta_t:g}\,$s)"",
...         ylabel=f""Freq. $f$ in Hz ({SFT.f_pts} bins, "" +
...                rf""$\Delta f = {SFT.delta_f:g}\,$Hz)"",
...         xlim=(t_lo, t_hi))
>>> Sx_dB = 10 * np.log10(np.fmax(Sx2, 1e-4))  # limit range to -40 dB
>>> im1 = ax1.imshow(Sx_dB, origin='lower', aspect='auto',
...                  extent=SFT.extent(N), cmap='magma')
>>> ax1.plot(t_x, f_i, 'g--', alpha=.5, label='$f_i(t)$')
>>> fig1.colorbar(im1, label='Power Spectral Density ' +
...                          r""$20\,\log_{10}|S_x(t, f)|$ in dB"")
...
>>> # Shade areas where window slices stick out to the side:
>>> for t0_, t1_ in [(t_lo, SFT.lower_border_end[0] * SFT.T),
...                  (SFT.upper_border_begin(N)[0] * SFT.T, t_hi)]:
...     ax1.axvspan(t0_, t1_, color='w', linewidth=0, alpha=.3)
>>> for t_ in [0, N * SFT.T]:  # mark signal borders with vertical line
...     ax1.axvline(t_, color='c', linestyle='--', alpha=0.5)
>>> ax1.legend()
>>> fig1.tight_layout()
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.spectrogram.html, scipy.signal.ShortTimeFFT.extent scipy.signal.ShortTimeFFT.p_num scipy.signal.ShortTimeFFT.upper_border_begin
">>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.5)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.dlti.bode.html, scipy.signal.TransferFunction
">>> from scipy.signal import ShortTimeFFT, get_window
>>> nperseg = 9  # window length
>>> w = get_window(('gaussian', 2.), nperseg)
>>> fs = 128  # sampling frequency
>>> hop = 3  # increment of STFT time slice
>>> SFT0 = ShortTimeFFT(w, hop, fs=fs)
>>> SFT1 = ShortTimeFFT.from_window(('gaussian', 2.), fs, nperseg,
...                                 noverlap=nperseg-hop)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.ShortTimeFFT.from_window.html, scipy.signal.get_window scipy.signal.ShortTimeFFT scipy.signal.ShortTimeFFT.from_window
">>> from scipy.stats.sampling import TransformedDensityRejection
>>> from scipy.stats import norm
>>> import numpy as np
>>> from math import exp
>>>
>>> class MyDist:
...     def pdf(self, x):
...         return exp(-0.5 * x**2)
...     def dpdf(self, x):
...         return -x * exp(-0.5 * x**2)
...
>>> dist = MyDist()
>>> rng = TransformedDensityRejection(dist)
>>>
>>> rng.ppf_hat(0.5)
-0.00018050266342393984
>>> norm.ppf(0.5)
0.0
>>> u = np.linspace(0, 1, num=1000)
>>> ppf_hat = rng.ppf_hat(u)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sampling.TransformedDensityRejection.ppf_hat.html, scipy.stats.sampling.TransformedDensityRejection scipy.stats.sampling.TransformedDensityRejection.ppf_hat
"write_record(a.T, b.T, c.T, ...)

write(1) a, b, c, ...
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.write_record.html, scipy.io.FortranFile.write_record scipy.io.wavfile.write
"read_record('(4,5)i4').T
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.read_record.html, scipy.io.FortranFile.read_record
"read_record('i4').reshape(5, 4, order='F')
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.read_record.html, scipy.io.FortranFile.read_record
"double precision :: a
integer :: b
write(1) a, b

record = f.read_record(', ')
a = record[0]  # first number
b = record[1]  # second number
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.read_record.html, scipy.io.wavfile.write
"double precision :: a
integer :: b(3,4)
write(1) a, b

record = f.read_record(', np.dtype((', (4, 3))))
a = record[0]
b = record[1].T
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.FortranFile.read_record.html, scipy.sparse.csr_matrix scipy.io.wavfile.write
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.bsr_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from numpy import array
>>> from scipy.sparse import coo_array
>>> row  = array([0, 0, 1, 3, 1, 0, 0])
>>> col  = array([0, 2, 1, 3, 1, 0, 0])
>>> data = array([1, 1, 1, 1, 1, 1, 1])
>>> A = coo_array((data, (row, col)), shape=(4, 4)).tocsr()
>>> A.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.tocsr.html, scipy.sparse.coo_array scipy.sparse.coo_array.toarray
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csc_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from numpy import array
>>> from scipy.sparse import coo_array
>>> row  = array([0, 0, 1, 3, 1, 0, 0])
>>> col  = array([0, 2, 1, 3, 1, 0, 0])
>>> data = array([1, 1, 1, 1, 1, 1, 1])
>>> A = coo_array((data, (row, col)), shape=(4, 4)).tocsr()
>>> A.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.tocsr.html, scipy.sparse.coo_array scipy.sparse.coo_array.toarray
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from numpy import array
>>> from scipy.sparse import coo_array
>>> row  = array([0, 0, 1, 3, 1, 0, 0])
>>> col  = array([0, 2, 1, 3, 1, 0, 0])
>>> data = array([1, 1, 1, 1, 1, 1, 1])
>>> A = coo_array((data, (row, col)), shape=(4, 4)).tocsc()
>>> A.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.tocsc.html, scipy.sparse.coo_array scipy.sparse.coo_array.toarray
">>> from numpy import array
>>> from scipy.sparse import coo_array
>>> row  = array([0, 0, 1, 3, 1, 0, 0])
>>> col  = array([0, 2, 1, 3, 1, 0, 0])
>>> data = array([1, 1, 1, 1, 1, 1, 1])
>>> A = coo_array((data, (row, col)), shape=(4, 4)).tocsc()
>>> A.toarray()
array([[3, 0, 1, 0],
       [0, 2, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 1]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_matrix.tocsc.html, scipy.sparse.coo_array scipy.sparse.coo_array.toarray
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.coo_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dok_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.dia_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> A.diagonal()
array([1, 0, 5])
>>> A.diagonal(k=1)
array([2, 3])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_array.diagonal.html, scipy.sparse.csr_array scipy.sparse.csr_array.diagonal
">>> from scipy.sparse import csr_array
>>> A = csr_array([[1,2,0],[0,0,3],[4,0,5]])
>>> A.nonzero()
(array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_array.nonzero.html, scipy.sparse.csr_array scipy.sparse.csr_array.nonzero
">>> import numpy as np
>>> from scipy.sparse import csr_array
>>> A = csr_array([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
>>> v = np.array([1, 0, -1])
>>> A.dot(v)
array([ 1, -3, -1], dtype=int64)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.lil_array.dot.html, scipy.sparse.csr_array scipy.sparse.csr_array.dot
">>> data = CensoredData.right_censored([4, 10, 24, 25],
...                                    [False, False, True, True])
>>> data
CensoredData(uncensored=array([ 4., 10.]),
left=array([], dtype=float64), right=array([24., 25.]),
interval=array([], shape=(0, 2), dtype=float64))
>>> print(data)
CensoredData(4 values: 2 not censored, 2 right-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.right_censored.html, scipy.stats.CensoredData.right_censored scipy.stats.CensoredData
">>> data = CensoredData.left_censored([0.12, 0.033, 1e-3, 1e-3],
...                                   [False, False, True, True])
>>> data
CensoredData(uncensored=array([0.12 , 0.033]),
left=array([0.001, 0.001]), right=array([], dtype=float64),
interval=array([], shape=(0, 2), dtype=float64))
>>> print(data)
CensoredData(4 values: 2 not censored, 2 left-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.left_censored.html, scipy.stats.CensoredData.left_censored scipy.stats.CensoredData
">>> from scipy.optimize import minimize
>>> def custom_optimizer(func, x0, args=(), disp=0):
...     res = minimize(func, x0, args, method=""slsqp"", options={""disp"": disp})
...     if res.success:
...         return res.x
...     raise RuntimeError('optimization routine failed')
>>> a1, b1, loc1, scale1 = beta.fit(x, method=""MLE"", optimizer=custom_optimizer)
>>> a1, b1, loc1, scale1
(1.0198821087258905, 1.948484145914738, 4.3705304486881485e-05, 0.9979104663953395)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html, scipy.optimize.minimize
">>> a = [0.5, 2.0, 3.0, 5.5]
>>> b = [1.0, 2.5, 3.5, 7.0]
>>> data = CensoredData.interval_censored(low=a, high=b)
>>> print(data)
CensoredData(4 values: 0 not censored, 4 interval-censored)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.CensoredData.interval_censored.html, scipy.stats.CensoredData.interval_censored scipy.stats.CensoredData
">>> import numpy as np
>>> from scipy.stats._distn_infrastructure import rv_discrete
>>> drv = rv_discrete(values=((0, 1), (0.5, 0.5)))
>>> np.allclose(drv.entropy(), np.log(2.0))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.entropy.html, scipy.stats.rv_discrete
">>> from scipy.stats import binomtest
>>> result = binomtest(k=7, n=50, p=0.1)
>>> result.statistic
0.14
>>> result.proportion_ci()
ConfidenceInterval(low=0.05819170033997342, high=0.26739600249700846)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats._result_classes.BinomTestResult.proportion_ci.html, scipy.stats.binomtest scipy.stats._result_classes.BinomTestResult.proportion_ci
">>> import numpy as np
>>> import scipy.stats as stats
>>> x1 = np.array([-7, -5, 1, 4, 5.])
>>> kde = stats.gaussian_kde(x1)
>>> xs = np.linspace(-10, 10, num=50)
>>> y1 = kde(xs)
>>> kde.set_bandwidth(bw_method='silverman')
>>> y2 = kde(xs)
>>> kde.set_bandwidth(bw_method=kde.factor / 3.)
>>> y3 = kde(xs)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.set_bandwidth.html, scipy.stats.gaussian_kde scipy.stats.gaussian_kde
">>> from scipy.linalg import solve_triangular
>>> res = cov.whiten(x)
>>> ref = solve_triangular(L, x, lower=True)
>>> np.allclose(res, ref)
True
>>> res = cov.log_pdet
>>> ref = np.linalg.slogdet(A)[-1]
>>> np.allclose(res, ref)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.Covariance.from_cholesky.html, scipy.linalg.solve_triangular
">>> import numpy as np
>>> from scipy.stats._distn_infrastructure import rv_discrete
>>> drv = rv_discrete(values=((0, 1), (0.5, 0.5)))
>>> np.allclose(drv.entropy(), np.log(2.0))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_discrete.entropy.html, scipy.stats.rv_discrete
">>> from scipy.stats import tukey_hsd
>>> group0 = [24.5, 23.5, 26.4, 27.1, 29.9]
>>> group1 = [28.4, 34.2, 29.5, 32.2, 30.1]
>>> group2 = [26.1, 28.3, 24.3, 26.2, 27.8]
>>> result = tukey_hsd(group0, group1, group2)
>>> ci = result.confidence_interval()
>>> ci.low
array([[-3.649159, -8.249159, -3.909159],
       [ 0.950841, -3.649159,  0.690841],
       [-3.389159, -7.989159, -3.649159]])
>>> ci.high
array([[ 3.649159, -0.950841,  3.389159],
       [ 8.249159,  3.649159,  7.989159],
       [ 3.909159, -0.690841,  3.649159]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats._result_classes.TukeyHSDResult.confidence_interval.html, scipy.stats.tukey_hsd
">>> from scipy.stats.contingency import relative_risk
>>> result = relative_risk(exposed_cases=10, exposed_total=75,
...                        control_cases=12, control_total=225)
>>> result.relative_risk
2.5
>>> result.confidence_interval()
ConfidenceInterval(low=1.1261564003469628, high=5.549850800541033)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats._result_classes.RelativeRiskResult.confidence_interval.html, scipy.stats.contingency.relative_risk
">>> import numpy as np
>>> from scipy import stats
>>> rng = np.random.default_rng()
>>> n = 3
>>> A = rng.random(size=(n, n))
>>> cov_array = A @ A.T  # make matrix symmetric positive definite
>>> cholesky = np.linalg.cholesky(cov_array)
>>> cov_object = stats.Covariance.from_cholesky(cholesky)
>>> x = rng.multivariate_normal(np.zeros(n), np.eye(n), size=(10000))
>>> x_ = cov_object.colorize(x)
>>> cov_data = np.cov(x_, rowvar=False)
>>> np.allclose(cov_data, cov_array, rtol=3e-2)
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.Covariance.colorize.html, scipy.stats.Covariance.colorize
">>> import numpy as np
>>> from scipy.spatial import cKDTree
>>> x, y = np.mgrid[0:5, 2:8]
>>> tree = cKDTree(np.c_[x.ravel(), y.ravel()])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)
>>> print(dd, ii, sep='\n')
[2.         0.2236068]
[ 0 13]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])
>>> print(dd, ii, sep='\n')
[[2.        ]
 [0.2236068]]
[[ 0]
 [13]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])
>>> print(dd, ii, sep='\n')
[[2.23606798]
 [0.80622577]]
[[ 6]
 [19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)
>>> print(dd, ii, sep='\n')
[[2.         2.23606798]
 [0.2236068  0.80622577]]
[[ 0  6]
 [13 19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])
>>> print(dd, ii, sep='\n')
[[2.         2.23606798]
 [0.2236068  0.80622577]]
[[ 0  6]
 [13 19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query.html, scipy.spatial.cKDTree.query
">>> import numpy as np
>>> from scipy.spatial import KDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((5, 2))
>>> points2 = rng.random((5, 2))
>>> kd_tree1 = KDTree(points1)
>>> kd_tree2 = KDTree(points2)
>>> kd_tree1.count_neighbors(kd_tree2, 0.2)
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.count_neighbors.html, scipy.spatial.KDTree scipy.spatial.KDTree.count_neighbors
">>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)
>>> sum([len(i) for i in indexes])
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.count_neighbors.html, scipy.spatial.KDTree.query_ball_tree
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.spatial import cKDTree
>>> rng = np.random.default_rng()
>>> points = rng.random((20, 2))
>>> plt.figure(figsize=(6, 6))
>>> plt.plot(points[:, 0], points[:, 1], ""xk"", markersize=14)
>>> kd_tree = cKDTree(points)
>>> pairs = kd_tree.query_pairs(r=0.2)
>>> for (i, j) in pairs:
...     plt.plot([points[i, 0], points[j, 0]],
...             [points[i, 1], points[j, 1]], ""-r"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_pairs.html, scipy.spatial.cKDTree scipy.spatial.cKDTree.query_pairs
">>> from scipy.spatial.transform import Rotation as R
>>> import numpy as np
>>> p = R.from_quat([0, 0, 0, 1])
>>> q = R.from_quat(np.eye(4))
>>> p.approx_equal(q)
array([False, False, False, True])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.approx_equal.html, scipy.spatial.transform.Rotation.from_quat
">>> import numpy as np
>>> from scipy.spatial import cKDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((5, 2))
>>> points2 = rng.random((5, 2))
>>> kd_tree1 = cKDTree(points1)
>>> kd_tree2 = cKDTree(points2)
>>> kd_tree1.count_neighbors(kd_tree2, 0.2)
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.count_neighbors.html, scipy.spatial.cKDTree scipy.spatial.cKDTree.count_neighbors
">>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)
>>> sum([len(i) for i in indexes])
1
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.count_neighbors.html, scipy.spatial.cKDTree.query_ball_tree
">>> import numpy as np
>>> from scipy import spatial
>>> x, y = np.mgrid[0:4, 0:4]
>>> points = np.c_[x.ravel(), y.ravel()]
>>> tree = spatial.cKDTree(points)
>>> tree.query_ball_point([2, 0], 1)
[4, 8, 9, 12]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_ball_point.html, scipy.spatial.cKDTree scipy.spatial.cKDTree.query_ball_point
">>> import matplotlib.pyplot as plt
>>> points = np.asarray(points)
>>> plt.plot(points[:,0], points[:,1], '.')
>>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):
...     nearby_points = points[results]
...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')
>>> plt.margins(0.1, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_ball_point.html, scipy.spatial.cKDTree.query_ball_point
">>> r = R.from_rotvec(np.pi/2 * np.array([0, 0, 1]))
>>> r.as_rotvec()
array([0.        , 0.        , 1.57079633])
>>> r.as_rotvec().shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec(45 * np.array([0, 1, 0]), degrees=True)
>>> r.as_rotvec(degrees=True)
array([ 0., 45.,  0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([
... [0, 0, np.pi/2],
... [np.pi/2, 0, 0]])
>>> r.as_rotvec()
array([[0.        , 0.        , 1.57079633],
       [1.57079633, 0.        , 0.        ]])
>>> r.as_rotvec().shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([[0, 0, np.pi/2]])
>>> r.as_rotvec().shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html, scipy.spatial.transform.Rotation.from_rotvec
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.spatial import KDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((15, 2))
>>> points2 = rng.random((15, 2))
>>> plt.figure(figsize=(6, 6))
>>> plt.plot(points1[:, 0], points1[:, 1], ""xk"", markersize=14)
>>> plt.plot(points2[:, 0], points2[:, 1], ""og"", markersize=14)
>>> kd_tree1 = KDTree(points1)
>>> kd_tree2 = KDTree(points2)
>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)
>>> for i in range(len(indexes)):
...     for j in indexes[i]:
...         plt.plot([points1[i, 0], points2[j, 0]],
...             [points1[i, 1], points2[j, 1]], ""-r"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query_ball_tree.html, scipy.spatial.KDTree scipy.spatial.KDTree.query_ball_tree
">>> import numpy as np
>>> from scipy.spatial import KDTree
>>> x, y = np.mgrid[0:5, 2:8]
>>> tree = KDTree(np.c_[x.ravel(), y.ravel()])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=1)
>>> print(dd, ii, sep='\n')
[2.         0.2236068]
[ 0 13]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1])
>>> print(dd, ii, sep='\n')
[[2.        ]
 [0.2236068]]
[[ 0]
 [13]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[2])
>>> print(dd, ii, sep='\n')
[[2.23606798]
 [0.80622577]]
[[ 6]
 [19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=2)
>>> print(dd, ii, sep='\n')
[[2.         2.23606798]
 [0.2236068  0.80622577]]
[[ 0  6]
 [13 19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree.query
">>> dd, ii = tree.query([[0, 0], [2.2, 2.9]], k=[1, 2])
>>> print(dd, ii, sep='\n')
[[2.         2.23606798]
 [0.2236068  0.80622577]]
[[ 0  6]
 [13 19]]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html, scipy.spatial.KDTree.query
">>> a = [[0, 1, 0], [0, 1, 1], [0, 1, 1]]
>>> b = [[1, 0, 0], [1, 1.1, 0], [1, 0.9, 0]]
>>> rot, rssd, sens = R.align_vectors(a, b, return_sensitivity=True)
>>> rot.as_matrix()
array([[0., 0., 1.],
       [1., 0., 0.],
       [0., 1., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.align_vectors scipy.spatial.transform.Rotation.as_matrix
">>> rot.apply(b)
array([[0. , 1. , 0. ],
       [0. , 1. , 1.1],
       [0. , 1. , 0.9]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.apply
">>> a - rot.apply(b)
array([[ 0., 0.,  0. ],
       [ 0., 0., -0.1],
       [ 0., 0.,  0.1]])
>>> np.sqrt(np.sum(np.ones(3) @ (a - rot.apply(b))**2))
0.141421356237308
>>> rssd
0.141421356237308
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.apply
">>> a = [1, 0, 0]
>>> b = [0, 1, 0]
>>> rot, _ = R.align_vectors(a, b)
>>> rot.as_matrix()
array([[0., 1., 0.],
       [-1., 0., 0.],
       [0., 0., 1.]])
>>> rot.apply(b)
array([1., 0., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.align_vectors scipy.spatial.transform.Rotation.as_matrix scipy.spatial.transform.Rotation.apply
">>> a = [[0, 1, 0], [0, 1, 1]]
>>> b = [[1, 0, 0], [1, 1, 0]]
>>> rot, _ = R.align_vectors(a, b, weights=[np.inf, 1])
>>> rot.as_matrix()
array([[0., 0., 1.],
       [1., 0., 0.],
       [0., 1., 0.]])
>>> rot.apply(b)
array([[0., 1., 0.],
       [0., 1., 1.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.align_vectors scipy.spatial.transform.Rotation.as_matrix scipy.spatial.transform.Rotation.apply
">>> a = [[0, 1, 0], [0, 1, 1]]
>>> b = [[1, 0, 0], [1, 2, 0]]
>>> rot, _ = R.align_vectors(a, b, weights=[np.inf, 1])
>>> rot.as_matrix()
array([[0., 0., 1.],
       [1., 0., 0.],
       [0., 1., 0.]])
>>> rot.apply(b)
array([[0., 1., 0.],
       [0., 1., 2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.align_vectors.html, scipy.spatial.transform.Rotation.align_vectors scipy.spatial.transform.Rotation.as_matrix scipy.spatial.transform.Rotation.apply
">>> from scipy.optimize import minimize
>>> def custom_optimizer(func, x0, args=(), disp=0):
...     res = minimize(func, x0, args, method=""slsqp"", options={""disp"": disp})
...     if res.success:
...         return res.x
...     raise RuntimeError('optimization routine failed')
>>> a1, b1, loc1, scale1 = beta.fit(x, method=""MLE"", optimizer=custom_optimizer)
>>> a1, b1, loc1, scale1
(1.0198821087258905, 1.948484145914738, 4.3705304486881485e-05, 0.9979104663953395)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_histogram.fit.html, scipy.optimize.minimize
">>> p = R.from_quat([0, 0, 1, 1])
>>> q = R.from_quat([1, 0, 0, 1])
>>> p.as_matrix()
array([[ 0., -1.,  0.],
       [ 1.,  0.,  0.],
       [ 0.,  0.,  1.]])
>>> q.as_matrix()
array([[ 1.,  0.,  0.],
       [ 0.,  0., -1.],
       [ 0.,  1.,  0.]])
>>> r = p * q
>>> r.as_matrix()
array([[0., 0., 1.],
       [1., 0., 0.],
       [0., 1., 0.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__mul__.html, scipy.spatial.transform.Rotation.from_quat scipy.spatial.transform.Rotation.as_matrix scipy.spatial.transform.Rotation.as_matrix
">>> p = R.from_quat([[0, 0, 1, 1], [1, 0, 0, 1]])
>>> q = R.from_rotvec([[np.pi/4, 0, 0], [-np.pi/4, 0, np.pi/4]])
>>> p.as_quat()
array([[0.        , 0.        , 0.70710678, 0.70710678],
       [0.70710678, 0.        , 0.        , 0.70710678]])
>>> q.as_quat()
array([[ 0.38268343,  0.        ,  0.        ,  0.92387953],
       [-0.37282173,  0.        ,  0.37282173,  0.84971049]])
>>> r = p * q
>>> r.as_quat()
array([[ 0.27059805,  0.27059805,  0.65328148,  0.65328148],
       [ 0.33721128, -0.26362477,  0.26362477,  0.86446082]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__mul__.html, scipy.spatial.transform.Rotation.from_quat scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_quat scipy.spatial.transform.Rotation.as_quat
">>> r = R.from_euler('x', 90, degrees=True)
>>> r.as_quat().shape
(4,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('zyx', [90, 45, 30], degrees=True)
>>> r.as_quat().shape
(4,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('x', [90], degrees=True)
>>> r.as_quat().shape
(1, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('zyx', [[90, 45, 30]], degrees=True)
>>> r.as_quat().shape
(1, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('x', [90, 45, 30], degrees=True)
>>> r.as_quat().shape
(3, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('zyx', [[90, 45, 30], [35, 45, 90]], degrees=True)
>>> r.as_quat().shape
(2, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_euler.html, scipy.spatial.transform.Rotation.from_euler
">>> vector = np.array([1, 0, 0])
>>> r = R.from_rotvec([0, 0, np.pi/2])
>>> r.as_matrix()
array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
>>> r.apply(vector)
array([2.22044605e-16, 1.00000000e+00, 0.00000000e+00])
>>> r.apply(vector).shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.apply.html, scipy.spatial.transform.Rotation.from_rotvec
">>> vectors = np.array([
... [1, 0, 0],
... [1, 2, 3]])
>>> r = R.from_rotvec([0, 0, np.pi/4])
>>> r.as_matrix()
array([[ 0.70710678, -0.70710678,  0.        ],
       [ 0.70710678,  0.70710678,  0.        ],
       [ 0.        ,  0.        ,  1.        ]])
>>> r.apply(vectors)
array([[ 0.70710678,  0.70710678,  0.        ],
       [-0.70710678,  2.12132034,  3.        ]])
>>> r.apply(vectors).shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.apply.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([[0, 0, np.pi/4], [np.pi/2, 0, 0]])
>>> vector = np.array([1,2,3])
>>> r.as_matrix()
array([[[ 7.07106781e-01, -7.07106781e-01,  0.00000000e+00],
        [ 7.07106781e-01,  7.07106781e-01,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]],
       [[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],
        [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]]])
>>> r.apply(vector)
array([[-0.70710678,  2.12132034,  3.        ],
       [ 1.        , -3.        ,  2.        ]])
>>> r.apply(vector).shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.apply.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_euler('zxy', [
... [0, 0, 90],
... [45, 30, 60]], degrees=True)
>>> vectors = [
... [1, 2, 3],
... [1, 0, -1]]
>>> r.apply(vectors)
array([[ 3.        ,  2.        , -1.        ],
       [-0.09026039,  1.11237244, -0.86860844]])
>>> r.apply(vectors).shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.apply.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('zxy', [
... [0, 0, 90],
... [45, 30, 60]], degrees=True)
>>> vectors = [
... [1, 2, 3],
... [1, 0, -1]]
>>> r.apply(vectors, inverse=True)
array([[-3.        ,  2.        ,  1.        ],
       [ 1.09533535, -0.8365163 ,  0.3169873 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.apply.html, scipy.spatial.transform.Rotation.from_euler
">>> import numpy as np
>>> from scipy.spatial import cKDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((5, 2))
>>> points2 = rng.random((5, 2))
>>> kd_tree1 = cKDTree(points1)
>>> kd_tree2 = cKDTree(points2)
>>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)
>>> sdm.toarray()
array([[0.        , 0.        , 0.12295571, 0.        , 0.        ],
   [0.        , 0.        , 0.        , 0.        , 0.        ],
   [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],
   [0.        , 0.        , 0.        , 0.        , 0.        ],
   [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.sparse_distance_matrix.html, scipy.spatial.cKDTree scipy.spatial.cKDTree.sparse_distance_matrix
">>> from scipy.spatial import distance_matrix
>>> distance_matrix(points1, points2)
array([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],
   [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],
   [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],
   [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],
   [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.sparse_distance_matrix.html, scipy.spatial.distance_matrix
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.spatial import KDTree
>>> rng = np.random.default_rng()
>>> points = rng.random((20, 2))
>>> plt.figure(figsize=(6, 6))
>>> plt.plot(points[:, 0], points[:, 1], ""xk"", markersize=14)
>>> kd_tree = KDTree(points)
>>> pairs = kd_tree.query_pairs(r=0.2)
>>> for (i, j) in pairs:
...     plt.plot([points[i, 0], points[j, 0]],
...             [points[i, 1], points[j, 1]], ""-r"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query_pairs.html, scipy.spatial.KDTree scipy.spatial.KDTree.query_pairs
">>> import numpy as np
>>> from scipy import spatial
>>> x, y = np.mgrid[0:5, 0:5]
>>> points = np.c_[x.ravel(), y.ravel()]
>>> tree = spatial.KDTree(points)
>>> sorted(tree.query_ball_point([2, 0], 1))
[5, 10, 11, 15]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query_ball_point.html, scipy.spatial.KDTree scipy.spatial.KDTree.query_ball_point
">>> import matplotlib.pyplot as plt
>>> points = np.asarray(points)
>>> plt.plot(points[:,0], points[:,1], '.')
>>> for results in tree.query_ball_point(([2, 0], [3, 3]), 1):
...     nearby_points = points[results]
...     plt.plot(nearby_points[:,0], nearby_points[:,1], 'o')
>>> plt.margins(0.1, 0.1)
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query_ball_point.html, scipy.spatial.KDTree.query_ball_point
">>> import numpy as np
>>> from scipy.stats._distn_infrastructure import rv_discrete
>>> drv = rv_discrete(values=((0, 1), (0.5, 0.5)))
>>> np.allclose(drv.entropy(), np.log(2.0))
True
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_histogram.entropy.html, scipy.stats.rv_discrete
">>> R.random().as_euler('zxy', degrees=True)
array([-110.5976185 ,   55.32758512,   76.3289269 ])  # random
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.random.html, scipy.spatial.transform.Rotation.as_euler
">>> R.random(5).as_euler('zxy', degrees=True)
array([[-110.5976185 ,   55.32758512,   76.3289269 ],  # random
       [ -91.59132005,  -14.3629884 ,  -93.91933182],
       [  25.23835501,   45.02035145, -121.67867086],
       [ -51.51414184,  -15.29022692, -172.46870023],
       [ -81.63376847,  -27.39521579,    2.60408416]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.random.html, scipy.spatial.transform.Rotation.as_euler
">>> import matplotlib.pyplot as plt
>>> import numpy as np
>>> from scipy.spatial import cKDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((15, 2))
>>> points2 = rng.random((15, 2))
>>> plt.figure(figsize=(6, 6))
>>> plt.plot(points1[:, 0], points1[:, 1], ""xk"", markersize=14)
>>> plt.plot(points2[:, 0], points2[:, 1], ""og"", markersize=14)
>>> kd_tree1 = cKDTree(points1)
>>> kd_tree2 = cKDTree(points2)
>>> indexes = kd_tree1.query_ball_tree(kd_tree2, r=0.2)
>>> for i in range(len(indexes)):
...     for j in indexes[i]:
...         plt.plot([points1[i, 0], points2[j, 0]],
...             [points1[i, 1], points2[j, 1]], ""-r"")
>>> plt.show()
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.cKDTree.query_ball_tree.html, scipy.spatial.cKDTree scipy.spatial.cKDTree.query_ball_tree
">>> import numpy as np
>>> from scipy.spatial import KDTree
>>> rng = np.random.default_rng()
>>> points1 = rng.random((5, 2))
>>> points2 = rng.random((5, 2))
>>> kd_tree1 = KDTree(points1)
>>> kd_tree2 = KDTree(points2)
>>> sdm = kd_tree1.sparse_distance_matrix(kd_tree2, 0.3)
>>> sdm.toarray()
array([[0.        , 0.        , 0.12295571, 0.        , 0.        ],
   [0.        , 0.        , 0.        , 0.        , 0.        ],
   [0.28942611, 0.        , 0.        , 0.2333084 , 0.        ],
   [0.        , 0.        , 0.        , 0.        , 0.        ],
   [0.24617575, 0.29571802, 0.26836782, 0.        , 0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.sparse_distance_matrix.html, scipy.spatial.KDTree scipy.spatial.KDTree.sparse_distance_matrix
">>> from scipy.spatial import distance_matrix
>>> distance_matrix(points1, points2)
array([[0.56906522, 0.39923701, 0.12295571, 0.8658745 , 0.79428925],
   [0.37327919, 0.7225693 , 0.87665969, 0.32580855, 0.75679479],
   [0.28942611, 0.30088013, 0.6395831 , 0.2333084 , 0.33630734],
   [0.31994999, 0.72658602, 0.71124834, 0.55396483, 0.90785663],
   [0.24617575, 0.29571802, 0.26836782, 0.57714465, 0.6473269 ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.sparse_distance_matrix.html, scipy.spatial.distance_matrix
">>> axes = [ez, ey, ex]
>>> r = R.from_davenport(axes, 'extrinsic', [90, 0, 0], degrees=True)
>>> r.as_quat().shape
(4,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_davenport.html, scipy.spatial.transform.Rotation.from_davenport
">>> r = R.from_davenport(axes, 'extrinsic', [[90, 45, 30], [35, 45, 90]], degrees=True)
>>> r.as_quat().shape
(2, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_davenport.html, scipy.spatial.transform.Rotation.from_davenport
">>> r = R.from_davenport([ez, ex], 'extrinsic', [[90, 45], [35, 45]], degrees=True)
>>> r.as_quat().shape
(2, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_davenport.html, scipy.spatial.transform.Rotation.from_davenport
">>> e1 = [2, 0, 0]
>>> e2 = [0, 1, 0]
>>> e3 = [1, 0, 1]
>>> axes = [e1, e2, e3]
>>> r = R.from_davenport(axes, 'extrinsic', [90, 45, 30], degrees=True)
>>> r.as_quat()
[ 0.701057,  0.430459, -0.092296,  0.560986]
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_davenport.html, scipy.spatial.transform.Rotation.from_davenport
">>> r = R.from_rotvec([0, 0, np.pi/2])
>>> r.as_matrix()
array([[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],
       [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
>>> r.as_matrix().shape
(3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_matrix.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_quat([[1, 1, 0, 0]])
>>> r.as_matrix()
array([[[ 0.,  1.,  0.],
        [ 1.,  0.,  0.],
        [ 0.,  0., -1.]]])
>>> r.as_matrix().shape
(1, 3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_matrix.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])
>>> r.as_matrix()
array([[[ 1.00000000e+00,  0.00000000e+00,  0.00000000e+00],
        [ 0.00000000e+00,  2.22044605e-16, -1.00000000e+00],
        [ 0.00000000e+00,  1.00000000e+00,  2.22044605e-16]],
       [[ 2.22044605e-16, -1.00000000e+00,  0.00000000e+00],
        [ 1.00000000e+00,  2.22044605e-16,  0.00000000e+00],
        [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]])
>>> r.as_matrix().shape
(2, 3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_matrix.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_quat([1, 0, 0, 0])
>>> r.as_quat()
array([1., 0., 0., 0.])
>>> r.as_quat().shape
(4,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_quat([
... [1, 0, 0, 0],
... [0, 0, 0, 1]
... ])
>>> r.as_quat()
array([[1., 0., 0., 0.],
       [0., 0., 0., 1.]])
>>> r.as_quat().shape
(2, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_quat([[0, 0, 0, 1]])
>>> r.as_quat()
array([[0., 0., 0., 1.]])
>>> r.as_quat().shape
(1, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_quat([0, 0, 1, 1])
>>> r.as_quat()
array([0.        , 0.        , 0.70710678, 0.70710678])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_mrp([0, 0, 1])
>>> r.as_euler('xyz', degrees=True)
array([0.        , 0.        , 180.      ])
>>> r.as_euler('xyz').shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_mrp.html, scipy.spatial.transform.Rotation.from_mrp
">>> r = R.from_mrp([
... [0, 0, 1],
... [1, 0, 0]])
>>> r.as_euler('xyz', degrees=True)
array([[0.        , 0.        , 180.      ],
       [180.0     , 0.        , 0.        ]])
>>> r.as_euler('xyz').shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_mrp.html, scipy.spatial.transform.Rotation.from_mrp
">>> r = R.from_mrp([[0, 0, np.pi/2]])
>>> r.as_euler('xyz').shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_mrp.html, scipy.spatial.transform.Rotation.from_mrp
">>> p = R.from_rotvec([1, 0, 0])
>>> q = p ** 2
>>> q.as_rotvec()
array([2., 0., 0.])
>>> r = p ** 0.5
>>> r.as_rotvec()
array([0.5, 0., 0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__pow__.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> p = R.from_rotvec([0, 0, 120], degrees=True)
>>> ((p ** 2) ** 0.5).as_rotvec(degrees=True)
array([  -0.,   -0., -60.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__pow__.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> r = R.from_rotvec([0, 0, np.pi])
>>> r.as_mrp()
array([0.        , 0.        , 1.         ])
>>> r.as_mrp().shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_mrp.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_euler('xyz', [[180, 0, 0]], degrees=True)
>>> r.as_mrp()
array([[1.       , 0.        , 0.         ]])
>>> r.as_mrp().shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_mrp.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_rotvec([[np.pi/2, 0, 0], [0, 0, np.pi/2]])
>>> r.as_mrp()
array([[0.41421356, 0.        , 0.        ],
       [0.        , 0.        , 0.41421356]])
>>> r.as_mrp().shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_mrp.html, scipy.spatial.transform.Rotation.from_rotvec
">>> from scipy.spatial.transform import Rotation as R
>>> r = R.from_quat([
... [1, 1, 0, 0],
... [0, 1, 0, 1],
... [1, 1, -1, 0]])
>>> r.as_quat()
array([[ 0.70710678,  0.70710678,  0.        ,  0.        ],
       [ 0.        ,  0.70710678,  0.        ,  0.70710678],
       [ 0.57735027,  0.57735027, -0.57735027,  0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__getitem__.html, scipy.spatial.transform.Rotation.from_quat
">>> p = r[0]
>>> p.as_quat()
array([0.70710678, 0.70710678, 0.        , 0.        ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__getitem__.html, scipy.spatial.transform.Rotation.as_quat
">>> q = r[1:3]
>>> q.as_quat()
array([[ 0.        ,  0.70710678,  0.        ,  0.70710678],
       [ 0.57735027,  0.57735027, -0.57735027,  0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.__getitem__.html, scipy.spatial.transform.Rotation.as_quat
">>> from scipy.spatial.transform import Rotation as R
>>> r1 = R.from_rotvec([0, 0, 1])
>>> r2 = R.from_rotvec([0, 0, 2])
>>> rc = R.concatenate([r1, r2])
>>> rc.as_rotvec()
array([[0., 0., 1.],
       [0., 0., 2.]])
>>> rc.mean().as_rotvec()
array([0., 0., 1.5])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.concatenate.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.concatenate scipy.spatial.transform.Rotation.as_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> R.from_rotvec([[0, 0, 1], [0, 0, 2]]).as_rotvec()
array([[0., 0., 1.],
       [0., 0., 2.]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.concatenate.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> r = R.from_euler('z', 90, degrees=True)
>>> r.as_rotvec()
array([0.        , 0.        , 1.57079633])
>>> r.as_rotvec().shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_rotvec.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_euler('YX', (-90, -90), degrees=True)
>>> s = r.as_rotvec(degrees=True)
>>> s
array([-69.2820323, -69.2820323, -69.2820323])
>>> np.linalg.norm(s)
120.00000000000001
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_rotvec.html, scipy.spatial.transform.Rotation.from_euler
">>> r = R.from_quat([[0, 0, 1, 1]])
>>> r.as_rotvec()
array([[0.        , 0.        , 1.57079633]])
>>> r.as_rotvec().shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_rotvec.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_quat([[0, 0, 1, 1], [1, 1, 0, 1]])
>>> r.as_rotvec()
array([[0.        , 0.        , 1.57079633],
       [1.35102172, 1.35102172, 0.        ]])
>>> r.as_rotvec().shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_rotvec.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_matrix([[0, -1, 0],
...                    [1, 0, 0],
...                    [0, 0, 1]])
>>> r.as_quat()
array([0.        , 0.        , 0.70710678, 0.70710678])
>>> r.as_quat().shape
(4,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_quat.html, scipy.spatial.transform.Rotation.from_matrix
">>> r = R.from_quat([[0, 0, 0, 1]])
>>> r.as_quat().shape
(1, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> r = R.from_rotvec([[np.pi, 0, 0], [0, 0, np.pi/2]])
>>> r.as_quat().shape
(2, 4)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_quat.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_quat([0, 0, 0, -1])
>>> r.as_quat()
array([0. , 0. , 0. , -1.])
>>> r.as_quat(canonical=True)
array([0. , 0. , 0. , 1.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_quat.html, scipy.spatial.transform.Rotation.from_quat
">>> p = R.from_euler('z', 45, degrees=True)
>>> q = p.inv()
>>> q.as_euler('zyx', degrees=True)
array([-45.,   0.,   0.])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.inv.html, scipy.spatial.transform.Rotation.from_euler scipy.spatial.transform.Rotation.as_euler
">>> p = R.from_rotvec([[0, 0, np.pi/3], [-np.pi/4, 0, 0]])
>>> q = p.inv()
>>> q.as_rotvec()
array([[-0.        , -0.        , -1.04719755],
       [ 0.78539816, -0.        , -0.        ]])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.inv.html, scipy.spatial.transform.Rotation.from_rotvec scipy.spatial.transform.Rotation.as_rotvec
">>> r = R.from_rotvec([0, 0, np.pi/2])
>>> r.as_euler('zxy', degrees=True)
array([90.,  0.,  0.])
>>> r.as_euler('zxy', degrees=True).shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_euler.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([[0, 0, np.pi/2]])
>>> r.as_euler('zxy', degrees=True)
array([[90.,  0.,  0.]])
>>> r.as_euler('zxy', degrees=True).shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_euler.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([
... [0, 0, np.pi/2],
... [0, -np.pi/3, 0],
... [np.pi/4, 0, 0]])
>>> r.as_euler('zxy', degrees=True)
array([[ 90.,   0.,   0.],
       [  0.,   0., -60.],
       [  0.,  45.,   0.]])
>>> r.as_euler('zxy', degrees=True).shape
(3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_euler.html, scipy.spatial.transform.Rotation.from_rotvec
">>> from scipy.spatial.transform import Rotation as R
>>> r = R.from_euler('zyx', [[0, 0, 0],
...                          [1, 0, 0],
...                          [0, 1, 0],
...                          [0, 0, 1]], degrees=True)
>>> r.mean().as_euler('zyx', degrees=True)
array([0.24945696, 0.25054542, 0.24945696])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.mean.html, scipy.spatial.transform.Rotation.from_euler scipy.spatial.transform.Rotation.as_euler
">>> r = R.from_rotvec([0, 0, np.pi/2])
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)
array([90.,  0.,  0.])
>>> r.as_euler('zxy', degrees=True)
array([90.,  0.,  0.])
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape
(3,)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_davenport.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([[0, 0, np.pi/2]])
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)
array([[90.,  0.,  0.]])
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape
(1, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_davenport.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_rotvec([
... [0, 0, 90],
... [45, 0, 0]], degrees=True)
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True)
array([[90.,  0.,  0.],
       [ 0., 45.,  0.]])
>>> r.as_davenport([ez, ex, ey], 'extrinsic', degrees=True).shape
(2, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_davenport.html, scipy.spatial.transform.Rotation.from_rotvec
">>> r = R.from_matrix([
... [0, -1, 0],
... [1, 0, 0],
... [0, 0, 1]])
>>> r.as_matrix().shape
(3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_matrix.html, scipy.spatial.transform.Rotation.from_matrix
">>> r = R.from_matrix([
... [
...     [0, -1, 0],
...     [1, 0, 0],
...     [0, 0, 1],
... ],
... [
...     [1, 0, 0],
...     [0, 0, -1],
...     [0, 1, 0],
... ]])
>>> r.as_matrix().shape
(2, 3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_matrix.html, scipy.spatial.transform.Rotation.from_matrix
">>> a = np.array([
... [0, -0.5, 0],
... [0.5, 0, 0],
... [0, 0, 0.5]])
>>> np.linalg.det(a)
0.12500000000000003
>>> r = R.from_matrix(a)
>>> matrix = r.as_matrix()
>>> matrix
array([[-0.38461538, -0.92307692,  0.        ],
       [ 0.92307692, -0.38461538,  0.        ],
       [ 0.        ,  0.        ,  1.        ]])
>>> np.linalg.det(matrix)
1.0000000000000002
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_matrix.html, scipy.spatial.transform.Rotation.from_matrix
">>> r = R.from_matrix([[
... [0, -1, 0],
... [1, 0, 0],
... [0, 0, 1]]])
>>> r.as_matrix()
array([[[ 0., -1.,  0.],
        [ 1.,  0.,  0.],
        [ 0.,  0.,  1.]]])
>>> r.as_matrix().shape
(1, 3, 3)
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_matrix.html, scipy.spatial.transform.Rotation.from_matrix
">>> from scipy.spatial.transform import Rotation as R
>>> import numpy as np
>>> r = R.from_quat(np.eye(4))
>>> r.as_quat()
array([[ 1., 0., 0., 0.],
       [ 0., 1., 0., 0.],
       [ 0., 0., 1., 0.],
       [ 0., 0., 0., 1.]])
>>> r.magnitude()
array([3.14159265, 3.14159265, 3.14159265, 0.        ])
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.magnitude.html, scipy.spatial.transform.Rotation.from_quat
">>> r[0].magnitude()
3.141592653589793
",https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.magnitude.html, scipy.spatial.transform.Rotation.magnitude
